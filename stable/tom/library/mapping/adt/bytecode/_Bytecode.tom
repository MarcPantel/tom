
    %op Strategy _VarLocalVariable(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._VarLocalVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.localvariable._VarLocalVariable($arg0) }
    }
  
  
  %op Strategy When_VarLocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_VarLocalVariable(),s) }
  }

  %op Strategy Is_VarLocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_VarLocalVariable()}
  }
  
%op Strategy Make_VarLocalVariable(_labelLocalVariable:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_VarLocalVariable))) }

  get_slot(_labelLocalVariable, t) { $t._labelLocalVariable }
  make( _labelLocalVariable) { new tom.library.adt.bytecode.strategy.localvariable.Make_VarLocalVariable( $_labelLocalVariable) }
}

    %op Strategy _EmptyPathLocalVariable() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._EmptyPathLocalVariable)))}
      
        make() { new tom.library.adt.bytecode.strategy.localvariable._EmptyPathLocalVariable() }
    }
  
  
  %op Strategy When_EmptyPathLocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathLocalVariable(),s) }
  }

  %op Strategy Is_EmptyPathLocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_EmptyPathLocalVariable()}
  }
  
%op Strategy Make_EmptyPathLocalVariable() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_EmptyPathLocalVariable))) }

  make() { new tom.library.adt.bytecode.strategy.localvariable.Make_EmptyPathLocalVariable() }
}

    %op Strategy _ConsPathLocalVariable(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._ConsPathLocalVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.localvariable._ConsPathLocalVariable($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathLocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathLocalVariable(),s) }
  }

  %op Strategy Is_ConsPathLocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_ConsPathLocalVariable()}
  }
  
%op Strategy Make_ConsPathLocalVariable(_HeadPathLocalVariable:int, _TailPathLocalVariable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_ConsPathLocalVariable))) }

  get_slot(_HeadPathLocalVariable, t) { $t._HeadPathLocalVariable }
  get_slot(_TailPathLocalVariable, t) { $t._TailPathLocalVariable }
  make( _HeadPathLocalVariable,  new_TailPathLocalVariable) { new tom.library.adt.bytecode.strategy.localvariable.Make_ConsPathLocalVariable( $_HeadPathLocalVariable,  $new_TailPathLocalVariable) }
}

    %op Strategy _RefLocalVariable(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._RefLocalVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.localvariable._RefLocalVariable($arg0) }
    }
  
  
  %op Strategy When_RefLocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_RefLocalVariable(),s) }
  }

  %op Strategy Is_RefLocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_RefLocalVariable()}
  }
  
%op Strategy Make_RefLocalVariable(_labelLocalVariable:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_RefLocalVariable))) }

  get_slot(_labelLocalVariable, t) { $t._labelLocalVariable }
  make( _labelLocalVariable) { new tom.library.adt.bytecode.strategy.localvariable.Make_RefLocalVariable( $_labelLocalVariable) }
}

    %op Strategy _LabLocalVariable(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._LabLocalVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.localvariable._LabLocalVariable($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabLocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_LabLocalVariable(),s) }
  }

  %op Strategy Is_LabLocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_LabLocalVariable()}
  }
  
%op Strategy Make_LabLocalVariable(_labelLocalVariable:String, _termLocalVariable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_LabLocalVariable))) }

  get_slot(_labelLocalVariable, t) { $t._labelLocalVariable }
  get_slot(_termLocalVariable, t) { $t._termLocalVariable }
  make( _labelLocalVariable,  new_termLocalVariable) { new tom.library.adt.bytecode.strategy.localvariable.Make_LabLocalVariable( $_labelLocalVariable,  $new_termLocalVariable) }
}

    %op Strategy _LocalVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable._LocalVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        make(arg0, arg1, arg2, arg3, arg4, arg5) { new tom.library.adt.bytecode.strategy.localvariable._LocalVariable($arg0, $arg1, $arg2, $arg3, $arg4, $arg5) }
    }
  
  
  %op Strategy When_LocalVariable(s:Strategy) {
    make(s) { `Sequence(Is_LocalVariable(),s) }
  }

  %op Strategy Is_LocalVariable() {
    make() { new tom.library.adt.bytecode.strategy.localvariable.Is_LocalVariable()}
  }
  
%op Strategy Make_LocalVariable(_name:String, _typeDesc:String, _signature:Strategy, _start:Strategy, _end:Strategy, _index:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariable.Make_LocalVariable))) }

  get_slot(_name, t) { $t._name }
  get_slot(_typeDesc, t) { $t._typeDesc }
  get_slot(_signature, t) { $t._signature }
  get_slot(_start, t) { $t._start }
  get_slot(_end, t) { $t._end }
  get_slot(_index, t) { $t._index }
  make( _name,  _typeDesc,  new_signature,  new_start,  new_end,  _index) { new tom.library.adt.bytecode.strategy.localvariable.Make_LocalVariable( $_name,  $_typeDesc,  $new_signature,  $new_start,  $new_end,  $_index) }
}

    %op Strategy _VarLabelNodeList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._VarLabelNodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnodelist._VarLabelNodeList($arg0) }
    }
  
  
  %op Strategy When_VarLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_VarLabelNodeList(),s) }
  }

  %op Strategy Is_VarLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_VarLabelNodeList()}
  }
  
%op Strategy Make_VarLabelNodeList(_labelLabelNodeList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_VarLabelNodeList))) }

  get_slot(_labelLabelNodeList, t) { $t._labelLabelNodeList }
  make( _labelLabelNodeList) { new tom.library.adt.bytecode.strategy.labelnodelist.Make_VarLabelNodeList( $_labelLabelNodeList) }
}

    %op Strategy _EmptyPathLabelNodeList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._EmptyPathLabelNodeList)))}
      
        make() { new tom.library.adt.bytecode.strategy.labelnodelist._EmptyPathLabelNodeList() }
    }
  
  
  %op Strategy When_EmptyPathLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathLabelNodeList(),s) }
  }

  %op Strategy Is_EmptyPathLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_EmptyPathLabelNodeList()}
  }
  
%op Strategy Make_EmptyPathLabelNodeList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_EmptyPathLabelNodeList))) }

  make() { new tom.library.adt.bytecode.strategy.labelnodelist.Make_EmptyPathLabelNodeList() }
}

    %op Strategy _ConsPathLabelNodeList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._ConsPathLabelNodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.labelnodelist._ConsPathLabelNodeList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathLabelNodeList(),s) }
  }

  %op Strategy Is_ConsPathLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_ConsPathLabelNodeList()}
  }
  
%op Strategy Make_ConsPathLabelNodeList(_HeadPathLabelNodeList:int, _TailPathLabelNodeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_ConsPathLabelNodeList))) }

  get_slot(_HeadPathLabelNodeList, t) { $t._HeadPathLabelNodeList }
  get_slot(_TailPathLabelNodeList, t) { $t._TailPathLabelNodeList }
  make( _HeadPathLabelNodeList,  new_TailPathLabelNodeList) { new tom.library.adt.bytecode.strategy.labelnodelist.Make_ConsPathLabelNodeList( $_HeadPathLabelNodeList,  $new_TailPathLabelNodeList) }
}

    %op Strategy _RefLabelNodeList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._RefLabelNodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnodelist._RefLabelNodeList($arg0) }
    }
  
  
  %op Strategy When_RefLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_RefLabelNodeList(),s) }
  }

  %op Strategy Is_RefLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_RefLabelNodeList()}
  }
  
%op Strategy Make_RefLabelNodeList(_labelLabelNodeList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_RefLabelNodeList))) }

  get_slot(_labelLabelNodeList, t) { $t._labelLabelNodeList }
  make( _labelLabelNodeList) { new tom.library.adt.bytecode.strategy.labelnodelist.Make_RefLabelNodeList( $_labelLabelNodeList) }
}

    %op Strategy _LabLabelNodeList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._LabLabelNodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.labelnodelist._LabLabelNodeList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_LabLabelNodeList(),s) }
  }

  %op Strategy Is_LabLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_LabLabelNodeList()}
  }
  
%op Strategy Make_LabLabelNodeList(_labelLabelNodeList:String, _termLabelNodeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_LabLabelNodeList))) }

  get_slot(_labelLabelNodeList, t) { $t._labelLabelNodeList }
  get_slot(_termLabelNodeList, t) { $t._termLabelNodeList }
  make( _labelLabelNodeList,  new_termLabelNodeList) { new tom.library.adt.bytecode.strategy.labelnodelist.Make_LabLabelNodeList( $_labelLabelNodeList,  $new_termLabelNodeList) }
}

    %op Strategy _EmptyLabelNodeList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._EmptyLabelNodeList)))}
      
        make() { new tom.library.adt.bytecode.strategy.labelnodelist._EmptyLabelNodeList() }
    }
  
  
  %op Strategy When_EmptyLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyLabelNodeList(),s) }
  }

  %op Strategy Is_EmptyLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_EmptyLabelNodeList()}
  }
  
%op Strategy Make_EmptyLabelNodeList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_EmptyLabelNodeList))) }

  make() { new tom.library.adt.bytecode.strategy.labelnodelist.Make_EmptyLabelNodeList() }
}

    %op Strategy _ConsLabelNodeList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist._ConsLabelNodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.labelnodelist._ConsLabelNodeList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsLabelNodeList(s:Strategy) {
    make(s) { `Sequence(Is_ConsLabelNodeList(),s) }
  }

  %op Strategy Is_ConsLabelNodeList() {
    make() { new tom.library.adt.bytecode.strategy.labelnodelist.Is_ConsLabelNodeList()}
  }
  
%op Strategy Make_ConsLabelNodeList(_HeadLabelNodeList:Strategy, _TailLabelNodeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnodelist.Make_ConsLabelNodeList))) }

  get_slot(_HeadLabelNodeList, t) { $t._HeadLabelNodeList }
  get_slot(_TailLabelNodeList, t) { $t._TailLabelNodeList }
  make( new_HeadLabelNodeList,  new_TailLabelNodeList) { new tom.library.adt.bytecode.strategy.labelnodelist.Make_ConsLabelNodeList( $new_HeadLabelNodeList,  $new_TailLabelNodeList) }
}

    %op Strategy _VarStringList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._VarStringList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.stringlist._VarStringList($arg0) }
    }
  
  
  %op Strategy When_VarStringList(s:Strategy) {
    make(s) { `Sequence(Is_VarStringList(),s) }
  }

  %op Strategy Is_VarStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_VarStringList()}
  }
  
%op Strategy Make_VarStringList(_labelStringList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_VarStringList))) }

  get_slot(_labelStringList, t) { $t._labelStringList }
  make( _labelStringList) { new tom.library.adt.bytecode.strategy.stringlist.Make_VarStringList( $_labelStringList) }
}

    %op Strategy _EmptyPathStringList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._EmptyPathStringList)))}
      
        make() { new tom.library.adt.bytecode.strategy.stringlist._EmptyPathStringList() }
    }
  
  
  %op Strategy When_EmptyPathStringList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathStringList(),s) }
  }

  %op Strategy Is_EmptyPathStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_EmptyPathStringList()}
  }
  
%op Strategy Make_EmptyPathStringList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_EmptyPathStringList))) }

  make() { new tom.library.adt.bytecode.strategy.stringlist.Make_EmptyPathStringList() }
}

    %op Strategy _ConsPathStringList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._ConsPathStringList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.stringlist._ConsPathStringList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathStringList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathStringList(),s) }
  }

  %op Strategy Is_ConsPathStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_ConsPathStringList()}
  }
  
%op Strategy Make_ConsPathStringList(_HeadPathStringList:int, _TailPathStringList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_ConsPathStringList))) }

  get_slot(_HeadPathStringList, t) { $t._HeadPathStringList }
  get_slot(_TailPathStringList, t) { $t._TailPathStringList }
  make( _HeadPathStringList,  new_TailPathStringList) { new tom.library.adt.bytecode.strategy.stringlist.Make_ConsPathStringList( $_HeadPathStringList,  $new_TailPathStringList) }
}

    %op Strategy _RefStringList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._RefStringList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.stringlist._RefStringList($arg0) }
    }
  
  
  %op Strategy When_RefStringList(s:Strategy) {
    make(s) { `Sequence(Is_RefStringList(),s) }
  }

  %op Strategy Is_RefStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_RefStringList()}
  }
  
%op Strategy Make_RefStringList(_labelStringList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_RefStringList))) }

  get_slot(_labelStringList, t) { $t._labelStringList }
  make( _labelStringList) { new tom.library.adt.bytecode.strategy.stringlist.Make_RefStringList( $_labelStringList) }
}

    %op Strategy _LabStringList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._LabStringList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.stringlist._LabStringList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabStringList(s:Strategy) {
    make(s) { `Sequence(Is_LabStringList(),s) }
  }

  %op Strategy Is_LabStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_LabStringList()}
  }
  
%op Strategy Make_LabStringList(_labelStringList:String, _termStringList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_LabStringList))) }

  get_slot(_labelStringList, t) { $t._labelStringList }
  get_slot(_termStringList, t) { $t._termStringList }
  make( _labelStringList,  new_termStringList) { new tom.library.adt.bytecode.strategy.stringlist.Make_LabStringList( $_labelStringList,  $new_termStringList) }
}

    %op Strategy _EmptyStringList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._EmptyStringList)))}
      
        make() { new tom.library.adt.bytecode.strategy.stringlist._EmptyStringList() }
    }
  
  
  %op Strategy When_EmptyStringList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyStringList(),s) }
  }

  %op Strategy Is_EmptyStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_EmptyStringList()}
  }
  
%op Strategy Make_EmptyStringList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_EmptyStringList))) }

  make() { new tom.library.adt.bytecode.strategy.stringlist.Make_EmptyStringList() }
}

    %op Strategy _ConsStringList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist._ConsStringList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.stringlist._ConsStringList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsStringList(s:Strategy) {
    make(s) { `Sequence(Is_ConsStringList(),s) }
  }

  %op Strategy Is_ConsStringList() {
    make() { new tom.library.adt.bytecode.strategy.stringlist.Is_ConsStringList()}
  }
  
%op Strategy Make_ConsStringList(_HeadStringList:String, _TailStringList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.stringlist.Make_ConsStringList))) }

  get_slot(_HeadStringList, t) { $t._HeadStringList }
  get_slot(_TailStringList, t) { $t._TailStringList }
  make( _HeadStringList,  new_TailStringList) { new tom.library.adt.bytecode.strategy.stringlist.Make_ConsStringList( $_HeadStringList,  $new_TailStringList) }
}

    %op Strategy _VarMethodList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._VarMethodList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodlist._VarMethodList($arg0) }
    }
  
  
  %op Strategy When_VarMethodList(s:Strategy) {
    make(s) { `Sequence(Is_VarMethodList(),s) }
  }

  %op Strategy Is_VarMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_VarMethodList()}
  }
  
%op Strategy Make_VarMethodList(_labelMethodList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_VarMethodList))) }

  get_slot(_labelMethodList, t) { $t._labelMethodList }
  make( _labelMethodList) { new tom.library.adt.bytecode.strategy.methodlist.Make_VarMethodList( $_labelMethodList) }
}

    %op Strategy _EmptyPathMethodList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._EmptyPathMethodList)))}
      
        make() { new tom.library.adt.bytecode.strategy.methodlist._EmptyPathMethodList() }
    }
  
  
  %op Strategy When_EmptyPathMethodList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathMethodList(),s) }
  }

  %op Strategy Is_EmptyPathMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_EmptyPathMethodList()}
  }
  
%op Strategy Make_EmptyPathMethodList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_EmptyPathMethodList))) }

  make() { new tom.library.adt.bytecode.strategy.methodlist.Make_EmptyPathMethodList() }
}

    %op Strategy _ConsPathMethodList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._ConsPathMethodList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodlist._ConsPathMethodList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathMethodList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathMethodList(),s) }
  }

  %op Strategy Is_ConsPathMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_ConsPathMethodList()}
  }
  
%op Strategy Make_ConsPathMethodList(_HeadPathMethodList:int, _TailPathMethodList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_ConsPathMethodList))) }

  get_slot(_HeadPathMethodList, t) { $t._HeadPathMethodList }
  get_slot(_TailPathMethodList, t) { $t._TailPathMethodList }
  make( _HeadPathMethodList,  new_TailPathMethodList) { new tom.library.adt.bytecode.strategy.methodlist.Make_ConsPathMethodList( $_HeadPathMethodList,  $new_TailPathMethodList) }
}

    %op Strategy _RefMethodList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._RefMethodList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodlist._RefMethodList($arg0) }
    }
  
  
  %op Strategy When_RefMethodList(s:Strategy) {
    make(s) { `Sequence(Is_RefMethodList(),s) }
  }

  %op Strategy Is_RefMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_RefMethodList()}
  }
  
%op Strategy Make_RefMethodList(_labelMethodList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_RefMethodList))) }

  get_slot(_labelMethodList, t) { $t._labelMethodList }
  make( _labelMethodList) { new tom.library.adt.bytecode.strategy.methodlist.Make_RefMethodList( $_labelMethodList) }
}

    %op Strategy _LabMethodList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._LabMethodList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodlist._LabMethodList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabMethodList(s:Strategy) {
    make(s) { `Sequence(Is_LabMethodList(),s) }
  }

  %op Strategy Is_LabMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_LabMethodList()}
  }
  
%op Strategy Make_LabMethodList(_labelMethodList:String, _termMethodList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_LabMethodList))) }

  get_slot(_labelMethodList, t) { $t._labelMethodList }
  get_slot(_termMethodList, t) { $t._termMethodList }
  make( _labelMethodList,  new_termMethodList) { new tom.library.adt.bytecode.strategy.methodlist.Make_LabMethodList( $_labelMethodList,  $new_termMethodList) }
}

    %op Strategy _EmptyMethodList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._EmptyMethodList)))}
      
        make() { new tom.library.adt.bytecode.strategy.methodlist._EmptyMethodList() }
    }
  
  
  %op Strategy When_EmptyMethodList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyMethodList(),s) }
  }

  %op Strategy Is_EmptyMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_EmptyMethodList()}
  }
  
%op Strategy Make_EmptyMethodList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_EmptyMethodList))) }

  make() { new tom.library.adt.bytecode.strategy.methodlist.Make_EmptyMethodList() }
}

    %op Strategy _ConsMethodList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist._ConsMethodList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodlist._ConsMethodList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsMethodList(s:Strategy) {
    make(s) { `Sequence(Is_ConsMethodList(),s) }
  }

  %op Strategy Is_ConsMethodList() {
    make() { new tom.library.adt.bytecode.strategy.methodlist.Is_ConsMethodList()}
  }
  
%op Strategy Make_ConsMethodList(_HeadMethodList:Strategy, _TailMethodList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodlist.Make_ConsMethodList))) }

  get_slot(_HeadMethodList, t) { $t._HeadMethodList }
  get_slot(_TailMethodList, t) { $t._TailMethodList }
  make( new_HeadMethodList,  new_TailMethodList) { new tom.library.adt.bytecode.strategy.methodlist.Make_ConsMethodList( $new_HeadMethodList,  $new_TailMethodList) }
}

    %op Strategy _VarLabelNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._VarLabelNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnode._VarLabelNode($arg0) }
    }
  
  
  %op Strategy When_VarLabelNode(s:Strategy) {
    make(s) { `Sequence(Is_VarLabelNode(),s) }
  }

  %op Strategy Is_VarLabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_VarLabelNode()}
  }
  
%op Strategy Make_VarLabelNode(_labelLabelNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_VarLabelNode))) }

  get_slot(_labelLabelNode, t) { $t._labelLabelNode }
  make( _labelLabelNode) { new tom.library.adt.bytecode.strategy.labelnode.Make_VarLabelNode( $_labelLabelNode) }
}

    %op Strategy _EmptyPathLabelNode() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._EmptyPathLabelNode)))}
      
        make() { new tom.library.adt.bytecode.strategy.labelnode._EmptyPathLabelNode() }
    }
  
  
  %op Strategy When_EmptyPathLabelNode(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathLabelNode(),s) }
  }

  %op Strategy Is_EmptyPathLabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_EmptyPathLabelNode()}
  }
  
%op Strategy Make_EmptyPathLabelNode() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_EmptyPathLabelNode))) }

  make() { new tom.library.adt.bytecode.strategy.labelnode.Make_EmptyPathLabelNode() }
}

    %op Strategy _ConsPathLabelNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._ConsPathLabelNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.labelnode._ConsPathLabelNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathLabelNode(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathLabelNode(),s) }
  }

  %op Strategy Is_ConsPathLabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_ConsPathLabelNode()}
  }
  
%op Strategy Make_ConsPathLabelNode(_HeadPathLabelNode:int, _TailPathLabelNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_ConsPathLabelNode))) }

  get_slot(_HeadPathLabelNode, t) { $t._HeadPathLabelNode }
  get_slot(_TailPathLabelNode, t) { $t._TailPathLabelNode }
  make( _HeadPathLabelNode,  new_TailPathLabelNode) { new tom.library.adt.bytecode.strategy.labelnode.Make_ConsPathLabelNode( $_HeadPathLabelNode,  $new_TailPathLabelNode) }
}

    %op Strategy _RefLabelNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._RefLabelNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnode._RefLabelNode($arg0) }
    }
  
  
  %op Strategy When_RefLabelNode(s:Strategy) {
    make(s) { `Sequence(Is_RefLabelNode(),s) }
  }

  %op Strategy Is_RefLabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_RefLabelNode()}
  }
  
%op Strategy Make_RefLabelNode(_labelLabelNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_RefLabelNode))) }

  get_slot(_labelLabelNode, t) { $t._labelLabelNode }
  make( _labelLabelNode) { new tom.library.adt.bytecode.strategy.labelnode.Make_RefLabelNode( $_labelLabelNode) }
}

    %op Strategy _LabLabelNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._LabLabelNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.labelnode._LabLabelNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabLabelNode(s:Strategy) {
    make(s) { `Sequence(Is_LabLabelNode(),s) }
  }

  %op Strategy Is_LabLabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_LabLabelNode()}
  }
  
%op Strategy Make_LabLabelNode(_labelLabelNode:String, _termLabelNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_LabLabelNode))) }

  get_slot(_labelLabelNode, t) { $t._labelLabelNode }
  get_slot(_termLabelNode, t) { $t._termLabelNode }
  make( _labelLabelNode,  new_termLabelNode) { new tom.library.adt.bytecode.strategy.labelnode.Make_LabLabelNode( $_labelLabelNode,  $new_termLabelNode) }
}

    %op Strategy _LabelNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._LabelNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnode._LabelNode($arg0) }
    }
  
  
  %op Strategy When_LabelNode(s:Strategy) {
    make(s) { `Sequence(Is_LabelNode(),s) }
  }

  %op Strategy Is_LabelNode() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_LabelNode()}
  }
  
%op Strategy Make_LabelNode(_id:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_LabelNode))) }

  get_slot(_id, t) { $t._id }
  make( _id) { new tom.library.adt.bytecode.strategy.labelnode.Make_LabelNode( $_id) }
}

    %op Strategy _Ref(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode._Ref)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.labelnode._Ref($arg0) }
    }
  
  
  %op Strategy When_Ref(s:Strategy) {
    make(s) { `Sequence(Is_Ref(),s) }
  }

  %op Strategy Is_Ref() {
    make() { new tom.library.adt.bytecode.strategy.labelnode.Is_Ref()}
  }
  
%op Strategy Make_Ref(_inst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.labelnode.Make_Ref))) }

  get_slot(_inst, t) { $t._inst }
  make( new_inst) { new tom.library.adt.bytecode.strategy.labelnode.Make_Ref( $new_inst) }
}

    %op Strategy _VarMethodInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._VarMethodInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodinfo._VarMethodInfo($arg0) }
    }
  
  
  %op Strategy When_VarMethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_VarMethodInfo(),s) }
  }

  %op Strategy Is_VarMethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_VarMethodInfo()}
  }
  
%op Strategy Make_VarMethodInfo(_labelMethodInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_VarMethodInfo))) }

  get_slot(_labelMethodInfo, t) { $t._labelMethodInfo }
  make( _labelMethodInfo) { new tom.library.adt.bytecode.strategy.methodinfo.Make_VarMethodInfo( $_labelMethodInfo) }
}

    %op Strategy _EmptyPathMethodInfo() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._EmptyPathMethodInfo)))}
      
        make() { new tom.library.adt.bytecode.strategy.methodinfo._EmptyPathMethodInfo() }
    }
  
  
  %op Strategy When_EmptyPathMethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathMethodInfo(),s) }
  }

  %op Strategy Is_EmptyPathMethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_EmptyPathMethodInfo()}
  }
  
%op Strategy Make_EmptyPathMethodInfo() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_EmptyPathMethodInfo))) }

  make() { new tom.library.adt.bytecode.strategy.methodinfo.Make_EmptyPathMethodInfo() }
}

    %op Strategy _ConsPathMethodInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._ConsPathMethodInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodinfo._ConsPathMethodInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathMethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathMethodInfo(),s) }
  }

  %op Strategy Is_ConsPathMethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_ConsPathMethodInfo()}
  }
  
%op Strategy Make_ConsPathMethodInfo(_HeadPathMethodInfo:int, _TailPathMethodInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_ConsPathMethodInfo))) }

  get_slot(_HeadPathMethodInfo, t) { $t._HeadPathMethodInfo }
  get_slot(_TailPathMethodInfo, t) { $t._TailPathMethodInfo }
  make( _HeadPathMethodInfo,  new_TailPathMethodInfo) { new tom.library.adt.bytecode.strategy.methodinfo.Make_ConsPathMethodInfo( $_HeadPathMethodInfo,  $new_TailPathMethodInfo) }
}

    %op Strategy _RefMethodInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._RefMethodInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodinfo._RefMethodInfo($arg0) }
    }
  
  
  %op Strategy When_RefMethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_RefMethodInfo(),s) }
  }

  %op Strategy Is_RefMethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_RefMethodInfo()}
  }
  
%op Strategy Make_RefMethodInfo(_labelMethodInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_RefMethodInfo))) }

  get_slot(_labelMethodInfo, t) { $t._labelMethodInfo }
  make( _labelMethodInfo) { new tom.library.adt.bytecode.strategy.methodinfo.Make_RefMethodInfo( $_labelMethodInfo) }
}

    %op Strategy _LabMethodInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._LabMethodInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodinfo._LabMethodInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabMethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_LabMethodInfo(),s) }
  }

  %op Strategy Is_LabMethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_LabMethodInfo()}
  }
  
%op Strategy Make_LabMethodInfo(_labelMethodInfo:String, _termMethodInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_LabMethodInfo))) }

  get_slot(_labelMethodInfo, t) { $t._labelMethodInfo }
  get_slot(_termMethodInfo, t) { $t._termMethodInfo }
  make( _labelMethodInfo,  new_termMethodInfo) { new tom.library.adt.bytecode.strategy.methodinfo.Make_LabMethodInfo( $_labelMethodInfo,  $new_termMethodInfo) }
}

    %op Strategy _MethodInfo(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo._MethodInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        make(arg0, arg1, arg2, arg3, arg4, arg5) { new tom.library.adt.bytecode.strategy.methodinfo._MethodInfo($arg0, $arg1, $arg2, $arg3, $arg4, $arg5) }
    }
  
  
  %op Strategy When_MethodInfo(s:Strategy) {
    make(s) { `Sequence(Is_MethodInfo(),s) }
  }

  %op Strategy Is_MethodInfo() {
    make() { new tom.library.adt.bytecode.strategy.methodinfo.Is_MethodInfo()}
  }
  
%op Strategy Make_MethodInfo(_owner:String, _access:Strategy, _name:String, _desc:Strategy, _signature:Strategy, _exceptions:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodinfo.Make_MethodInfo))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_access, t) { $t._access }
  get_slot(_name, t) { $t._name }
  get_slot(_desc, t) { $t._desc }
  get_slot(_signature, t) { $t._signature }
  get_slot(_exceptions, t) { $t._exceptions }
  make( _owner,  new_access,  _name,  new_desc,  new_signature,  new_exceptions) { new tom.library.adt.bytecode.strategy.methodinfo.Make_MethodInfo( $_owner,  $new_access,  $_name,  $new_desc,  $new_signature,  $new_exceptions) }
}

    %op Strategy _VarLocalVariableList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._VarLocalVariableList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.localvariablelist._VarLocalVariableList($arg0) }
    }
  
  
  %op Strategy When_VarLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_VarLocalVariableList(),s) }
  }

  %op Strategy Is_VarLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_VarLocalVariableList()}
  }
  
%op Strategy Make_VarLocalVariableList(_labelLocalVariableList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_VarLocalVariableList))) }

  get_slot(_labelLocalVariableList, t) { $t._labelLocalVariableList }
  make( _labelLocalVariableList) { new tom.library.adt.bytecode.strategy.localvariablelist.Make_VarLocalVariableList( $_labelLocalVariableList) }
}

    %op Strategy _EmptyPathLocalVariableList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._EmptyPathLocalVariableList)))}
      
        make() { new tom.library.adt.bytecode.strategy.localvariablelist._EmptyPathLocalVariableList() }
    }
  
  
  %op Strategy When_EmptyPathLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathLocalVariableList(),s) }
  }

  %op Strategy Is_EmptyPathLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_EmptyPathLocalVariableList()}
  }
  
%op Strategy Make_EmptyPathLocalVariableList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_EmptyPathLocalVariableList))) }

  make() { new tom.library.adt.bytecode.strategy.localvariablelist.Make_EmptyPathLocalVariableList() }
}

    %op Strategy _ConsPathLocalVariableList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._ConsPathLocalVariableList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.localvariablelist._ConsPathLocalVariableList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathLocalVariableList(),s) }
  }

  %op Strategy Is_ConsPathLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_ConsPathLocalVariableList()}
  }
  
%op Strategy Make_ConsPathLocalVariableList(_HeadPathLocalVariableList:int, _TailPathLocalVariableList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_ConsPathLocalVariableList))) }

  get_slot(_HeadPathLocalVariableList, t) { $t._HeadPathLocalVariableList }
  get_slot(_TailPathLocalVariableList, t) { $t._TailPathLocalVariableList }
  make( _HeadPathLocalVariableList,  new_TailPathLocalVariableList) { new tom.library.adt.bytecode.strategy.localvariablelist.Make_ConsPathLocalVariableList( $_HeadPathLocalVariableList,  $new_TailPathLocalVariableList) }
}

    %op Strategy _RefLocalVariableList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._RefLocalVariableList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.localvariablelist._RefLocalVariableList($arg0) }
    }
  
  
  %op Strategy When_RefLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_RefLocalVariableList(),s) }
  }

  %op Strategy Is_RefLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_RefLocalVariableList()}
  }
  
%op Strategy Make_RefLocalVariableList(_labelLocalVariableList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_RefLocalVariableList))) }

  get_slot(_labelLocalVariableList, t) { $t._labelLocalVariableList }
  make( _labelLocalVariableList) { new tom.library.adt.bytecode.strategy.localvariablelist.Make_RefLocalVariableList( $_labelLocalVariableList) }
}

    %op Strategy _LabLocalVariableList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._LabLocalVariableList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.localvariablelist._LabLocalVariableList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_LabLocalVariableList(),s) }
  }

  %op Strategy Is_LabLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_LabLocalVariableList()}
  }
  
%op Strategy Make_LabLocalVariableList(_labelLocalVariableList:String, _termLocalVariableList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_LabLocalVariableList))) }

  get_slot(_labelLocalVariableList, t) { $t._labelLocalVariableList }
  get_slot(_termLocalVariableList, t) { $t._termLocalVariableList }
  make( _labelLocalVariableList,  new_termLocalVariableList) { new tom.library.adt.bytecode.strategy.localvariablelist.Make_LabLocalVariableList( $_labelLocalVariableList,  $new_termLocalVariableList) }
}

    %op Strategy _EmptyLocalVariableList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._EmptyLocalVariableList)))}
      
        make() { new tom.library.adt.bytecode.strategy.localvariablelist._EmptyLocalVariableList() }
    }
  
  
  %op Strategy When_EmptyLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyLocalVariableList(),s) }
  }

  %op Strategy Is_EmptyLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_EmptyLocalVariableList()}
  }
  
%op Strategy Make_EmptyLocalVariableList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_EmptyLocalVariableList))) }

  make() { new tom.library.adt.bytecode.strategy.localvariablelist.Make_EmptyLocalVariableList() }
}

    %op Strategy _ConsLocalVariableList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist._ConsLocalVariableList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.localvariablelist._ConsLocalVariableList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsLocalVariableList(s:Strategy) {
    make(s) { `Sequence(Is_ConsLocalVariableList(),s) }
  }

  %op Strategy Is_ConsLocalVariableList() {
    make() { new tom.library.adt.bytecode.strategy.localvariablelist.Is_ConsLocalVariableList()}
  }
  
%op Strategy Make_ConsLocalVariableList(_HeadLocalVariableList:Strategy, _TailLocalVariableList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.localvariablelist.Make_ConsLocalVariableList))) }

  get_slot(_HeadLocalVariableList, t) { $t._HeadLocalVariableList }
  get_slot(_TailLocalVariableList, t) { $t._TailLocalVariableList }
  make( new_HeadLocalVariableList,  new_TailLocalVariableList) { new tom.library.adt.bytecode.strategy.localvariablelist.Make_ConsLocalVariableList( $new_HeadLocalVariableList,  $new_TailLocalVariableList) }
}

    %op Strategy _VarInstructionList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._VarInstructionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instructionlist._VarInstructionList($arg0) }
    }
  
  
  %op Strategy When_VarInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_VarInstructionList(),s) }
  }

  %op Strategy Is_VarInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_VarInstructionList()}
  }
  
%op Strategy Make_VarInstructionList(_labelInstructionList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_VarInstructionList))) }

  get_slot(_labelInstructionList, t) { $t._labelInstructionList }
  make( _labelInstructionList) { new tom.library.adt.bytecode.strategy.instructionlist.Make_VarInstructionList( $_labelInstructionList) }
}

    %op Strategy _EmptyPathInstructionList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._EmptyPathInstructionList)))}
      
        make() { new tom.library.adt.bytecode.strategy.instructionlist._EmptyPathInstructionList() }
    }
  
  
  %op Strategy When_EmptyPathInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathInstructionList(),s) }
  }

  %op Strategy Is_EmptyPathInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_EmptyPathInstructionList()}
  }
  
%op Strategy Make_EmptyPathInstructionList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_EmptyPathInstructionList))) }

  make() { new tom.library.adt.bytecode.strategy.instructionlist.Make_EmptyPathInstructionList() }
}

    %op Strategy _ConsPathInstructionList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._ConsPathInstructionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instructionlist._ConsPathInstructionList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathInstructionList(),s) }
  }

  %op Strategy Is_ConsPathInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_ConsPathInstructionList()}
  }
  
%op Strategy Make_ConsPathInstructionList(_HeadPathInstructionList:int, _TailPathInstructionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_ConsPathInstructionList))) }

  get_slot(_HeadPathInstructionList, t) { $t._HeadPathInstructionList }
  get_slot(_TailPathInstructionList, t) { $t._TailPathInstructionList }
  make( _HeadPathInstructionList,  new_TailPathInstructionList) { new tom.library.adt.bytecode.strategy.instructionlist.Make_ConsPathInstructionList( $_HeadPathInstructionList,  $new_TailPathInstructionList) }
}

    %op Strategy _RefInstructionList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._RefInstructionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instructionlist._RefInstructionList($arg0) }
    }
  
  
  %op Strategy When_RefInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_RefInstructionList(),s) }
  }

  %op Strategy Is_RefInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_RefInstructionList()}
  }
  
%op Strategy Make_RefInstructionList(_labelInstructionList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_RefInstructionList))) }

  get_slot(_labelInstructionList, t) { $t._labelInstructionList }
  make( _labelInstructionList) { new tom.library.adt.bytecode.strategy.instructionlist.Make_RefInstructionList( $_labelInstructionList) }
}

    %op Strategy _LabInstructionList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._LabInstructionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instructionlist._LabInstructionList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_LabInstructionList(),s) }
  }

  %op Strategy Is_LabInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_LabInstructionList()}
  }
  
%op Strategy Make_LabInstructionList(_labelInstructionList:String, _termInstructionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_LabInstructionList))) }

  get_slot(_labelInstructionList, t) { $t._labelInstructionList }
  get_slot(_termInstructionList, t) { $t._termInstructionList }
  make( _labelInstructionList,  new_termInstructionList) { new tom.library.adt.bytecode.strategy.instructionlist.Make_LabInstructionList( $_labelInstructionList,  $new_termInstructionList) }
}

    %op Strategy _EmptyInstructionList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._EmptyInstructionList)))}
      
        make() { new tom.library.adt.bytecode.strategy.instructionlist._EmptyInstructionList() }
    }
  
  
  %op Strategy When_EmptyInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyInstructionList(),s) }
  }

  %op Strategy Is_EmptyInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_EmptyInstructionList()}
  }
  
%op Strategy Make_EmptyInstructionList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_EmptyInstructionList))) }

  make() { new tom.library.adt.bytecode.strategy.instructionlist.Make_EmptyInstructionList() }
}

    %op Strategy _ConsInstructionList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist._ConsInstructionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instructionlist._ConsInstructionList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsInstructionList(s:Strategy) {
    make(s) { `Sequence(Is_ConsInstructionList(),s) }
  }

  %op Strategy Is_ConsInstructionList() {
    make() { new tom.library.adt.bytecode.strategy.instructionlist.Is_ConsInstructionList()}
  }
  
%op Strategy Make_ConsInstructionList(_HeadInstructionList:Strategy, _TailInstructionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instructionlist.Make_ConsInstructionList))) }

  get_slot(_HeadInstructionList, t) { $t._HeadInstructionList }
  get_slot(_TailInstructionList, t) { $t._TailInstructionList }
  make( new_HeadInstructionList,  new_TailInstructionList) { new tom.library.adt.bytecode.strategy.instructionlist.Make_ConsInstructionList( $new_HeadInstructionList,  $new_TailInstructionList) }
}

    %op Strategy _VarAccessList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._VarAccessList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.accesslist._VarAccessList($arg0) }
    }
  
  
  %op Strategy When_VarAccessList(s:Strategy) {
    make(s) { `Sequence(Is_VarAccessList(),s) }
  }

  %op Strategy Is_VarAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_VarAccessList()}
  }
  
%op Strategy Make_VarAccessList(_labelAccessList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_VarAccessList))) }

  get_slot(_labelAccessList, t) { $t._labelAccessList }
  make( _labelAccessList) { new tom.library.adt.bytecode.strategy.accesslist.Make_VarAccessList( $_labelAccessList) }
}

    %op Strategy _EmptyPathAccessList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._EmptyPathAccessList)))}
      
        make() { new tom.library.adt.bytecode.strategy.accesslist._EmptyPathAccessList() }
    }
  
  
  %op Strategy When_EmptyPathAccessList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathAccessList(),s) }
  }

  %op Strategy Is_EmptyPathAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_EmptyPathAccessList()}
  }
  
%op Strategy Make_EmptyPathAccessList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_EmptyPathAccessList))) }

  make() { new tom.library.adt.bytecode.strategy.accesslist.Make_EmptyPathAccessList() }
}

    %op Strategy _ConsPathAccessList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._ConsPathAccessList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.accesslist._ConsPathAccessList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathAccessList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathAccessList(),s) }
  }

  %op Strategy Is_ConsPathAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_ConsPathAccessList()}
  }
  
%op Strategy Make_ConsPathAccessList(_HeadPathAccessList:int, _TailPathAccessList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_ConsPathAccessList))) }

  get_slot(_HeadPathAccessList, t) { $t._HeadPathAccessList }
  get_slot(_TailPathAccessList, t) { $t._TailPathAccessList }
  make( _HeadPathAccessList,  new_TailPathAccessList) { new tom.library.adt.bytecode.strategy.accesslist.Make_ConsPathAccessList( $_HeadPathAccessList,  $new_TailPathAccessList) }
}

    %op Strategy _RefAccessList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._RefAccessList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.accesslist._RefAccessList($arg0) }
    }
  
  
  %op Strategy When_RefAccessList(s:Strategy) {
    make(s) { `Sequence(Is_RefAccessList(),s) }
  }

  %op Strategy Is_RefAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_RefAccessList()}
  }
  
%op Strategy Make_RefAccessList(_labelAccessList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_RefAccessList))) }

  get_slot(_labelAccessList, t) { $t._labelAccessList }
  make( _labelAccessList) { new tom.library.adt.bytecode.strategy.accesslist.Make_RefAccessList( $_labelAccessList) }
}

    %op Strategy _LabAccessList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._LabAccessList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.accesslist._LabAccessList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabAccessList(s:Strategy) {
    make(s) { `Sequence(Is_LabAccessList(),s) }
  }

  %op Strategy Is_LabAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_LabAccessList()}
  }
  
%op Strategy Make_LabAccessList(_labelAccessList:String, _termAccessList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_LabAccessList))) }

  get_slot(_labelAccessList, t) { $t._labelAccessList }
  get_slot(_termAccessList, t) { $t._termAccessList }
  make( _labelAccessList,  new_termAccessList) { new tom.library.adt.bytecode.strategy.accesslist.Make_LabAccessList( $_labelAccessList,  $new_termAccessList) }
}

    %op Strategy _EmptyAccessList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._EmptyAccessList)))}
      
        make() { new tom.library.adt.bytecode.strategy.accesslist._EmptyAccessList() }
    }
  
  
  %op Strategy When_EmptyAccessList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyAccessList(),s) }
  }

  %op Strategy Is_EmptyAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_EmptyAccessList()}
  }
  
%op Strategy Make_EmptyAccessList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_EmptyAccessList))) }

  make() { new tom.library.adt.bytecode.strategy.accesslist.Make_EmptyAccessList() }
}

    %op Strategy _ConsAccessList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist._ConsAccessList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.accesslist._ConsAccessList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsAccessList(s:Strategy) {
    make(s) { `Sequence(Is_ConsAccessList(),s) }
  }

  %op Strategy Is_ConsAccessList() {
    make() { new tom.library.adt.bytecode.strategy.accesslist.Is_ConsAccessList()}
  }
  
%op Strategy Make_ConsAccessList(_HeadAccessList:Strategy, _TailAccessList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.accesslist.Make_ConsAccessList))) }

  get_slot(_HeadAccessList, t) { $t._HeadAccessList }
  get_slot(_TailAccessList, t) { $t._TailAccessList }
  make( new_HeadAccessList,  new_TailAccessList) { new tom.library.adt.bytecode.strategy.accesslist.Make_ConsAccessList( $new_HeadAccessList,  $new_TailAccessList) }
}

    %op Strategy _VarInstruction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._VarInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._VarInstruction($arg0) }
    }
  
  
  %op Strategy When_VarInstruction(s:Strategy) {
    make(s) { `Sequence(Is_VarInstruction(),s) }
  }

  %op Strategy Is_VarInstruction() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_VarInstruction()}
  }
  
%op Strategy Make_VarInstruction(_labelInstruction:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_VarInstruction))) }

  get_slot(_labelInstruction, t) { $t._labelInstruction }
  make( _labelInstruction) { new tom.library.adt.bytecode.strategy.instruction.Make_VarInstruction( $_labelInstruction) }
}

    %op Strategy _EmptyPathInstruction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._EmptyPathInstruction)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._EmptyPathInstruction() }
    }
  
  
  %op Strategy When_EmptyPathInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathInstruction(),s) }
  }

  %op Strategy Is_EmptyPathInstruction() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_EmptyPathInstruction()}
  }
  
%op Strategy Make_EmptyPathInstruction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_EmptyPathInstruction))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_EmptyPathInstruction() }
}

    %op Strategy _ConsPathInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._ConsPathInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instruction._ConsPathInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathInstruction(),s) }
  }

  %op Strategy Is_ConsPathInstruction() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_ConsPathInstruction()}
  }
  
%op Strategy Make_ConsPathInstruction(_HeadPathInstruction:int, _TailPathInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_ConsPathInstruction))) }

  get_slot(_HeadPathInstruction, t) { $t._HeadPathInstruction }
  get_slot(_TailPathInstruction, t) { $t._TailPathInstruction }
  make( _HeadPathInstruction,  new_TailPathInstruction) { new tom.library.adt.bytecode.strategy.instruction.Make_ConsPathInstruction( $_HeadPathInstruction,  $new_TailPathInstruction) }
}

    %op Strategy _RefInstruction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._RefInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._RefInstruction($arg0) }
    }
  
  
  %op Strategy When_RefInstruction(s:Strategy) {
    make(s) { `Sequence(Is_RefInstruction(),s) }
  }

  %op Strategy Is_RefInstruction() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_RefInstruction()}
  }
  
%op Strategy Make_RefInstruction(_labelInstruction:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_RefInstruction))) }

  get_slot(_labelInstruction, t) { $t._labelInstruction }
  make( _labelInstruction) { new tom.library.adt.bytecode.strategy.instruction.Make_RefInstruction( $_labelInstruction) }
}

    %op Strategy _LabInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._LabInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instruction._LabInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabInstruction(s:Strategy) {
    make(s) { `Sequence(Is_LabInstruction(),s) }
  }

  %op Strategy Is_LabInstruction() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_LabInstruction()}
  }
  
%op Strategy Make_LabInstruction(_labelInstruction:String, _termInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_LabInstruction))) }

  get_slot(_labelInstruction, t) { $t._labelInstruction }
  get_slot(_termInstruction, t) { $t._termInstruction }
  make( _labelInstruction,  new_termInstruction) { new tom.library.adt.bytecode.strategy.instruction.Make_LabInstruction( $_labelInstruction,  $new_termInstruction) }
}

    %op Strategy _Anchor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Anchor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Anchor($arg0) }
    }
  
  
  %op Strategy When_Anchor(s:Strategy) {
    make(s) { `Sequence(Is_Anchor(),s) }
  }

  %op Strategy Is_Anchor() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Anchor()}
  }
  
%op Strategy Make_Anchor(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Anchor))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Anchor( $new_label) }
}

    %op Strategy _Nop() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Nop)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Nop() }
    }
  
  
  %op Strategy When_Nop(s:Strategy) {
    make(s) { `Sequence(Is_Nop(),s) }
  }

  %op Strategy Is_Nop() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Nop()}
  }
  
%op Strategy Make_Nop() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Nop))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Nop() }
}

    %op Strategy _Aconst_null() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Aconst_null)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Aconst_null() }
    }
  
  
  %op Strategy When_Aconst_null(s:Strategy) {
    make(s) { `Sequence(Is_Aconst_null(),s) }
  }

  %op Strategy Is_Aconst_null() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Aconst_null()}
  }
  
%op Strategy Make_Aconst_null() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Aconst_null))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Aconst_null() }
}

    %op Strategy _Iconst_m1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_m1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_m1() }
    }
  
  
  %op Strategy When_Iconst_m1(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_m1(),s) }
  }

  %op Strategy Is_Iconst_m1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_m1()}
  }
  
%op Strategy Make_Iconst_m1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_m1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_m1() }
}

    %op Strategy _Iconst_0() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_0)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_0() }
    }
  
  
  %op Strategy When_Iconst_0(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_0(),s) }
  }

  %op Strategy Is_Iconst_0() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_0()}
  }
  
%op Strategy Make_Iconst_0() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_0))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_0() }
}

    %op Strategy _Iconst_1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_1() }
    }
  
  
  %op Strategy When_Iconst_1(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_1(),s) }
  }

  %op Strategy Is_Iconst_1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_1()}
  }
  
%op Strategy Make_Iconst_1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_1() }
}

    %op Strategy _Iconst_2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_2() }
    }
  
  
  %op Strategy When_Iconst_2(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_2(),s) }
  }

  %op Strategy Is_Iconst_2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_2()}
  }
  
%op Strategy Make_Iconst_2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_2() }
}

    %op Strategy _Iconst_3() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_3)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_3() }
    }
  
  
  %op Strategy When_Iconst_3(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_3(),s) }
  }

  %op Strategy Is_Iconst_3() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_3()}
  }
  
%op Strategy Make_Iconst_3() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_3))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_3() }
}

    %op Strategy _Iconst_4() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_4)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_4() }
    }
  
  
  %op Strategy When_Iconst_4(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_4(),s) }
  }

  %op Strategy Is_Iconst_4() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_4()}
  }
  
%op Strategy Make_Iconst_4() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_4))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_4() }
}

    %op Strategy _Iconst_5() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iconst_5)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iconst_5() }
    }
  
  
  %op Strategy When_Iconst_5(s:Strategy) {
    make(s) { `Sequence(Is_Iconst_5(),s) }
  }

  %op Strategy Is_Iconst_5() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iconst_5()}
  }
  
%op Strategy Make_Iconst_5() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iconst_5))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iconst_5() }
}

    %op Strategy _Lconst_0() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lconst_0)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lconst_0() }
    }
  
  
  %op Strategy When_Lconst_0(s:Strategy) {
    make(s) { `Sequence(Is_Lconst_0(),s) }
  }

  %op Strategy Is_Lconst_0() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lconst_0()}
  }
  
%op Strategy Make_Lconst_0() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lconst_0))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lconst_0() }
}

    %op Strategy _Lconst_1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lconst_1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lconst_1() }
    }
  
  
  %op Strategy When_Lconst_1(s:Strategy) {
    make(s) { `Sequence(Is_Lconst_1(),s) }
  }

  %op Strategy Is_Lconst_1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lconst_1()}
  }
  
%op Strategy Make_Lconst_1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lconst_1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lconst_1() }
}

    %op Strategy _Fconst_0() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fconst_0)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fconst_0() }
    }
  
  
  %op Strategy When_Fconst_0(s:Strategy) {
    make(s) { `Sequence(Is_Fconst_0(),s) }
  }

  %op Strategy Is_Fconst_0() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fconst_0()}
  }
  
%op Strategy Make_Fconst_0() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fconst_0))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fconst_0() }
}

    %op Strategy _Fconst_1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fconst_1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fconst_1() }
    }
  
  
  %op Strategy When_Fconst_1(s:Strategy) {
    make(s) { `Sequence(Is_Fconst_1(),s) }
  }

  %op Strategy Is_Fconst_1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fconst_1()}
  }
  
%op Strategy Make_Fconst_1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fconst_1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fconst_1() }
}

    %op Strategy _Fconst_2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fconst_2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fconst_2() }
    }
  
  
  %op Strategy When_Fconst_2(s:Strategy) {
    make(s) { `Sequence(Is_Fconst_2(),s) }
  }

  %op Strategy Is_Fconst_2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fconst_2()}
  }
  
%op Strategy Make_Fconst_2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fconst_2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fconst_2() }
}

    %op Strategy _Dconst_0() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dconst_0)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dconst_0() }
    }
  
  
  %op Strategy When_Dconst_0(s:Strategy) {
    make(s) { `Sequence(Is_Dconst_0(),s) }
  }

  %op Strategy Is_Dconst_0() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dconst_0()}
  }
  
%op Strategy Make_Dconst_0() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dconst_0))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dconst_0() }
}

    %op Strategy _Dconst_1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dconst_1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dconst_1() }
    }
  
  
  %op Strategy When_Dconst_1(s:Strategy) {
    make(s) { `Sequence(Is_Dconst_1(),s) }
  }

  %op Strategy Is_Dconst_1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dconst_1()}
  }
  
%op Strategy Make_Dconst_1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dconst_1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dconst_1() }
}

    %op Strategy _Bipush(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Bipush)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Bipush($arg0) }
    }
  
  
  %op Strategy When_Bipush(s:Strategy) {
    make(s) { `Sequence(Is_Bipush(),s) }
  }

  %op Strategy Is_Bipush() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Bipush()}
  }
  
%op Strategy Make_Bipush(_operand:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Bipush))) }

  get_slot(_operand, t) { $t._operand }
  make( _operand) { new tom.library.adt.bytecode.strategy.instruction.Make_Bipush( $_operand) }
}

    %op Strategy _Sipush(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Sipush)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Sipush($arg0) }
    }
  
  
  %op Strategy When_Sipush(s:Strategy) {
    make(s) { `Sequence(Is_Sipush(),s) }
  }

  %op Strategy Is_Sipush() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Sipush()}
  }
  
%op Strategy Make_Sipush(_operand:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Sipush))) }

  get_slot(_operand, t) { $t._operand }
  make( _operand) { new tom.library.adt.bytecode.strategy.instruction.Make_Sipush( $_operand) }
}

    %op Strategy _Ldc(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ldc)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ldc($arg0) }
    }
  
  
  %op Strategy When_Ldc(s:Strategy) {
    make(s) { `Sequence(Is_Ldc(),s) }
  }

  %op Strategy Is_Ldc() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ldc()}
  }
  
%op Strategy Make_Ldc(_cst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ldc))) }

  get_slot(_cst, t) { $t._cst }
  make( new_cst) { new tom.library.adt.bytecode.strategy.instruction.Make_Ldc( $new_cst) }
}

    %op Strategy _Iload(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iload)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Iload($arg0) }
    }
  
  
  %op Strategy When_Iload(s:Strategy) {
    make(s) { `Sequence(Is_Iload(),s) }
  }

  %op Strategy Is_Iload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iload()}
  }
  
%op Strategy Make_Iload(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iload))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Iload( $_var) }
}

    %op Strategy _Lload(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lload)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Lload($arg0) }
    }
  
  
  %op Strategy When_Lload(s:Strategy) {
    make(s) { `Sequence(Is_Lload(),s) }
  }

  %op Strategy Is_Lload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lload()}
  }
  
%op Strategy Make_Lload(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lload))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Lload( $_var) }
}

    %op Strategy _Fload(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fload)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Fload($arg0) }
    }
  
  
  %op Strategy When_Fload(s:Strategy) {
    make(s) { `Sequence(Is_Fload(),s) }
  }

  %op Strategy Is_Fload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fload()}
  }
  
%op Strategy Make_Fload(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fload))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Fload( $_var) }
}

    %op Strategy _Dload(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dload)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Dload($arg0) }
    }
  
  
  %op Strategy When_Dload(s:Strategy) {
    make(s) { `Sequence(Is_Dload(),s) }
  }

  %op Strategy Is_Dload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dload()}
  }
  
%op Strategy Make_Dload(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dload))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Dload( $_var) }
}

    %op Strategy _Aload(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Aload)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Aload($arg0) }
    }
  
  
  %op Strategy When_Aload(s:Strategy) {
    make(s) { `Sequence(Is_Aload(),s) }
  }

  %op Strategy Is_Aload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Aload()}
  }
  
%op Strategy Make_Aload(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Aload))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Aload( $_var) }
}

    %op Strategy _Iaload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iaload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iaload() }
    }
  
  
  %op Strategy When_Iaload(s:Strategy) {
    make(s) { `Sequence(Is_Iaload(),s) }
  }

  %op Strategy Is_Iaload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iaload()}
  }
  
%op Strategy Make_Iaload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iaload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iaload() }
}

    %op Strategy _Laload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Laload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Laload() }
    }
  
  
  %op Strategy When_Laload(s:Strategy) {
    make(s) { `Sequence(Is_Laload(),s) }
  }

  %op Strategy Is_Laload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Laload()}
  }
  
%op Strategy Make_Laload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Laload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Laload() }
}

    %op Strategy _Faload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Faload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Faload() }
    }
  
  
  %op Strategy When_Faload(s:Strategy) {
    make(s) { `Sequence(Is_Faload(),s) }
  }

  %op Strategy Is_Faload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Faload()}
  }
  
%op Strategy Make_Faload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Faload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Faload() }
}

    %op Strategy _Daload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Daload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Daload() }
    }
  
  
  %op Strategy When_Daload(s:Strategy) {
    make(s) { `Sequence(Is_Daload(),s) }
  }

  %op Strategy Is_Daload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Daload()}
  }
  
%op Strategy Make_Daload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Daload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Daload() }
}

    %op Strategy _Aaload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Aaload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Aaload() }
    }
  
  
  %op Strategy When_Aaload(s:Strategy) {
    make(s) { `Sequence(Is_Aaload(),s) }
  }

  %op Strategy Is_Aaload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Aaload()}
  }
  
%op Strategy Make_Aaload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Aaload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Aaload() }
}

    %op Strategy _Baload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Baload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Baload() }
    }
  
  
  %op Strategy When_Baload(s:Strategy) {
    make(s) { `Sequence(Is_Baload(),s) }
  }

  %op Strategy Is_Baload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Baload()}
  }
  
%op Strategy Make_Baload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Baload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Baload() }
}

    %op Strategy _Caload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Caload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Caload() }
    }
  
  
  %op Strategy When_Caload(s:Strategy) {
    make(s) { `Sequence(Is_Caload(),s) }
  }

  %op Strategy Is_Caload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Caload()}
  }
  
%op Strategy Make_Caload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Caload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Caload() }
}

    %op Strategy _Saload() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Saload)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Saload() }
    }
  
  
  %op Strategy When_Saload(s:Strategy) {
    make(s) { `Sequence(Is_Saload(),s) }
  }

  %op Strategy Is_Saload() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Saload()}
  }
  
%op Strategy Make_Saload() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Saload))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Saload() }
}

    %op Strategy _Istore(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Istore)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Istore($arg0) }
    }
  
  
  %op Strategy When_Istore(s:Strategy) {
    make(s) { `Sequence(Is_Istore(),s) }
  }

  %op Strategy Is_Istore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Istore()}
  }
  
%op Strategy Make_Istore(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Istore))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Istore( $_var) }
}

    %op Strategy _Lstore(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lstore)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Lstore($arg0) }
    }
  
  
  %op Strategy When_Lstore(s:Strategy) {
    make(s) { `Sequence(Is_Lstore(),s) }
  }

  %op Strategy Is_Lstore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lstore()}
  }
  
%op Strategy Make_Lstore(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lstore))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Lstore( $_var) }
}

    %op Strategy _Fstore(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fstore)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Fstore($arg0) }
    }
  
  
  %op Strategy When_Fstore(s:Strategy) {
    make(s) { `Sequence(Is_Fstore(),s) }
  }

  %op Strategy Is_Fstore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fstore()}
  }
  
%op Strategy Make_Fstore(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fstore))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Fstore( $_var) }
}

    %op Strategy _Dstore(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dstore)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Dstore($arg0) }
    }
  
  
  %op Strategy When_Dstore(s:Strategy) {
    make(s) { `Sequence(Is_Dstore(),s) }
  }

  %op Strategy Is_Dstore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dstore()}
  }
  
%op Strategy Make_Dstore(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dstore))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Dstore( $_var) }
}

    %op Strategy _Astore(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Astore)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Astore($arg0) }
    }
  
  
  %op Strategy When_Astore(s:Strategy) {
    make(s) { `Sequence(Is_Astore(),s) }
  }

  %op Strategy Is_Astore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Astore()}
  }
  
%op Strategy Make_Astore(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Astore))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Astore( $_var) }
}

    %op Strategy _Iastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iastore() }
    }
  
  
  %op Strategy When_Iastore(s:Strategy) {
    make(s) { `Sequence(Is_Iastore(),s) }
  }

  %op Strategy Is_Iastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iastore()}
  }
  
%op Strategy Make_Iastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iastore() }
}

    %op Strategy _Lastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lastore() }
    }
  
  
  %op Strategy When_Lastore(s:Strategy) {
    make(s) { `Sequence(Is_Lastore(),s) }
  }

  %op Strategy Is_Lastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lastore()}
  }
  
%op Strategy Make_Lastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lastore() }
}

    %op Strategy _Fastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fastore() }
    }
  
  
  %op Strategy When_Fastore(s:Strategy) {
    make(s) { `Sequence(Is_Fastore(),s) }
  }

  %op Strategy Is_Fastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fastore()}
  }
  
%op Strategy Make_Fastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fastore() }
}

    %op Strategy _Dastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dastore() }
    }
  
  
  %op Strategy When_Dastore(s:Strategy) {
    make(s) { `Sequence(Is_Dastore(),s) }
  }

  %op Strategy Is_Dastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dastore()}
  }
  
%op Strategy Make_Dastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dastore() }
}

    %op Strategy _Aastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Aastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Aastore() }
    }
  
  
  %op Strategy When_Aastore(s:Strategy) {
    make(s) { `Sequence(Is_Aastore(),s) }
  }

  %op Strategy Is_Aastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Aastore()}
  }
  
%op Strategy Make_Aastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Aastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Aastore() }
}

    %op Strategy _Bastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Bastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Bastore() }
    }
  
  
  %op Strategy When_Bastore(s:Strategy) {
    make(s) { `Sequence(Is_Bastore(),s) }
  }

  %op Strategy Is_Bastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Bastore()}
  }
  
%op Strategy Make_Bastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Bastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Bastore() }
}

    %op Strategy _Castore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Castore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Castore() }
    }
  
  
  %op Strategy When_Castore(s:Strategy) {
    make(s) { `Sequence(Is_Castore(),s) }
  }

  %op Strategy Is_Castore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Castore()}
  }
  
%op Strategy Make_Castore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Castore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Castore() }
}

    %op Strategy _Sastore() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Sastore)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Sastore() }
    }
  
  
  %op Strategy When_Sastore(s:Strategy) {
    make(s) { `Sequence(Is_Sastore(),s) }
  }

  %op Strategy Is_Sastore() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Sastore()}
  }
  
%op Strategy Make_Sastore() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Sastore))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Sastore() }
}

    %op Strategy _Pop() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Pop)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Pop() }
    }
  
  
  %op Strategy When_Pop(s:Strategy) {
    make(s) { `Sequence(Is_Pop(),s) }
  }

  %op Strategy Is_Pop() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Pop()}
  }
  
%op Strategy Make_Pop() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Pop))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Pop() }
}

    %op Strategy _Pop2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Pop2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Pop2() }
    }
  
  
  %op Strategy When_Pop2(s:Strategy) {
    make(s) { `Sequence(Is_Pop2(),s) }
  }

  %op Strategy Is_Pop2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Pop2()}
  }
  
%op Strategy Make_Pop2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Pop2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Pop2() }
}

    %op Strategy _Dup() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup() }
    }
  
  
  %op Strategy When_Dup(s:Strategy) {
    make(s) { `Sequence(Is_Dup(),s) }
  }

  %op Strategy Is_Dup() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup()}
  }
  
%op Strategy Make_Dup() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup() }
}

    %op Strategy _Dup_x1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup_x1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup_x1() }
    }
  
  
  %op Strategy When_Dup_x1(s:Strategy) {
    make(s) { `Sequence(Is_Dup_x1(),s) }
  }

  %op Strategy Is_Dup_x1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup_x1()}
  }
  
%op Strategy Make_Dup_x1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup_x1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup_x1() }
}

    %op Strategy _Dup_x2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup_x2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup_x2() }
    }
  
  
  %op Strategy When_Dup_x2(s:Strategy) {
    make(s) { `Sequence(Is_Dup_x2(),s) }
  }

  %op Strategy Is_Dup_x2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup_x2()}
  }
  
%op Strategy Make_Dup_x2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup_x2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup_x2() }
}

    %op Strategy _Dup2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup2() }
    }
  
  
  %op Strategy When_Dup2(s:Strategy) {
    make(s) { `Sequence(Is_Dup2(),s) }
  }

  %op Strategy Is_Dup2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup2()}
  }
  
%op Strategy Make_Dup2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup2() }
}

    %op Strategy _Dup2_x1() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup2_x1)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup2_x1() }
    }
  
  
  %op Strategy When_Dup2_x1(s:Strategy) {
    make(s) { `Sequence(Is_Dup2_x1(),s) }
  }

  %op Strategy Is_Dup2_x1() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup2_x1()}
  }
  
%op Strategy Make_Dup2_x1() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup2_x1))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup2_x1() }
}

    %op Strategy _Dup2_x2() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dup2_x2)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dup2_x2() }
    }
  
  
  %op Strategy When_Dup2_x2(s:Strategy) {
    make(s) { `Sequence(Is_Dup2_x2(),s) }
  }

  %op Strategy Is_Dup2_x2() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dup2_x2()}
  }
  
%op Strategy Make_Dup2_x2() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dup2_x2))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dup2_x2() }
}

    %op Strategy _Swap() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Swap)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Swap() }
    }
  
  
  %op Strategy When_Swap(s:Strategy) {
    make(s) { `Sequence(Is_Swap(),s) }
  }

  %op Strategy Is_Swap() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Swap()}
  }
  
%op Strategy Make_Swap() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Swap))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Swap() }
}

    %op Strategy _Iadd() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iadd)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iadd() }
    }
  
  
  %op Strategy When_Iadd(s:Strategy) {
    make(s) { `Sequence(Is_Iadd(),s) }
  }

  %op Strategy Is_Iadd() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iadd()}
  }
  
%op Strategy Make_Iadd() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iadd))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iadd() }
}

    %op Strategy _Ladd() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ladd)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ladd() }
    }
  
  
  %op Strategy When_Ladd(s:Strategy) {
    make(s) { `Sequence(Is_Ladd(),s) }
  }

  %op Strategy Is_Ladd() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ladd()}
  }
  
%op Strategy Make_Ladd() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ladd))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ladd() }
}

    %op Strategy _Fadd() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fadd)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fadd() }
    }
  
  
  %op Strategy When_Fadd(s:Strategy) {
    make(s) { `Sequence(Is_Fadd(),s) }
  }

  %op Strategy Is_Fadd() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fadd()}
  }
  
%op Strategy Make_Fadd() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fadd))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fadd() }
}

    %op Strategy _Dadd() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dadd)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dadd() }
    }
  
  
  %op Strategy When_Dadd(s:Strategy) {
    make(s) { `Sequence(Is_Dadd(),s) }
  }

  %op Strategy Is_Dadd() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dadd()}
  }
  
%op Strategy Make_Dadd() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dadd))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dadd() }
}

    %op Strategy _Isub() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Isub)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Isub() }
    }
  
  
  %op Strategy When_Isub(s:Strategy) {
    make(s) { `Sequence(Is_Isub(),s) }
  }

  %op Strategy Is_Isub() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Isub()}
  }
  
%op Strategy Make_Isub() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Isub))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Isub() }
}

    %op Strategy _Lsub() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lsub)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lsub() }
    }
  
  
  %op Strategy When_Lsub(s:Strategy) {
    make(s) { `Sequence(Is_Lsub(),s) }
  }

  %op Strategy Is_Lsub() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lsub()}
  }
  
%op Strategy Make_Lsub() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lsub))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lsub() }
}

    %op Strategy _Fsub() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fsub)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fsub() }
    }
  
  
  %op Strategy When_Fsub(s:Strategy) {
    make(s) { `Sequence(Is_Fsub(),s) }
  }

  %op Strategy Is_Fsub() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fsub()}
  }
  
%op Strategy Make_Fsub() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fsub))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fsub() }
}

    %op Strategy _Dsub() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dsub)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dsub() }
    }
  
  
  %op Strategy When_Dsub(s:Strategy) {
    make(s) { `Sequence(Is_Dsub(),s) }
  }

  %op Strategy Is_Dsub() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dsub()}
  }
  
%op Strategy Make_Dsub() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dsub))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dsub() }
}

    %op Strategy _Imul() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Imul)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Imul() }
    }
  
  
  %op Strategy When_Imul(s:Strategy) {
    make(s) { `Sequence(Is_Imul(),s) }
  }

  %op Strategy Is_Imul() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Imul()}
  }
  
%op Strategy Make_Imul() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Imul))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Imul() }
}

    %op Strategy _Lmul() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lmul)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lmul() }
    }
  
  
  %op Strategy When_Lmul(s:Strategy) {
    make(s) { `Sequence(Is_Lmul(),s) }
  }

  %op Strategy Is_Lmul() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lmul()}
  }
  
%op Strategy Make_Lmul() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lmul))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lmul() }
}

    %op Strategy _Fmul() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fmul)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fmul() }
    }
  
  
  %op Strategy When_Fmul(s:Strategy) {
    make(s) { `Sequence(Is_Fmul(),s) }
  }

  %op Strategy Is_Fmul() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fmul()}
  }
  
%op Strategy Make_Fmul() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fmul))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fmul() }
}

    %op Strategy _Dmul() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dmul)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dmul() }
    }
  
  
  %op Strategy When_Dmul(s:Strategy) {
    make(s) { `Sequence(Is_Dmul(),s) }
  }

  %op Strategy Is_Dmul() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dmul()}
  }
  
%op Strategy Make_Dmul() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dmul))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dmul() }
}

    %op Strategy _Idiv() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Idiv)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Idiv() }
    }
  
  
  %op Strategy When_Idiv(s:Strategy) {
    make(s) { `Sequence(Is_Idiv(),s) }
  }

  %op Strategy Is_Idiv() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Idiv()}
  }
  
%op Strategy Make_Idiv() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Idiv))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Idiv() }
}

    %op Strategy _Ldiv() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ldiv)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ldiv() }
    }
  
  
  %op Strategy When_Ldiv(s:Strategy) {
    make(s) { `Sequence(Is_Ldiv(),s) }
  }

  %op Strategy Is_Ldiv() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ldiv()}
  }
  
%op Strategy Make_Ldiv() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ldiv))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ldiv() }
}

    %op Strategy _Fdiv() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fdiv)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fdiv() }
    }
  
  
  %op Strategy When_Fdiv(s:Strategy) {
    make(s) { `Sequence(Is_Fdiv(),s) }
  }

  %op Strategy Is_Fdiv() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fdiv()}
  }
  
%op Strategy Make_Fdiv() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fdiv))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fdiv() }
}

    %op Strategy _Ddiv() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ddiv)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ddiv() }
    }
  
  
  %op Strategy When_Ddiv(s:Strategy) {
    make(s) { `Sequence(Is_Ddiv(),s) }
  }

  %op Strategy Is_Ddiv() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ddiv()}
  }
  
%op Strategy Make_Ddiv() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ddiv))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ddiv() }
}

    %op Strategy _Irem() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Irem)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Irem() }
    }
  
  
  %op Strategy When_Irem(s:Strategy) {
    make(s) { `Sequence(Is_Irem(),s) }
  }

  %op Strategy Is_Irem() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Irem()}
  }
  
%op Strategy Make_Irem() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Irem))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Irem() }
}

    %op Strategy _Lrem() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lrem)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lrem() }
    }
  
  
  %op Strategy When_Lrem(s:Strategy) {
    make(s) { `Sequence(Is_Lrem(),s) }
  }

  %op Strategy Is_Lrem() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lrem()}
  }
  
%op Strategy Make_Lrem() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lrem))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lrem() }
}

    %op Strategy _Frem() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Frem)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Frem() }
    }
  
  
  %op Strategy When_Frem(s:Strategy) {
    make(s) { `Sequence(Is_Frem(),s) }
  }

  %op Strategy Is_Frem() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Frem()}
  }
  
%op Strategy Make_Frem() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Frem))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Frem() }
}

    %op Strategy _Drem() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Drem)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Drem() }
    }
  
  
  %op Strategy When_Drem(s:Strategy) {
    make(s) { `Sequence(Is_Drem(),s) }
  }

  %op Strategy Is_Drem() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Drem()}
  }
  
%op Strategy Make_Drem() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Drem))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Drem() }
}

    %op Strategy _Ineg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ineg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ineg() }
    }
  
  
  %op Strategy When_Ineg(s:Strategy) {
    make(s) { `Sequence(Is_Ineg(),s) }
  }

  %op Strategy Is_Ineg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ineg()}
  }
  
%op Strategy Make_Ineg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ineg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ineg() }
}

    %op Strategy _Lneg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lneg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lneg() }
    }
  
  
  %op Strategy When_Lneg(s:Strategy) {
    make(s) { `Sequence(Is_Lneg(),s) }
  }

  %op Strategy Is_Lneg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lneg()}
  }
  
%op Strategy Make_Lneg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lneg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lneg() }
}

    %op Strategy _Fneg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fneg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fneg() }
    }
  
  
  %op Strategy When_Fneg(s:Strategy) {
    make(s) { `Sequence(Is_Fneg(),s) }
  }

  %op Strategy Is_Fneg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fneg()}
  }
  
%op Strategy Make_Fneg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fneg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fneg() }
}

    %op Strategy _Dneg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dneg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dneg() }
    }
  
  
  %op Strategy When_Dneg(s:Strategy) {
    make(s) { `Sequence(Is_Dneg(),s) }
  }

  %op Strategy Is_Dneg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dneg()}
  }
  
%op Strategy Make_Dneg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dneg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dneg() }
}

    %op Strategy _Ishl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ishl)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ishl() }
    }
  
  
  %op Strategy When_Ishl(s:Strategy) {
    make(s) { `Sequence(Is_Ishl(),s) }
  }

  %op Strategy Is_Ishl() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ishl()}
  }
  
%op Strategy Make_Ishl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ishl))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ishl() }
}

    %op Strategy _Lshl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lshl)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lshl() }
    }
  
  
  %op Strategy When_Lshl(s:Strategy) {
    make(s) { `Sequence(Is_Lshl(),s) }
  }

  %op Strategy Is_Lshl() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lshl()}
  }
  
%op Strategy Make_Lshl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lshl))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lshl() }
}

    %op Strategy _Ishr() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ishr)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ishr() }
    }
  
  
  %op Strategy When_Ishr(s:Strategy) {
    make(s) { `Sequence(Is_Ishr(),s) }
  }

  %op Strategy Is_Ishr() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ishr()}
  }
  
%op Strategy Make_Ishr() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ishr))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ishr() }
}

    %op Strategy _Lshr() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lshr)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lshr() }
    }
  
  
  %op Strategy When_Lshr(s:Strategy) {
    make(s) { `Sequence(Is_Lshr(),s) }
  }

  %op Strategy Is_Lshr() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lshr()}
  }
  
%op Strategy Make_Lshr() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lshr))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lshr() }
}

    %op Strategy _Iushr() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iushr)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iushr() }
    }
  
  
  %op Strategy When_Iushr(s:Strategy) {
    make(s) { `Sequence(Is_Iushr(),s) }
  }

  %op Strategy Is_Iushr() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iushr()}
  }
  
%op Strategy Make_Iushr() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iushr))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iushr() }
}

    %op Strategy _Lushr() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lushr)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lushr() }
    }
  
  
  %op Strategy When_Lushr(s:Strategy) {
    make(s) { `Sequence(Is_Lushr(),s) }
  }

  %op Strategy Is_Lushr() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lushr()}
  }
  
%op Strategy Make_Lushr() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lushr))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lushr() }
}

    %op Strategy _Iand() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iand)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Iand() }
    }
  
  
  %op Strategy When_Iand(s:Strategy) {
    make(s) { `Sequence(Is_Iand(),s) }
  }

  %op Strategy Is_Iand() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iand()}
  }
  
%op Strategy Make_Iand() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iand))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Iand() }
}

    %op Strategy _Land() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Land)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Land() }
    }
  
  
  %op Strategy When_Land(s:Strategy) {
    make(s) { `Sequence(Is_Land(),s) }
  }

  %op Strategy Is_Land() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Land()}
  }
  
%op Strategy Make_Land() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Land))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Land() }
}

    %op Strategy _Ior() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ior)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ior() }
    }
  
  
  %op Strategy When_Ior(s:Strategy) {
    make(s) { `Sequence(Is_Ior(),s) }
  }

  %op Strategy Is_Ior() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ior()}
  }
  
%op Strategy Make_Ior() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ior))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ior() }
}

    %op Strategy _Lor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lor)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lor() }
    }
  
  
  %op Strategy When_Lor(s:Strategy) {
    make(s) { `Sequence(Is_Lor(),s) }
  }

  %op Strategy Is_Lor() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lor()}
  }
  
%op Strategy Make_Lor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lor))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lor() }
}

    %op Strategy _Ixor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ixor)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ixor() }
    }
  
  
  %op Strategy When_Ixor(s:Strategy) {
    make(s) { `Sequence(Is_Ixor(),s) }
  }

  %op Strategy Is_Ixor() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ixor()}
  }
  
%op Strategy Make_Ixor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ixor))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ixor() }
}

    %op Strategy _Lxor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lxor)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lxor() }
    }
  
  
  %op Strategy When_Lxor(s:Strategy) {
    make(s) { `Sequence(Is_Lxor(),s) }
  }

  %op Strategy Is_Lxor() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lxor()}
  }
  
%op Strategy Make_Lxor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lxor))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lxor() }
}

    %op Strategy _Iinc(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iinc)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instruction._Iinc($arg0, $arg1) }
    }
  
  
  %op Strategy When_Iinc(s:Strategy) {
    make(s) { `Sequence(Is_Iinc(),s) }
  }

  %op Strategy Is_Iinc() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iinc()}
  }
  
%op Strategy Make_Iinc(_incr:int, _var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iinc))) }

  get_slot(_incr, t) { $t._incr }
  get_slot(_var, t) { $t._var }
  make( _incr,  _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Iinc( $_incr,  $_var) }
}

    %op Strategy _I2l() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2l)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2l() }
    }
  
  
  %op Strategy When_I2l(s:Strategy) {
    make(s) { `Sequence(Is_I2l(),s) }
  }

  %op Strategy Is_I2l() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2l()}
  }
  
%op Strategy Make_I2l() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2l))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2l() }
}

    %op Strategy _I2f() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2f)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2f() }
    }
  
  
  %op Strategy When_I2f(s:Strategy) {
    make(s) { `Sequence(Is_I2f(),s) }
  }

  %op Strategy Is_I2f() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2f()}
  }
  
%op Strategy Make_I2f() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2f))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2f() }
}

    %op Strategy _I2d() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2d)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2d() }
    }
  
  
  %op Strategy When_I2d(s:Strategy) {
    make(s) { `Sequence(Is_I2d(),s) }
  }

  %op Strategy Is_I2d() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2d()}
  }
  
%op Strategy Make_I2d() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2d))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2d() }
}

    %op Strategy _L2i() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._L2i)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._L2i() }
    }
  
  
  %op Strategy When_L2i(s:Strategy) {
    make(s) { `Sequence(Is_L2i(),s) }
  }

  %op Strategy Is_L2i() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_L2i()}
  }
  
%op Strategy Make_L2i() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_L2i))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_L2i() }
}

    %op Strategy _L2f() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._L2f)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._L2f() }
    }
  
  
  %op Strategy When_L2f(s:Strategy) {
    make(s) { `Sequence(Is_L2f(),s) }
  }

  %op Strategy Is_L2f() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_L2f()}
  }
  
%op Strategy Make_L2f() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_L2f))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_L2f() }
}

    %op Strategy _L2d() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._L2d)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._L2d() }
    }
  
  
  %op Strategy When_L2d(s:Strategy) {
    make(s) { `Sequence(Is_L2d(),s) }
  }

  %op Strategy Is_L2d() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_L2d()}
  }
  
%op Strategy Make_L2d() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_L2d))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_L2d() }
}

    %op Strategy _F2i() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._F2i)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._F2i() }
    }
  
  
  %op Strategy When_F2i(s:Strategy) {
    make(s) { `Sequence(Is_F2i(),s) }
  }

  %op Strategy Is_F2i() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_F2i()}
  }
  
%op Strategy Make_F2i() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_F2i))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_F2i() }
}

    %op Strategy _F2l() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._F2l)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._F2l() }
    }
  
  
  %op Strategy When_F2l(s:Strategy) {
    make(s) { `Sequence(Is_F2l(),s) }
  }

  %op Strategy Is_F2l() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_F2l()}
  }
  
%op Strategy Make_F2l() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_F2l))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_F2l() }
}

    %op Strategy _F2d() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._F2d)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._F2d() }
    }
  
  
  %op Strategy When_F2d(s:Strategy) {
    make(s) { `Sequence(Is_F2d(),s) }
  }

  %op Strategy Is_F2d() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_F2d()}
  }
  
%op Strategy Make_F2d() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_F2d))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_F2d() }
}

    %op Strategy _D2i() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._D2i)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._D2i() }
    }
  
  
  %op Strategy When_D2i(s:Strategy) {
    make(s) { `Sequence(Is_D2i(),s) }
  }

  %op Strategy Is_D2i() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_D2i()}
  }
  
%op Strategy Make_D2i() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_D2i))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_D2i() }
}

    %op Strategy _D2l() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._D2l)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._D2l() }
    }
  
  
  %op Strategy When_D2l(s:Strategy) {
    make(s) { `Sequence(Is_D2l(),s) }
  }

  %op Strategy Is_D2l() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_D2l()}
  }
  
%op Strategy Make_D2l() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_D2l))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_D2l() }
}

    %op Strategy _D2f() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._D2f)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._D2f() }
    }
  
  
  %op Strategy When_D2f(s:Strategy) {
    make(s) { `Sequence(Is_D2f(),s) }
  }

  %op Strategy Is_D2f() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_D2f()}
  }
  
%op Strategy Make_D2f() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_D2f))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_D2f() }
}

    %op Strategy _I2b() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2b)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2b() }
    }
  
  
  %op Strategy When_I2b(s:Strategy) {
    make(s) { `Sequence(Is_I2b(),s) }
  }

  %op Strategy Is_I2b() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2b()}
  }
  
%op Strategy Make_I2b() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2b))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2b() }
}

    %op Strategy _I2c() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2c)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2c() }
    }
  
  
  %op Strategy When_I2c(s:Strategy) {
    make(s) { `Sequence(Is_I2c(),s) }
  }

  %op Strategy Is_I2c() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2c()}
  }
  
%op Strategy Make_I2c() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2c))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2c() }
}

    %op Strategy _I2s() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._I2s)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._I2s() }
    }
  
  
  %op Strategy When_I2s(s:Strategy) {
    make(s) { `Sequence(Is_I2s(),s) }
  }

  %op Strategy Is_I2s() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_I2s()}
  }
  
%op Strategy Make_I2s() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_I2s))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_I2s() }
}

    %op Strategy _Lcmp() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lcmp)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lcmp() }
    }
  
  
  %op Strategy When_Lcmp(s:Strategy) {
    make(s) { `Sequence(Is_Lcmp(),s) }
  }

  %op Strategy Is_Lcmp() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lcmp()}
  }
  
%op Strategy Make_Lcmp() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lcmp))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lcmp() }
}

    %op Strategy _Fcmpl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fcmpl)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fcmpl() }
    }
  
  
  %op Strategy When_Fcmpl(s:Strategy) {
    make(s) { `Sequence(Is_Fcmpl(),s) }
  }

  %op Strategy Is_Fcmpl() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fcmpl()}
  }
  
%op Strategy Make_Fcmpl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fcmpl))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fcmpl() }
}

    %op Strategy _Fcmpg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Fcmpg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Fcmpg() }
    }
  
  
  %op Strategy When_Fcmpg(s:Strategy) {
    make(s) { `Sequence(Is_Fcmpg(),s) }
  }

  %op Strategy Is_Fcmpg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Fcmpg()}
  }
  
%op Strategy Make_Fcmpg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Fcmpg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Fcmpg() }
}

    %op Strategy _Dcmpl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dcmpl)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dcmpl() }
    }
  
  
  %op Strategy When_Dcmpl(s:Strategy) {
    make(s) { `Sequence(Is_Dcmpl(),s) }
  }

  %op Strategy Is_Dcmpl() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dcmpl()}
  }
  
%op Strategy Make_Dcmpl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dcmpl))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dcmpl() }
}

    %op Strategy _Dcmpg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dcmpg)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dcmpg() }
    }
  
  
  %op Strategy When_Dcmpg(s:Strategy) {
    make(s) { `Sequence(Is_Dcmpg(),s) }
  }

  %op Strategy Is_Dcmpg() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dcmpg()}
  }
  
%op Strategy Make_Dcmpg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dcmpg))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dcmpg() }
}

    %op Strategy _Ifeq(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifeq)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifeq($arg0) }
    }
  
  
  %op Strategy When_Ifeq(s:Strategy) {
    make(s) { `Sequence(Is_Ifeq(),s) }
  }

  %op Strategy Is_Ifeq() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifeq()}
  }
  
%op Strategy Make_Ifeq(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifeq))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifeq( $new_label) }
}

    %op Strategy _Ifne(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifne)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifne($arg0) }
    }
  
  
  %op Strategy When_Ifne(s:Strategy) {
    make(s) { `Sequence(Is_Ifne(),s) }
  }

  %op Strategy Is_Ifne() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifne()}
  }
  
%op Strategy Make_Ifne(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifne))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifne( $new_label) }
}

    %op Strategy _Iflt(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Iflt)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Iflt($arg0) }
    }
  
  
  %op Strategy When_Iflt(s:Strategy) {
    make(s) { `Sequence(Is_Iflt(),s) }
  }

  %op Strategy Is_Iflt() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Iflt()}
  }
  
%op Strategy Make_Iflt(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Iflt))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Iflt( $new_label) }
}

    %op Strategy _Ifge(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifge)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifge($arg0) }
    }
  
  
  %op Strategy When_Ifge(s:Strategy) {
    make(s) { `Sequence(Is_Ifge(),s) }
  }

  %op Strategy Is_Ifge() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifge()}
  }
  
%op Strategy Make_Ifge(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifge))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifge( $new_label) }
}

    %op Strategy _Ifgt(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifgt)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifgt($arg0) }
    }
  
  
  %op Strategy When_Ifgt(s:Strategy) {
    make(s) { `Sequence(Is_Ifgt(),s) }
  }

  %op Strategy Is_Ifgt() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifgt()}
  }
  
%op Strategy Make_Ifgt(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifgt))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifgt( $new_label) }
}

    %op Strategy _Ifle(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifle)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifle($arg0) }
    }
  
  
  %op Strategy When_Ifle(s:Strategy) {
    make(s) { `Sequence(Is_Ifle(),s) }
  }

  %op Strategy Is_Ifle() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifle()}
  }
  
%op Strategy Make_Ifle(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifle))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifle( $new_label) }
}

    %op Strategy _If_icmpeq(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmpeq)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmpeq($arg0) }
    }
  
  
  %op Strategy When_If_icmpeq(s:Strategy) {
    make(s) { `Sequence(Is_If_icmpeq(),s) }
  }

  %op Strategy Is_If_icmpeq() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmpeq()}
  }
  
%op Strategy Make_If_icmpeq(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmpeq))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmpeq( $new_label) }
}

    %op Strategy _If_icmpne(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmpne)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmpne($arg0) }
    }
  
  
  %op Strategy When_If_icmpne(s:Strategy) {
    make(s) { `Sequence(Is_If_icmpne(),s) }
  }

  %op Strategy Is_If_icmpne() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmpne()}
  }
  
%op Strategy Make_If_icmpne(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmpne))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmpne( $new_label) }
}

    %op Strategy _If_icmplt(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmplt)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmplt($arg0) }
    }
  
  
  %op Strategy When_If_icmplt(s:Strategy) {
    make(s) { `Sequence(Is_If_icmplt(),s) }
  }

  %op Strategy Is_If_icmplt() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmplt()}
  }
  
%op Strategy Make_If_icmplt(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmplt))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmplt( $new_label) }
}

    %op Strategy _If_icmpge(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmpge)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmpge($arg0) }
    }
  
  
  %op Strategy When_If_icmpge(s:Strategy) {
    make(s) { `Sequence(Is_If_icmpge(),s) }
  }

  %op Strategy Is_If_icmpge() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmpge()}
  }
  
%op Strategy Make_If_icmpge(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmpge))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmpge( $new_label) }
}

    %op Strategy _If_icmpgt(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmpgt)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmpgt($arg0) }
    }
  
  
  %op Strategy When_If_icmpgt(s:Strategy) {
    make(s) { `Sequence(Is_If_icmpgt(),s) }
  }

  %op Strategy Is_If_icmpgt() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmpgt()}
  }
  
%op Strategy Make_If_icmpgt(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmpgt))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmpgt( $new_label) }
}

    %op Strategy _If_icmple(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_icmple)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_icmple($arg0) }
    }
  
  
  %op Strategy When_If_icmple(s:Strategy) {
    make(s) { `Sequence(Is_If_icmple(),s) }
  }

  %op Strategy Is_If_icmple() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_icmple()}
  }
  
%op Strategy Make_If_icmple(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_icmple))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_icmple( $new_label) }
}

    %op Strategy _If_acmpeq(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_acmpeq)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_acmpeq($arg0) }
    }
  
  
  %op Strategy When_If_acmpeq(s:Strategy) {
    make(s) { `Sequence(Is_If_acmpeq(),s) }
  }

  %op Strategy Is_If_acmpeq() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_acmpeq()}
  }
  
%op Strategy Make_If_acmpeq(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_acmpeq))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_acmpeq( $new_label) }
}

    %op Strategy _If_acmpne(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._If_acmpne)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._If_acmpne($arg0) }
    }
  
  
  %op Strategy When_If_acmpne(s:Strategy) {
    make(s) { `Sequence(Is_If_acmpne(),s) }
  }

  %op Strategy Is_If_acmpne() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_If_acmpne()}
  }
  
%op Strategy Make_If_acmpne(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_If_acmpne))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_If_acmpne( $new_label) }
}

    %op Strategy _Goto(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Goto)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Goto($arg0) }
    }
  
  
  %op Strategy When_Goto(s:Strategy) {
    make(s) { `Sequence(Is_Goto(),s) }
  }

  %op Strategy Is_Goto() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Goto()}
  }
  
%op Strategy Make_Goto(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Goto))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Goto( $new_label) }
}

    %op Strategy _Jsr(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Jsr)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Jsr($arg0) }
    }
  
  
  %op Strategy When_Jsr(s:Strategy) {
    make(s) { `Sequence(Is_Jsr(),s) }
  }

  %op Strategy Is_Jsr() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Jsr()}
  }
  
%op Strategy Make_Jsr(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Jsr))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Jsr( $new_label) }
}

    %op Strategy _Ret(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ret)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ret($arg0) }
    }
  
  
  %op Strategy When_Ret(s:Strategy) {
    make(s) { `Sequence(Is_Ret(),s) }
  }

  %op Strategy Is_Ret() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ret()}
  }
  
%op Strategy Make_Ret(_var:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ret))) }

  get_slot(_var, t) { $t._var }
  make( _var) { new tom.library.adt.bytecode.strategy.instruction.Make_Ret( $_var) }
}

    %op Strategy _Tableswitch(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Tableswitch)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.library.adt.bytecode.strategy.instruction._Tableswitch($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Tableswitch(s:Strategy) {
    make(s) { `Sequence(Is_Tableswitch(),s) }
  }

  %op Strategy Is_Tableswitch() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Tableswitch()}
  }
  
%op Strategy Make_Tableswitch(_min:int, _max:int, _dflt:Strategy, _labels:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Tableswitch))) }

  get_slot(_min, t) { $t._min }
  get_slot(_max, t) { $t._max }
  get_slot(_dflt, t) { $t._dflt }
  get_slot(_labels, t) { $t._labels }
  make( _min,  _max,  new_dflt,  new_labels) { new tom.library.adt.bytecode.strategy.instruction.Make_Tableswitch( $_min,  $_max,  $new_dflt,  $new_labels) }
}

    %op Strategy _Lookupswitch(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lookupswitch)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Lookupswitch($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Lookupswitch(s:Strategy) {
    make(s) { `Sequence(Is_Lookupswitch(),s) }
  }

  %op Strategy Is_Lookupswitch() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lookupswitch()}
  }
  
%op Strategy Make_Lookupswitch(_dflt:Strategy, _keys:Strategy, _labels:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lookupswitch))) }

  get_slot(_dflt, t) { $t._dflt }
  get_slot(_keys, t) { $t._keys }
  get_slot(_labels, t) { $t._labels }
  make( new_dflt,  new_keys,  new_labels) { new tom.library.adt.bytecode.strategy.instruction.Make_Lookupswitch( $new_dflt,  $new_keys,  $new_labels) }
}

    %op Strategy _Ireturn() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ireturn)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Ireturn() }
    }
  
  
  %op Strategy When_Ireturn(s:Strategy) {
    make(s) { `Sequence(Is_Ireturn(),s) }
  }

  %op Strategy Is_Ireturn() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ireturn()}
  }
  
%op Strategy Make_Ireturn() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ireturn))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Ireturn() }
}

    %op Strategy _Lreturn() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Lreturn)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Lreturn() }
    }
  
  
  %op Strategy When_Lreturn(s:Strategy) {
    make(s) { `Sequence(Is_Lreturn(),s) }
  }

  %op Strategy Is_Lreturn() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Lreturn()}
  }
  
%op Strategy Make_Lreturn() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Lreturn))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Lreturn() }
}

    %op Strategy _Freturn() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Freturn)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Freturn() }
    }
  
  
  %op Strategy When_Freturn(s:Strategy) {
    make(s) { `Sequence(Is_Freturn(),s) }
  }

  %op Strategy Is_Freturn() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Freturn()}
  }
  
%op Strategy Make_Freturn() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Freturn))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Freturn() }
}

    %op Strategy _Dreturn() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Dreturn)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Dreturn() }
    }
  
  
  %op Strategy When_Dreturn(s:Strategy) {
    make(s) { `Sequence(Is_Dreturn(),s) }
  }

  %op Strategy Is_Dreturn() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Dreturn()}
  }
  
%op Strategy Make_Dreturn() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Dreturn))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Dreturn() }
}

    %op Strategy _Areturn() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Areturn)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Areturn() }
    }
  
  
  %op Strategy When_Areturn(s:Strategy) {
    make(s) { `Sequence(Is_Areturn(),s) }
  }

  %op Strategy Is_Areturn() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Areturn()}
  }
  
%op Strategy Make_Areturn() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Areturn))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Areturn() }
}

    %op Strategy _Return() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Return)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Return() }
    }
  
  
  %op Strategy When_Return(s:Strategy) {
    make(s) { `Sequence(Is_Return(),s) }
  }

  %op Strategy Is_Return() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Return()}
  }
  
%op Strategy Make_Return() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Return))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Return() }
}

    %op Strategy _Getstatic(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Getstatic)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Getstatic($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Getstatic(s:Strategy) {
    make(s) { `Sequence(Is_Getstatic(),s) }
  }

  %op Strategy Is_Getstatic() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Getstatic()}
  }
  
%op Strategy Make_Getstatic(_owner:String, _name:String, _fieldDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Getstatic))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_fieldDesc, t) { $t._fieldDesc }
  make( _owner,  _name,  new_fieldDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Getstatic( $_owner,  $_name,  $new_fieldDesc) }
}

    %op Strategy _Putstatic(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Putstatic)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Putstatic($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Putstatic(s:Strategy) {
    make(s) { `Sequence(Is_Putstatic(),s) }
  }

  %op Strategy Is_Putstatic() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Putstatic()}
  }
  
%op Strategy Make_Putstatic(_owner:String, _name:String, _fieldDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Putstatic))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_fieldDesc, t) { $t._fieldDesc }
  make( _owner,  _name,  new_fieldDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Putstatic( $_owner,  $_name,  $new_fieldDesc) }
}

    %op Strategy _Getfield(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Getfield)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Getfield($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Getfield(s:Strategy) {
    make(s) { `Sequence(Is_Getfield(),s) }
  }

  %op Strategy Is_Getfield() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Getfield()}
  }
  
%op Strategy Make_Getfield(_owner:String, _name:String, _fieldDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Getfield))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_fieldDesc, t) { $t._fieldDesc }
  make( _owner,  _name,  new_fieldDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Getfield( $_owner,  $_name,  $new_fieldDesc) }
}

    %op Strategy _Putfield(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Putfield)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Putfield($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Putfield(s:Strategy) {
    make(s) { `Sequence(Is_Putfield(),s) }
  }

  %op Strategy Is_Putfield() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Putfield()}
  }
  
%op Strategy Make_Putfield(_owner:String, _name:String, _fieldDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Putfield))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_fieldDesc, t) { $t._fieldDesc }
  make( _owner,  _name,  new_fieldDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Putfield( $_owner,  $_name,  $new_fieldDesc) }
}

    %op Strategy _Invokevirtual(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Invokevirtual)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Invokevirtual($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Invokevirtual(s:Strategy) {
    make(s) { `Sequence(Is_Invokevirtual(),s) }
  }

  %op Strategy Is_Invokevirtual() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Invokevirtual()}
  }
  
%op Strategy Make_Invokevirtual(_owner:String, _name:String, _methodDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Invokevirtual))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_methodDesc, t) { $t._methodDesc }
  make( _owner,  _name,  new_methodDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Invokevirtual( $_owner,  $_name,  $new_methodDesc) }
}

    %op Strategy _Invokespecial(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Invokespecial)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Invokespecial($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Invokespecial(s:Strategy) {
    make(s) { `Sequence(Is_Invokespecial(),s) }
  }

  %op Strategy Is_Invokespecial() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Invokespecial()}
  }
  
%op Strategy Make_Invokespecial(_owner:String, _name:String, _methodDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Invokespecial))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_methodDesc, t) { $t._methodDesc }
  make( _owner,  _name,  new_methodDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Invokespecial( $_owner,  $_name,  $new_methodDesc) }
}

    %op Strategy _Invokestatic(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Invokestatic)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Invokestatic($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Invokestatic(s:Strategy) {
    make(s) { `Sequence(Is_Invokestatic(),s) }
  }

  %op Strategy Is_Invokestatic() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Invokestatic()}
  }
  
%op Strategy Make_Invokestatic(_owner:String, _name:String, _methodDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Invokestatic))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_methodDesc, t) { $t._methodDesc }
  make( _owner,  _name,  new_methodDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Invokestatic( $_owner,  $_name,  $new_methodDesc) }
}

    %op Strategy _Invokeinterface(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Invokeinterface)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.instruction._Invokeinterface($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Invokeinterface(s:Strategy) {
    make(s) { `Sequence(Is_Invokeinterface(),s) }
  }

  %op Strategy Is_Invokeinterface() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Invokeinterface()}
  }
  
%op Strategy Make_Invokeinterface(_owner:String, _name:String, _methodDesc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Invokeinterface))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_methodDesc, t) { $t._methodDesc }
  make( _owner,  _name,  new_methodDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Invokeinterface( $_owner,  $_name,  $new_methodDesc) }
}

    %op Strategy _New(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._New)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._New($arg0) }
    }
  
  
  %op Strategy When_New(s:Strategy) {
    make(s) { `Sequence(Is_New(),s) }
  }

  %op Strategy Is_New() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_New()}
  }
  
%op Strategy Make_New(_typeDesc:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_New))) }

  get_slot(_typeDesc, t) { $t._typeDesc }
  make( _typeDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_New( $_typeDesc) }
}

    %op Strategy _Newarray(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Newarray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Newarray($arg0) }
    }
  
  
  %op Strategy When_Newarray(s:Strategy) {
    make(s) { `Sequence(Is_Newarray(),s) }
  }

  %op Strategy Is_Newarray() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Newarray()}
  }
  
%op Strategy Make_Newarray(_operand:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Newarray))) }

  get_slot(_operand, t) { $t._operand }
  make( _operand) { new tom.library.adt.bytecode.strategy.instruction.Make_Newarray( $_operand) }
}

    %op Strategy _Anewarray(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Anewarray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Anewarray($arg0) }
    }
  
  
  %op Strategy When_Anewarray(s:Strategy) {
    make(s) { `Sequence(Is_Anewarray(),s) }
  }

  %op Strategy Is_Anewarray() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Anewarray()}
  }
  
%op Strategy Make_Anewarray(_typeDesc:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Anewarray))) }

  get_slot(_typeDesc, t) { $t._typeDesc }
  make( _typeDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Anewarray( $_typeDesc) }
}

    %op Strategy _Arraylength() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Arraylength)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Arraylength() }
    }
  
  
  %op Strategy When_Arraylength(s:Strategy) {
    make(s) { `Sequence(Is_Arraylength(),s) }
  }

  %op Strategy Is_Arraylength() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Arraylength()}
  }
  
%op Strategy Make_Arraylength() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Arraylength))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Arraylength() }
}

    %op Strategy _Athrow() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Athrow)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Athrow() }
    }
  
  
  %op Strategy When_Athrow(s:Strategy) {
    make(s) { `Sequence(Is_Athrow(),s) }
  }

  %op Strategy Is_Athrow() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Athrow()}
  }
  
%op Strategy Make_Athrow() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Athrow))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Athrow() }
}

    %op Strategy _Checkcast(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Checkcast)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Checkcast($arg0) }
    }
  
  
  %op Strategy When_Checkcast(s:Strategy) {
    make(s) { `Sequence(Is_Checkcast(),s) }
  }

  %op Strategy Is_Checkcast() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Checkcast()}
  }
  
%op Strategy Make_Checkcast(_typeDesc:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Checkcast))) }

  get_slot(_typeDesc, t) { $t._typeDesc }
  make( _typeDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Checkcast( $_typeDesc) }
}

    %op Strategy _Instanceof(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Instanceof)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Instanceof($arg0) }
    }
  
  
  %op Strategy When_Instanceof(s:Strategy) {
    make(s) { `Sequence(Is_Instanceof(),s) }
  }

  %op Strategy Is_Instanceof() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Instanceof()}
  }
  
%op Strategy Make_Instanceof(_typeDesc:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Instanceof))) }

  get_slot(_typeDesc, t) { $t._typeDesc }
  make( _typeDesc) { new tom.library.adt.bytecode.strategy.instruction.Make_Instanceof( $_typeDesc) }
}

    %op Strategy _Monitorenter() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Monitorenter)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Monitorenter() }
    }
  
  
  %op Strategy When_Monitorenter(s:Strategy) {
    make(s) { `Sequence(Is_Monitorenter(),s) }
  }

  %op Strategy Is_Monitorenter() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Monitorenter()}
  }
  
%op Strategy Make_Monitorenter() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Monitorenter))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Monitorenter() }
}

    %op Strategy _Monitorexit() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Monitorexit)))}
      
        make() { new tom.library.adt.bytecode.strategy.instruction._Monitorexit() }
    }
  
  
  %op Strategy When_Monitorexit(s:Strategy) {
    make(s) { `Sequence(Is_Monitorexit(),s) }
  }

  %op Strategy Is_Monitorexit() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Monitorexit()}
  }
  
%op Strategy Make_Monitorexit() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Monitorexit))) }

  make() { new tom.library.adt.bytecode.strategy.instruction.Make_Monitorexit() }
}

    %op Strategy _Multianewarray(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Multianewarray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.instruction._Multianewarray($arg0, $arg1) }
    }
  
  
  %op Strategy When_Multianewarray(s:Strategy) {
    make(s) { `Sequence(Is_Multianewarray(),s) }
  }

  %op Strategy Is_Multianewarray() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Multianewarray()}
  }
  
%op Strategy Make_Multianewarray(_typeDesc:String, _dims:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Multianewarray))) }

  get_slot(_typeDesc, t) { $t._typeDesc }
  get_slot(_dims, t) { $t._dims }
  make( _typeDesc,  _dims) { new tom.library.adt.bytecode.strategy.instruction.Make_Multianewarray( $_typeDesc,  $_dims) }
}

    %op Strategy _Ifnull(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifnull)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifnull($arg0) }
    }
  
  
  %op Strategy When_Ifnull(s:Strategy) {
    make(s) { `Sequence(Is_Ifnull(),s) }
  }

  %op Strategy Is_Ifnull() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifnull()}
  }
  
%op Strategy Make_Ifnull(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifnull))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifnull( $new_label) }
}

    %op Strategy _Ifnonnull(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction._Ifnonnull)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.instruction._Ifnonnull($arg0) }
    }
  
  
  %op Strategy When_Ifnonnull(s:Strategy) {
    make(s) { `Sequence(Is_Ifnonnull(),s) }
  }

  %op Strategy Is_Ifnonnull() {
    make() { new tom.library.adt.bytecode.strategy.instruction.Is_Ifnonnull()}
  }
  
%op Strategy Make_Ifnonnull(_label:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.instruction.Make_Ifnonnull))) }

  get_slot(_label, t) { $t._label }
  make( new_label) { new tom.library.adt.bytecode.strategy.instruction.Make_Ifnonnull( $new_label) }
}

    %op Strategy _VarAccess(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._VarAccess)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.access._VarAccess($arg0) }
    }
  
  
  %op Strategy When_VarAccess(s:Strategy) {
    make(s) { `Sequence(Is_VarAccess(),s) }
  }

  %op Strategy Is_VarAccess() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_VarAccess()}
  }
  
%op Strategy Make_VarAccess(_labelAccess:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_VarAccess))) }

  get_slot(_labelAccess, t) { $t._labelAccess }
  make( _labelAccess) { new tom.library.adt.bytecode.strategy.access.Make_VarAccess( $_labelAccess) }
}

    %op Strategy _EmptyPathAccess() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._EmptyPathAccess)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._EmptyPathAccess() }
    }
  
  
  %op Strategy When_EmptyPathAccess(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathAccess(),s) }
  }

  %op Strategy Is_EmptyPathAccess() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_EmptyPathAccess()}
  }
  
%op Strategy Make_EmptyPathAccess() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_EmptyPathAccess))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_EmptyPathAccess() }
}

    %op Strategy _ConsPathAccess(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._ConsPathAccess)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.access._ConsPathAccess($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathAccess(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathAccess(),s) }
  }

  %op Strategy Is_ConsPathAccess() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_ConsPathAccess()}
  }
  
%op Strategy Make_ConsPathAccess(_HeadPathAccess:int, _TailPathAccess:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_ConsPathAccess))) }

  get_slot(_HeadPathAccess, t) { $t._HeadPathAccess }
  get_slot(_TailPathAccess, t) { $t._TailPathAccess }
  make( _HeadPathAccess,  new_TailPathAccess) { new tom.library.adt.bytecode.strategy.access.Make_ConsPathAccess( $_HeadPathAccess,  $new_TailPathAccess) }
}

    %op Strategy _RefAccess(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._RefAccess)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.access._RefAccess($arg0) }
    }
  
  
  %op Strategy When_RefAccess(s:Strategy) {
    make(s) { `Sequence(Is_RefAccess(),s) }
  }

  %op Strategy Is_RefAccess() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_RefAccess()}
  }
  
%op Strategy Make_RefAccess(_labelAccess:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_RefAccess))) }

  get_slot(_labelAccess, t) { $t._labelAccess }
  make( _labelAccess) { new tom.library.adt.bytecode.strategy.access.Make_RefAccess( $_labelAccess) }
}

    %op Strategy _LabAccess(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._LabAccess)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.access._LabAccess($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabAccess(s:Strategy) {
    make(s) { `Sequence(Is_LabAccess(),s) }
  }

  %op Strategy Is_LabAccess() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_LabAccess()}
  }
  
%op Strategy Make_LabAccess(_labelAccess:String, _termAccess:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_LabAccess))) }

  get_slot(_labelAccess, t) { $t._labelAccess }
  get_slot(_termAccess, t) { $t._termAccess }
  make( _labelAccess,  new_termAccess) { new tom.library.adt.bytecode.strategy.access.Make_LabAccess( $_labelAccess,  $new_termAccess) }
}

    %op Strategy _ABSTRACT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._ABSTRACT)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._ABSTRACT() }
    }
  
  
  %op Strategy When_ABSTRACT(s:Strategy) {
    make(s) { `Sequence(Is_ABSTRACT(),s) }
  }

  %op Strategy Is_ABSTRACT() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_ABSTRACT()}
  }
  
%op Strategy Make_ABSTRACT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_ABSTRACT))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_ABSTRACT() }
}

    %op Strategy _ANNOTATION() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._ANNOTATION)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._ANNOTATION() }
    }
  
  
  %op Strategy When_ANNOTATION(s:Strategy) {
    make(s) { `Sequence(Is_ANNOTATION(),s) }
  }

  %op Strategy Is_ANNOTATION() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_ANNOTATION()}
  }
  
%op Strategy Make_ANNOTATION() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_ANNOTATION))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_ANNOTATION() }
}

    %op Strategy _BRIDGE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._BRIDGE)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._BRIDGE() }
    }
  
  
  %op Strategy When_BRIDGE(s:Strategy) {
    make(s) { `Sequence(Is_BRIDGE(),s) }
  }

  %op Strategy Is_BRIDGE() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_BRIDGE()}
  }
  
%op Strategy Make_BRIDGE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_BRIDGE))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_BRIDGE() }
}

    %op Strategy _DEPRECATED() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._DEPRECATED)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._DEPRECATED() }
    }
  
  
  %op Strategy When_DEPRECATED(s:Strategy) {
    make(s) { `Sequence(Is_DEPRECATED(),s) }
  }

  %op Strategy Is_DEPRECATED() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_DEPRECATED()}
  }
  
%op Strategy Make_DEPRECATED() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_DEPRECATED))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_DEPRECATED() }
}

    %op Strategy _ENUM() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._ENUM)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._ENUM() }
    }
  
  
  %op Strategy When_ENUM(s:Strategy) {
    make(s) { `Sequence(Is_ENUM(),s) }
  }

  %op Strategy Is_ENUM() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_ENUM()}
  }
  
%op Strategy Make_ENUM() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_ENUM))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_ENUM() }
}

    %op Strategy _FINAL() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._FINAL)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._FINAL() }
    }
  
  
  %op Strategy When_FINAL(s:Strategy) {
    make(s) { `Sequence(Is_FINAL(),s) }
  }

  %op Strategy Is_FINAL() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_FINAL()}
  }
  
%op Strategy Make_FINAL() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_FINAL))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_FINAL() }
}

    %op Strategy _INTERFACE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._INTERFACE)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._INTERFACE() }
    }
  
  
  %op Strategy When_INTERFACE(s:Strategy) {
    make(s) { `Sequence(Is_INTERFACE(),s) }
  }

  %op Strategy Is_INTERFACE() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_INTERFACE()}
  }
  
%op Strategy Make_INTERFACE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_INTERFACE))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_INTERFACE() }
}

    %op Strategy _NATIVE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._NATIVE)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._NATIVE() }
    }
  
  
  %op Strategy When_NATIVE(s:Strategy) {
    make(s) { `Sequence(Is_NATIVE(),s) }
  }

  %op Strategy Is_NATIVE() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_NATIVE()}
  }
  
%op Strategy Make_NATIVE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_NATIVE))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_NATIVE() }
}

    %op Strategy _PRIVATE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._PRIVATE)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._PRIVATE() }
    }
  
  
  %op Strategy When_PRIVATE(s:Strategy) {
    make(s) { `Sequence(Is_PRIVATE(),s) }
  }

  %op Strategy Is_PRIVATE() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_PRIVATE()}
  }
  
%op Strategy Make_PRIVATE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_PRIVATE))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_PRIVATE() }
}

    %op Strategy _PROTECTED() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._PROTECTED)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._PROTECTED() }
    }
  
  
  %op Strategy When_PROTECTED(s:Strategy) {
    make(s) { `Sequence(Is_PROTECTED(),s) }
  }

  %op Strategy Is_PROTECTED() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_PROTECTED()}
  }
  
%op Strategy Make_PROTECTED() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_PROTECTED))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_PROTECTED() }
}

    %op Strategy _PUBLIC() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._PUBLIC)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._PUBLIC() }
    }
  
  
  %op Strategy When_PUBLIC(s:Strategy) {
    make(s) { `Sequence(Is_PUBLIC(),s) }
  }

  %op Strategy Is_PUBLIC() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_PUBLIC()}
  }
  
%op Strategy Make_PUBLIC() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_PUBLIC))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_PUBLIC() }
}

    %op Strategy _STATIC() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._STATIC)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._STATIC() }
    }
  
  
  %op Strategy When_STATIC(s:Strategy) {
    make(s) { `Sequence(Is_STATIC(),s) }
  }

  %op Strategy Is_STATIC() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_STATIC()}
  }
  
%op Strategy Make_STATIC() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_STATIC))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_STATIC() }
}

    %op Strategy _STRICT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._STRICT)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._STRICT() }
    }
  
  
  %op Strategy When_STRICT(s:Strategy) {
    make(s) { `Sequence(Is_STRICT(),s) }
  }

  %op Strategy Is_STRICT() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_STRICT()}
  }
  
%op Strategy Make_STRICT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_STRICT))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_STRICT() }
}

    %op Strategy _SUPER() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._SUPER)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._SUPER() }
    }
  
  
  %op Strategy When_SUPER(s:Strategy) {
    make(s) { `Sequence(Is_SUPER(),s) }
  }

  %op Strategy Is_SUPER() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_SUPER()}
  }
  
%op Strategy Make_SUPER() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_SUPER))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_SUPER() }
}

    %op Strategy _SYNCHRONIZED() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._SYNCHRONIZED)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._SYNCHRONIZED() }
    }
  
  
  %op Strategy When_SYNCHRONIZED(s:Strategy) {
    make(s) { `Sequence(Is_SYNCHRONIZED(),s) }
  }

  %op Strategy Is_SYNCHRONIZED() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_SYNCHRONIZED()}
  }
  
%op Strategy Make_SYNCHRONIZED() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_SYNCHRONIZED))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_SYNCHRONIZED() }
}

    %op Strategy _SYNTHETIC() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._SYNTHETIC)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._SYNTHETIC() }
    }
  
  
  %op Strategy When_SYNTHETIC(s:Strategy) {
    make(s) { `Sequence(Is_SYNTHETIC(),s) }
  }

  %op Strategy Is_SYNTHETIC() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_SYNTHETIC()}
  }
  
%op Strategy Make_SYNTHETIC() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_SYNTHETIC))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_SYNTHETIC() }
}

    %op Strategy _TRANSIENT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._TRANSIENT)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._TRANSIENT() }
    }
  
  
  %op Strategy When_TRANSIENT(s:Strategy) {
    make(s) { `Sequence(Is_TRANSIENT(),s) }
  }

  %op Strategy Is_TRANSIENT() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_TRANSIENT()}
  }
  
%op Strategy Make_TRANSIENT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_TRANSIENT))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_TRANSIENT() }
}

    %op Strategy _VARARGS() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._VARARGS)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._VARARGS() }
    }
  
  
  %op Strategy When_VARARGS(s:Strategy) {
    make(s) { `Sequence(Is_VARARGS(),s) }
  }

  %op Strategy Is_VARARGS() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_VARARGS()}
  }
  
%op Strategy Make_VARARGS() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_VARARGS))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_VARARGS() }
}

    %op Strategy _VOLATILE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access._VOLATILE)))}
      
        make() { new tom.library.adt.bytecode.strategy.access._VOLATILE() }
    }
  
  
  %op Strategy When_VOLATILE(s:Strategy) {
    make(s) { `Sequence(Is_VOLATILE(),s) }
  }

  %op Strategy Is_VOLATILE() {
    make() { new tom.library.adt.bytecode.strategy.access.Is_VOLATILE()}
  }
  
%op Strategy Make_VOLATILE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.access.Make_VOLATILE))) }

  make() { new tom.library.adt.bytecode.strategy.access.Make_VOLATILE() }
}

    %op Strategy _VarTypeNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._VarTypeNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.typenode._VarTypeNode($arg0) }
    }
  
  
  %op Strategy When_VarTypeNode(s:Strategy) {
    make(s) { `Sequence(Is_VarTypeNode(),s) }
  }

  %op Strategy Is_VarTypeNode() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_VarTypeNode()}
  }
  
%op Strategy Make_VarTypeNode(_labelTypeNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_VarTypeNode))) }

  get_slot(_labelTypeNode, t) { $t._labelTypeNode }
  make( _labelTypeNode) { new tom.library.adt.bytecode.strategy.typenode.Make_VarTypeNode( $_labelTypeNode) }
}

    %op Strategy _EmptyPathTypeNode() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._EmptyPathTypeNode)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._EmptyPathTypeNode() }
    }
  
  
  %op Strategy When_EmptyPathTypeNode(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathTypeNode(),s) }
  }

  %op Strategy Is_EmptyPathTypeNode() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_EmptyPathTypeNode()}
  }
  
%op Strategy Make_EmptyPathTypeNode() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_EmptyPathTypeNode))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_EmptyPathTypeNode() }
}

    %op Strategy _ConsPathTypeNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._ConsPathTypeNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.typenode._ConsPathTypeNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathTypeNode(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathTypeNode(),s) }
  }

  %op Strategy Is_ConsPathTypeNode() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_ConsPathTypeNode()}
  }
  
%op Strategy Make_ConsPathTypeNode(_HeadPathTypeNode:int, _TailPathTypeNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_ConsPathTypeNode))) }

  get_slot(_HeadPathTypeNode, t) { $t._HeadPathTypeNode }
  get_slot(_TailPathTypeNode, t) { $t._TailPathTypeNode }
  make( _HeadPathTypeNode,  new_TailPathTypeNode) { new tom.library.adt.bytecode.strategy.typenode.Make_ConsPathTypeNode( $_HeadPathTypeNode,  $new_TailPathTypeNode) }
}

    %op Strategy _RefTypeNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._RefTypeNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.typenode._RefTypeNode($arg0) }
    }
  
  
  %op Strategy When_RefTypeNode(s:Strategy) {
    make(s) { `Sequence(Is_RefTypeNode(),s) }
  }

  %op Strategy Is_RefTypeNode() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_RefTypeNode()}
  }
  
%op Strategy Make_RefTypeNode(_labelTypeNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_RefTypeNode))) }

  get_slot(_labelTypeNode, t) { $t._labelTypeNode }
  make( _labelTypeNode) { new tom.library.adt.bytecode.strategy.typenode.Make_RefTypeNode( $_labelTypeNode) }
}

    %op Strategy _LabTypeNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._LabTypeNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.typenode._LabTypeNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabTypeNode(s:Strategy) {
    make(s) { `Sequence(Is_LabTypeNode(),s) }
  }

  %op Strategy Is_LabTypeNode() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_LabTypeNode()}
  }
  
%op Strategy Make_LabTypeNode(_labelTypeNode:String, _termTypeNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_LabTypeNode))) }

  get_slot(_labelTypeNode, t) { $t._labelTypeNode }
  get_slot(_termTypeNode, t) { $t._termTypeNode }
  make( _labelTypeNode,  new_termTypeNode) { new tom.library.adt.bytecode.strategy.typenode.Make_LabTypeNode( $_labelTypeNode,  $new_termTypeNode) }
}

    %op Strategy _ARRAY() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._ARRAY)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._ARRAY() }
    }
  
  
  %op Strategy When_ARRAY(s:Strategy) {
    make(s) { `Sequence(Is_ARRAY(),s) }
  }

  %op Strategy Is_ARRAY() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_ARRAY()}
  }
  
%op Strategy Make_ARRAY() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_ARRAY))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_ARRAY() }
}

    %op Strategy _BOOLEAN() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._BOOLEAN)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._BOOLEAN() }
    }
  
  
  %op Strategy When_BOOLEAN(s:Strategy) {
    make(s) { `Sequence(Is_BOOLEAN(),s) }
  }

  %op Strategy Is_BOOLEAN() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_BOOLEAN()}
  }
  
%op Strategy Make_BOOLEAN() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_BOOLEAN))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_BOOLEAN() }
}

    %op Strategy _BYTE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._BYTE)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._BYTE() }
    }
  
  
  %op Strategy When_BYTE(s:Strategy) {
    make(s) { `Sequence(Is_BYTE(),s) }
  }

  %op Strategy Is_BYTE() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_BYTE()}
  }
  
%op Strategy Make_BYTE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_BYTE))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_BYTE() }
}

    %op Strategy _CHAR() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._CHAR)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._CHAR() }
    }
  
  
  %op Strategy When_CHAR(s:Strategy) {
    make(s) { `Sequence(Is_CHAR(),s) }
  }

  %op Strategy Is_CHAR() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_CHAR()}
  }
  
%op Strategy Make_CHAR() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_CHAR))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_CHAR() }
}

    %op Strategy _DOUBLE() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._DOUBLE)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._DOUBLE() }
    }
  
  
  %op Strategy When_DOUBLE(s:Strategy) {
    make(s) { `Sequence(Is_DOUBLE(),s) }
  }

  %op Strategy Is_DOUBLE() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_DOUBLE()}
  }
  
%op Strategy Make_DOUBLE() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_DOUBLE))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_DOUBLE() }
}

    %op Strategy _FLOAT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._FLOAT)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._FLOAT() }
    }
  
  
  %op Strategy When_FLOAT(s:Strategy) {
    make(s) { `Sequence(Is_FLOAT(),s) }
  }

  %op Strategy Is_FLOAT() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_FLOAT()}
  }
  
%op Strategy Make_FLOAT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_FLOAT))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_FLOAT() }
}

    %op Strategy _INT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._INT)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._INT() }
    }
  
  
  %op Strategy When_INT(s:Strategy) {
    make(s) { `Sequence(Is_INT(),s) }
  }

  %op Strategy Is_INT() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_INT()}
  }
  
%op Strategy Make_INT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_INT))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_INT() }
}

    %op Strategy _LONG() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._LONG)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._LONG() }
    }
  
  
  %op Strategy When_LONG(s:Strategy) {
    make(s) { `Sequence(Is_LONG(),s) }
  }

  %op Strategy Is_LONG() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_LONG()}
  }
  
%op Strategy Make_LONG() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_LONG))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_LONG() }
}

    %op Strategy _OBJECT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._OBJECT)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._OBJECT() }
    }
  
  
  %op Strategy When_OBJECT(s:Strategy) {
    make(s) { `Sequence(Is_OBJECT(),s) }
  }

  %op Strategy Is_OBJECT() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_OBJECT()}
  }
  
%op Strategy Make_OBJECT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_OBJECT))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_OBJECT() }
}

    %op Strategy _SHORT() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._SHORT)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._SHORT() }
    }
  
  
  %op Strategy When_SHORT(s:Strategy) {
    make(s) { `Sequence(Is_SHORT(),s) }
  }

  %op Strategy Is_SHORT() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_SHORT()}
  }
  
%op Strategy Make_SHORT() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_SHORT))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_SHORT() }
}

    %op Strategy _VOID() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode._VOID)))}
      
        make() { new tom.library.adt.bytecode.strategy.typenode._VOID() }
    }
  
  
  %op Strategy When_VOID(s:Strategy) {
    make(s) { `Sequence(Is_VOID(),s) }
  }

  %op Strategy Is_VOID() {
    make() { new tom.library.adt.bytecode.strategy.typenode.Is_VOID()}
  }
  
%op Strategy Make_VOID() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.typenode.Make_VOID))) }

  make() { new tom.library.adt.bytecode.strategy.typenode.Make_VOID() }
}

    %op Strategy _VarMethod(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._VarMethod)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.method._VarMethod($arg0) }
    }
  
  
  %op Strategy When_VarMethod(s:Strategy) {
    make(s) { `Sequence(Is_VarMethod(),s) }
  }

  %op Strategy Is_VarMethod() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_VarMethod()}
  }
  
%op Strategy Make_VarMethod(_labelMethod:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_VarMethod))) }

  get_slot(_labelMethod, t) { $t._labelMethod }
  make( _labelMethod) { new tom.library.adt.bytecode.strategy.method.Make_VarMethod( $_labelMethod) }
}

    %op Strategy _EmptyPathMethod() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._EmptyPathMethod)))}
      
        make() { new tom.library.adt.bytecode.strategy.method._EmptyPathMethod() }
    }
  
  
  %op Strategy When_EmptyPathMethod(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathMethod(),s) }
  }

  %op Strategy Is_EmptyPathMethod() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_EmptyPathMethod()}
  }
  
%op Strategy Make_EmptyPathMethod() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_EmptyPathMethod))) }

  make() { new tom.library.adt.bytecode.strategy.method.Make_EmptyPathMethod() }
}

    %op Strategy _ConsPathMethod(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._ConsPathMethod)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.method._ConsPathMethod($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathMethod(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathMethod(),s) }
  }

  %op Strategy Is_ConsPathMethod() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_ConsPathMethod()}
  }
  
%op Strategy Make_ConsPathMethod(_HeadPathMethod:int, _TailPathMethod:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_ConsPathMethod))) }

  get_slot(_HeadPathMethod, t) { $t._HeadPathMethod }
  get_slot(_TailPathMethod, t) { $t._TailPathMethod }
  make( _HeadPathMethod,  new_TailPathMethod) { new tom.library.adt.bytecode.strategy.method.Make_ConsPathMethod( $_HeadPathMethod,  $new_TailPathMethod) }
}

    %op Strategy _RefMethod(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._RefMethod)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.method._RefMethod($arg0) }
    }
  
  
  %op Strategy When_RefMethod(s:Strategy) {
    make(s) { `Sequence(Is_RefMethod(),s) }
  }

  %op Strategy Is_RefMethod() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_RefMethod()}
  }
  
%op Strategy Make_RefMethod(_labelMethod:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_RefMethod))) }

  get_slot(_labelMethod, t) { $t._labelMethod }
  make( _labelMethod) { new tom.library.adt.bytecode.strategy.method.Make_RefMethod( $_labelMethod) }
}

    %op Strategy _LabMethod(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._LabMethod)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.method._LabMethod($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabMethod(s:Strategy) {
    make(s) { `Sequence(Is_LabMethod(),s) }
  }

  %op Strategy Is_LabMethod() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_LabMethod()}
  }
  
%op Strategy Make_LabMethod(_labelMethod:String, _termMethod:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_LabMethod))) }

  get_slot(_labelMethod, t) { $t._labelMethod }
  get_slot(_termMethod, t) { $t._termMethod }
  make( _labelMethod,  new_termMethod) { new tom.library.adt.bytecode.strategy.method.Make_LabMethod( $_labelMethod,  $new_termMethod) }
}

    %op Strategy _Method(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method._Method)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.method._Method($arg0, $arg1) }
    }
  
  
  %op Strategy When_Method(s:Strategy) {
    make(s) { `Sequence(Is_Method(),s) }
  }

  %op Strategy Is_Method() {
    make() { new tom.library.adt.bytecode.strategy.method.Is_Method()}
  }
  
%op Strategy Make_Method(_info:Strategy, _code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.method.Make_Method))) }

  get_slot(_info, t) { $t._info }
  get_slot(_code, t) { $t._code }
  make( new_info,  new_code) { new tom.library.adt.bytecode.strategy.method.Make_Method( $new_info,  $new_code) }
}

    %op Strategy _VarInnerClassInfoList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._VarInnerClassInfoList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.innerclassinfolist._VarInnerClassInfoList($arg0) }
    }
  
  
  %op Strategy When_VarInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_VarInnerClassInfoList(),s) }
  }

  %op Strategy Is_VarInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_VarInnerClassInfoList()}
  }
  
%op Strategy Make_VarInnerClassInfoList(_labelInnerClassInfoList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_VarInnerClassInfoList))) }

  get_slot(_labelInnerClassInfoList, t) { $t._labelInnerClassInfoList }
  make( _labelInnerClassInfoList) { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_VarInnerClassInfoList( $_labelInnerClassInfoList) }
}

    %op Strategy _EmptyPathInnerClassInfoList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._EmptyPathInnerClassInfoList)))}
      
        make() { new tom.library.adt.bytecode.strategy.innerclassinfolist._EmptyPathInnerClassInfoList() }
    }
  
  
  %op Strategy When_EmptyPathInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathInnerClassInfoList(),s) }
  }

  %op Strategy Is_EmptyPathInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_EmptyPathInnerClassInfoList()}
  }
  
%op Strategy Make_EmptyPathInnerClassInfoList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_EmptyPathInnerClassInfoList))) }

  make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_EmptyPathInnerClassInfoList() }
}

    %op Strategy _ConsPathInnerClassInfoList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._ConsPathInnerClassInfoList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.innerclassinfolist._ConsPathInnerClassInfoList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathInnerClassInfoList(),s) }
  }

  %op Strategy Is_ConsPathInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_ConsPathInnerClassInfoList()}
  }
  
%op Strategy Make_ConsPathInnerClassInfoList(_HeadPathInnerClassInfoList:int, _TailPathInnerClassInfoList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_ConsPathInnerClassInfoList))) }

  get_slot(_HeadPathInnerClassInfoList, t) { $t._HeadPathInnerClassInfoList }
  get_slot(_TailPathInnerClassInfoList, t) { $t._TailPathInnerClassInfoList }
  make( _HeadPathInnerClassInfoList,  new_TailPathInnerClassInfoList) { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_ConsPathInnerClassInfoList( $_HeadPathInnerClassInfoList,  $new_TailPathInnerClassInfoList) }
}

    %op Strategy _RefInnerClassInfoList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._RefInnerClassInfoList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.innerclassinfolist._RefInnerClassInfoList($arg0) }
    }
  
  
  %op Strategy When_RefInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_RefInnerClassInfoList(),s) }
  }

  %op Strategy Is_RefInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_RefInnerClassInfoList()}
  }
  
%op Strategy Make_RefInnerClassInfoList(_labelInnerClassInfoList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_RefInnerClassInfoList))) }

  get_slot(_labelInnerClassInfoList, t) { $t._labelInnerClassInfoList }
  make( _labelInnerClassInfoList) { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_RefInnerClassInfoList( $_labelInnerClassInfoList) }
}

    %op Strategy _LabInnerClassInfoList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._LabInnerClassInfoList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.innerclassinfolist._LabInnerClassInfoList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_LabInnerClassInfoList(),s) }
  }

  %op Strategy Is_LabInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_LabInnerClassInfoList()}
  }
  
%op Strategy Make_LabInnerClassInfoList(_labelInnerClassInfoList:String, _termInnerClassInfoList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_LabInnerClassInfoList))) }

  get_slot(_labelInnerClassInfoList, t) { $t._labelInnerClassInfoList }
  get_slot(_termInnerClassInfoList, t) { $t._termInnerClassInfoList }
  make( _labelInnerClassInfoList,  new_termInnerClassInfoList) { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_LabInnerClassInfoList( $_labelInnerClassInfoList,  $new_termInnerClassInfoList) }
}

    %op Strategy _EmptyInnerClassInfoList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._EmptyInnerClassInfoList)))}
      
        make() { new tom.library.adt.bytecode.strategy.innerclassinfolist._EmptyInnerClassInfoList() }
    }
  
  
  %op Strategy When_EmptyInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyInnerClassInfoList(),s) }
  }

  %op Strategy Is_EmptyInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_EmptyInnerClassInfoList()}
  }
  
%op Strategy Make_EmptyInnerClassInfoList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_EmptyInnerClassInfoList))) }

  make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_EmptyInnerClassInfoList() }
}

    %op Strategy _ConsInnerClassInfoList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist._ConsInnerClassInfoList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.innerclassinfolist._ConsInnerClassInfoList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsInnerClassInfoList(s:Strategy) {
    make(s) { `Sequence(Is_ConsInnerClassInfoList(),s) }
  }

  %op Strategy Is_ConsInnerClassInfoList() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfolist.Is_ConsInnerClassInfoList()}
  }
  
%op Strategy Make_ConsInnerClassInfoList(_HeadInnerClassInfoList:Strategy, _TailInnerClassInfoList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfolist.Make_ConsInnerClassInfoList))) }

  get_slot(_HeadInnerClassInfoList, t) { $t._HeadInnerClassInfoList }
  get_slot(_TailInnerClassInfoList, t) { $t._TailInnerClassInfoList }
  make( new_HeadInnerClassInfoList,  new_TailInnerClassInfoList) { new tom.library.adt.bytecode.strategy.innerclassinfolist.Make_ConsInnerClassInfoList( $new_HeadInnerClassInfoList,  $new_TailInnerClassInfoList) }
}

    %op Strategy _VarHandler(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._VarHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.handler._VarHandler($arg0) }
    }
  
  
  %op Strategy When_VarHandler(s:Strategy) {
    make(s) { `Sequence(Is_VarHandler(),s) }
  }

  %op Strategy Is_VarHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_VarHandler()}
  }
  
%op Strategy Make_VarHandler(_labelHandler:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_VarHandler))) }

  get_slot(_labelHandler, t) { $t._labelHandler }
  make( _labelHandler) { new tom.library.adt.bytecode.strategy.handler.Make_VarHandler( $_labelHandler) }
}

    %op Strategy _EmptyPathHandler() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._EmptyPathHandler)))}
      
        make() { new tom.library.adt.bytecode.strategy.handler._EmptyPathHandler() }
    }
  
  
  %op Strategy When_EmptyPathHandler(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathHandler(),s) }
  }

  %op Strategy Is_EmptyPathHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_EmptyPathHandler()}
  }
  
%op Strategy Make_EmptyPathHandler() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_EmptyPathHandler))) }

  make() { new tom.library.adt.bytecode.strategy.handler.Make_EmptyPathHandler() }
}

    %op Strategy _ConsPathHandler(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._ConsPathHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.handler._ConsPathHandler($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathHandler(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathHandler(),s) }
  }

  %op Strategy Is_ConsPathHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_ConsPathHandler()}
  }
  
%op Strategy Make_ConsPathHandler(_HeadPathHandler:int, _TailPathHandler:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_ConsPathHandler))) }

  get_slot(_HeadPathHandler, t) { $t._HeadPathHandler }
  get_slot(_TailPathHandler, t) { $t._TailPathHandler }
  make( _HeadPathHandler,  new_TailPathHandler) { new tom.library.adt.bytecode.strategy.handler.Make_ConsPathHandler( $_HeadPathHandler,  $new_TailPathHandler) }
}

    %op Strategy _RefHandler(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._RefHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.handler._RefHandler($arg0) }
    }
  
  
  %op Strategy When_RefHandler(s:Strategy) {
    make(s) { `Sequence(Is_RefHandler(),s) }
  }

  %op Strategy Is_RefHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_RefHandler()}
  }
  
%op Strategy Make_RefHandler(_labelHandler:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_RefHandler))) }

  get_slot(_labelHandler, t) { $t._labelHandler }
  make( _labelHandler) { new tom.library.adt.bytecode.strategy.handler.Make_RefHandler( $_labelHandler) }
}

    %op Strategy _LabHandler(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._LabHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.handler._LabHandler($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabHandler(s:Strategy) {
    make(s) { `Sequence(Is_LabHandler(),s) }
  }

  %op Strategy Is_LabHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_LabHandler()}
  }
  
%op Strategy Make_LabHandler(_labelHandler:String, _termHandler:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_LabHandler))) }

  get_slot(_labelHandler, t) { $t._labelHandler }
  get_slot(_termHandler, t) { $t._termHandler }
  make( _labelHandler,  new_termHandler) { new tom.library.adt.bytecode.strategy.handler.Make_LabHandler( $_labelHandler,  $new_termHandler) }
}

    %op Strategy _CatchHandler(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._CatchHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.handler._CatchHandler($arg0, $arg1) }
    }
  
  
  %op Strategy When_CatchHandler(s:Strategy) {
    make(s) { `Sequence(Is_CatchHandler(),s) }
  }

  %op Strategy Is_CatchHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_CatchHandler()}
  }
  
%op Strategy Make_CatchHandler(_handler:Strategy, _type:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_CatchHandler))) }

  get_slot(_handler, t) { $t._handler }
  get_slot(_type, t) { $t._type }
  make( new_handler,  _type) { new tom.library.adt.bytecode.strategy.handler.Make_CatchHandler( $new_handler,  $_type) }
}

    %op Strategy _FinallyHandler(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler._FinallyHandler)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.handler._FinallyHandler($arg0) }
    }
  
  
  %op Strategy When_FinallyHandler(s:Strategy) {
    make(s) { `Sequence(Is_FinallyHandler(),s) }
  }

  %op Strategy Is_FinallyHandler() {
    make() { new tom.library.adt.bytecode.strategy.handler.Is_FinallyHandler()}
  }
  
%op Strategy Make_FinallyHandler(_handler:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.handler.Make_FinallyHandler))) }

  get_slot(_handler, t) { $t._handler }
  make( new_handler) { new tom.library.adt.bytecode.strategy.handler.Make_FinallyHandler( $new_handler) }
}

    %op Strategy _VarMethodCode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._VarMethodCode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodcode._VarMethodCode($arg0) }
    }
  
  
  %op Strategy When_VarMethodCode(s:Strategy) {
    make(s) { `Sequence(Is_VarMethodCode(),s) }
  }

  %op Strategy Is_VarMethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_VarMethodCode()}
  }
  
%op Strategy Make_VarMethodCode(_labelMethodCode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_VarMethodCode))) }

  get_slot(_labelMethodCode, t) { $t._labelMethodCode }
  make( _labelMethodCode) { new tom.library.adt.bytecode.strategy.methodcode.Make_VarMethodCode( $_labelMethodCode) }
}

    %op Strategy _EmptyPathMethodCode() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._EmptyPathMethodCode)))}
      
        make() { new tom.library.adt.bytecode.strategy.methodcode._EmptyPathMethodCode() }
    }
  
  
  %op Strategy When_EmptyPathMethodCode(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathMethodCode(),s) }
  }

  %op Strategy Is_EmptyPathMethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_EmptyPathMethodCode()}
  }
  
%op Strategy Make_EmptyPathMethodCode() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_EmptyPathMethodCode))) }

  make() { new tom.library.adt.bytecode.strategy.methodcode.Make_EmptyPathMethodCode() }
}

    %op Strategy _ConsPathMethodCode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._ConsPathMethodCode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodcode._ConsPathMethodCode($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathMethodCode(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathMethodCode(),s) }
  }

  %op Strategy Is_ConsPathMethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_ConsPathMethodCode()}
  }
  
%op Strategy Make_ConsPathMethodCode(_HeadPathMethodCode:int, _TailPathMethodCode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_ConsPathMethodCode))) }

  get_slot(_HeadPathMethodCode, t) { $t._HeadPathMethodCode }
  get_slot(_TailPathMethodCode, t) { $t._TailPathMethodCode }
  make( _HeadPathMethodCode,  new_TailPathMethodCode) { new tom.library.adt.bytecode.strategy.methodcode.Make_ConsPathMethodCode( $_HeadPathMethodCode,  $new_TailPathMethodCode) }
}

    %op Strategy _RefMethodCode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._RefMethodCode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methodcode._RefMethodCode($arg0) }
    }
  
  
  %op Strategy When_RefMethodCode(s:Strategy) {
    make(s) { `Sequence(Is_RefMethodCode(),s) }
  }

  %op Strategy Is_RefMethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_RefMethodCode()}
  }
  
%op Strategy Make_RefMethodCode(_labelMethodCode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_RefMethodCode))) }

  get_slot(_labelMethodCode, t) { $t._labelMethodCode }
  make( _labelMethodCode) { new tom.library.adt.bytecode.strategy.methodcode.Make_RefMethodCode( $_labelMethodCode) }
}

    %op Strategy _LabMethodCode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._LabMethodCode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methodcode._LabMethodCode($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabMethodCode(s:Strategy) {
    make(s) { `Sequence(Is_LabMethodCode(),s) }
  }

  %op Strategy Is_LabMethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_LabMethodCode()}
  }
  
%op Strategy Make_LabMethodCode(_labelMethodCode:String, _termMethodCode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_LabMethodCode))) }

  get_slot(_labelMethodCode, t) { $t._labelMethodCode }
  get_slot(_termMethodCode, t) { $t._termMethodCode }
  make( _labelMethodCode,  new_termMethodCode) { new tom.library.adt.bytecode.strategy.methodcode.Make_LabMethodCode( $_labelMethodCode,  $new_termMethodCode) }
}

    %op Strategy _MethodCode(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._MethodCode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.methodcode._MethodCode($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_MethodCode(s:Strategy) {
    make(s) { `Sequence(Is_MethodCode(),s) }
  }

  %op Strategy Is_MethodCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_MethodCode()}
  }
  
%op Strategy Make_MethodCode(_instructions:Strategy, _localVariables:Strategy, _tryCatchBlocks:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_MethodCode))) }

  get_slot(_instructions, t) { $t._instructions }
  get_slot(_localVariables, t) { $t._localVariables }
  get_slot(_tryCatchBlocks, t) { $t._tryCatchBlocks }
  make( new_instructions,  new_localVariables,  new_tryCatchBlocks) { new tom.library.adt.bytecode.strategy.methodcode.Make_MethodCode( $new_instructions,  $new_localVariables,  $new_tryCatchBlocks) }
}

    %op Strategy _EmptyCode() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode._EmptyCode)))}
      
        make() { new tom.library.adt.bytecode.strategy.methodcode._EmptyCode() }
    }
  
  
  %op Strategy When_EmptyCode(s:Strategy) {
    make(s) { `Sequence(Is_EmptyCode(),s) }
  }

  %op Strategy Is_EmptyCode() {
    make() { new tom.library.adt.bytecode.strategy.methodcode.Is_EmptyCode()}
  }
  
%op Strategy Make_EmptyCode() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methodcode.Make_EmptyCode))) }

  make() { new tom.library.adt.bytecode.strategy.methodcode.Make_EmptyCode() }
}

    %op Strategy _VarValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._VarValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._VarValue($arg0) }
    }
  
  
  %op Strategy When_VarValue(s:Strategy) {
    make(s) { `Sequence(Is_VarValue(),s) }
  }

  %op Strategy Is_VarValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_VarValue()}
  }
  
%op Strategy Make_VarValue(_labelValue:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_VarValue))) }

  get_slot(_labelValue, t) { $t._labelValue }
  make( _labelValue) { new tom.library.adt.bytecode.strategy.value.Make_VarValue( $_labelValue) }
}

    %op Strategy _EmptyPathValue() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._EmptyPathValue)))}
      
        make() { new tom.library.adt.bytecode.strategy.value._EmptyPathValue() }
    }
  
  
  %op Strategy When_EmptyPathValue(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathValue(),s) }
  }

  %op Strategy Is_EmptyPathValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_EmptyPathValue()}
  }
  
%op Strategy Make_EmptyPathValue() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_EmptyPathValue))) }

  make() { new tom.library.adt.bytecode.strategy.value.Make_EmptyPathValue() }
}

    %op Strategy _ConsPathValue(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._ConsPathValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.value._ConsPathValue($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathValue(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathValue(),s) }
  }

  %op Strategy Is_ConsPathValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_ConsPathValue()}
  }
  
%op Strategy Make_ConsPathValue(_HeadPathValue:int, _TailPathValue:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_ConsPathValue))) }

  get_slot(_HeadPathValue, t) { $t._HeadPathValue }
  get_slot(_TailPathValue, t) { $t._TailPathValue }
  make( _HeadPathValue,  new_TailPathValue) { new tom.library.adt.bytecode.strategy.value.Make_ConsPathValue( $_HeadPathValue,  $new_TailPathValue) }
}

    %op Strategy _RefValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._RefValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._RefValue($arg0) }
    }
  
  
  %op Strategy When_RefValue(s:Strategy) {
    make(s) { `Sequence(Is_RefValue(),s) }
  }

  %op Strategy Is_RefValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_RefValue()}
  }
  
%op Strategy Make_RefValue(_labelValue:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_RefValue))) }

  get_slot(_labelValue, t) { $t._labelValue }
  make( _labelValue) { new tom.library.adt.bytecode.strategy.value.Make_RefValue( $_labelValue) }
}

    %op Strategy _LabValue(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._LabValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.value._LabValue($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabValue(s:Strategy) {
    make(s) { `Sequence(Is_LabValue(),s) }
  }

  %op Strategy Is_LabValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_LabValue()}
  }
  
%op Strategy Make_LabValue(_labelValue:String, _termValue:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_LabValue))) }

  get_slot(_labelValue, t) { $t._labelValue }
  get_slot(_termValue, t) { $t._termValue }
  make( _labelValue,  new_termValue) { new tom.library.adt.bytecode.strategy.value.Make_LabValue( $_labelValue,  $new_termValue) }
}

    %op Strategy _StringValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._StringValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._StringValue($arg0) }
    }
  
  
  %op Strategy When_StringValue(s:Strategy) {
    make(s) { `Sequence(Is_StringValue(),s) }
  }

  %op Strategy Is_StringValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_StringValue()}
  }
  
%op Strategy Make_StringValue(_s:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_StringValue))) }

  get_slot(_s, t) { $t._s }
  make( _s) { new tom.library.adt.bytecode.strategy.value.Make_StringValue( $_s) }
}

    %op Strategy _IntValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._IntValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._IntValue($arg0) }
    }
  
  
  %op Strategy When_IntValue(s:Strategy) {
    make(s) { `Sequence(Is_IntValue(),s) }
  }

  %op Strategy Is_IntValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_IntValue()}
  }
  
%op Strategy Make_IntValue(_i:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_IntValue))) }

  get_slot(_i, t) { $t._i }
  make( _i) { new tom.library.adt.bytecode.strategy.value.Make_IntValue( $_i) }
}

    %op Strategy _LongValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._LongValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._LongValue($arg0) }
    }
  
  
  %op Strategy When_LongValue(s:Strategy) {
    make(s) { `Sequence(Is_LongValue(),s) }
  }

  %op Strategy Is_LongValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_LongValue()}
  }
  
%op Strategy Make_LongValue(_l:long) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_LongValue))) }

  get_slot(_l, t) { $t._l }
  make( _l) { new tom.library.adt.bytecode.strategy.value.Make_LongValue( $_l) }
}

    %op Strategy _FloatValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._FloatValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._FloatValue($arg0) }
    }
  
  
  %op Strategy When_FloatValue(s:Strategy) {
    make(s) { `Sequence(Is_FloatValue(),s) }
  }

  %op Strategy Is_FloatValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_FloatValue()}
  }
  
%op Strategy Make_FloatValue(_f:float) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_FloatValue))) }

  get_slot(_f, t) { $t._f }
  make( _f) { new tom.library.adt.bytecode.strategy.value.Make_FloatValue( $_f) }
}

    %op Strategy _DoubleValue(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._DoubleValue)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.value._DoubleValue($arg0) }
    }
  
  
  %op Strategy When_DoubleValue(s:Strategy) {
    make(s) { `Sequence(Is_DoubleValue(),s) }
  }

  %op Strategy Is_DoubleValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_DoubleValue()}
  }
  
%op Strategy Make_DoubleValue(_d:double) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_DoubleValue))) }

  get_slot(_d, t) { $t._d }
  make( _d) { new tom.library.adt.bytecode.strategy.value.Make_DoubleValue( $_d) }
}

    %op Strategy _EmptyValue() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value._EmptyValue)))}
      
        make() { new tom.library.adt.bytecode.strategy.value._EmptyValue() }
    }
  
  
  %op Strategy When_EmptyValue(s:Strategy) {
    make(s) { `Sequence(Is_EmptyValue(),s) }
  }

  %op Strategy Is_EmptyValue() {
    make() { new tom.library.adt.bytecode.strategy.value.Is_EmptyValue()}
  }
  
%op Strategy Make_EmptyValue() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.value.Make_EmptyValue))) }

  make() { new tom.library.adt.bytecode.strategy.value.Make_EmptyValue() }
}

    %op Strategy _VarReturnDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._VarReturnDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.returndescriptor._VarReturnDescriptor($arg0) }
    }
  
  
  %op Strategy When_VarReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_VarReturnDescriptor(),s) }
  }

  %op Strategy Is_VarReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_VarReturnDescriptor()}
  }
  
%op Strategy Make_VarReturnDescriptor(_labelReturnDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_VarReturnDescriptor))) }

  get_slot(_labelReturnDescriptor, t) { $t._labelReturnDescriptor }
  make( _labelReturnDescriptor) { new tom.library.adt.bytecode.strategy.returndescriptor.Make_VarReturnDescriptor( $_labelReturnDescriptor) }
}

    %op Strategy _EmptyPathReturnDescriptor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._EmptyPathReturnDescriptor)))}
      
        make() { new tom.library.adt.bytecode.strategy.returndescriptor._EmptyPathReturnDescriptor() }
    }
  
  
  %op Strategy When_EmptyPathReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathReturnDescriptor(),s) }
  }

  %op Strategy Is_EmptyPathReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_EmptyPathReturnDescriptor()}
  }
  
%op Strategy Make_EmptyPathReturnDescriptor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_EmptyPathReturnDescriptor))) }

  make() { new tom.library.adt.bytecode.strategy.returndescriptor.Make_EmptyPathReturnDescriptor() }
}

    %op Strategy _ConsPathReturnDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._ConsPathReturnDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.returndescriptor._ConsPathReturnDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathReturnDescriptor(),s) }
  }

  %op Strategy Is_ConsPathReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_ConsPathReturnDescriptor()}
  }
  
%op Strategy Make_ConsPathReturnDescriptor(_HeadPathReturnDescriptor:int, _TailPathReturnDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_ConsPathReturnDescriptor))) }

  get_slot(_HeadPathReturnDescriptor, t) { $t._HeadPathReturnDescriptor }
  get_slot(_TailPathReturnDescriptor, t) { $t._TailPathReturnDescriptor }
  make( _HeadPathReturnDescriptor,  new_TailPathReturnDescriptor) { new tom.library.adt.bytecode.strategy.returndescriptor.Make_ConsPathReturnDescriptor( $_HeadPathReturnDescriptor,  $new_TailPathReturnDescriptor) }
}

    %op Strategy _RefReturnDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._RefReturnDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.returndescriptor._RefReturnDescriptor($arg0) }
    }
  
  
  %op Strategy When_RefReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_RefReturnDescriptor(),s) }
  }

  %op Strategy Is_RefReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_RefReturnDescriptor()}
  }
  
%op Strategy Make_RefReturnDescriptor(_labelReturnDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_RefReturnDescriptor))) }

  get_slot(_labelReturnDescriptor, t) { $t._labelReturnDescriptor }
  make( _labelReturnDescriptor) { new tom.library.adt.bytecode.strategy.returndescriptor.Make_RefReturnDescriptor( $_labelReturnDescriptor) }
}

    %op Strategy _LabReturnDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._LabReturnDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.returndescriptor._LabReturnDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_LabReturnDescriptor(),s) }
  }

  %op Strategy Is_LabReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_LabReturnDescriptor()}
  }
  
%op Strategy Make_LabReturnDescriptor(_labelReturnDescriptor:String, _termReturnDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_LabReturnDescriptor))) }

  get_slot(_labelReturnDescriptor, t) { $t._labelReturnDescriptor }
  get_slot(_termReturnDescriptor, t) { $t._termReturnDescriptor }
  make( _labelReturnDescriptor,  new_termReturnDescriptor) { new tom.library.adt.bytecode.strategy.returndescriptor.Make_LabReturnDescriptor( $_labelReturnDescriptor,  $new_termReturnDescriptor) }
}

    %op Strategy _ReturnDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._ReturnDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.returndescriptor._ReturnDescriptor($arg0) }
    }
  
  
  %op Strategy When_ReturnDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_ReturnDescriptor(),s) }
  }

  %op Strategy Is_ReturnDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_ReturnDescriptor()}
  }
  
%op Strategy Make_ReturnDescriptor(_type:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_ReturnDescriptor))) }

  get_slot(_type, t) { $t._type }
  make( new_type) { new tom.library.adt.bytecode.strategy.returndescriptor.Make_ReturnDescriptor( $new_type) }
}

    %op Strategy _Void() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor._Void)))}
      
        make() { new tom.library.adt.bytecode.strategy.returndescriptor._Void() }
    }
  
  
  %op Strategy When_Void(s:Strategy) {
    make(s) { `Sequence(Is_Void(),s) }
  }

  %op Strategy Is_Void() {
    make() { new tom.library.adt.bytecode.strategy.returndescriptor.Is_Void()}
  }
  
%op Strategy Make_Void() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.returndescriptor.Make_Void))) }

  make() { new tom.library.adt.bytecode.strategy.returndescriptor.Make_Void() }
}

    %op Strategy _VarFieldList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._VarFieldList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fieldlist._VarFieldList($arg0) }
    }
  
  
  %op Strategy When_VarFieldList(s:Strategy) {
    make(s) { `Sequence(Is_VarFieldList(),s) }
  }

  %op Strategy Is_VarFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_VarFieldList()}
  }
  
%op Strategy Make_VarFieldList(_labelFieldList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_VarFieldList))) }

  get_slot(_labelFieldList, t) { $t._labelFieldList }
  make( _labelFieldList) { new tom.library.adt.bytecode.strategy.fieldlist.Make_VarFieldList( $_labelFieldList) }
}

    %op Strategy _EmptyPathFieldList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._EmptyPathFieldList)))}
      
        make() { new tom.library.adt.bytecode.strategy.fieldlist._EmptyPathFieldList() }
    }
  
  
  %op Strategy When_EmptyPathFieldList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathFieldList(),s) }
  }

  %op Strategy Is_EmptyPathFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_EmptyPathFieldList()}
  }
  
%op Strategy Make_EmptyPathFieldList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_EmptyPathFieldList))) }

  make() { new tom.library.adt.bytecode.strategy.fieldlist.Make_EmptyPathFieldList() }
}

    %op Strategy _ConsPathFieldList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._ConsPathFieldList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fieldlist._ConsPathFieldList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathFieldList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathFieldList(),s) }
  }

  %op Strategy Is_ConsPathFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_ConsPathFieldList()}
  }
  
%op Strategy Make_ConsPathFieldList(_HeadPathFieldList:int, _TailPathFieldList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_ConsPathFieldList))) }

  get_slot(_HeadPathFieldList, t) { $t._HeadPathFieldList }
  get_slot(_TailPathFieldList, t) { $t._TailPathFieldList }
  make( _HeadPathFieldList,  new_TailPathFieldList) { new tom.library.adt.bytecode.strategy.fieldlist.Make_ConsPathFieldList( $_HeadPathFieldList,  $new_TailPathFieldList) }
}

    %op Strategy _RefFieldList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._RefFieldList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fieldlist._RefFieldList($arg0) }
    }
  
  
  %op Strategy When_RefFieldList(s:Strategy) {
    make(s) { `Sequence(Is_RefFieldList(),s) }
  }

  %op Strategy Is_RefFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_RefFieldList()}
  }
  
%op Strategy Make_RefFieldList(_labelFieldList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_RefFieldList))) }

  get_slot(_labelFieldList, t) { $t._labelFieldList }
  make( _labelFieldList) { new tom.library.adt.bytecode.strategy.fieldlist.Make_RefFieldList( $_labelFieldList) }
}

    %op Strategy _LabFieldList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._LabFieldList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fieldlist._LabFieldList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabFieldList(s:Strategy) {
    make(s) { `Sequence(Is_LabFieldList(),s) }
  }

  %op Strategy Is_LabFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_LabFieldList()}
  }
  
%op Strategy Make_LabFieldList(_labelFieldList:String, _termFieldList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_LabFieldList))) }

  get_slot(_labelFieldList, t) { $t._labelFieldList }
  get_slot(_termFieldList, t) { $t._termFieldList }
  make( _labelFieldList,  new_termFieldList) { new tom.library.adt.bytecode.strategy.fieldlist.Make_LabFieldList( $_labelFieldList,  $new_termFieldList) }
}

    %op Strategy _EmptyFieldList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._EmptyFieldList)))}
      
        make() { new tom.library.adt.bytecode.strategy.fieldlist._EmptyFieldList() }
    }
  
  
  %op Strategy When_EmptyFieldList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyFieldList(),s) }
  }

  %op Strategy Is_EmptyFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_EmptyFieldList()}
  }
  
%op Strategy Make_EmptyFieldList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_EmptyFieldList))) }

  make() { new tom.library.adt.bytecode.strategy.fieldlist.Make_EmptyFieldList() }
}

    %op Strategy _ConsFieldList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist._ConsFieldList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fieldlist._ConsFieldList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsFieldList(s:Strategy) {
    make(s) { `Sequence(Is_ConsFieldList(),s) }
  }

  %op Strategy Is_ConsFieldList() {
    make() { new tom.library.adt.bytecode.strategy.fieldlist.Is_ConsFieldList()}
  }
  
%op Strategy Make_ConsFieldList(_HeadFieldList:Strategy, _TailFieldList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fieldlist.Make_ConsFieldList))) }

  get_slot(_HeadFieldList, t) { $t._HeadFieldList }
  get_slot(_TailFieldList, t) { $t._TailFieldList }
  make( new_HeadFieldList,  new_TailFieldList) { new tom.library.adt.bytecode.strategy.fieldlist.Make_ConsFieldList( $new_HeadFieldList,  $new_TailFieldList) }
}

    %op Strategy _VarSignature(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._VarSignature)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.signature._VarSignature($arg0) }
    }
  
  
  %op Strategy When_VarSignature(s:Strategy) {
    make(s) { `Sequence(Is_VarSignature(),s) }
  }

  %op Strategy Is_VarSignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_VarSignature()}
  }
  
%op Strategy Make_VarSignature(_labelSignature:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_VarSignature))) }

  get_slot(_labelSignature, t) { $t._labelSignature }
  make( _labelSignature) { new tom.library.adt.bytecode.strategy.signature.Make_VarSignature( $_labelSignature) }
}

    %op Strategy _EmptyPathSignature() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._EmptyPathSignature)))}
      
        make() { new tom.library.adt.bytecode.strategy.signature._EmptyPathSignature() }
    }
  
  
  %op Strategy When_EmptyPathSignature(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathSignature(),s) }
  }

  %op Strategy Is_EmptyPathSignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_EmptyPathSignature()}
  }
  
%op Strategy Make_EmptyPathSignature() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_EmptyPathSignature))) }

  make() { new tom.library.adt.bytecode.strategy.signature.Make_EmptyPathSignature() }
}

    %op Strategy _ConsPathSignature(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._ConsPathSignature)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.signature._ConsPathSignature($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathSignature(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathSignature(),s) }
  }

  %op Strategy Is_ConsPathSignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_ConsPathSignature()}
  }
  
%op Strategy Make_ConsPathSignature(_HeadPathSignature:int, _TailPathSignature:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_ConsPathSignature))) }

  get_slot(_HeadPathSignature, t) { $t._HeadPathSignature }
  get_slot(_TailPathSignature, t) { $t._TailPathSignature }
  make( _HeadPathSignature,  new_TailPathSignature) { new tom.library.adt.bytecode.strategy.signature.Make_ConsPathSignature( $_HeadPathSignature,  $new_TailPathSignature) }
}

    %op Strategy _RefSignature(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._RefSignature)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.signature._RefSignature($arg0) }
    }
  
  
  %op Strategy When_RefSignature(s:Strategy) {
    make(s) { `Sequence(Is_RefSignature(),s) }
  }

  %op Strategy Is_RefSignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_RefSignature()}
  }
  
%op Strategy Make_RefSignature(_labelSignature:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_RefSignature))) }

  get_slot(_labelSignature, t) { $t._labelSignature }
  make( _labelSignature) { new tom.library.adt.bytecode.strategy.signature.Make_RefSignature( $_labelSignature) }
}

    %op Strategy _LabSignature(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._LabSignature)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.signature._LabSignature($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabSignature(s:Strategy) {
    make(s) { `Sequence(Is_LabSignature(),s) }
  }

  %op Strategy Is_LabSignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_LabSignature()}
  }
  
%op Strategy Make_LabSignature(_labelSignature:String, _termSignature:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_LabSignature))) }

  get_slot(_labelSignature, t) { $t._labelSignature }
  get_slot(_termSignature, t) { $t._termSignature }
  make( _labelSignature,  new_termSignature) { new tom.library.adt.bytecode.strategy.signature.Make_LabSignature( $_labelSignature,  $new_termSignature) }
}

    %op Strategy _Signature(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._Signature)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.signature._Signature($arg0) }
    }
  
  
  %op Strategy When_Signature(s:Strategy) {
    make(s) { `Sequence(Is_Signature(),s) }
  }

  %op Strategy Is_Signature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_Signature()}
  }
  
%op Strategy Make_Signature(_sig:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_Signature))) }

  get_slot(_sig, t) { $t._sig }
  make( _sig) { new tom.library.adt.bytecode.strategy.signature.Make_Signature( $_sig) }
}

    %op Strategy _EmptySignature() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature._EmptySignature)))}
      
        make() { new tom.library.adt.bytecode.strategy.signature._EmptySignature() }
    }
  
  
  %op Strategy When_EmptySignature(s:Strategy) {
    make(s) { `Sequence(Is_EmptySignature(),s) }
  }

  %op Strategy Is_EmptySignature() {
    make() { new tom.library.adt.bytecode.strategy.signature.Is_EmptySignature()}
  }
  
%op Strategy Make_EmptySignature() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.signature.Make_EmptySignature))) }

  make() { new tom.library.adt.bytecode.strategy.signature.Make_EmptySignature() }
}

    %op Strategy _VarClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._VarClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.classinfo._VarClassInfo($arg0) }
    }
  
  
  %op Strategy When_VarClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_VarClassInfo(),s) }
  }

  %op Strategy Is_VarClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_VarClassInfo()}
  }
  
%op Strategy Make_VarClassInfo(_labelClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_VarClassInfo))) }

  get_slot(_labelClassInfo, t) { $t._labelClassInfo }
  make( _labelClassInfo) { new tom.library.adt.bytecode.strategy.classinfo.Make_VarClassInfo( $_labelClassInfo) }
}

    %op Strategy _EmptyPathClassInfo() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._EmptyPathClassInfo)))}
      
        make() { new tom.library.adt.bytecode.strategy.classinfo._EmptyPathClassInfo() }
    }
  
  
  %op Strategy When_EmptyPathClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathClassInfo(),s) }
  }

  %op Strategy Is_EmptyPathClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_EmptyPathClassInfo()}
  }
  
%op Strategy Make_EmptyPathClassInfo() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_EmptyPathClassInfo))) }

  make() { new tom.library.adt.bytecode.strategy.classinfo.Make_EmptyPathClassInfo() }
}

    %op Strategy _ConsPathClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._ConsPathClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.classinfo._ConsPathClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathClassInfo(),s) }
  }

  %op Strategy Is_ConsPathClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_ConsPathClassInfo()}
  }
  
%op Strategy Make_ConsPathClassInfo(_HeadPathClassInfo:int, _TailPathClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_ConsPathClassInfo))) }

  get_slot(_HeadPathClassInfo, t) { $t._HeadPathClassInfo }
  get_slot(_TailPathClassInfo, t) { $t._TailPathClassInfo }
  make( _HeadPathClassInfo,  new_TailPathClassInfo) { new tom.library.adt.bytecode.strategy.classinfo.Make_ConsPathClassInfo( $_HeadPathClassInfo,  $new_TailPathClassInfo) }
}

    %op Strategy _RefClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._RefClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.classinfo._RefClassInfo($arg0) }
    }
  
  
  %op Strategy When_RefClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_RefClassInfo(),s) }
  }

  %op Strategy Is_RefClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_RefClassInfo()}
  }
  
%op Strategy Make_RefClassInfo(_labelClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_RefClassInfo))) }

  get_slot(_labelClassInfo, t) { $t._labelClassInfo }
  make( _labelClassInfo) { new tom.library.adt.bytecode.strategy.classinfo.Make_RefClassInfo( $_labelClassInfo) }
}

    %op Strategy _LabClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._LabClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.classinfo._LabClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_LabClassInfo(),s) }
  }

  %op Strategy Is_LabClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_LabClassInfo()}
  }
  
%op Strategy Make_LabClassInfo(_labelClassInfo:String, _termClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_LabClassInfo))) }

  get_slot(_labelClassInfo, t) { $t._labelClassInfo }
  get_slot(_termClassInfo, t) { $t._termClassInfo }
  make( _labelClassInfo,  new_termClassInfo) { new tom.library.adt.bytecode.strategy.classinfo.Make_LabClassInfo( $_labelClassInfo,  $new_termClassInfo) }
}

    %op Strategy _ClassInfo(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy, arg6:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo._ClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        get_slot(arg6, t) { $t.getArgument(6) }
        make(arg0, arg1, arg2, arg3, arg4, arg5, arg6) { new tom.library.adt.bytecode.strategy.classinfo._ClassInfo($arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) }
    }
  
  
  %op Strategy When_ClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_ClassInfo(),s) }
  }

  %op Strategy Is_ClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.classinfo.Is_ClassInfo()}
  }
  
%op Strategy Make_ClassInfo(_name:String, _signature:Strategy, _access:Strategy, _superName:String, _interfaces:Strategy, _innerClasses:Strategy, _outerClass:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classinfo.Make_ClassInfo))) }

  get_slot(_name, t) { $t._name }
  get_slot(_signature, t) { $t._signature }
  get_slot(_access, t) { $t._access }
  get_slot(_superName, t) { $t._superName }
  get_slot(_interfaces, t) { $t._interfaces }
  get_slot(_innerClasses, t) { $t._innerClasses }
  get_slot(_outerClass, t) { $t._outerClass }
  make( _name,  new_signature,  new_access,  _superName,  new_interfaces,  new_innerClasses,  new_outerClass) { new tom.library.adt.bytecode.strategy.classinfo.Make_ClassInfo( $_name,  $new_signature,  $new_access,  $_superName,  $new_interfaces,  $new_innerClasses,  $new_outerClass) }
}

    %op Strategy _VarFieldDescriptorList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._VarFieldDescriptorList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptorlist._VarFieldDescriptorList($arg0) }
    }
  
  
  %op Strategy When_VarFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_VarFieldDescriptorList(),s) }
  }

  %op Strategy Is_VarFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_VarFieldDescriptorList()}
  }
  
%op Strategy Make_VarFieldDescriptorList(_labelFieldDescriptorList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_VarFieldDescriptorList))) }

  get_slot(_labelFieldDescriptorList, t) { $t._labelFieldDescriptorList }
  make( _labelFieldDescriptorList) { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_VarFieldDescriptorList( $_labelFieldDescriptorList) }
}

    %op Strategy _EmptyPathFieldDescriptorList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._EmptyPathFieldDescriptorList)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist._EmptyPathFieldDescriptorList() }
    }
  
  
  %op Strategy When_EmptyPathFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathFieldDescriptorList(),s) }
  }

  %op Strategy Is_EmptyPathFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_EmptyPathFieldDescriptorList()}
  }
  
%op Strategy Make_EmptyPathFieldDescriptorList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_EmptyPathFieldDescriptorList))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_EmptyPathFieldDescriptorList() }
}

    %op Strategy _ConsPathFieldDescriptorList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._ConsPathFieldDescriptorList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fielddescriptorlist._ConsPathFieldDescriptorList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathFieldDescriptorList(),s) }
  }

  %op Strategy Is_ConsPathFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_ConsPathFieldDescriptorList()}
  }
  
%op Strategy Make_ConsPathFieldDescriptorList(_HeadPathFieldDescriptorList:int, _TailPathFieldDescriptorList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_ConsPathFieldDescriptorList))) }

  get_slot(_HeadPathFieldDescriptorList, t) { $t._HeadPathFieldDescriptorList }
  get_slot(_TailPathFieldDescriptorList, t) { $t._TailPathFieldDescriptorList }
  make( _HeadPathFieldDescriptorList,  new_TailPathFieldDescriptorList) { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_ConsPathFieldDescriptorList( $_HeadPathFieldDescriptorList,  $new_TailPathFieldDescriptorList) }
}

    %op Strategy _RefFieldDescriptorList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._RefFieldDescriptorList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptorlist._RefFieldDescriptorList($arg0) }
    }
  
  
  %op Strategy When_RefFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_RefFieldDescriptorList(),s) }
  }

  %op Strategy Is_RefFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_RefFieldDescriptorList()}
  }
  
%op Strategy Make_RefFieldDescriptorList(_labelFieldDescriptorList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_RefFieldDescriptorList))) }

  get_slot(_labelFieldDescriptorList, t) { $t._labelFieldDescriptorList }
  make( _labelFieldDescriptorList) { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_RefFieldDescriptorList( $_labelFieldDescriptorList) }
}

    %op Strategy _LabFieldDescriptorList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._LabFieldDescriptorList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fielddescriptorlist._LabFieldDescriptorList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_LabFieldDescriptorList(),s) }
  }

  %op Strategy Is_LabFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_LabFieldDescriptorList()}
  }
  
%op Strategy Make_LabFieldDescriptorList(_labelFieldDescriptorList:String, _termFieldDescriptorList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_LabFieldDescriptorList))) }

  get_slot(_labelFieldDescriptorList, t) { $t._labelFieldDescriptorList }
  get_slot(_termFieldDescriptorList, t) { $t._termFieldDescriptorList }
  make( _labelFieldDescriptorList,  new_termFieldDescriptorList) { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_LabFieldDescriptorList( $_labelFieldDescriptorList,  $new_termFieldDescriptorList) }
}

    %op Strategy _EmptyFieldDescriptorList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._EmptyFieldDescriptorList)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist._EmptyFieldDescriptorList() }
    }
  
  
  %op Strategy When_EmptyFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyFieldDescriptorList(),s) }
  }

  %op Strategy Is_EmptyFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_EmptyFieldDescriptorList()}
  }
  
%op Strategy Make_EmptyFieldDescriptorList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_EmptyFieldDescriptorList))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_EmptyFieldDescriptorList() }
}

    %op Strategy _ConsFieldDescriptorList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist._ConsFieldDescriptorList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fielddescriptorlist._ConsFieldDescriptorList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsFieldDescriptorList(s:Strategy) {
    make(s) { `Sequence(Is_ConsFieldDescriptorList(),s) }
  }

  %op Strategy Is_ConsFieldDescriptorList() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Is_ConsFieldDescriptorList()}
  }
  
%op Strategy Make_ConsFieldDescriptorList(_HeadFieldDescriptorList:Strategy, _TailFieldDescriptorList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_ConsFieldDescriptorList))) }

  get_slot(_HeadFieldDescriptorList, t) { $t._HeadFieldDescriptorList }
  get_slot(_TailFieldDescriptorList, t) { $t._TailFieldDescriptorList }
  make( new_HeadFieldDescriptorList,  new_TailFieldDescriptorList) { new tom.library.adt.bytecode.strategy.fielddescriptorlist.Make_ConsFieldDescriptorList( $new_HeadFieldDescriptorList,  $new_TailFieldDescriptorList) }
}

    %op Strategy _VarIntList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._VarIntList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.intlist._VarIntList($arg0) }
    }
  
  
  %op Strategy When_VarIntList(s:Strategy) {
    make(s) { `Sequence(Is_VarIntList(),s) }
  }

  %op Strategy Is_VarIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_VarIntList()}
  }
  
%op Strategy Make_VarIntList(_labelIntList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_VarIntList))) }

  get_slot(_labelIntList, t) { $t._labelIntList }
  make( _labelIntList) { new tom.library.adt.bytecode.strategy.intlist.Make_VarIntList( $_labelIntList) }
}

    %op Strategy _EmptyPathIntList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._EmptyPathIntList)))}
      
        make() { new tom.library.adt.bytecode.strategy.intlist._EmptyPathIntList() }
    }
  
  
  %op Strategy When_EmptyPathIntList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathIntList(),s) }
  }

  %op Strategy Is_EmptyPathIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_EmptyPathIntList()}
  }
  
%op Strategy Make_EmptyPathIntList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_EmptyPathIntList))) }

  make() { new tom.library.adt.bytecode.strategy.intlist.Make_EmptyPathIntList() }
}

    %op Strategy _ConsPathIntList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._ConsPathIntList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.intlist._ConsPathIntList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathIntList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathIntList(),s) }
  }

  %op Strategy Is_ConsPathIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_ConsPathIntList()}
  }
  
%op Strategy Make_ConsPathIntList(_HeadPathIntList:int, _TailPathIntList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_ConsPathIntList))) }

  get_slot(_HeadPathIntList, t) { $t._HeadPathIntList }
  get_slot(_TailPathIntList, t) { $t._TailPathIntList }
  make( _HeadPathIntList,  new_TailPathIntList) { new tom.library.adt.bytecode.strategy.intlist.Make_ConsPathIntList( $_HeadPathIntList,  $new_TailPathIntList) }
}

    %op Strategy _RefIntList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._RefIntList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.intlist._RefIntList($arg0) }
    }
  
  
  %op Strategy When_RefIntList(s:Strategy) {
    make(s) { `Sequence(Is_RefIntList(),s) }
  }

  %op Strategy Is_RefIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_RefIntList()}
  }
  
%op Strategy Make_RefIntList(_labelIntList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_RefIntList))) }

  get_slot(_labelIntList, t) { $t._labelIntList }
  make( _labelIntList) { new tom.library.adt.bytecode.strategy.intlist.Make_RefIntList( $_labelIntList) }
}

    %op Strategy _LabIntList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._LabIntList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.intlist._LabIntList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabIntList(s:Strategy) {
    make(s) { `Sequence(Is_LabIntList(),s) }
  }

  %op Strategy Is_LabIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_LabIntList()}
  }
  
%op Strategy Make_LabIntList(_labelIntList:String, _termIntList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_LabIntList))) }

  get_slot(_labelIntList, t) { $t._labelIntList }
  get_slot(_termIntList, t) { $t._termIntList }
  make( _labelIntList,  new_termIntList) { new tom.library.adt.bytecode.strategy.intlist.Make_LabIntList( $_labelIntList,  $new_termIntList) }
}

    %op Strategy _EmptyIntList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._EmptyIntList)))}
      
        make() { new tom.library.adt.bytecode.strategy.intlist._EmptyIntList() }
    }
  
  
  %op Strategy When_EmptyIntList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyIntList(),s) }
  }

  %op Strategy Is_EmptyIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_EmptyIntList()}
  }
  
%op Strategy Make_EmptyIntList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_EmptyIntList))) }

  make() { new tom.library.adt.bytecode.strategy.intlist.Make_EmptyIntList() }
}

    %op Strategy _ConsIntList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist._ConsIntList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.intlist._ConsIntList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsIntList(s:Strategy) {
    make(s) { `Sequence(Is_ConsIntList(),s) }
  }

  %op Strategy Is_ConsIntList() {
    make() { new tom.library.adt.bytecode.strategy.intlist.Is_ConsIntList()}
  }
  
%op Strategy Make_ConsIntList(_HeadIntList:int, _TailIntList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.intlist.Make_ConsIntList))) }

  get_slot(_HeadIntList, t) { $t._HeadIntList }
  get_slot(_TailIntList, t) { $t._TailIntList }
  make( _HeadIntList,  new_TailIntList) { new tom.library.adt.bytecode.strategy.intlist.Make_ConsIntList( $_HeadIntList,  $new_TailIntList) }
}

    %op Strategy _VarField(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._VarField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.field._VarField($arg0) }
    }
  
  
  %op Strategy When_VarField(s:Strategy) {
    make(s) { `Sequence(Is_VarField(),s) }
  }

  %op Strategy Is_VarField() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_VarField()}
  }
  
%op Strategy Make_VarField(_labelField:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_VarField))) }

  get_slot(_labelField, t) { $t._labelField }
  make( _labelField) { new tom.library.adt.bytecode.strategy.field.Make_VarField( $_labelField) }
}

    %op Strategy _EmptyPathField() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._EmptyPathField)))}
      
        make() { new tom.library.adt.bytecode.strategy.field._EmptyPathField() }
    }
  
  
  %op Strategy When_EmptyPathField(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathField(),s) }
  }

  %op Strategy Is_EmptyPathField() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_EmptyPathField()}
  }
  
%op Strategy Make_EmptyPathField() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_EmptyPathField))) }

  make() { new tom.library.adt.bytecode.strategy.field.Make_EmptyPathField() }
}

    %op Strategy _ConsPathField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._ConsPathField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.field._ConsPathField($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathField(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathField(),s) }
  }

  %op Strategy Is_ConsPathField() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_ConsPathField()}
  }
  
%op Strategy Make_ConsPathField(_HeadPathField:int, _TailPathField:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_ConsPathField))) }

  get_slot(_HeadPathField, t) { $t._HeadPathField }
  get_slot(_TailPathField, t) { $t._TailPathField }
  make( _HeadPathField,  new_TailPathField) { new tom.library.adt.bytecode.strategy.field.Make_ConsPathField( $_HeadPathField,  $new_TailPathField) }
}

    %op Strategy _RefField(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._RefField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.field._RefField($arg0) }
    }
  
  
  %op Strategy When_RefField(s:Strategy) {
    make(s) { `Sequence(Is_RefField(),s) }
  }

  %op Strategy Is_RefField() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_RefField()}
  }
  
%op Strategy Make_RefField(_labelField:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_RefField))) }

  get_slot(_labelField, t) { $t._labelField }
  make( _labelField) { new tom.library.adt.bytecode.strategy.field.Make_RefField( $_labelField) }
}

    %op Strategy _LabField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._LabField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.field._LabField($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabField(s:Strategy) {
    make(s) { `Sequence(Is_LabField(),s) }
  }

  %op Strategy Is_LabField() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_LabField()}
  }
  
%op Strategy Make_LabField(_labelField:String, _termField:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_LabField))) }

  get_slot(_labelField, t) { $t._labelField }
  get_slot(_termField, t) { $t._termField }
  make( _labelField,  new_termField) { new tom.library.adt.bytecode.strategy.field.Make_LabField( $_labelField,  $new_termField) }
}

    %op Strategy _Field(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field._Field)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.library.adt.bytecode.strategy.field._Field($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_Field(s:Strategy) {
    make(s) { `Sequence(Is_Field(),s) }
  }

  %op Strategy Is_Field() {
    make() { new tom.library.adt.bytecode.strategy.field.Is_Field()}
  }
  
%op Strategy Make_Field(_access:Strategy, _name:String, _desc:Strategy, _signature:Strategy, _value:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.field.Make_Field))) }

  get_slot(_access, t) { $t._access }
  get_slot(_name, t) { $t._name }
  get_slot(_desc, t) { $t._desc }
  get_slot(_signature, t) { $t._signature }
  get_slot(_value, t) { $t._value }
  make( new_access,  _name,  new_desc,  new_signature,  new_value) { new tom.library.adt.bytecode.strategy.field.Make_Field( $new_access,  $_name,  $new_desc,  $new_signature,  $new_value) }
}

    %op Strategy _VarTryCatchBlock(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._VarTryCatchBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.trycatchblock._VarTryCatchBlock($arg0) }
    }
  
  
  %op Strategy When_VarTryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_VarTryCatchBlock(),s) }
  }

  %op Strategy Is_VarTryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_VarTryCatchBlock()}
  }
  
%op Strategy Make_VarTryCatchBlock(_labelTryCatchBlock:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_VarTryCatchBlock))) }

  get_slot(_labelTryCatchBlock, t) { $t._labelTryCatchBlock }
  make( _labelTryCatchBlock) { new tom.library.adt.bytecode.strategy.trycatchblock.Make_VarTryCatchBlock( $_labelTryCatchBlock) }
}

    %op Strategy _EmptyPathTryCatchBlock() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._EmptyPathTryCatchBlock)))}
      
        make() { new tom.library.adt.bytecode.strategy.trycatchblock._EmptyPathTryCatchBlock() }
    }
  
  
  %op Strategy When_EmptyPathTryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathTryCatchBlock(),s) }
  }

  %op Strategy Is_EmptyPathTryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_EmptyPathTryCatchBlock()}
  }
  
%op Strategy Make_EmptyPathTryCatchBlock() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_EmptyPathTryCatchBlock))) }

  make() { new tom.library.adt.bytecode.strategy.trycatchblock.Make_EmptyPathTryCatchBlock() }
}

    %op Strategy _ConsPathTryCatchBlock(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._ConsPathTryCatchBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.trycatchblock._ConsPathTryCatchBlock($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathTryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathTryCatchBlock(),s) }
  }

  %op Strategy Is_ConsPathTryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_ConsPathTryCatchBlock()}
  }
  
%op Strategy Make_ConsPathTryCatchBlock(_HeadPathTryCatchBlock:int, _TailPathTryCatchBlock:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_ConsPathTryCatchBlock))) }

  get_slot(_HeadPathTryCatchBlock, t) { $t._HeadPathTryCatchBlock }
  get_slot(_TailPathTryCatchBlock, t) { $t._TailPathTryCatchBlock }
  make( _HeadPathTryCatchBlock,  new_TailPathTryCatchBlock) { new tom.library.adt.bytecode.strategy.trycatchblock.Make_ConsPathTryCatchBlock( $_HeadPathTryCatchBlock,  $new_TailPathTryCatchBlock) }
}

    %op Strategy _RefTryCatchBlock(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._RefTryCatchBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.trycatchblock._RefTryCatchBlock($arg0) }
    }
  
  
  %op Strategy When_RefTryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_RefTryCatchBlock(),s) }
  }

  %op Strategy Is_RefTryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_RefTryCatchBlock()}
  }
  
%op Strategy Make_RefTryCatchBlock(_labelTryCatchBlock:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_RefTryCatchBlock))) }

  get_slot(_labelTryCatchBlock, t) { $t._labelTryCatchBlock }
  make( _labelTryCatchBlock) { new tom.library.adt.bytecode.strategy.trycatchblock.Make_RefTryCatchBlock( $_labelTryCatchBlock) }
}

    %op Strategy _LabTryCatchBlock(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._LabTryCatchBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.trycatchblock._LabTryCatchBlock($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabTryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_LabTryCatchBlock(),s) }
  }

  %op Strategy Is_LabTryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_LabTryCatchBlock()}
  }
  
%op Strategy Make_LabTryCatchBlock(_labelTryCatchBlock:String, _termTryCatchBlock:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_LabTryCatchBlock))) }

  get_slot(_labelTryCatchBlock, t) { $t._labelTryCatchBlock }
  get_slot(_termTryCatchBlock, t) { $t._termTryCatchBlock }
  make( _labelTryCatchBlock,  new_termTryCatchBlock) { new tom.library.adt.bytecode.strategy.trycatchblock.Make_LabTryCatchBlock( $_labelTryCatchBlock,  $new_termTryCatchBlock) }
}

    %op Strategy _ryCatchBlock(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock._ryCatchBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.trycatchblock._ryCatchBlock($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_ryCatchBlock(s:Strategy) {
    make(s) { `Sequence(Is_ryCatchBlock(),s) }
  }

  %op Strategy Is_ryCatchBlock() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblock.Is_ryCatchBlock()}
  }
  
%op Strategy Make_ryCatchBlock(_start:Strategy, _end:Strategy, _handler:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblock.Make_ryCatchBlock))) }

  get_slot(_start, t) { $t._start }
  get_slot(_end, t) { $t._end }
  get_slot(_handler, t) { $t._handler }
  make( new_start,  new_end,  new_handler) { new tom.library.adt.bytecode.strategy.trycatchblock.Make_ryCatchBlock( $new_start,  $new_end,  $new_handler) }
}

    %op Strategy _VarClassNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._VarClassNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.classnode._VarClassNode($arg0) }
    }
  
  
  %op Strategy When_VarClassNode(s:Strategy) {
    make(s) { `Sequence(Is_VarClassNode(),s) }
  }

  %op Strategy Is_VarClassNode() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_VarClassNode()}
  }
  
%op Strategy Make_VarClassNode(_labelClassNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_VarClassNode))) }

  get_slot(_labelClassNode, t) { $t._labelClassNode }
  make( _labelClassNode) { new tom.library.adt.bytecode.strategy.classnode.Make_VarClassNode( $_labelClassNode) }
}

    %op Strategy _EmptyPathClassNode() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._EmptyPathClassNode)))}
      
        make() { new tom.library.adt.bytecode.strategy.classnode._EmptyPathClassNode() }
    }
  
  
  %op Strategy When_EmptyPathClassNode(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathClassNode(),s) }
  }

  %op Strategy Is_EmptyPathClassNode() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_EmptyPathClassNode()}
  }
  
%op Strategy Make_EmptyPathClassNode() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_EmptyPathClassNode))) }

  make() { new tom.library.adt.bytecode.strategy.classnode.Make_EmptyPathClassNode() }
}

    %op Strategy _ConsPathClassNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._ConsPathClassNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.classnode._ConsPathClassNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathClassNode(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathClassNode(),s) }
  }

  %op Strategy Is_ConsPathClassNode() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_ConsPathClassNode()}
  }
  
%op Strategy Make_ConsPathClassNode(_HeadPathClassNode:int, _TailPathClassNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_ConsPathClassNode))) }

  get_slot(_HeadPathClassNode, t) { $t._HeadPathClassNode }
  get_slot(_TailPathClassNode, t) { $t._TailPathClassNode }
  make( _HeadPathClassNode,  new_TailPathClassNode) { new tom.library.adt.bytecode.strategy.classnode.Make_ConsPathClassNode( $_HeadPathClassNode,  $new_TailPathClassNode) }
}

    %op Strategy _RefClassNode(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._RefClassNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.classnode._RefClassNode($arg0) }
    }
  
  
  %op Strategy When_RefClassNode(s:Strategy) {
    make(s) { `Sequence(Is_RefClassNode(),s) }
  }

  %op Strategy Is_RefClassNode() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_RefClassNode()}
  }
  
%op Strategy Make_RefClassNode(_labelClassNode:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_RefClassNode))) }

  get_slot(_labelClassNode, t) { $t._labelClassNode }
  make( _labelClassNode) { new tom.library.adt.bytecode.strategy.classnode.Make_RefClassNode( $_labelClassNode) }
}

    %op Strategy _LabClassNode(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._LabClassNode)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.classnode._LabClassNode($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabClassNode(s:Strategy) {
    make(s) { `Sequence(Is_LabClassNode(),s) }
  }

  %op Strategy Is_LabClassNode() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_LabClassNode()}
  }
  
%op Strategy Make_LabClassNode(_labelClassNode:String, _termClassNode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_LabClassNode))) }

  get_slot(_labelClassNode, t) { $t._labelClassNode }
  get_slot(_termClassNode, t) { $t._termClassNode }
  make( _labelClassNode,  new_termClassNode) { new tom.library.adt.bytecode.strategy.classnode.Make_LabClassNode( $_labelClassNode,  $new_termClassNode) }
}

    %op Strategy _Class(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode._Class)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.classnode._Class($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Class(s:Strategy) {
    make(s) { `Sequence(Is_Class(),s) }
  }

  %op Strategy Is_Class() {
    make() { new tom.library.adt.bytecode.strategy.classnode.Is_Class()}
  }
  
%op Strategy Make_Class(_info:Strategy, _fields:Strategy, _methods:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.classnode.Make_Class))) }

  get_slot(_info, t) { $t._info }
  get_slot(_fields, t) { $t._fields }
  get_slot(_methods, t) { $t._methods }
  make( new_info,  new_fields,  new_methods) { new tom.library.adt.bytecode.strategy.classnode.Make_Class( $new_info,  $new_fields,  $new_methods) }
}

    %op Strategy _VarMethodDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._VarMethodDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methoddescriptor._VarMethodDescriptor($arg0) }
    }
  
  
  %op Strategy When_VarMethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_VarMethodDescriptor(),s) }
  }

  %op Strategy Is_VarMethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_VarMethodDescriptor()}
  }
  
%op Strategy Make_VarMethodDescriptor(_labelMethodDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_VarMethodDescriptor))) }

  get_slot(_labelMethodDescriptor, t) { $t._labelMethodDescriptor }
  make( _labelMethodDescriptor) { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_VarMethodDescriptor( $_labelMethodDescriptor) }
}

    %op Strategy _EmptyPathMethodDescriptor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._EmptyPathMethodDescriptor)))}
      
        make() { new tom.library.adt.bytecode.strategy.methoddescriptor._EmptyPathMethodDescriptor() }
    }
  
  
  %op Strategy When_EmptyPathMethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathMethodDescriptor(),s) }
  }

  %op Strategy Is_EmptyPathMethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_EmptyPathMethodDescriptor()}
  }
  
%op Strategy Make_EmptyPathMethodDescriptor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_EmptyPathMethodDescriptor))) }

  make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_EmptyPathMethodDescriptor() }
}

    %op Strategy _ConsPathMethodDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._ConsPathMethodDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methoddescriptor._ConsPathMethodDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathMethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathMethodDescriptor(),s) }
  }

  %op Strategy Is_ConsPathMethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_ConsPathMethodDescriptor()}
  }
  
%op Strategy Make_ConsPathMethodDescriptor(_HeadPathMethodDescriptor:int, _TailPathMethodDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_ConsPathMethodDescriptor))) }

  get_slot(_HeadPathMethodDescriptor, t) { $t._HeadPathMethodDescriptor }
  get_slot(_TailPathMethodDescriptor, t) { $t._TailPathMethodDescriptor }
  make( _HeadPathMethodDescriptor,  new_TailPathMethodDescriptor) { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_ConsPathMethodDescriptor( $_HeadPathMethodDescriptor,  $new_TailPathMethodDescriptor) }
}

    %op Strategy _RefMethodDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._RefMethodDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.methoddescriptor._RefMethodDescriptor($arg0) }
    }
  
  
  %op Strategy When_RefMethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_RefMethodDescriptor(),s) }
  }

  %op Strategy Is_RefMethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_RefMethodDescriptor()}
  }
  
%op Strategy Make_RefMethodDescriptor(_labelMethodDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_RefMethodDescriptor))) }

  get_slot(_labelMethodDescriptor, t) { $t._labelMethodDescriptor }
  make( _labelMethodDescriptor) { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_RefMethodDescriptor( $_labelMethodDescriptor) }
}

    %op Strategy _LabMethodDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._LabMethodDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methoddescriptor._LabMethodDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabMethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_LabMethodDescriptor(),s) }
  }

  %op Strategy Is_LabMethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_LabMethodDescriptor()}
  }
  
%op Strategy Make_LabMethodDescriptor(_labelMethodDescriptor:String, _termMethodDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_LabMethodDescriptor))) }

  get_slot(_labelMethodDescriptor, t) { $t._labelMethodDescriptor }
  get_slot(_termMethodDescriptor, t) { $t._termMethodDescriptor }
  make( _labelMethodDescriptor,  new_termMethodDescriptor) { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_LabMethodDescriptor( $_labelMethodDescriptor,  $new_termMethodDescriptor) }
}

    %op Strategy _MethodDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor._MethodDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.methoddescriptor._MethodDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_MethodDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_MethodDescriptor(),s) }
  }

  %op Strategy Is_MethodDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.methoddescriptor.Is_MethodDescriptor()}
  }
  
%op Strategy Make_MethodDescriptor(_parameters:Strategy, _return:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.methoddescriptor.Make_MethodDescriptor))) }

  get_slot(_parameters, t) { $t._parameters }
  get_slot(_return, t) { $t._return }
  make( new_parameters,  new_return) { new tom.library.adt.bytecode.strategy.methoddescriptor.Make_MethodDescriptor( $new_parameters,  $new_return) }
}

    %op Strategy _VarTryCatchBlockList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._VarTryCatchBlockList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.trycatchblocklist._VarTryCatchBlockList($arg0) }
    }
  
  
  %op Strategy When_VarTryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_VarTryCatchBlockList(),s) }
  }

  %op Strategy Is_VarTryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_VarTryCatchBlockList()}
  }
  
%op Strategy Make_VarTryCatchBlockList(_labelTryCatchBlockList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_VarTryCatchBlockList))) }

  get_slot(_labelTryCatchBlockList, t) { $t._labelTryCatchBlockList }
  make( _labelTryCatchBlockList) { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_VarTryCatchBlockList( $_labelTryCatchBlockList) }
}

    %op Strategy _EmptyPathTryCatchBlockList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._EmptyPathTryCatchBlockList)))}
      
        make() { new tom.library.adt.bytecode.strategy.trycatchblocklist._EmptyPathTryCatchBlockList() }
    }
  
  
  %op Strategy When_EmptyPathTryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathTryCatchBlockList(),s) }
  }

  %op Strategy Is_EmptyPathTryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_EmptyPathTryCatchBlockList()}
  }
  
%op Strategy Make_EmptyPathTryCatchBlockList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_EmptyPathTryCatchBlockList))) }

  make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_EmptyPathTryCatchBlockList() }
}

    %op Strategy _ConsPathTryCatchBlockList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._ConsPathTryCatchBlockList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.trycatchblocklist._ConsPathTryCatchBlockList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathTryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathTryCatchBlockList(),s) }
  }

  %op Strategy Is_ConsPathTryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_ConsPathTryCatchBlockList()}
  }
  
%op Strategy Make_ConsPathTryCatchBlockList(_HeadPathTryCatchBlockList:int, _TailPathTryCatchBlockList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_ConsPathTryCatchBlockList))) }

  get_slot(_HeadPathTryCatchBlockList, t) { $t._HeadPathTryCatchBlockList }
  get_slot(_TailPathTryCatchBlockList, t) { $t._TailPathTryCatchBlockList }
  make( _HeadPathTryCatchBlockList,  new_TailPathTryCatchBlockList) { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_ConsPathTryCatchBlockList( $_HeadPathTryCatchBlockList,  $new_TailPathTryCatchBlockList) }
}

    %op Strategy _RefTryCatchBlockList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._RefTryCatchBlockList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.trycatchblocklist._RefTryCatchBlockList($arg0) }
    }
  
  
  %op Strategy When_RefTryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_RefTryCatchBlockList(),s) }
  }

  %op Strategy Is_RefTryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_RefTryCatchBlockList()}
  }
  
%op Strategy Make_RefTryCatchBlockList(_labelTryCatchBlockList:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_RefTryCatchBlockList))) }

  get_slot(_labelTryCatchBlockList, t) { $t._labelTryCatchBlockList }
  make( _labelTryCatchBlockList) { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_RefTryCatchBlockList( $_labelTryCatchBlockList) }
}

    %op Strategy _LabTryCatchBlockList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._LabTryCatchBlockList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.trycatchblocklist._LabTryCatchBlockList($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabTryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_LabTryCatchBlockList(),s) }
  }

  %op Strategy Is_LabTryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_LabTryCatchBlockList()}
  }
  
%op Strategy Make_LabTryCatchBlockList(_labelTryCatchBlockList:String, _termTryCatchBlockList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_LabTryCatchBlockList))) }

  get_slot(_labelTryCatchBlockList, t) { $t._labelTryCatchBlockList }
  get_slot(_termTryCatchBlockList, t) { $t._termTryCatchBlockList }
  make( _labelTryCatchBlockList,  new_termTryCatchBlockList) { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_LabTryCatchBlockList( $_labelTryCatchBlockList,  $new_termTryCatchBlockList) }
}

    %op Strategy _EmptyryCatchBlockList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._EmptyryCatchBlockList)))}
      
        make() { new tom.library.adt.bytecode.strategy.trycatchblocklist._EmptyryCatchBlockList() }
    }
  
  
  %op Strategy When_EmptyryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyryCatchBlockList(),s) }
  }

  %op Strategy Is_EmptyryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_EmptyryCatchBlockList()}
  }
  
%op Strategy Make_EmptyryCatchBlockList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_EmptyryCatchBlockList))) }

  make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_EmptyryCatchBlockList() }
}

    %op Strategy _ConsryCatchBlockList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist._ConsryCatchBlockList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.trycatchblocklist._ConsryCatchBlockList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsryCatchBlockList(s:Strategy) {
    make(s) { `Sequence(Is_ConsryCatchBlockList(),s) }
  }

  %op Strategy Is_ConsryCatchBlockList() {
    make() { new tom.library.adt.bytecode.strategy.trycatchblocklist.Is_ConsryCatchBlockList()}
  }
  
%op Strategy Make_ConsryCatchBlockList(_HeadryCatchBlockList:Strategy, _TailryCatchBlockList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.trycatchblocklist.Make_ConsryCatchBlockList))) }

  get_slot(_HeadryCatchBlockList, t) { $t._HeadryCatchBlockList }
  get_slot(_TailryCatchBlockList, t) { $t._TailryCatchBlockList }
  make( new_HeadryCatchBlockList,  new_TailryCatchBlockList) { new tom.library.adt.bytecode.strategy.trycatchblocklist.Make_ConsryCatchBlockList( $new_HeadryCatchBlockList,  $new_TailryCatchBlockList) }
}

    %op Strategy _VarOuterClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._VarOuterClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.outerclassinfo._VarOuterClassInfo($arg0) }
    }
  
  
  %op Strategy When_VarOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_VarOuterClassInfo(),s) }
  }

  %op Strategy Is_VarOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_VarOuterClassInfo()}
  }
  
%op Strategy Make_VarOuterClassInfo(_labelOuterClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_VarOuterClassInfo))) }

  get_slot(_labelOuterClassInfo, t) { $t._labelOuterClassInfo }
  make( _labelOuterClassInfo) { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_VarOuterClassInfo( $_labelOuterClassInfo) }
}

    %op Strategy _EmptyPathOuterClassInfo() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._EmptyPathOuterClassInfo)))}
      
        make() { new tom.library.adt.bytecode.strategy.outerclassinfo._EmptyPathOuterClassInfo() }
    }
  
  
  %op Strategy When_EmptyPathOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathOuterClassInfo(),s) }
  }

  %op Strategy Is_EmptyPathOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_EmptyPathOuterClassInfo()}
  }
  
%op Strategy Make_EmptyPathOuterClassInfo() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_EmptyPathOuterClassInfo))) }

  make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_EmptyPathOuterClassInfo() }
}

    %op Strategy _ConsPathOuterClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._ConsPathOuterClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.outerclassinfo._ConsPathOuterClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathOuterClassInfo(),s) }
  }

  %op Strategy Is_ConsPathOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_ConsPathOuterClassInfo()}
  }
  
%op Strategy Make_ConsPathOuterClassInfo(_HeadPathOuterClassInfo:int, _TailPathOuterClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_ConsPathOuterClassInfo))) }

  get_slot(_HeadPathOuterClassInfo, t) { $t._HeadPathOuterClassInfo }
  get_slot(_TailPathOuterClassInfo, t) { $t._TailPathOuterClassInfo }
  make( _HeadPathOuterClassInfo,  new_TailPathOuterClassInfo) { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_ConsPathOuterClassInfo( $_HeadPathOuterClassInfo,  $new_TailPathOuterClassInfo) }
}

    %op Strategy _RefOuterClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._RefOuterClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.outerclassinfo._RefOuterClassInfo($arg0) }
    }
  
  
  %op Strategy When_RefOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_RefOuterClassInfo(),s) }
  }

  %op Strategy Is_RefOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_RefOuterClassInfo()}
  }
  
%op Strategy Make_RefOuterClassInfo(_labelOuterClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_RefOuterClassInfo))) }

  get_slot(_labelOuterClassInfo, t) { $t._labelOuterClassInfo }
  make( _labelOuterClassInfo) { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_RefOuterClassInfo( $_labelOuterClassInfo) }
}

    %op Strategy _LabOuterClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._LabOuterClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.outerclassinfo._LabOuterClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_LabOuterClassInfo(),s) }
  }

  %op Strategy Is_LabOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_LabOuterClassInfo()}
  }
  
%op Strategy Make_LabOuterClassInfo(_labelOuterClassInfo:String, _termOuterClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_LabOuterClassInfo))) }

  get_slot(_labelOuterClassInfo, t) { $t._labelOuterClassInfo }
  get_slot(_termOuterClassInfo, t) { $t._termOuterClassInfo }
  make( _labelOuterClassInfo,  new_termOuterClassInfo) { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_LabOuterClassInfo( $_labelOuterClassInfo,  $new_termOuterClassInfo) }
}

    %op Strategy _OuterClassInfo(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._OuterClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.library.adt.bytecode.strategy.outerclassinfo._OuterClassInfo($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_OuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_OuterClassInfo(),s) }
  }

  %op Strategy Is_OuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_OuterClassInfo()}
  }
  
%op Strategy Make_OuterClassInfo(_owner:String, _name:String, _desc:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_OuterClassInfo))) }

  get_slot(_owner, t) { $t._owner }
  get_slot(_name, t) { $t._name }
  get_slot(_desc, t) { $t._desc }
  make( _owner,  _name,  new_desc) { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_OuterClassInfo( $_owner,  $_name,  $new_desc) }
}

    %op Strategy _EmptyOuterClassInfo() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo._EmptyOuterClassInfo)))}
      
        make() { new tom.library.adt.bytecode.strategy.outerclassinfo._EmptyOuterClassInfo() }
    }
  
  
  %op Strategy When_EmptyOuterClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOuterClassInfo(),s) }
  }

  %op Strategy Is_EmptyOuterClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Is_EmptyOuterClassInfo()}
  }
  
%op Strategy Make_EmptyOuterClassInfo() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.outerclassinfo.Make_EmptyOuterClassInfo))) }

  make() { new tom.library.adt.bytecode.strategy.outerclassinfo.Make_EmptyOuterClassInfo() }
}

    %op Strategy _VarFieldDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._VarFieldDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptor._VarFieldDescriptor($arg0) }
    }
  
  
  %op Strategy When_VarFieldDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_VarFieldDescriptor(),s) }
  }

  %op Strategy Is_VarFieldDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_VarFieldDescriptor()}
  }
  
%op Strategy Make_VarFieldDescriptor(_labelFieldDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_VarFieldDescriptor))) }

  get_slot(_labelFieldDescriptor, t) { $t._labelFieldDescriptor }
  make( _labelFieldDescriptor) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_VarFieldDescriptor( $_labelFieldDescriptor) }
}

    %op Strategy _EmptyPathFieldDescriptor() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._EmptyPathFieldDescriptor)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._EmptyPathFieldDescriptor() }
    }
  
  
  %op Strategy When_EmptyPathFieldDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathFieldDescriptor(),s) }
  }

  %op Strategy Is_EmptyPathFieldDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_EmptyPathFieldDescriptor()}
  }
  
%op Strategy Make_EmptyPathFieldDescriptor() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_EmptyPathFieldDescriptor))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_EmptyPathFieldDescriptor() }
}

    %op Strategy _ConsPathFieldDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._ConsPathFieldDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fielddescriptor._ConsPathFieldDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathFieldDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathFieldDescriptor(),s) }
  }

  %op Strategy Is_ConsPathFieldDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_ConsPathFieldDescriptor()}
  }
  
%op Strategy Make_ConsPathFieldDescriptor(_HeadPathFieldDescriptor:int, _TailPathFieldDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_ConsPathFieldDescriptor))) }

  get_slot(_HeadPathFieldDescriptor, t) { $t._HeadPathFieldDescriptor }
  get_slot(_TailPathFieldDescriptor, t) { $t._TailPathFieldDescriptor }
  make( _HeadPathFieldDescriptor,  new_TailPathFieldDescriptor) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_ConsPathFieldDescriptor( $_HeadPathFieldDescriptor,  $new_TailPathFieldDescriptor) }
}

    %op Strategy _RefFieldDescriptor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._RefFieldDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptor._RefFieldDescriptor($arg0) }
    }
  
  
  %op Strategy When_RefFieldDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_RefFieldDescriptor(),s) }
  }

  %op Strategy Is_RefFieldDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_RefFieldDescriptor()}
  }
  
%op Strategy Make_RefFieldDescriptor(_labelFieldDescriptor:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_RefFieldDescriptor))) }

  get_slot(_labelFieldDescriptor, t) { $t._labelFieldDescriptor }
  make( _labelFieldDescriptor) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_RefFieldDescriptor( $_labelFieldDescriptor) }
}

    %op Strategy _LabFieldDescriptor(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._LabFieldDescriptor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.fielddescriptor._LabFieldDescriptor($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabFieldDescriptor(s:Strategy) {
    make(s) { `Sequence(Is_LabFieldDescriptor(),s) }
  }

  %op Strategy Is_LabFieldDescriptor() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_LabFieldDescriptor()}
  }
  
%op Strategy Make_LabFieldDescriptor(_labelFieldDescriptor:String, _termFieldDescriptor:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_LabFieldDescriptor))) }

  get_slot(_labelFieldDescriptor, t) { $t._labelFieldDescriptor }
  get_slot(_termFieldDescriptor, t) { $t._termFieldDescriptor }
  make( _labelFieldDescriptor,  new_termFieldDescriptor) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_LabFieldDescriptor( $_labelFieldDescriptor,  $new_termFieldDescriptor) }
}

    %op Strategy _ObjectType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._ObjectType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptor._ObjectType($arg0) }
    }
  
  
  %op Strategy When_ObjectType(s:Strategy) {
    make(s) { `Sequence(Is_ObjectType(),s) }
  }

  %op Strategy Is_ObjectType() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_ObjectType()}
  }
  
%op Strategy Make_ObjectType(_className:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_ObjectType))) }

  get_slot(_className, t) { $t._className }
  make( _className) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_ObjectType( $_className) }
}

    %op Strategy _ArrayType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._ArrayType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.fielddescriptor._ArrayType($arg0) }
    }
  
  
  %op Strategy When_ArrayType(s:Strategy) {
    make(s) { `Sequence(Is_ArrayType(),s) }
  }

  %op Strategy Is_ArrayType() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_ArrayType()}
  }
  
%op Strategy Make_ArrayType(_arrayype:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_ArrayType))) }

  get_slot(_arrayype, t) { $t._arrayype }
  make( new_arrayype) { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_ArrayType( $new_arrayype) }
}

    %op Strategy _B() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._B)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._B() }
    }
  
  
  %op Strategy When_B(s:Strategy) {
    make(s) { `Sequence(Is_B(),s) }
  }

  %op Strategy Is_B() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_B()}
  }
  
%op Strategy Make_B() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_B))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_B() }
}

    %op Strategy _C() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._C)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._C() }
    }
  
  
  %op Strategy When_C(s:Strategy) {
    make(s) { `Sequence(Is_C(),s) }
  }

  %op Strategy Is_C() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_C()}
  }
  
%op Strategy Make_C() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_C))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_C() }
}

    %op Strategy _D() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._D)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._D() }
    }
  
  
  %op Strategy When_D(s:Strategy) {
    make(s) { `Sequence(Is_D(),s) }
  }

  %op Strategy Is_D() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_D()}
  }
  
%op Strategy Make_D() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_D))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_D() }
}

    %op Strategy _F() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._F)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._F() }
    }
  
  
  %op Strategy When_F(s:Strategy) {
    make(s) { `Sequence(Is_F(),s) }
  }

  %op Strategy Is_F() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_F()}
  }
  
%op Strategy Make_F() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_F))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_F() }
}

    %op Strategy _I() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._I)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._I() }
    }
  
  
  %op Strategy When_I(s:Strategy) {
    make(s) { `Sequence(Is_I(),s) }
  }

  %op Strategy Is_I() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_I()}
  }
  
%op Strategy Make_I() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_I))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_I() }
}

    %op Strategy _J() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._J)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._J() }
    }
  
  
  %op Strategy When_J(s:Strategy) {
    make(s) { `Sequence(Is_J(),s) }
  }

  %op Strategy Is_J() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_J()}
  }
  
%op Strategy Make_J() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_J))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_J() }
}

    %op Strategy _S() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._S)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._S() }
    }
  
  
  %op Strategy When_S(s:Strategy) {
    make(s) { `Sequence(Is_S(),s) }
  }

  %op Strategy Is_S() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_S()}
  }
  
%op Strategy Make_S() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_S))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_S() }
}

    %op Strategy _Z() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor._Z)))}
      
        make() { new tom.library.adt.bytecode.strategy.fielddescriptor._Z() }
    }
  
  
  %op Strategy When_Z(s:Strategy) {
    make(s) { `Sequence(Is_Z(),s) }
  }

  %op Strategy Is_Z() {
    make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Is_Z()}
  }
  
%op Strategy Make_Z() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.fielddescriptor.Make_Z))) }

  make() { new tom.library.adt.bytecode.strategy.fielddescriptor.Make_Z() }
}

    %op Strategy _VarInnerClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._VarInnerClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.innerclassinfo._VarInnerClassInfo($arg0) }
    }
  
  
  %op Strategy When_VarInnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_VarInnerClassInfo(),s) }
  }

  %op Strategy Is_VarInnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_VarInnerClassInfo()}
  }
  
%op Strategy Make_VarInnerClassInfo(_labelInnerClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_VarInnerClassInfo))) }

  get_slot(_labelInnerClassInfo, t) { $t._labelInnerClassInfo }
  make( _labelInnerClassInfo) { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_VarInnerClassInfo( $_labelInnerClassInfo) }
}

    %op Strategy _EmptyPathInnerClassInfo() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._EmptyPathInnerClassInfo)))}
      
        make() { new tom.library.adt.bytecode.strategy.innerclassinfo._EmptyPathInnerClassInfo() }
    }
  
  
  %op Strategy When_EmptyPathInnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_EmptyPathInnerClassInfo(),s) }
  }

  %op Strategy Is_EmptyPathInnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_EmptyPathInnerClassInfo()}
  }
  
%op Strategy Make_EmptyPathInnerClassInfo() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_EmptyPathInnerClassInfo))) }

  make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_EmptyPathInnerClassInfo() }
}

    %op Strategy _ConsPathInnerClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._ConsPathInnerClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.innerclassinfo._ConsPathInnerClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsPathInnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_ConsPathInnerClassInfo(),s) }
  }

  %op Strategy Is_ConsPathInnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_ConsPathInnerClassInfo()}
  }
  
%op Strategy Make_ConsPathInnerClassInfo(_HeadPathInnerClassInfo:int, _TailPathInnerClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_ConsPathInnerClassInfo))) }

  get_slot(_HeadPathInnerClassInfo, t) { $t._HeadPathInnerClassInfo }
  get_slot(_TailPathInnerClassInfo, t) { $t._TailPathInnerClassInfo }
  make( _HeadPathInnerClassInfo,  new_TailPathInnerClassInfo) { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_ConsPathInnerClassInfo( $_HeadPathInnerClassInfo,  $new_TailPathInnerClassInfo) }
}

    %op Strategy _RefInnerClassInfo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._RefInnerClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.library.adt.bytecode.strategy.innerclassinfo._RefInnerClassInfo($arg0) }
    }
  
  
  %op Strategy When_RefInnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_RefInnerClassInfo(),s) }
  }

  %op Strategy Is_RefInnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_RefInnerClassInfo()}
  }
  
%op Strategy Make_RefInnerClassInfo(_labelInnerClassInfo:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_RefInnerClassInfo))) }

  get_slot(_labelInnerClassInfo, t) { $t._labelInnerClassInfo }
  make( _labelInnerClassInfo) { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_RefInnerClassInfo( $_labelInnerClassInfo) }
}

    %op Strategy _LabInnerClassInfo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._LabInnerClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.library.adt.bytecode.strategy.innerclassinfo._LabInnerClassInfo($arg0, $arg1) }
    }
  
  
  %op Strategy When_LabInnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_LabInnerClassInfo(),s) }
  }

  %op Strategy Is_LabInnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_LabInnerClassInfo()}
  }
  
%op Strategy Make_LabInnerClassInfo(_labelInnerClassInfo:String, _termInnerClassInfo:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_LabInnerClassInfo))) }

  get_slot(_labelInnerClassInfo, t) { $t._labelInnerClassInfo }
  get_slot(_termInnerClassInfo, t) { $t._termInnerClassInfo }
  make( _labelInnerClassInfo,  new_termInnerClassInfo) { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_LabInnerClassInfo( $_labelInnerClassInfo,  $new_termInnerClassInfo) }
}

    %op Strategy _InnerClassInfo(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo._InnerClassInfo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.library.adt.bytecode.strategy.innerclassinfo._InnerClassInfo($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_InnerClassInfo(s:Strategy) {
    make(s) { `Sequence(Is_InnerClassInfo(),s) }
  }

  %op Strategy Is_InnerClassInfo() {
    make() { new tom.library.adt.bytecode.strategy.innerclassinfo.Is_InnerClassInfo()}
  }
  
%op Strategy Make_InnerClassInfo(_name:String, _outerName:String, _innerName:String, _access:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.library.adt.bytecode.strategy.innerclassinfo.Make_InnerClassInfo))) }

  get_slot(_name, t) { $t._name }
  get_slot(_outerName, t) { $t._outerName }
  get_slot(_innerName, t) { $t._innerName }
  get_slot(_access, t) { $t._access }
  make( _name,  _outerName,  _innerName,  new_access) { new tom.library.adt.bytecode.strategy.innerclassinfo.Make_InnerClassInfo( $_name,  $_outerName,  $_innerName,  $new_access) }
}

            %op Strategy _PathLocalVariable(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathLocalVariable"),Choice(_ConsPathLocalVariable(sub,MuVar("x_PathLocalVariable")),_EmptyPathLocalVariable())) }
            }
            
            %op Strategy _PathLabelNodeList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathLabelNodeList"),Choice(_ConsPathLabelNodeList(sub,MuVar("x_PathLabelNodeList")),_EmptyPathLabelNodeList())) }
            }
            
            %op Strategy _LabelNodeList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_LabelNodeList"),Choice(_ConsLabelNodeList(sub,MuVar("x_LabelNodeList")),_EmptyLabelNodeList())) }
            }
            
            %op Strategy _PathStringList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathStringList"),Choice(_ConsPathStringList(sub,MuVar("x_PathStringList")),_EmptyPathStringList())) }
            }
            
            %op Strategy _StringList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_StringList"),Choice(_ConsStringList(sub,MuVar("x_StringList")),_EmptyStringList())) }
            }
            
            %op Strategy _PathMethodList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathMethodList"),Choice(_ConsPathMethodList(sub,MuVar("x_PathMethodList")),_EmptyPathMethodList())) }
            }
            
            %op Strategy _MethodList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_MethodList"),Choice(_ConsMethodList(sub,MuVar("x_MethodList")),_EmptyMethodList())) }
            }
            
            %op Strategy _PathLabelNode(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathLabelNode"),Choice(_ConsPathLabelNode(sub,MuVar("x_PathLabelNode")),_EmptyPathLabelNode())) }
            }
            
            %op Strategy _PathMethodInfo(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathMethodInfo"),Choice(_ConsPathMethodInfo(sub,MuVar("x_PathMethodInfo")),_EmptyPathMethodInfo())) }
            }
            
            %op Strategy _PathLocalVariableList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathLocalVariableList"),Choice(_ConsPathLocalVariableList(sub,MuVar("x_PathLocalVariableList")),_EmptyPathLocalVariableList())) }
            }
            
            %op Strategy _LocalVariableList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_LocalVariableList"),Choice(_ConsLocalVariableList(sub,MuVar("x_LocalVariableList")),_EmptyLocalVariableList())) }
            }
            
            %op Strategy _PathInstructionList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathInstructionList"),Choice(_ConsPathInstructionList(sub,MuVar("x_PathInstructionList")),_EmptyPathInstructionList())) }
            }
            
            %op Strategy _InstructionList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_InstructionList"),Choice(_ConsInstructionList(sub,MuVar("x_InstructionList")),_EmptyInstructionList())) }
            }
            
            %op Strategy _PathAccessList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathAccessList"),Choice(_ConsPathAccessList(sub,MuVar("x_PathAccessList")),_EmptyPathAccessList())) }
            }
            
            %op Strategy _AccessList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_AccessList"),Choice(_ConsAccessList(sub,MuVar("x_AccessList")),_EmptyAccessList())) }
            }
            
            %op Strategy _PathInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathInstruction"),Choice(_ConsPathInstruction(sub,MuVar("x_PathInstruction")),_EmptyPathInstruction())) }
            }
            
            %op Strategy _PathAccess(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathAccess"),Choice(_ConsPathAccess(sub,MuVar("x_PathAccess")),_EmptyPathAccess())) }
            }
            
            %op Strategy _PathTypeNode(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathTypeNode"),Choice(_ConsPathTypeNode(sub,MuVar("x_PathTypeNode")),_EmptyPathTypeNode())) }
            }
            
            %op Strategy _PathMethod(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathMethod"),Choice(_ConsPathMethod(sub,MuVar("x_PathMethod")),_EmptyPathMethod())) }
            }
            
            %op Strategy _PathInnerClassInfoList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathInnerClassInfoList"),Choice(_ConsPathInnerClassInfoList(sub,MuVar("x_PathInnerClassInfoList")),_EmptyPathInnerClassInfoList())) }
            }
            
            %op Strategy _InnerClassInfoList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_InnerClassInfoList"),Choice(_ConsInnerClassInfoList(sub,MuVar("x_InnerClassInfoList")),_EmptyInnerClassInfoList())) }
            }
            
            %op Strategy _PathHandler(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathHandler"),Choice(_ConsPathHandler(sub,MuVar("x_PathHandler")),_EmptyPathHandler())) }
            }
            
            %op Strategy _PathMethodCode(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathMethodCode"),Choice(_ConsPathMethodCode(sub,MuVar("x_PathMethodCode")),_EmptyPathMethodCode())) }
            }
            
            %op Strategy _PathValue(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathValue"),Choice(_ConsPathValue(sub,MuVar("x_PathValue")),_EmptyPathValue())) }
            }
            
            %op Strategy _PathReturnDescriptor(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathReturnDescriptor"),Choice(_ConsPathReturnDescriptor(sub,MuVar("x_PathReturnDescriptor")),_EmptyPathReturnDescriptor())) }
            }
            
            %op Strategy _PathFieldList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathFieldList"),Choice(_ConsPathFieldList(sub,MuVar("x_PathFieldList")),_EmptyPathFieldList())) }
            }
            
            %op Strategy _FieldList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_FieldList"),Choice(_ConsFieldList(sub,MuVar("x_FieldList")),_EmptyFieldList())) }
            }
            
            %op Strategy _PathSignature(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathSignature"),Choice(_ConsPathSignature(sub,MuVar("x_PathSignature")),_EmptyPathSignature())) }
            }
            
            %op Strategy _PathClassInfo(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathClassInfo"),Choice(_ConsPathClassInfo(sub,MuVar("x_PathClassInfo")),_EmptyPathClassInfo())) }
            }
            
            %op Strategy _PathFieldDescriptorList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathFieldDescriptorList"),Choice(_ConsPathFieldDescriptorList(sub,MuVar("x_PathFieldDescriptorList")),_EmptyPathFieldDescriptorList())) }
            }
            
            %op Strategy _FieldDescriptorList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_FieldDescriptorList"),Choice(_ConsFieldDescriptorList(sub,MuVar("x_FieldDescriptorList")),_EmptyFieldDescriptorList())) }
            }
            
            %op Strategy _PathIntList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathIntList"),Choice(_ConsPathIntList(sub,MuVar("x_PathIntList")),_EmptyPathIntList())) }
            }
            
            %op Strategy _IntList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_IntList"),Choice(_ConsIntList(sub,MuVar("x_IntList")),_EmptyIntList())) }
            }
            
            %op Strategy _PathField(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathField"),Choice(_ConsPathField(sub,MuVar("x_PathField")),_EmptyPathField())) }
            }
            
            %op Strategy _PathTryCatchBlock(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathTryCatchBlock"),Choice(_ConsPathTryCatchBlock(sub,MuVar("x_PathTryCatchBlock")),_EmptyPathTryCatchBlock())) }
            }
            
            %op Strategy _PathClassNode(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathClassNode"),Choice(_ConsPathClassNode(sub,MuVar("x_PathClassNode")),_EmptyPathClassNode())) }
            }
            
            %op Strategy _PathMethodDescriptor(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathMethodDescriptor"),Choice(_ConsPathMethodDescriptor(sub,MuVar("x_PathMethodDescriptor")),_EmptyPathMethodDescriptor())) }
            }
            
            %op Strategy _PathTryCatchBlockList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathTryCatchBlockList"),Choice(_ConsPathTryCatchBlockList(sub,MuVar("x_PathTryCatchBlockList")),_EmptyPathTryCatchBlockList())) }
            }
            
            %op Strategy _ryCatchBlockList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ryCatchBlockList"),Choice(_ConsryCatchBlockList(sub,MuVar("x_ryCatchBlockList")),_EmptyryCatchBlockList())) }
            }
            
            %op Strategy _PathOuterClassInfo(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathOuterClassInfo"),Choice(_ConsPathOuterClassInfo(sub,MuVar("x_PathOuterClassInfo")),_EmptyPathOuterClassInfo())) }
            }
            
            %op Strategy _PathFieldDescriptor(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathFieldDescriptor"),Choice(_ConsPathFieldDescriptor(sub,MuVar("x_PathFieldDescriptor")),_EmptyPathFieldDescriptor())) }
            }
            
            %op Strategy _PathInnerClassInfo(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_PathInnerClassInfo"),Choice(_ConsPathInnerClassInfo(sub,MuVar("x_PathInnerClassInfo")),_EmptyPathInnerClassInfo())) }
            }
            