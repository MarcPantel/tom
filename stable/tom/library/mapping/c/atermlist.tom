/*
 *
 * Copyright (c) 2004-2005, Pierre-Etienne Moreau
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.  
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the INRIA nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 **/

typelist ATermList {
  implement { ATermList }
  get_fun_sym(t) { ((ATgetType(t)==AT_LIST)?(void*)ATmakeAFun("conc", 1, ATfalse):NULL) }
  cmp_fun_sym(t1,t2) { (t1)==(t2) }
  equals(l1,l2)  { l1==l2 }
  get_head(l)    { ATgetFirst(l) }
  get_tail(l)    { ATgetNext(l) }
  is_empty(l)    { ATisEmpty(l) }
}

%oplist ATermList conc(ATerm*) {
  fsym { (void*)ATmakeAFun("conc", 1, ATfalse) }
  make_empty() { ATempty }
  make_insert(e,l) { ATinsert(l,e) }
} 

%typeterm List {
  implement           { ATermList }
  get_fun_sym(l)      { (ATisEmpty(l)?(void*)ATmakeAFun("nil", 0, ATfalse):(void*)ATmakeAFun("cons", 2, ATfalse)) }
  cmp_fun_sym(s1,s2)  { ATisEqualAFun(s1,s2) }
  get_subterm(l, n)   { ((n==0)?(void*)ATgetFirst(l):(void*)ATgetNext(l)) }
}

%op List nil {
  fsym { (void*)ATmakeAFun("nil", 0, ATfalse) }
}

%op List cons(term,list) {
  fsym { (void*)ATmakeAFun("cons", 2, ATfalse) }
}
