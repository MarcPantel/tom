/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2008, INRIA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the INRIA nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * INRIA, Nancy, France
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.library.xml;

import java.io.*;
import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;

public class TNodeToXML {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.library.adt.tnode.types.TNodeList  tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList  l2) {     if( l1.isEmptyconcTNode() ) {       return l2;     } else if( l2.isEmptyconcTNode() ) {       return l1;     } else if(  l1.getTailconcTNode() .isEmptyconcTNode() ) {       return  tom.library.adt.tnode.types.tnodelist.ConsconcTNode.make( l1.getHeadconcTNode() ,l2) ;     } else {       return  tom.library.adt.tnode.types.tnodelist.ConsconcTNode.make( l1.getHeadconcTNode() ,tom_append_list_concTNode( l1.getTailconcTNode() ,l2)) ;     }   }   private static   tom.library.adt.tnode.types.TNodeList  tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList  begin,  tom.library.adt.tnode.types.TNodeList  end, tom.library.adt.tnode.types.TNodeList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTNode()  ||  (end== tom.library.adt.tnode.types.tnodelist.EmptyconcTNode.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.tnode.types.tnodelist.ConsconcTNode.make( begin.getHeadconcTNode() ,( tom.library.adt.tnode.types.TNodeList )tom_get_slice_concTNode( begin.getTailconcTNode() ,end,tail)) ;   }    

  private OutputStream out = System.out;
  private Writer writer = null;

  public void setOutputStream(OutputStream out){
    this.out = out;
  }

  public void setWriter(Writer writer) {
    this.writer = writer;
  }

  /*
public void convert(String filename) {
    try {
      convert(SingletonFactory.getInstance().readFromFile(filename));
    } catch (IOException e) {
      System.out.println(e.getMessage());
    }
  }
*/

  public String xml(TNode n) {
		StringWriter str_res = new StringWriter();
		setWriter(str_res);
		tnodeToXML(n);
		return str_res.toString();
  }

  public void tnodeToXML(TNode n) {
    {if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_2=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_2 instanceof tom.library.adt.tnode.types.tnode.DocumentNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_0= tomMatch570NameNumber_freshVar_2.getDocType() ;{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_1= tomMatch570NameNumber_freshVar_2.getDocElem() ;if ( true ) {

        write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        tnodeToXML(tomMatch570NameNumber_freshVar_0);
        tnodeToXML(tomMatch570NameNumber_freshVar_1);
        write("\n");
        return;
      }}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_9=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_9 instanceof tom.library.adt.tnode.types.tnode.DocumentTypeNode) ) {{  String  tomMatch570NameNumber_freshVar_3= tomMatch570NameNumber_freshVar_9.getName() ;{  String  tomMatch570NameNumber_freshVar_4= tomMatch570NameNumber_freshVar_9.getPublicId() ;{  String  tomMatch570NameNumber_freshVar_5= tomMatch570NameNumber_freshVar_9.getSystemId() ;{  String  tomMatch570NameNumber_freshVar_6= tomMatch570NameNumber_freshVar_9.getInternalSubset() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_7= tomMatch570NameNumber_freshVar_9.getEntities() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_8= tomMatch570NameNumber_freshVar_9.getNotations() ;{  String  tom_publicId=tomMatch570NameNumber_freshVar_4;{  String  tom_systemId=tomMatch570NameNumber_freshVar_5;{  String  tom_internalSubset=tomMatch570NameNumber_freshVar_6;if ( true ) {

        write("<!DOCTYPE "+tomMatch570NameNumber_freshVar_3);
        if (!tom_publicId.equals("UNDEF") && !tom_systemId.equals("UNDEF"))
          write(" PUBLIC \""+tom_publicId+"\" \"");
        else if (!tom_systemId.equals("UNDEF") && tom_publicId.equals("UNDEF"))
          write(" SYSTEM \"");
        else {
          System.out.println("Problem in DocumentTypeNode");
          throw new RuntimeException("Problem in DocumentTypeNode");
        }
        write(tom_systemId+"\"");
        if (!tom_internalSubset.equals("UNDEF"))
          write(" ["+tom_internalSubset+"]");
          write(">\n");
          return;
      }}}}}}}}}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_13=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_13 instanceof tom.library.adt.tnode.types.tnode.ElementNode) ) {{  String  tomMatch570NameNumber_freshVar_10= tomMatch570NameNumber_freshVar_13.getName() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_11= tomMatch570NameNumber_freshVar_13.getAttrList() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_12= tomMatch570NameNumber_freshVar_13.getChildList() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_14=tomMatch570NameNumber_freshVar_12;if ( ((tomMatch570NameNumber_freshVar_14 instanceof tom.library.adt.tnode.types.tnodelist.ConsconcTNode) || (tomMatch570NameNumber_freshVar_14 instanceof tom.library.adt.tnode.types.tnodelist.EmptyconcTNode)) ) {if ( tomMatch570NameNumber_freshVar_14.isEmptyconcTNode() ) {if ( true ) {

        write("<"+tomMatch570NameNumber_freshVar_10);
        tnodeListToXML(tomMatch570NameNumber_freshVar_11);
        write("/>");
        return;
      }}}}}}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_18=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_18 instanceof tom.library.adt.tnode.types.tnode.ElementNode) ) {{  String  tomMatch570NameNumber_freshVar_15= tomMatch570NameNumber_freshVar_18.getName() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_16= tomMatch570NameNumber_freshVar_18.getAttrList() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_17= tomMatch570NameNumber_freshVar_18.getChildList() ;{  String  tom_name=tomMatch570NameNumber_freshVar_15;if ( true ) {

        write("<"+tom_name);
        tnodeListToXML(tomMatch570NameNumber_freshVar_16);
        write(">");
        tnodeListToXML(tomMatch570NameNumber_freshVar_17);
        write("</"+tom_name+">");
        return;
      }}}}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_22=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_22 instanceof tom.library.adt.tnode.types.tnode.AttributeNode) ) {{  String  tomMatch570NameNumber_freshVar_19= tomMatch570NameNumber_freshVar_22.getName() ;{  String  tomMatch570NameNumber_freshVar_20= tomMatch570NameNumber_freshVar_22.getSpecified() ;{  String  tomMatch570NameNumber_freshVar_21= tomMatch570NameNumber_freshVar_22.getValue() ;if ( true ) {

        if (tomMatch570NameNumber_freshVar_20.equals("true")) {
          write(" " + tomMatch570NameNumber_freshVar_19+ "=\"" + tomMatch570NameNumber_freshVar_21+ "\"");
        }
        return;
      }}}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_24=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_24 instanceof tom.library.adt.tnode.types.tnode.TextNode) ) {{  String  tomMatch570NameNumber_freshVar_23= tomMatch570NameNumber_freshVar_24.getData() ;if ( true ) {

        write(tomMatch570NameNumber_freshVar_23);
        return;
      }}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_26=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_26 instanceof tom.library.adt.tnode.types.tnode.CommentNode) ) {{  String  tomMatch570NameNumber_freshVar_25= tomMatch570NameNumber_freshVar_26.getData() ;if ( true ) {

        write("<!-- "+tomMatch570NameNumber_freshVar_25+" -->");
        return;
      }}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_28=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_28 instanceof tom.library.adt.tnode.types.tnode.CDATASectionNode) ) {{  String  tomMatch570NameNumber_freshVar_27= tomMatch570NameNumber_freshVar_28.getData() ;if ( true ) {

        write("<![CDATA["+tomMatch570NameNumber_freshVar_27+"]]>");
        return;
      }}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_31=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_31 instanceof tom.library.adt.tnode.types.tnode.ProcessingInstructionNode) ) {{  String  tomMatch570NameNumber_freshVar_29= tomMatch570NameNumber_freshVar_31.getTarget() ;{  String  tomMatch570NameNumber_freshVar_30= tomMatch570NameNumber_freshVar_31.getData() ;if ( true ) {

        write("<?"+tomMatch570NameNumber_freshVar_29+" "+tomMatch570NameNumber_freshVar_30+"?>");
        return;
      }}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_34=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_34 instanceof tom.library.adt.tnode.types.tnode.EntityReferenceNode) ) {{  String  tomMatch570NameNumber_freshVar_32= tomMatch570NameNumber_freshVar_34.getName() ;{  tom.library.adt.tnode.types.TNodeList  tomMatch570NameNumber_freshVar_33= tomMatch570NameNumber_freshVar_34.getChildList() ;if ( true ) {

        write("&"+tomMatch570NameNumber_freshVar_32+";");
        return;
      }}}}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumber_freshVar_35=tomMatch570NameNumberfreshSubject_1;if ( (tomMatch570NameNumber_freshVar_35 instanceof tom.library.adt.tnode.types.tnode.EmptyNode) ) {if ( true ) {

        return;
      }}}}}if ( (n instanceof tom.library.adt.tnode.types.TNode) ) {{  tom.library.adt.tnode.types.TNode  tomMatch570NameNumberfreshSubject_1=(( tom.library.adt.tnode.types.TNode )n);if ( true ) {

        System.out.println("Unknown type of TNode : "+n);
      }}}}

    write("\n");
  }

  private void tnodeListToXML(TNodeList list) {
    if(list.isEmptyconcTNode()) {
      return;
    }
    TNode t = list.getHeadconcTNode();
    TNodeList l = list.getTailconcTNode();
    tnodeToXML(t);
    tnodeListToXML(l);
  }

  private void write(String s) {
    try {
      if (out != null) {
    out.write(s.getBytes("UTF-8"));
    }
      if (writer != null) {
    writer.write(s);
    }
    } catch (IOException e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
  }

}
