/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Copyright (c) 2000-2007, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the INRIA nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.library.bytecode;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.Label;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;

import java.util.HashMap;

public class TMethodGenerator implements MethodVisitor {
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_TLocalVariable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariable(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariable ;}private static boolean tom_equal_term_TMethodCode(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodCode(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodCode ;}private static boolean tom_equal_term_TSignature(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TSignature(Object t) { return  t instanceof tom.library.adt.bytecode.types.TSignature ;}private static boolean tom_equal_term_TStringList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TStringList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TStringList ;}private static boolean tom_equal_term_TMethod(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethod(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethod ;}private static boolean tom_equal_term_TLabelList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabelList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabelList ;}private static boolean tom_equal_term_TInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstruction(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstruction ;}private static boolean tom_equal_term_TValue(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TValue(Object t) { return  t instanceof tom.library.adt.bytecode.types.TValue ;}private static boolean tom_equal_term_TTryCatchBlockList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlockList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlockList ;}private static boolean tom_equal_term_TAccessList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TAccessList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TAccessList ;}private static boolean tom_equal_term_TMethodDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodDescriptor ;}private static boolean tom_equal_term_TFieldDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TFieldDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TFieldDescriptor ;}private static boolean tom_equal_term_TTryCatchBlock(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlock(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlock ;}private static boolean tom_equal_term_TintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TintList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TintList ;}private static boolean tom_equal_term_TMethodInfo(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodInfo(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodInfo ;}private static boolean tom_equal_term_THandler(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_THandler(Object t) { return  t instanceof tom.library.adt.bytecode.types.THandler ;}private static boolean tom_equal_term_TInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstructionList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstructionList ;}private static boolean tom_equal_term_TLabel(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabel(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabel ;}private static boolean tom_equal_term_TLocalVariableList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariableList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariableList ;}private static  tom.library.adt.bytecode.types.TLocalVariable  tom_make_LocalVariable( String  t0,  String  t1,  tom.library.adt.bytecode.types.TSignature  t2,  tom.library.adt.bytecode.types.TLabel  t3,  tom.library.adt.bytecode.types.TLabel  t4,  int  t5) { return  tom.library.adt.bytecode.types.tlocalvariable.LocalVariable.make(t0, t1, t2, t3, t4, t5) ; }private static  tom.library.adt.bytecode.types.TMethodCode  tom_make_MethodCode( tom.library.adt.bytecode.types.TInstructionList  t0,  tom.library.adt.bytecode.types.TLocalVariableList  t1,  tom.library.adt.bytecode.types.TTryCatchBlockList  t2) { return  tom.library.adt.bytecode.types.tmethodcode.MethodCode.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TMethodCode  tom_make_EmptyCode() { return  tom.library.adt.bytecode.types.tmethodcode.EmptyCode.make() ; }private static  tom.library.adt.bytecode.types.TSignature  tom_make_Signature( String  t0) { return  tom.library.adt.bytecode.types.tsignature.Signature.make(t0) ; }private static  tom.library.adt.bytecode.types.TMethod  tom_make_Method( tom.library.adt.bytecode.types.TMethodInfo  t0,  tom.library.adt.bytecode.types.TMethodCode  t1) { return  tom.library.adt.bytecode.types.tmethod.Method.make(t0, t1) ; }private static  tom.library.adt.bytecode.types.TLabelList  tom_make_ConsLabelList( tom.library.adt.bytecode.types.TLabel  t0,  tom.library.adt.bytecode.types.TLabelList  t1) { return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(t0, t1) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Anchor( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Anchor.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Nop() { return  tom.library.adt.bytecode.types.tinstruction.Nop.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Aconst_null() { return  tom.library.adt.bytecode.types.tinstruction.Aconst_null.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_m1() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_m1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_0() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_0.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_1() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_2() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_3() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_3.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_4() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_4.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iconst_5() { return  tom.library.adt.bytecode.types.tinstruction.Iconst_5.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lconst_0() { return  tom.library.adt.bytecode.types.tinstruction.Lconst_0.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lconst_1() { return  tom.library.adt.bytecode.types.tinstruction.Lconst_1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fconst_0() { return  tom.library.adt.bytecode.types.tinstruction.Fconst_0.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fconst_1() { return  tom.library.adt.bytecode.types.tinstruction.Fconst_1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fconst_2() { return  tom.library.adt.bytecode.types.tinstruction.Fconst_2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dconst_0() { return  tom.library.adt.bytecode.types.tinstruction.Dconst_0.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dconst_1() { return  tom.library.adt.bytecode.types.tinstruction.Dconst_1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Bipush( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Bipush.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Sipush( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Sipush.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ldc( tom.library.adt.bytecode.types.TValue  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ldc.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iload( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Iload.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lload( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Lload.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fload( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Fload.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dload( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Dload.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Aload( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Aload.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iaload() { return  tom.library.adt.bytecode.types.tinstruction.Iaload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Laload() { return  tom.library.adt.bytecode.types.tinstruction.Laload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Faload() { return  tom.library.adt.bytecode.types.tinstruction.Faload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Daload() { return  tom.library.adt.bytecode.types.tinstruction.Daload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Aaload() { return  tom.library.adt.bytecode.types.tinstruction.Aaload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Baload() { return  tom.library.adt.bytecode.types.tinstruction.Baload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Caload() { return  tom.library.adt.bytecode.types.tinstruction.Caload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Saload() { return  tom.library.adt.bytecode.types.tinstruction.Saload.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Istore( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Istore.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lstore( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Lstore.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fstore( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Fstore.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dstore( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Dstore.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Astore( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Astore.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iastore() { return  tom.library.adt.bytecode.types.tinstruction.Iastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lastore() { return  tom.library.adt.bytecode.types.tinstruction.Lastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fastore() { return  tom.library.adt.bytecode.types.tinstruction.Fastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dastore() { return  tom.library.adt.bytecode.types.tinstruction.Dastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Aastore() { return  tom.library.adt.bytecode.types.tinstruction.Aastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Bastore() { return  tom.library.adt.bytecode.types.tinstruction.Bastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Castore() { return  tom.library.adt.bytecode.types.tinstruction.Castore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Sastore() { return  tom.library.adt.bytecode.types.tinstruction.Sastore.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Pop() { return  tom.library.adt.bytecode.types.tinstruction.Pop.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Pop2() { return  tom.library.adt.bytecode.types.tinstruction.Pop2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup() { return  tom.library.adt.bytecode.types.tinstruction.Dup.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup_x1() { return  tom.library.adt.bytecode.types.tinstruction.Dup_x1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup_x2() { return  tom.library.adt.bytecode.types.tinstruction.Dup_x2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup2() { return  tom.library.adt.bytecode.types.tinstruction.Dup2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup2_x1() { return  tom.library.adt.bytecode.types.tinstruction.Dup2_x1.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dup2_x2() { return  tom.library.adt.bytecode.types.tinstruction.Dup2_x2.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Swap() { return  tom.library.adt.bytecode.types.tinstruction.Swap.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iadd() { return  tom.library.adt.bytecode.types.tinstruction.Iadd.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ladd() { return  tom.library.adt.bytecode.types.tinstruction.Ladd.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fadd() { return  tom.library.adt.bytecode.types.tinstruction.Fadd.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dadd() { return  tom.library.adt.bytecode.types.tinstruction.Dadd.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Isub() { return  tom.library.adt.bytecode.types.tinstruction.Isub.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lsub() { return  tom.library.adt.bytecode.types.tinstruction.Lsub.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fsub() { return  tom.library.adt.bytecode.types.tinstruction.Fsub.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dsub() { return  tom.library.adt.bytecode.types.tinstruction.Dsub.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Imul() { return  tom.library.adt.bytecode.types.tinstruction.Imul.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lmul() { return  tom.library.adt.bytecode.types.tinstruction.Lmul.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fmul() { return  tom.library.adt.bytecode.types.tinstruction.Fmul.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dmul() { return  tom.library.adt.bytecode.types.tinstruction.Dmul.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Idiv() { return  tom.library.adt.bytecode.types.tinstruction.Idiv.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ldiv() { return  tom.library.adt.bytecode.types.tinstruction.Ldiv.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fdiv() { return  tom.library.adt.bytecode.types.tinstruction.Fdiv.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ddiv() { return  tom.library.adt.bytecode.types.tinstruction.Ddiv.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Irem() { return  tom.library.adt.bytecode.types.tinstruction.Irem.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lrem() { return  tom.library.adt.bytecode.types.tinstruction.Lrem.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Frem() { return  tom.library.adt.bytecode.types.tinstruction.Frem.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Drem() { return  tom.library.adt.bytecode.types.tinstruction.Drem.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ineg() { return  tom.library.adt.bytecode.types.tinstruction.Ineg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lneg() { return  tom.library.adt.bytecode.types.tinstruction.Lneg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fneg() { return  tom.library.adt.bytecode.types.tinstruction.Fneg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dneg() { return  tom.library.adt.bytecode.types.tinstruction.Dneg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ishl() { return  tom.library.adt.bytecode.types.tinstruction.Ishl.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lshl() { return  tom.library.adt.bytecode.types.tinstruction.Lshl.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ishr() { return  tom.library.adt.bytecode.types.tinstruction.Ishr.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lshr() { return  tom.library.adt.bytecode.types.tinstruction.Lshr.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iushr() { return  tom.library.adt.bytecode.types.tinstruction.Iushr.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lushr() { return  tom.library.adt.bytecode.types.tinstruction.Lushr.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iand() { return  tom.library.adt.bytecode.types.tinstruction.Iand.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Land() { return  tom.library.adt.bytecode.types.tinstruction.Land.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ior() { return  tom.library.adt.bytecode.types.tinstruction.Ior.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lor() { return  tom.library.adt.bytecode.types.tinstruction.Lor.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ixor() { return  tom.library.adt.bytecode.types.tinstruction.Ixor.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lxor() { return  tom.library.adt.bytecode.types.tinstruction.Lxor.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iinc( int  t0,  int  t1) { return  tom.library.adt.bytecode.types.tinstruction.Iinc.make(t0, t1) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2l() { return  tom.library.adt.bytecode.types.tinstruction.I2l.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2f() { return  tom.library.adt.bytecode.types.tinstruction.I2f.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2d() { return  tom.library.adt.bytecode.types.tinstruction.I2d.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_L2i() { return  tom.library.adt.bytecode.types.tinstruction.L2i.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_L2f() { return  tom.library.adt.bytecode.types.tinstruction.L2f.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_L2d() { return  tom.library.adt.bytecode.types.tinstruction.L2d.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_F2i() { return  tom.library.adt.bytecode.types.tinstruction.F2i.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_F2l() { return  tom.library.adt.bytecode.types.tinstruction.F2l.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_F2d() { return  tom.library.adt.bytecode.types.tinstruction.F2d.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_D2i() { return  tom.library.adt.bytecode.types.tinstruction.D2i.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_D2l() { return  tom.library.adt.bytecode.types.tinstruction.D2l.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_D2f() { return  tom.library.adt.bytecode.types.tinstruction.D2f.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2b() { return  tom.library.adt.bytecode.types.tinstruction.I2b.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2c() { return  tom.library.adt.bytecode.types.tinstruction.I2c.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_I2s() { return  tom.library.adt.bytecode.types.tinstruction.I2s.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lcmp() { return  tom.library.adt.bytecode.types.tinstruction.Lcmp.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fcmpl() { return  tom.library.adt.bytecode.types.tinstruction.Fcmpl.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Fcmpg() { return  tom.library.adt.bytecode.types.tinstruction.Fcmpg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dcmpl() { return  tom.library.adt.bytecode.types.tinstruction.Dcmpl.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dcmpg() { return  tom.library.adt.bytecode.types.tinstruction.Dcmpg.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifeq( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifeq.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifne( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifne.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Iflt( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Iflt.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifge( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifge.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifgt( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifgt.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifle( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifle.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmpeq( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmpeq.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmpne( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmpne.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmplt( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmplt.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmpge( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmpge.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmpgt( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmpgt.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_icmple( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_icmple.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_acmpeq( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_acmpeq.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_If_acmpne( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.If_acmpne.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Goto( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Goto.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Jsr( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Jsr.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ret( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ret.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Tableswitch( int  t0,  int  t1,  tom.library.adt.bytecode.types.TLabel  t2,  tom.library.adt.bytecode.types.TLabelList  t3) { return  tom.library.adt.bytecode.types.tinstruction.Tableswitch.make(t0, t1, t2, t3) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lookupswitch( tom.library.adt.bytecode.types.TLabel  t0,  tom.library.adt.bytecode.types.TintList  t1,  tom.library.adt.bytecode.types.TLabelList  t2) { return  tom.library.adt.bytecode.types.tinstruction.Lookupswitch.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ireturn() { return  tom.library.adt.bytecode.types.tinstruction.Ireturn.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Lreturn() { return  tom.library.adt.bytecode.types.tinstruction.Lreturn.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Freturn() { return  tom.library.adt.bytecode.types.tinstruction.Freturn.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Dreturn() { return  tom.library.adt.bytecode.types.tinstruction.Dreturn.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Areturn() { return  tom.library.adt.bytecode.types.tinstruction.Areturn.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Return() { return  tom.library.adt.bytecode.types.tinstruction.Return.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Getstatic( String  t0,  String  t1,  tom.library.adt.bytecode.types.TFieldDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Getstatic.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Putstatic( String  t0,  String  t1,  tom.library.adt.bytecode.types.TFieldDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Putstatic.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Getfield( String  t0,  String  t1,  tom.library.adt.bytecode.types.TFieldDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Getfield.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Putfield( String  t0,  String  t1,  tom.library.adt.bytecode.types.TFieldDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Putfield.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Invokevirtual( String  t0,  String  t1,  tom.library.adt.bytecode.types.TMethodDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Invokevirtual.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Invokespecial( String  t0,  String  t1,  tom.library.adt.bytecode.types.TMethodDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Invokespecial.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Invokestatic( String  t0,  String  t1,  tom.library.adt.bytecode.types.TMethodDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Invokestatic.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Invokeinterface( String  t0,  String  t1,  tom.library.adt.bytecode.types.TMethodDescriptor  t2) { return  tom.library.adt.bytecode.types.tinstruction.Invokeinterface.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_New( String  t0) { return  tom.library.adt.bytecode.types.tinstruction.New.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Newarray( int  t0) { return  tom.library.adt.bytecode.types.tinstruction.Newarray.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Anewarray( String  t0) { return  tom.library.adt.bytecode.types.tinstruction.Anewarray.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Arraylength() { return  tom.library.adt.bytecode.types.tinstruction.Arraylength.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Athrow() { return  tom.library.adt.bytecode.types.tinstruction.Athrow.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Checkcast( String  t0) { return  tom.library.adt.bytecode.types.tinstruction.Checkcast.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Instanceof( String  t0) { return  tom.library.adt.bytecode.types.tinstruction.Instanceof.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Monitorenter() { return  tom.library.adt.bytecode.types.tinstruction.Monitorenter.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Monitorexit() { return  tom.library.adt.bytecode.types.tinstruction.Monitorexit.make() ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Multianewarray( String  t0,  int  t1) { return  tom.library.adt.bytecode.types.tinstruction.Multianewarray.make(t0, t1) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifnull( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifnull.make(t0) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_make_Ifnonnull( tom.library.adt.bytecode.types.TLabel  t0) { return  tom.library.adt.bytecode.types.tinstruction.Ifnonnull.make(t0) ; }private static  tom.library.adt.bytecode.types.TTryCatchBlock  tom_make_TryCatchBlock( tom.library.adt.bytecode.types.TLabel  t0,  tom.library.adt.bytecode.types.TLabel  t1,  tom.library.adt.bytecode.types.THandler  t2) { return  tom.library.adt.bytecode.types.ttrycatchblock.TryCatchBlock.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TMethodInfo  tom_make_MethodInfo( String  t0,  tom.library.adt.bytecode.types.TAccessList  t1,  String  t2,  tom.library.adt.bytecode.types.TMethodDescriptor  t3,  tom.library.adt.bytecode.types.TSignature  t4,  tom.library.adt.bytecode.types.TStringList  t5) { return  tom.library.adt.bytecode.types.tmethodinfo.MethodInfo.make(t0, t1, t2, t3, t4, t5) ; }private static  tom.library.adt.bytecode.types.THandler  tom_make_CatchHandler( tom.library.adt.bytecode.types.TLabel  t0,  String  t1) { return  tom.library.adt.bytecode.types.thandler.CatchHandler.make(t0, t1) ; }private static  tom.library.adt.bytecode.types.TLabel  tom_make_Label( int  t0) { return  tom.library.adt.bytecode.types.tlabel.Label.make(t0) ; }private static boolean tom_is_fun_sym_LabelList( tom.library.adt.bytecode.types.TLabelList  t) { return  t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList || t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_empty_list_LabelList() { return  tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() ; }private static  tom.library.adt.bytecode.types.TLabelList  tom_cons_list_LabelList( tom.library.adt.bytecode.types.TLabel  e,  tom.library.adt.bytecode.types.TLabelList  l) { return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLabel  tom_get_head_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.getHeadLabelList() ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_tail_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.getTailLabelList() ;}private static boolean tom_is_empty_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.isEmptyLabelList() ;}   private static   tom.library.adt.bytecode.types.TLabelList  tom_append_list_LabelList( tom.library.adt.bytecode.types.TLabelList l1,  tom.library.adt.bytecode.types.TLabelList  l2) {     if(tom_is_empty_LabelList_TLabelList(l1)) {       return l2;     } else if(tom_is_empty_LabelList_TLabelList(l2)) {       return l1;     } else if(tom_is_empty_LabelList_TLabelList(tom_get_tail_LabelList_TLabelList(l1))) {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(l1),tom_append_list_LabelList(tom_get_tail_LabelList_TLabelList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TLabelList  tom_get_slice_LabelList( tom.library.adt.bytecode.types.TLabelList  begin,  tom.library.adt.bytecode.types.TLabelList  end, tom.library.adt.bytecode.types.TLabelList  tail) {     if(tom_equal_term_TLabelList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(begin),( tom.library.adt.bytecode.types.TLabelList )tom_get_slice_LabelList(tom_get_tail_LabelList_TLabelList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  t) { return  t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList || t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_empty_list_TryCatchBlockList() { return  tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() ; }private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_cons_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlock  e,  tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TTryCatchBlock  tom_get_head_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.getHeadTryCatchBlockList() ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_tail_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.getTailTryCatchBlockList() ;}private static boolean tom_is_empty_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.isEmptyTryCatchBlockList() ;}   private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_append_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList l1,  tom.library.adt.bytecode.types.TTryCatchBlockList  l2) {     if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l1)) {       return l2;     } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l2)) {       return l1;     } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1))) {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),tom_append_list_TryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_slice_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  begin,  tom.library.adt.bytecode.types.TTryCatchBlockList  end, tom.library.adt.bytecode.types.TTryCatchBlockList  tail) {     if(tom_equal_term_TTryCatchBlockList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(begin),( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_slice_TryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_intList( tom.library.adt.bytecode.types.TintList  t) { return  t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList || t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList ;}private static  tom.library.adt.bytecode.types.TintList  tom_empty_list_intList() { return  tom.library.adt.bytecode.types.tintlist.EmptyintList.make() ; }private static  tom.library.adt.bytecode.types.TintList  tom_cons_list_intList( int  e,  tom.library.adt.bytecode.types.TintList  l) { return  tom.library.adt.bytecode.types.tintlist.ConsintList.make(e,l) ; }private static  int  tom_get_head_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.getHeadintList() ;}private static  tom.library.adt.bytecode.types.TintList  tom_get_tail_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.getTailintList() ;}private static boolean tom_is_empty_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.isEmptyintList() ;}   private static   tom.library.adt.bytecode.types.TintList  tom_append_list_intList( tom.library.adt.bytecode.types.TintList l1,  tom.library.adt.bytecode.types.TintList  l2) {     if(tom_is_empty_intList_TintList(l1)) {       return l2;     } else if(tom_is_empty_intList_TintList(l2)) {       return l1;     } else if(tom_is_empty_intList_TintList(tom_get_tail_intList_TintList(l1))) {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(l1),tom_append_list_intList(tom_get_tail_intList_TintList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TintList  tom_get_slice_intList( tom.library.adt.bytecode.types.TintList  begin,  tom.library.adt.bytecode.types.TintList  end, tom.library.adt.bytecode.types.TintList  tail) {     if(tom_equal_term_TintList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(begin),( tom.library.adt.bytecode.types.TintList )tom_get_slice_intList(tom_get_tail_intList_TintList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_InstructionList( tom.library.adt.bytecode.types.TInstructionList  t) { return  t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList || t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList ;}private static  tom.library.adt.bytecode.types.TInstructionList  tom_empty_list_InstructionList() { return  tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() ; }private static  tom.library.adt.bytecode.types.TInstructionList  tom_cons_list_InstructionList( tom.library.adt.bytecode.types.TInstruction  e,  tom.library.adt.bytecode.types.TInstructionList  l) { return  tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TInstruction  tom_get_head_InstructionList_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  l) { return  l.getHeadInstructionList() ;}private static  tom.library.adt.bytecode.types.TInstructionList  tom_get_tail_InstructionList_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  l) { return  l.getTailInstructionList() ;}private static boolean tom_is_empty_InstructionList_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  l) { return  l.isEmptyInstructionList() ;}   private static   tom.library.adt.bytecode.types.TInstructionList  tom_append_list_InstructionList( tom.library.adt.bytecode.types.TInstructionList l1,  tom.library.adt.bytecode.types.TInstructionList  l2) {     if(tom_is_empty_InstructionList_TInstructionList(l1)) {       return l2;     } else if(tom_is_empty_InstructionList_TInstructionList(l2)) {       return l1;     } else if(tom_is_empty_InstructionList_TInstructionList(tom_get_tail_InstructionList_TInstructionList(l1))) {       return ( tom.library.adt.bytecode.types.TInstructionList )tom_cons_list_InstructionList(tom_get_head_InstructionList_TInstructionList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TInstructionList )tom_cons_list_InstructionList(tom_get_head_InstructionList_TInstructionList(l1),tom_append_list_InstructionList(tom_get_tail_InstructionList_TInstructionList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TInstructionList  tom_get_slice_InstructionList( tom.library.adt.bytecode.types.TInstructionList  begin,  tom.library.adt.bytecode.types.TInstructionList  end, tom.library.adt.bytecode.types.TInstructionList  tail) {     if(tom_equal_term_TInstructionList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TInstructionList )tom_cons_list_InstructionList(tom_get_head_InstructionList_TInstructionList(begin),( tom.library.adt.bytecode.types.TInstructionList )tom_get_slice_InstructionList(tom_get_tail_InstructionList_TInstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  t) { return  t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList || t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_empty_list_LocalVariableList() { return  tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() ; }private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_cons_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariable  e,  tom.library.adt.bytecode.types.TLocalVariableList  l) { return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLocalVariable  tom_get_head_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.getHeadLocalVariableList() ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_get_tail_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.getTailLocalVariableList() ;}private static boolean tom_is_empty_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.isEmptyLocalVariableList() ;}   private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_append_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList l1,  tom.library.adt.bytecode.types.TLocalVariableList  l2) {     if(tom_is_empty_LocalVariableList_TLocalVariableList(l1)) {       return l2;     } else if(tom_is_empty_LocalVariableList_TLocalVariableList(l2)) {       return l1;     } else if(tom_is_empty_LocalVariableList_TLocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(l1))) {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(l1),tom_append_list_LocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_get_slice_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  begin,  tom.library.adt.bytecode.types.TLocalVariableList  end, tom.library.adt.bytecode.types.TLocalVariableList  tail) {     if(tom_equal_term_TLocalVariableList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(begin),( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_slice_LocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(begin),end,tail));     }   }    

  private BytecodeReader bytecodeReader;
  private TMethod method;
  private TInstructionList instructions;
  private TTryCatchBlockList tryCatchBlocks;
  private TLocalVariableList localVariables;

  private static int labelCounter = 0;
  private HashMap labelsMap = new HashMap();

  private TLabel buildTLabel(Label label) {
    Object o = labelsMap.get(label);
    TLabel l = null;
    if(o == null) {
      l = tom_make_Label(labelCounter++);
      labelsMap.put(label, l);
    } else
      l = (TLabel)o;

    return l;
  }

  private TLabelList buildTLabelList(Label[] labels) {
    TLabelList labList = tom_empty_list_LabelList();
    if(labels != null) {
      for(int i = labels.length - 1; i >= 0; i--) {
        labList = tom_make_ConsLabelList(buildTLabel(labels[i]),labList);
      }
    }

    return labList;
  }

  public TMethodGenerator (
      BytecodeReader cg,
      TAccessList access,
      String name,
      TMethodDescriptor desc,
      TSignature signature,
      TStringList exceptions) {
    bytecodeReader = cg;
    method = tom_make_Method(tom_make_MethodInfo(bytecodeReader.getTClass().getinfo().getname(),access,name,desc,signature,exceptions),tom_make_EmptyCode());
  }

  private void appendInstruction(TInstruction ins) {
    instructions = tom_append_list_InstructionList(instructions,tom_cons_list_InstructionList(ins,tom_empty_list_InstructionList()));
  }

  private void appendTryCatchBlock(TTryCatchBlock tcb) {
    tryCatchBlocks = tom_append_list_TryCatchBlockList(tryCatchBlocks,tom_cons_list_TryCatchBlockList(tcb,tom_empty_list_TryCatchBlockList()));
  }
  private void appendLocalVariable(TLocalVariable lv) {
    localVariables = tom_append_list_LocalVariableList(localVariables,tom_cons_list_LocalVariableList(lv,tom_empty_list_LocalVariableList()));
  }

  public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
    // TODO
    return null;
  }

  public AnnotationVisitor visitAnnotationDefault() {
    // TODO
    return null;
  }

  public void visitAttribute(Attribute attr) {
    // TODO
  }

  public void visitCode() {
    instructions = tom_empty_list_InstructionList();
    tryCatchBlocks = tom_empty_list_TryCatchBlockList();
    localVariables = tom_empty_list_LocalVariableList();
  }

  public void visitEnd() {
    method = tom_make_Method(method.getinfo(),tom_make_MethodCode(instructions,localVariables,tryCatchBlocks));

    bytecodeReader.appendMethod(method);
  }

  public void visitMaxs(int maxStack, int maxLocals) {
  }

  public void visitFrame(
      int type,
      int nLocal,
      Object[] local,
      int nStack,
      Object[] stack) {
  }

  public void visitFieldInsn(
      int opcode,
      String owner,
      String name,
      String desc) {
    TInstruction ins = null;
    switch(opcode) {
      case Opcodes.GETSTATIC:
        ins = tom_make_Getstatic(owner,name,ToolBox.buildTFieldDescriptor(desc));
        break;
      case Opcodes.PUTSTATIC:
        ins = tom_make_Putstatic(owner,name,ToolBox.buildTFieldDescriptor(desc));
        break;
      case Opcodes.GETFIELD:
        ins = tom_make_Getfield(owner,name,ToolBox.buildTFieldDescriptor(desc));
        break;
      case Opcodes.PUTFIELD:
        ins = tom_make_Putfield(owner,name,ToolBox.buildTFieldDescriptor(desc));
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }

  public void visitIincInsn(int var, int increment) {
    appendInstruction(tom_make_Iinc(increment,var));
  }

  public void visitInsn(int opcode) {
    TInstruction ins = null;
    switch(opcode) {
      case Opcodes.NOP:
        ins = tom_make_Nop();
        break;
      case Opcodes.ACONST_NULL:
        ins = tom_make_Aconst_null();
        break;
      case Opcodes.ICONST_M1:
        ins = tom_make_Iconst_m1();
        break;
      case Opcodes.ICONST_0:
        ins = tom_make_Iconst_0();
        break;
      case Opcodes.ICONST_1:
        ins = tom_make_Iconst_1();
        break;
      case Opcodes.ICONST_2:
        ins = tom_make_Iconst_2();
        break;
      case Opcodes.ICONST_3:
        ins = tom_make_Iconst_3();
        break;
      case Opcodes.ICONST_4:
        ins = tom_make_Iconst_4();
        break;
      case Opcodes.ICONST_5:
        ins = tom_make_Iconst_5();
        break;
      case Opcodes.LCONST_0:
        ins = tom_make_Lconst_0();
        break;
      case Opcodes.LCONST_1:
        ins = tom_make_Lconst_1();
        break;
      case Opcodes.FCONST_0:
        ins = tom_make_Fconst_0();
        break;
      case Opcodes.FCONST_1:
        ins = tom_make_Fconst_1();
        break;
      case Opcodes.FCONST_2:
        ins = tom_make_Fconst_2();
        break;
      case Opcodes.DCONST_0:
        ins = tom_make_Dconst_0();
        break;
      case Opcodes.DCONST_1:
        ins = tom_make_Dconst_1();
        break;
      case Opcodes.IALOAD:
        ins = tom_make_Iaload();
        break;
      case Opcodes.LALOAD:
        ins = tom_make_Laload();
        break;
      case Opcodes.FALOAD:
        ins = tom_make_Faload();
        break;
      case Opcodes.DALOAD:
        ins = tom_make_Daload();
        break;
      case Opcodes.AALOAD:
        ins = tom_make_Aaload();
        break;
      case Opcodes.BALOAD:
        ins = tom_make_Baload();
        break;
      case Opcodes.CALOAD:
        ins = tom_make_Caload();
        break;
      case Opcodes.SALOAD:
        ins = tom_make_Saload();
        break;
      case Opcodes.IASTORE:
        ins = tom_make_Iastore();
        break;
      case Opcodes.LASTORE:
        ins = tom_make_Lastore();
        break;
      case Opcodes.FASTORE:
        ins = tom_make_Fastore();
        break;
      case Opcodes.DASTORE:
        ins = tom_make_Dastore();
        break;
      case Opcodes.AASTORE:
        ins = tom_make_Aastore();
        break;
      case Opcodes.BASTORE:
        ins = tom_make_Bastore();
        break;
      case Opcodes.CASTORE:
        ins = tom_make_Castore();
        break;
      case Opcodes.SASTORE:
        ins = tom_make_Sastore();
        break;
      case Opcodes.POP:
        ins = tom_make_Pop();
        break;
      case Opcodes.POP2:
        ins = tom_make_Pop2();
        break;
      case Opcodes.DUP:
        ins = tom_make_Dup();
        break;
      case Opcodes.DUP_X1:
        ins = tom_make_Dup_x1();
        break;
      case Opcodes.DUP_X2:
        ins = tom_make_Dup_x2();
        break;
      case Opcodes.DUP2:
        ins = tom_make_Dup2();
        break;
      case Opcodes.DUP2_X1:
        ins = tom_make_Dup2_x1();
        break;
      case Opcodes.DUP2_X2:
        ins = tom_make_Dup2_x2();
        break;
      case Opcodes.SWAP:
        ins = tom_make_Swap();
        break;
      case Opcodes.IADD:
        ins = tom_make_Iadd();
        break;
      case Opcodes.LADD:
        ins = tom_make_Ladd();
        break;
      case Opcodes.FADD:
        ins = tom_make_Fadd();
        break;
      case Opcodes.DADD:
        ins = tom_make_Dadd();
        break;
      case Opcodes.ISUB:
        ins = tom_make_Isub();
        break;
      case Opcodes.LSUB:
        ins = tom_make_Lsub();
        break;
      case Opcodes.FSUB:
        ins = tom_make_Fsub();
        break;
      case Opcodes.DSUB:
        ins = tom_make_Dsub();
        break;
      case Opcodes.IMUL:
        ins = tom_make_Imul();
        break;
      case Opcodes.LMUL:
        ins = tom_make_Lmul();
        break;
      case Opcodes.FMUL:
        ins = tom_make_Fmul();
        break;
      case Opcodes.DMUL:
        ins = tom_make_Dmul();
        break;
      case Opcodes.IDIV:
        ins = tom_make_Idiv();
        break;
      case Opcodes.LDIV:
        ins = tom_make_Ldiv();
        break;
      case Opcodes.FDIV:
        ins = tom_make_Fdiv();
        break;
      case Opcodes.DDIV:
        ins = tom_make_Ddiv();
        break;
      case Opcodes.IREM:
        ins = tom_make_Irem();
        break;
      case Opcodes.LREM:
        ins = tom_make_Lrem();
        break;
      case Opcodes.FREM:
        ins = tom_make_Frem();
        break;
      case Opcodes.DREM:
        ins = tom_make_Drem();
        break;
      case Opcodes.INEG:
        ins = tom_make_Ineg();
        break;
      case Opcodes.LNEG:
        ins = tom_make_Lneg();
        break;
      case Opcodes.FNEG:
        ins = tom_make_Fneg();
        break;
      case Opcodes.DNEG:
        ins = tom_make_Dneg();
        break;
      case Opcodes.ISHL:
        ins = tom_make_Ishl();
        break;
      case Opcodes.LSHL:
        ins = tom_make_Lshl();
        break;
      case Opcodes.ISHR:
        ins = tom_make_Ishr();
        break;
      case Opcodes.LSHR:
        ins = tom_make_Lshr();
        break;
      case Opcodes.IUSHR:
        ins = tom_make_Iushr();
        break;
      case Opcodes.LUSHR:
        ins = tom_make_Lushr();
        break;
      case Opcodes.IAND:
        ins = tom_make_Iand();
        break;
      case Opcodes.LAND:
        ins = tom_make_Land();
        break;
      case Opcodes.IOR:
        ins = tom_make_Ior();
        break;
      case Opcodes.LOR:
        ins = tom_make_Lor();
        break;
      case Opcodes.IXOR:
        ins = tom_make_Ixor();
        break;
      case Opcodes.LXOR:
        ins = tom_make_Lxor();
        break;
      case Opcodes.I2L:
        ins = tom_make_I2l();
        break;
      case Opcodes.I2F:
        ins = tom_make_I2f();
        break;
      case Opcodes.I2D:
        ins = tom_make_I2d();
        break;
      case Opcodes.L2I:
        ins = tom_make_L2i();
        break;
      case Opcodes.L2F:
        ins = tom_make_L2f();
        break;
      case Opcodes.L2D:
        ins = tom_make_L2d();
        break;
      case Opcodes.F2I:
        ins = tom_make_F2i();
        break;
      case Opcodes.F2L:
        ins = tom_make_F2l();
        break;
      case Opcodes.F2D:
        ins = tom_make_F2d();
        break;
      case Opcodes.D2I:
        ins = tom_make_D2i();
        break;
      case Opcodes.D2L:
        ins = tom_make_D2l();
        break;
      case Opcodes.D2F:
        ins = tom_make_D2f();
        break;
      case Opcodes.I2B:
        ins = tom_make_I2b();
        break;
      case Opcodes.I2C:
        ins = tom_make_I2c();
        break;
      case Opcodes.I2S:
        ins = tom_make_I2s();
        break;
      case Opcodes.LCMP:
        ins = tom_make_Lcmp();
        break;
      case Opcodes.FCMPL:
        ins = tom_make_Fcmpl();
        break;
      case Opcodes.FCMPG:
        ins = tom_make_Fcmpg();
        break;
      case Opcodes.DCMPL:
        ins = tom_make_Dcmpl();
        break;
      case Opcodes.DCMPG:
        ins = tom_make_Dcmpg();
        break;
      case Opcodes.IRETURN:
        ins = tom_make_Ireturn();
        break;
      case Opcodes.LRETURN:
        ins = tom_make_Lreturn();
        break;
      case Opcodes.FRETURN:
        ins = tom_make_Freturn();
        break;
      case Opcodes.DRETURN:
        ins = tom_make_Dreturn();
        break;
      case Opcodes.ARETURN:
        ins = tom_make_Areturn();
        break;
      case Opcodes.RETURN:
        ins = tom_make_Return();
        break;
      case Opcodes.ARRAYLENGTH:
        ins = tom_make_Arraylength();
        break;
      case Opcodes.ATHROW:
        ins = tom_make_Athrow();
        break;
      case Opcodes.MONITORENTER:
        ins = tom_make_Monitorenter();
        break;
      case Opcodes.MONITOREXIT:
        ins = tom_make_Monitorexit();
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }

  public void visitIntInsn(int opcode, int operand) {
    TInstruction ins = null;

    switch(opcode) {
      case Opcodes.BIPUSH:
        ins = tom_make_Bipush(operand);
        break;
      case Opcodes.SIPUSH:
        ins = tom_make_Sipush(operand);
        break;
      case Opcodes.NEWARRAY:
        ins = tom_make_Newarray(operand);
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }


  public void visitJumpInsn(int opcode, Label label) {
    TInstruction ins = null;

    TLabel l = buildTLabel(label);

    switch(opcode) {
      case Opcodes.IFEQ:
        ins = tom_make_Ifeq(l);
        break;
      case Opcodes.IFNE:
        ins = tom_make_Ifne(l);
        break;
      case Opcodes.IFLT:
        ins = tom_make_Iflt(l);
        break;
      case Opcodes.IFGE:
        ins = tom_make_Ifge(l);
        break;
      case Opcodes.IFGT:
        ins = tom_make_Ifgt(l);
        break;
      case Opcodes.IFLE:
        ins = tom_make_Ifle(l);
        break;
      case Opcodes.IF_ICMPEQ:
        ins = tom_make_If_icmpeq(l);
        break;
      case Opcodes.IF_ICMPNE:
        ins = tom_make_If_icmpne(l);
        break;
      case Opcodes.IF_ICMPLT:
        ins = tom_make_If_icmplt(l);
        break;
      case Opcodes.IF_ICMPGE:
        ins = tom_make_If_icmpge(l);
        break;
      case Opcodes.IF_ICMPGT:
        ins = tom_make_If_icmpgt(l);
        break;
      case Opcodes.IF_ICMPLE:
        ins = tom_make_If_icmple(l);
        break;
      case Opcodes.IF_ACMPEQ:
        ins = tom_make_If_acmpeq(l);
        break;
      case Opcodes.IF_ACMPNE:
        ins = tom_make_If_acmpne(l);
        break;
      case Opcodes.GOTO:
        ins = tom_make_Goto(l);
        break;
      case Opcodes.JSR:
        ins = tom_make_Jsr(l);
        break;
      case Opcodes.IFNULL:
        ins = tom_make_Ifnull(l);
        break;
      case Opcodes.IFNONNULL:
        ins = tom_make_Ifnonnull(l);
        break;
      default:
          System.err.println("Unsupported OpCode :" + opcode);
          System.exit(-1);
    }

    appendInstruction(ins);
  }

  public void visitLabel(Label label) {
    appendInstruction(tom_make_Anchor(buildTLabel(label)));
  }

  public void visitLdcInsn(Object cst) {
    appendInstruction(tom_make_Ldc(ToolBox.buildTValue(cst)));
  }

  public void visitLineNumber(int line, Label start) {
    // TODO
  }

  public void visitLocalVariable(
      String name,
      String desc,
      String signature,
      Label start,
      Label end,
      int index) {
    appendLocalVariable(tom_make_LocalVariable(name,desc,tom_make_Signature(signature),buildTLabel(start),buildTLabel(end),index));
  }

  public void visitLookupSwitchInsn(
      Label dflt,
      int[] keys,
      Label[] labels) {
    TintList kList = tom_empty_list_intList();

    appendInstruction(tom_make_Lookupswitch(buildTLabel(dflt),ToolBox.buildTintList(keys),buildTLabelList(labels)));
  }

  public void visitMethodInsn(
      int opcode,
      String owner,
      String name,
      String desc) {
    TInstruction ins = null;

    switch(opcode) {
      case Opcodes.INVOKEVIRTUAL:
        ins = tom_make_Invokevirtual(owner,name,ToolBox.buildTMethodDescriptor(desc));
        break;
      case Opcodes.INVOKESPECIAL:
        ins = tom_make_Invokespecial(owner,name,ToolBox.buildTMethodDescriptor(desc));
        break;
      case Opcodes.INVOKESTATIC:
        ins = tom_make_Invokestatic(owner,name,ToolBox.buildTMethodDescriptor(desc));
        break;
      case Opcodes.INVOKEINTERFACE:
        ins = tom_make_Invokeinterface(owner,name,ToolBox.buildTMethodDescriptor(desc));
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }

  public void visitMultiANewArrayInsn(String desc, int dims) {
    appendInstruction(tom_make_Multianewarray(desc,dims));
  }

  public AnnotationVisitor visitParameterAnnotation(
      int parameter,
      String desc,
      boolean visible) {
    // TODO
    return null;
  }

  public void visitTableSwitchInsn(
      int min,
      int max,
      Label dflt,
      Label[] labels) {
    appendInstruction(tom_make_Tableswitch(min,max,buildTLabel(dflt),buildTLabelList(labels)));
  }

  public void visitTryCatchBlock(
      Label start,
      Label end,
      Label handler,
      String type) {
    appendTryCatchBlock(tom_make_TryCatchBlock(buildTLabel(start),buildTLabel(end),tom_make_CatchHandler(buildTLabel(handler),type)));
  }

  public void visitTypeInsn(int opcode, String desc) {
    TInstruction ins = null;

    switch(opcode) {
      case Opcodes.NEW:
        ins = tom_make_New(desc);
        break;
      case Opcodes.ANEWARRAY:
        ins = tom_make_Anewarray(desc);
        break;
      case Opcodes.CHECKCAST:
        ins = tom_make_Checkcast(desc);
        break;
      case Opcodes.INSTANCEOF:
        ins = tom_make_Instanceof(desc);
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }

  public void visitVarInsn(int opcode, int var) {
    TInstruction ins = null;

    switch(opcode) {
      case Opcodes.ILOAD:
        ins = tom_make_Iload(var);
        break;
      case Opcodes.LLOAD:
        ins = tom_make_Lload(var);
        break;
      case Opcodes.FLOAD:
        ins = tom_make_Fload(var);
        break;
      case Opcodes.DLOAD:
        ins = tom_make_Dload(var);
        break;
      case Opcodes.ALOAD:
        ins = tom_make_Aload(var);
        break;
      case Opcodes.ISTORE:
        ins = tom_make_Istore(var);
        break;
      case Opcodes.LSTORE:
        ins = tom_make_Lstore(var);
        break;
      case Opcodes.FSTORE:
        ins = tom_make_Fstore(var);
        break;
      case Opcodes.DSTORE:
        ins = tom_make_Dstore(var);
        break;
      case Opcodes.ASTORE:
        ins = tom_make_Astore(var);
        break;
      case Opcodes.RET:
        ins = tom_make_Ret(var);
        break;
      default:
        System.err.println("Unsupported OpCode :" + opcode);
        System.exit(-1);
    }

    appendInstruction(ins);
  }
}

