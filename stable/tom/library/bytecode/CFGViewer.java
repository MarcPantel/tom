/*
 * Copyright (c) 2000-2016, Universite de Lorraine, Inria
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the Inria nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.library.bytecode;

import java.util.Map;
import java.util.HashMap;
import java.io.Writer;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassAdapter;

import tom.library.sl.*;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;

/**
 * A dot control flow graph exporter.
 * This class generates a control flow graph for each method of a class.
 */
public class CFGViewer {
  
          private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Sequence )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) ;       } else {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Sequence.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Sequence.make(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Choice )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) ;       } else {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Choice.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Choice.make(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.SequenceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.SequenceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.SequenceId.make(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.ChoiceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.ChoiceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.ChoiceId.make(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ): null ),end,tail)) ;   }      private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ), null ) ) , tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.Identity() )) ), null ) ) , null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("x") )) ), null ) ) , null ) ) ) ));} private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return (  tom.library.sl.Choice.make(s, tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) )  );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s, tom.library.sl.Sequence.make(( new tom.library.sl.MuVar("_x") ), null ) ) , tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Sequence.make(v, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make(v, tom.library.sl.Choice.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.SequenceId.make(v, tom.library.sl.SequenceId.make(( new tom.library.sl.MuVar("_x") ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.ChoiceId.make(v, tom.library.sl.ChoiceId.make(( new tom.library.sl.OneId(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}          private static   tom.library.adt.bytecode.types.LabelNodeList  tom_append_list_LabelNodeList( tom.library.adt.bytecode.types.LabelNodeList l1,  tom.library.adt.bytecode.types.LabelNodeList  l2) {     if( l1.isEmptyLabelNodeList() ) {       return l2;     } else if( l2.isEmptyLabelNodeList() ) {       return l1;     } else if(  l1.getTailLabelNodeList() .isEmptyLabelNodeList() ) {       return  tom.library.adt.bytecode.types.labelnodelist.ConsLabelNodeList.make( l1.getHeadLabelNodeList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.labelnodelist.ConsLabelNodeList.make( l1.getHeadLabelNodeList() ,tom_append_list_LabelNodeList( l1.getTailLabelNodeList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.LabelNodeList  tom_get_slice_LabelNodeList( tom.library.adt.bytecode.types.LabelNodeList  begin,  tom.library.adt.bytecode.types.LabelNodeList  end, tom.library.adt.bytecode.types.LabelNodeList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyLabelNodeList()  ||  (end== tom.library.adt.bytecode.types.labelnodelist.EmptyLabelNodeList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.labelnodelist.ConsLabelNodeList.make( begin.getHeadLabelNodeList() ,( tom.library.adt.bytecode.types.LabelNodeList )tom_get_slice_LabelNodeList( begin.getTailLabelNodeList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.MethodList  tom_append_list_MethodList( tom.library.adt.bytecode.types.MethodList l1,  tom.library.adt.bytecode.types.MethodList  l2) {     if( l1.isEmptyMethodList() ) {       return l2;     } else if( l2.isEmptyMethodList() ) {       return l1;     } else if(  l1.getTailMethodList() .isEmptyMethodList() ) {       return  tom.library.adt.bytecode.types.methodlist.ConsMethodList.make( l1.getHeadMethodList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.methodlist.ConsMethodList.make( l1.getHeadMethodList() ,tom_append_list_MethodList( l1.getTailMethodList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.MethodList  tom_get_slice_MethodList( tom.library.adt.bytecode.types.MethodList  begin,  tom.library.adt.bytecode.types.MethodList  end, tom.library.adt.bytecode.types.MethodList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyMethodList()  ||  (end== tom.library.adt.bytecode.types.methodlist.EmptyMethodList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.methodlist.ConsMethodList.make( begin.getHeadMethodList() ,( tom.library.adt.bytecode.types.MethodList )tom_get_slice_MethodList( begin.getTailMethodList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.LocalVariableList  tom_append_list_LocalVariableList( tom.library.adt.bytecode.types.LocalVariableList l1,  tom.library.adt.bytecode.types.LocalVariableList  l2) {     if( l1.isEmptyLocalVariableList() ) {       return l2;     } else if( l2.isEmptyLocalVariableList() ) {       return l1;     } else if(  l1.getTailLocalVariableList() .isEmptyLocalVariableList() ) {       return  tom.library.adt.bytecode.types.localvariablelist.ConsLocalVariableList.make( l1.getHeadLocalVariableList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.localvariablelist.ConsLocalVariableList.make( l1.getHeadLocalVariableList() ,tom_append_list_LocalVariableList( l1.getTailLocalVariableList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.LocalVariableList  tom_get_slice_LocalVariableList( tom.library.adt.bytecode.types.LocalVariableList  begin,  tom.library.adt.bytecode.types.LocalVariableList  end, tom.library.adt.bytecode.types.LocalVariableList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyLocalVariableList()  ||  (end== tom.library.adt.bytecode.types.localvariablelist.EmptyLocalVariableList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.localvariablelist.ConsLocalVariableList.make( begin.getHeadLocalVariableList() ,( tom.library.adt.bytecode.types.LocalVariableList )tom_get_slice_LocalVariableList( begin.getTailLocalVariableList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.InstructionList  tom_append_list_InstructionList( tom.library.adt.bytecode.types.InstructionList l1,  tom.library.adt.bytecode.types.InstructionList  l2) {     if( l1.isEmptyInstructionList() ) {       return l2;     } else if( l2.isEmptyInstructionList() ) {       return l1;     } else if(  l1.getTailInstructionList() .isEmptyInstructionList() ) {       return  tom.library.adt.bytecode.types.instructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.instructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,tom_append_list_InstructionList( l1.getTailInstructionList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.InstructionList  tom_get_slice_InstructionList( tom.library.adt.bytecode.types.InstructionList  begin,  tom.library.adt.bytecode.types.InstructionList  end, tom.library.adt.bytecode.types.InstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyInstructionList()  ||  (end== tom.library.adt.bytecode.types.instructionlist.EmptyInstructionList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.instructionlist.ConsInstructionList.make( begin.getHeadInstructionList() ,( tom.library.adt.bytecode.types.InstructionList )tom_get_slice_InstructionList( begin.getTailInstructionList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.IntList  tom_append_list_IntList( tom.library.adt.bytecode.types.IntList l1,  tom.library.adt.bytecode.types.IntList  l2) {     if( l1.isEmptyIntList() ) {       return l2;     } else if( l2.isEmptyIntList() ) {       return l1;     } else if(  l1.getTailIntList() .isEmptyIntList() ) {       return  tom.library.adt.bytecode.types.intlist.ConsIntList.make( l1.getHeadIntList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.intlist.ConsIntList.make( l1.getHeadIntList() ,tom_append_list_IntList( l1.getTailIntList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.IntList  tom_get_slice_IntList( tom.library.adt.bytecode.types.IntList  begin,  tom.library.adt.bytecode.types.IntList  end, tom.library.adt.bytecode.types.IntList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyIntList()  ||  (end== tom.library.adt.bytecode.types.intlist.EmptyIntList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.intlist.ConsIntList.make( begin.getHeadIntList() ,( tom.library.adt.bytecode.types.IntList )tom_get_slice_IntList( begin.getTailIntList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TryCatchBlockList  tom_append_list_TryCatchBlockList( tom.library.adt.bytecode.types.TryCatchBlockList l1,  tom.library.adt.bytecode.types.TryCatchBlockList  l2) {     if( l1.isEmptyTryCatchBlockList() ) {       return l2;     } else if( l2.isEmptyTryCatchBlockList() ) {       return l1;     } else if(  l1.getTailTryCatchBlockList() .isEmptyTryCatchBlockList() ) {       return  tom.library.adt.bytecode.types.trycatchblocklist.ConsTryCatchBlockList.make( l1.getHeadTryCatchBlockList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.trycatchblocklist.ConsTryCatchBlockList.make( l1.getHeadTryCatchBlockList() ,tom_append_list_TryCatchBlockList( l1.getTailTryCatchBlockList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TryCatchBlockList  tom_get_slice_TryCatchBlockList( tom.library.adt.bytecode.types.TryCatchBlockList  begin,  tom.library.adt.bytecode.types.TryCatchBlockList  end, tom.library.adt.bytecode.types.TryCatchBlockList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyTryCatchBlockList()  ||  (end== tom.library.adt.bytecode.types.trycatchblocklist.EmptyTryCatchBlockList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.trycatchblocklist.ConsTryCatchBlockList.make( begin.getHeadTryCatchBlockList() ,( tom.library.adt.bytecode.types.TryCatchBlockList )tom_get_slice_TryCatchBlockList( begin.getTailTryCatchBlockList() ,end,tail)) ;   }    public static class BuildLabelMap extends tom.library.sl.AbstractStrategyBasic {private  java.util.Map  m;public BuildLabelMap( java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.m=m;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch750_1= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch750_1) instanceof tom.library.adt.bytecode.types.instruction.Anchor) ) {       m.put( tomMatch750_1.getlabel() , getEnvironment().getPosition());     }}}}}return _visit_InstructionList(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_BuildLabelMap( java.util.Map  t0) { return new BuildLabelMap(t0);}public static class OneCfg extends tom.library.sl.AbstractStrategyBasic {private  tom.library.sl.Strategy  s;private  java.util.Map  m;public OneCfg( tom.library.sl.Strategy  s,  java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.s=s;this.m=m;}public  tom.library.sl.Strategy  gets() {return s;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);stratChildren[1] = gets();return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);s = ( tom.library.sl.Strategy ) children[1];return this;}public int getChildCount() {return 2;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch751_1= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_1) instanceof tom.library.adt.bytecode.types.instruction.Goto) ) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch751_1.getlabel() ));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }       return (InstructionList) getEnvironment().getSubject();     }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch751_9= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch751_32= false ; tom.library.adt.bytecode.types.Instruction  tomMatch751_15= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_27= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_21= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_20= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_18= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_22= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_28= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_24= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_23= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_26= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_29= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_19= null ; tom.library.adt.bytecode.types.LabelNode  tomMatch751_13= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_31= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_25= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_16= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_17= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_30= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifeq) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_15=tomMatch751_9;tomMatch751_13= tomMatch751_15.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifne) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_16=tomMatch751_9;tomMatch751_13= tomMatch751_16.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Iflt) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_17=tomMatch751_9;tomMatch751_13= tomMatch751_17.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifge) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_18=tomMatch751_9;tomMatch751_13= tomMatch751_18.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifgt) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_19=tomMatch751_9;tomMatch751_13= tomMatch751_19.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifle) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_20=tomMatch751_9;tomMatch751_13= tomMatch751_20.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpeq) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_21=tomMatch751_9;tomMatch751_13= tomMatch751_21.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpne) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_22=tomMatch751_9;tomMatch751_13= tomMatch751_22.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmplt) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_23=tomMatch751_9;tomMatch751_13= tomMatch751_23.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpge) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_24=tomMatch751_9;tomMatch751_13= tomMatch751_24.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpgt) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_25=tomMatch751_9;tomMatch751_13= tomMatch751_25.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmple) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_26=tomMatch751_9;tomMatch751_13= tomMatch751_26.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_acmpeq) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_27=tomMatch751_9;tomMatch751_13= tomMatch751_27.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.If_acmpne) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_28=tomMatch751_9;tomMatch751_13= tomMatch751_28.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Jsr) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_29=tomMatch751_9;tomMatch751_13= tomMatch751_29.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifnull) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_30=tomMatch751_9;tomMatch751_13= tomMatch751_30.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_9) instanceof tom.library.adt.bytecode.types.instruction.Ifnonnull) ) {{ /* unamed block */tomMatch751_32= true ;tomMatch751_31=tomMatch751_9;tomMatch751_13= tomMatch751_31.getlabel() ;}}}}}}}}}}}}}}}}}}if (tomMatch751_32) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch751_13));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));         return (InstructionList) getEnvironment().getSubject();       } else {                 getEnvironment().followPathLocal(current.sub(p));       }     }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch751_34= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch751_43= false ; tom.library.adt.bytecode.types.LabelNodeList  tomMatch751_39= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_42= null ; tom.library.adt.bytecode.types.Instruction  tomMatch751_41= null ; tom.library.adt.bytecode.types.LabelNode  tomMatch751_38= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_34) instanceof tom.library.adt.bytecode.types.instruction.Tableswitch) ) {{ /* unamed block */tomMatch751_43= true ;tomMatch751_41=tomMatch751_34;tomMatch751_38= tomMatch751_41.getdflt() ;tomMatch751_39= tomMatch751_41.getlabels() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch751_34) instanceof tom.library.adt.bytecode.types.instruction.Lookupswitch) ) {{ /* unamed block */tomMatch751_43= true ;tomMatch751_42=tomMatch751_34;tomMatch751_38= tomMatch751_42.getdflt() ;tomMatch751_39= tomMatch751_42.getlabels() ;}}}if (tomMatch751_43) {       LabelNodeList labelList = tomMatch751_39;       { /* unamed block */{ /* unamed block */if ( (labelList instanceof tom.library.adt.bytecode.types.LabelNodeList) ) {if ( (((( tom.library.adt.bytecode.types.LabelNodeList )labelList) instanceof tom.library.adt.bytecode.types.labelnodelist.ConsLabelNodeList) || ((( tom.library.adt.bytecode.types.LabelNodeList )labelList) instanceof tom.library.adt.bytecode.types.labelnodelist.EmptyLabelNodeList)) ) { tom.library.adt.bytecode.types.LabelNodeList  tomMatch752_end_4=(( tom.library.adt.bytecode.types.LabelNodeList )labelList);do {{ /* unamed block */if (!( tomMatch752_end_4.isEmptyLabelNodeList() )) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch752_end_4.getHeadLabelNodeList() ));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(p.sub(current));           s.visit(getEnvironment());           if(getEnvironment().getStatus() == Environment.SUCCESS) {             getEnvironment().followPath(current.sub(p));             return (InstructionList) getEnvironment().getSubject();           } else {                         getEnvironment().followPathLocal(current.sub(p));           }         }if ( tomMatch752_end_4.isEmptyLabelNodeList() ) {tomMatch752_end_4=(( tom.library.adt.bytecode.types.LabelNodeList )labelList);} else {tomMatch752_end_4= tomMatch752_end_4.getTailLabelNodeList() ;}}} while(!( (tomMatch752_end_4==(( tom.library.adt.bytecode.types.LabelNodeList )labelList)) ));}}}}       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch751_38));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));         return (InstructionList) getEnvironment().getSubject();       } else {                 getEnvironment().followPathLocal(current.sub(p));       }      }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.InstructionList  tomMatch751_46= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getTailInstructionList() ;boolean tomMatch751_50= false ;if ( (((( tom.library.adt.bytecode.types.InstructionList )tomMatch751_46) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) || ((( tom.library.adt.bytecode.types.InstructionList )tomMatch751_46) instanceof tom.library.adt.bytecode.types.instructionlist.EmptyInstructionList)) ) {if ( tomMatch751_46.isEmptyInstructionList() ) {tomMatch751_50= true ;}}if (!(tomMatch751_50)) {       getEnvironment().down(2);       s.visit(getEnvironment());       getEnvironment().up();     }}}}}return _visit_InstructionList(tom__arg,introspector);}}public static class AllCfg extends tom.library.sl.AbstractStrategyBasic {private  tom.library.sl.Strategy  s;private  java.util.Map  m;public AllCfg( tom.library.sl.Strategy  s,  java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.s=s;this.m=m;}public  tom.library.sl.Strategy  gets() {return s;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);stratChildren[1] = gets();return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);s = ( tom.library.sl.Strategy ) children[1];return this;}public int getChildCount() {return 2;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch753_1= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_1) instanceof tom.library.adt.bytecode.types.instruction.Goto) ) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch753_1.getlabel() ));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }                return (InstructionList) getEnvironment().getSubject();     }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch753_9= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch753_32= false ; tom.library.adt.bytecode.types.Instruction  tomMatch753_25= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_15= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_31= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_16= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_19= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_24= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_21= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_27= null ; tom.library.adt.bytecode.types.LabelNode  tomMatch753_13= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_26= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_28= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_29= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_20= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_22= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_17= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_18= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_30= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_23= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifeq) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_15=tomMatch753_9;tomMatch753_13= tomMatch753_15.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifne) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_16=tomMatch753_9;tomMatch753_13= tomMatch753_16.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Iflt) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_17=tomMatch753_9;tomMatch753_13= tomMatch753_17.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifge) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_18=tomMatch753_9;tomMatch753_13= tomMatch753_18.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifgt) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_19=tomMatch753_9;tomMatch753_13= tomMatch753_19.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifle) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_20=tomMatch753_9;tomMatch753_13= tomMatch753_20.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpeq) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_21=tomMatch753_9;tomMatch753_13= tomMatch753_21.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpne) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_22=tomMatch753_9;tomMatch753_13= tomMatch753_22.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmplt) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_23=tomMatch753_9;tomMatch753_13= tomMatch753_23.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpge) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_24=tomMatch753_9;tomMatch753_13= tomMatch753_24.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmpgt) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_25=tomMatch753_9;tomMatch753_13= tomMatch753_25.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_icmple) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_26=tomMatch753_9;tomMatch753_13= tomMatch753_26.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_acmpeq) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_27=tomMatch753_9;tomMatch753_13= tomMatch753_27.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.If_acmpne) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_28=tomMatch753_9;tomMatch753_13= tomMatch753_28.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Jsr) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_29=tomMatch753_9;tomMatch753_13= tomMatch753_29.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifnull) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_30=tomMatch753_9;tomMatch753_13= tomMatch753_30.getlabel() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_9) instanceof tom.library.adt.bytecode.types.instruction.Ifnonnull) ) {{ /* unamed block */tomMatch753_32= true ;tomMatch753_31=tomMatch753_9;tomMatch753_13= tomMatch753_31.getlabel() ;}}}}}}}}}}}}}}}}}}if (tomMatch753_32) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch753_13));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }              }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.Instruction  tomMatch753_34= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch753_43= false ; tom.library.adt.bytecode.types.LabelNodeList  tomMatch753_39= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_41= null ; tom.library.adt.bytecode.types.Instruction  tomMatch753_42= null ; tom.library.adt.bytecode.types.LabelNode  tomMatch753_38= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_34) instanceof tom.library.adt.bytecode.types.instruction.Tableswitch) ) {{ /* unamed block */tomMatch753_43= true ;tomMatch753_41=tomMatch753_34;tomMatch753_38= tomMatch753_41.getdflt() ;tomMatch753_39= tomMatch753_41.getlabels() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )tomMatch753_34) instanceof tom.library.adt.bytecode.types.instruction.Lookupswitch) ) {{ /* unamed block */tomMatch753_43= true ;tomMatch753_42=tomMatch753_34;tomMatch753_38= tomMatch753_42.getdflt() ;tomMatch753_39= tomMatch753_42.getlabels() ;}}}if (tomMatch753_43) { tom.library.adt.bytecode.types.LabelNodeList  tom___labels=tomMatch753_39;       LabelNodeList labels = tom___labels;       { /* unamed block */{ /* unamed block */if ( (tom___labels instanceof tom.library.adt.bytecode.types.LabelNodeList) ) {if ( (((( tom.library.adt.bytecode.types.LabelNodeList )tom___labels) instanceof tom.library.adt.bytecode.types.labelnodelist.ConsLabelNodeList) || ((( tom.library.adt.bytecode.types.LabelNodeList )tom___labels) instanceof tom.library.adt.bytecode.types.labelnodelist.EmptyLabelNodeList)) ) { tom.library.adt.bytecode.types.LabelNodeList  tomMatch754_end_4=(( tom.library.adt.bytecode.types.LabelNodeList )tom___labels);do {{ /* unamed block */if (!( tomMatch754_end_4.isEmptyLabelNodeList() )) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch754_end_4.getHeadLabelNodeList() ));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(current.sub(p));           s.visit(getEnvironment());           if(getEnvironment().getStatus() == Environment.SUCCESS) {             getEnvironment().followPath(current.sub(p));           } else {                         getEnvironment().followPathLocal(current.sub(p));           }              }if ( tomMatch754_end_4.isEmptyLabelNodeList() ) {tomMatch754_end_4=(( tom.library.adt.bytecode.types.LabelNodeList )tom___labels);} else {tomMatch754_end_4= tomMatch754_end_4.getTailLabelNodeList() ;}}} while(!( (tomMatch754_end_4==(( tom.library.adt.bytecode.types.LabelNodeList )tom___labels)) ));}}}}       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch753_38));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }     }}}}{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.InstructionList  tomMatch753_46= (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getTailInstructionList() ;boolean tomMatch753_50= false ;if ( (((( tom.library.adt.bytecode.types.InstructionList )tomMatch753_46) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) || ((( tom.library.adt.bytecode.types.InstructionList )tomMatch753_46) instanceof tom.library.adt.bytecode.types.instructionlist.EmptyInstructionList)) ) {if ( tomMatch753_46.isEmptyInstructionList() ) {tomMatch753_50= true ;}}if (!(tomMatch753_50)) {       getEnvironment().down(2);       s.visit(getEnvironment());       getEnvironment().up();     }}}}}return _visit_InstructionList(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_AllCfg( tom.library.sl.Strategy  t0,  java.util.Map  t1) { return new AllCfg(t0,t1);}public static class Mark extends tom.library.sl.AbstractStrategyBasic {private  java.util.Map  map;public Mark( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) { tom.library.adt.bytecode.types.InstructionList  tom___c=(( tom.library.adt.bytecode.types.InstructionList )tom__arg);       Object o = map.get(tom___c);       int value = 1;       if(o != null)         value = ((Integer)o).intValue() + 1;       map.put(tom___c, Integer.valueOf(value));     }}}return _visit_InstructionList(tom__arg,introspector);}}public static class UnMark extends tom.library.sl.AbstractStrategyBasic {private  java.util.Map  map;public UnMark( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) { tom.library.adt.bytecode.types.InstructionList  tom___c=(( tom.library.adt.bytecode.types.InstructionList )tom__arg);       Object o = map.get(tom___c);       if(o == null) {         throw new tom.library.sl.VisitFailure();       }       int value = ((Integer)o).intValue() - 1;       map.put(tom___c, Integer.valueOf(value));     }}}return _visit_InstructionList(tom__arg,introspector);}}public static class IsMarked extends tom.library.sl.AbstractStrategyBasic {private  java.util.Map  map;public IsMarked( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {       Object o = map.get((( tom.library.adt.bytecode.types.InstructionList )tom__arg));       if(o == null || ((Integer)o).intValue() <= 0)         throw new tom.library.sl.VisitFailure();     }}}return _visit_InstructionList(tom__arg,introspector);}}  






  /**
   * Returns the dot node id of the given InstructionList.
   * @param ins the instruction.
   * @return the id.
   */
  private static String getDotId(InstructionList ins) {
    return ("insid" + ins.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TryCatchBlock.
   * @param bl the try/catch block.
   * @return the id.
   */
  private static String getDotId(TryCatchBlock bl) {
    return ("blockid" + bl.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given LocalVariable.
   * @param the local variable.
   * @return the id.
   */
  private static String getDotId(LocalVariable var) {
    return ("varid" + var.hashCode()).replace('-', 'm');
  }

  /**
   * Cleans the given string to prevent dot compilation problems.
   * (ex: replace the character '"' with the string "\"").
   * @param s the string to be cleaned.
   * @return the cleaned string.
   */
  private static String clean(String s) {
    return s.replaceAll("\\\"", "\\\\\\\"");
  }

  /**
   * Prints the current instruction node with a suitable label.
   * @param out the writer to be used for the dot output.
   */
  public static class PrintDotNode extends tom.library.sl.AbstractStrategyBasic {private java.io.Writer out;public PrintDotNode(java.io.Writer out) {super(( new tom.library.sl.Identity() ));this.out=out;}public java.io.Writer getout() {return out;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) {


        String id = getDotId((( tom.library.adt.bytecode.types.InstructionList )tom__arg));
        printDotInstruction( (( tom.library.adt.bytecode.types.InstructionList )tom__arg).getHeadInstructionList() , id, out);
      }}}}return _visit_InstructionList(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_PrintDotNode(java.io.Writer t0) { return new PrintDotNode(t0);}



  /**
   * Prints the given instruction with a suitable label and id.
   * @param ins the instruction to be printed.
   * @param id the id of the dot node.
   * @param out the writer to be used for the dot output.
   */
  private static void printDotInstruction(Instruction ins, String id, Writer out) {
    try {
      { /* unamed block */{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {boolean tomMatch759_6= false ; int  tomMatch759_1= 0 ; tom.library.adt.bytecode.types.Instruction  tomMatch759_5= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_3= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_4= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Bipush) ) {{ /* unamed block */tomMatch759_6= true ;tomMatch759_3=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_1= tomMatch759_3.getoperand() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Sipush) ) {{ /* unamed block */tomMatch759_6= true ;tomMatch759_4=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_1= tomMatch759_4.getoperand() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Newarray) ) {{ /* unamed block */tomMatch759_6= true ;tomMatch759_5=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_1= tomMatch759_5.getoperand() ;}}}}if (tomMatch759_6) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\noperand : "+Integer.toString(tomMatch759_1)+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Multianewarray) ) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\ntypeDesc : "+ (( tom.library.adt.bytecode.types.Instruction )ins).gettypeDesc() +"\\ndims : "+Integer.toString( (( tom.library.adt.bytecode.types.Instruction )ins).getdims() )+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Ldc) ) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\ncst : "+clean( (( tom.library.adt.bytecode.types.Instruction )ins).getcst() .toString())+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {boolean tomMatch759_30= false ; tom.library.adt.bytecode.types.Instruction  tomMatch759_28= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_26= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_27= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_29= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_21= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_25= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_20= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_23= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_22= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_19= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_24= null ; int  tomMatch759_17= 0 ;if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Iload) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_19=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_19.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Lload) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_20=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_20.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Fload) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_21=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_21.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Dload) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_22=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_22.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Aload) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_23=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_23.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Istore) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_24=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_24.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Lstore) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_25=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_25.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Fstore) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_26=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_26.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Dstore) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_27=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_27.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Astore) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_28=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_28.getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Ret) ) {{ /* unamed block */tomMatch759_30= true ;tomMatch759_29=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_17= tomMatch759_29.getvar() ;}}}}}}}}}}}}if (tomMatch759_30) {




          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nvar : "+Integer.toString(tomMatch759_17)+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Iinc) ) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nincr : "+Integer.toString( (( tom.library.adt.bytecode.types.Instruction )ins).getincr() )+"\\nvar : "+Integer.toString( (( tom.library.adt.bytecode.types.Instruction )ins).getvar() )+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Tableswitch) ) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nmin : "+ (( tom.library.adt.bytecode.types.Instruction )ins).getmin() +"\\nmax : "+ (( tom.library.adt.bytecode.types.Instruction )ins).getmax() +"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Lookupswitch) ) { tom.library.adt.bytecode.types.IntList  tom___keys= (( tom.library.adt.bytecode.types.Instruction )ins).getkeys() ;


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nkeys : "
);
              IntList keys = tom___keys;
              { /* unamed block */{ /* unamed block */if ( (tom___keys instanceof tom.library.adt.bytecode.types.IntList) ) {if ( (((( tom.library.adt.bytecode.types.IntList )tom___keys) instanceof tom.library.adt.bytecode.types.intlist.ConsIntList) || ((( tom.library.adt.bytecode.types.IntList )tom___keys) instanceof tom.library.adt.bytecode.types.intlist.EmptyIntList)) ) { tom.library.adt.bytecode.types.IntList  tomMatch760_end_4=(( tom.library.adt.bytecode.types.IntList )tom___keys);do {{ /* unamed block */if (!( tomMatch760_end_4.isEmptyIntList() )) { tom.library.adt.bytecode.types.IntList  tomMatch760_5= tomMatch760_end_4.getTailIntList() ; tom.library.adt.bytecode.types.IntList  tomMatch760_end_8=tomMatch760_5;do {{ /* unamed block */if (!( tomMatch760_end_8.isEmptyIntList() )) {if (  tomMatch760_end_8.getTailIntList() .isEmptyIntList() ) {

                  out.write(""+Integer.toString( tomMatch760_end_4.getHeadIntList() )+", ");
                }}if ( tomMatch760_end_8.isEmptyIntList() ) {tomMatch760_end_8=tomMatch760_5;} else {tomMatch760_end_8= tomMatch760_end_8.getTailIntList() ;}}} while(!( (tomMatch760_end_8==tomMatch760_5) ));}if ( tomMatch760_end_4.isEmptyIntList() ) {tomMatch760_end_4=(( tom.library.adt.bytecode.types.IntList )tom___keys);} else {tomMatch760_end_4= tomMatch760_end_4.getTailIntList() ;}}} while(!( (tomMatch760_end_4==(( tom.library.adt.bytecode.types.IntList )tom___keys)) ));}}}{ /* unamed block */if ( (tom___keys instanceof tom.library.adt.bytecode.types.IntList) ) {if ( (((( tom.library.adt.bytecode.types.IntList )tom___keys) instanceof tom.library.adt.bytecode.types.intlist.ConsIntList) || ((( tom.library.adt.bytecode.types.IntList )tom___keys) instanceof tom.library.adt.bytecode.types.intlist.EmptyIntList)) ) { tom.library.adt.bytecode.types.IntList  tomMatch760_end_14=(( tom.library.adt.bytecode.types.IntList )tom___keys);do {{ /* unamed block */if (!( tomMatch760_end_14.isEmptyIntList() )) {if (  tomMatch760_end_14.getTailIntList() .isEmptyIntList() ) {

                  out.write(Integer.toString( tomMatch760_end_14.getHeadIntList() ));
                }}if ( tomMatch760_end_14.isEmptyIntList() ) {tomMatch760_end_14=(( tom.library.adt.bytecode.types.IntList )tom___keys);} else {tomMatch760_end_14= tomMatch760_end_14.getTailIntList() ;}}} while(!( (tomMatch760_end_14==(( tom.library.adt.bytecode.types.IntList )tom___keys)) ));}}}}

              out.write("\"];");
              return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {boolean tomMatch759_54= false ; tom.library.adt.bytecode.types.Instruction  tomMatch759_51= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_52= null ; String  tomMatch759_47= "" ; tom.library.adt.bytecode.types.Instruction  tomMatch759_53= null ; tom.library.adt.bytecode.types.FieldDescriptor  tomMatch759_48= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_50= null ; String  tomMatch759_46= "" ;if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Getstatic) ) {{ /* unamed block */tomMatch759_54= true ;tomMatch759_50=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_46= tomMatch759_50.getowner() ;tomMatch759_47= tomMatch759_50.getname() ;tomMatch759_48= tomMatch759_50.getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Putstatic) ) {{ /* unamed block */tomMatch759_54= true ;tomMatch759_51=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_46= tomMatch759_51.getowner() ;tomMatch759_47= tomMatch759_51.getname() ;tomMatch759_48= tomMatch759_51.getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Getfield) ) {{ /* unamed block */tomMatch759_54= true ;tomMatch759_52=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_46= tomMatch759_52.getowner() ;tomMatch759_47= tomMatch759_52.getname() ;tomMatch759_48= tomMatch759_52.getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Putfield) ) {{ /* unamed block */tomMatch759_54= true ;tomMatch759_53=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_46= tomMatch759_53.getowner() ;tomMatch759_47= tomMatch759_53.getname() ;tomMatch759_48= tomMatch759_53.getfieldDesc() ;}}}}}if (tomMatch759_54) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nowner : "+tomMatch759_46+"\\nname : "+tomMatch759_47+"\\ndescriptor : "+ToolBox.buildDescriptor(tomMatch759_48)+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {boolean tomMatch759_64= false ; tom.library.adt.bytecode.types.MethodDescriptor  tomMatch759_58= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_60= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_61= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_63= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_62= null ; String  tomMatch759_56= "" ; String  tomMatch759_57= "" ;if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Invokevirtual) ) {{ /* unamed block */tomMatch759_64= true ;tomMatch759_60=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_56= tomMatch759_60.getowner() ;tomMatch759_57= tomMatch759_60.getname() ;tomMatch759_58= tomMatch759_60.getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Invokespecial) ) {{ /* unamed block */tomMatch759_64= true ;tomMatch759_61=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_56= tomMatch759_61.getowner() ;tomMatch759_57= tomMatch759_61.getname() ;tomMatch759_58= tomMatch759_61.getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Invokestatic) ) {{ /* unamed block */tomMatch759_64= true ;tomMatch759_62=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_56= tomMatch759_62.getowner() ;tomMatch759_57= tomMatch759_62.getname() ;tomMatch759_58= tomMatch759_62.getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Invokeinterface) ) {{ /* unamed block */tomMatch759_64= true ;tomMatch759_63=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_56= tomMatch759_63.getowner() ;tomMatch759_57= tomMatch759_63.getname() ;tomMatch759_58= tomMatch759_63.getmethodDesc() ;}}}}}if (tomMatch759_64) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\nowner : "+tomMatch759_56+"\\nname : "+tomMatch759_57+"\\ndescriptor : "+ToolBox.buildDescriptor(tomMatch759_58)+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {boolean tomMatch759_72= false ; String  tomMatch759_66= "" ; tom.library.adt.bytecode.types.Instruction  tomMatch759_71= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_68= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_69= null ; tom.library.adt.bytecode.types.Instruction  tomMatch759_70= null ;if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.New) ) {{ /* unamed block */tomMatch759_72= true ;tomMatch759_68=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_66= tomMatch759_68.gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Anewarray) ) {{ /* unamed block */tomMatch759_72= true ;tomMatch759_69=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_66= tomMatch759_69.gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Checkcast) ) {{ /* unamed block */tomMatch759_72= true ;tomMatch759_70=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_66= tomMatch759_70.gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.Instruction )ins) instanceof tom.library.adt.bytecode.types.instruction.Instanceof) ) {{ /* unamed block */tomMatch759_72= true ;tomMatch759_71=(( tom.library.adt.bytecode.types.Instruction )ins);tomMatch759_66= tomMatch759_71.gettypeDesc() ;}}}}}if (tomMatch759_72) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\\ndescriptor : "+tomMatch759_66+"\"];\n              "

);
          return;
        }}}{ /* unamed block */if ( (ins instanceof tom.library.adt.bytecode.types.Instruction) ) {


          out.write("\n              "+id+" [label=\""+ins.symbolName()+"\"];\n              "

);
        }}}

    } catch(IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * Prints a link from the `parent' instruction to the current node instruction.
   * @param out the writer to be used for the dot output.
   */
  public static class PrintDotLink extends tom.library.sl.AbstractStrategyBasic {private java.io.Writer out;private  InsWrapper  parent;public PrintDotLink(java.io.Writer out,  InsWrapper  parent) {super(( new tom.library.sl.Identity() ));this.out=out;this.parent=parent;}public java.io.Writer getout() {return out;}public  InsWrapper  getparent() {return parent;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {if ( ((( tom.library.adt.bytecode.types.InstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.instructionlist.ConsInstructionList) ) {


        try {
          out.write(""+getDotId(parent.ins)+" -> "+getDotId((( tom.library.adt.bytecode.types.InstructionList )tom__arg))+";\n              "
);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}return _visit_InstructionList(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_PrintDotLink(java.io.Writer t0,  InsWrapper  t1) { return new PrintDotLink(t0,t1);}



  /**
   * Prints all the try/catch/finally informations of the given block list.
   * @param list the try/catch/finally blocks to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printTryCatchBlocks(TryCatchBlockList list, Map labelMap, Writer out,InstructionList inst) throws VisitFailure{
    { /* unamed block */{ /* unamed block */if ( (list instanceof tom.library.adt.bytecode.types.TryCatchBlockList) ) {if ( (((( tom.library.adt.bytecode.types.TryCatchBlockList )list) instanceof tom.library.adt.bytecode.types.trycatchblocklist.ConsTryCatchBlockList) || ((( tom.library.adt.bytecode.types.TryCatchBlockList )list) instanceof tom.library.adt.bytecode.types.trycatchblocklist.EmptyTryCatchBlockList)) ) { tom.library.adt.bytecode.types.TryCatchBlockList  tomMatch762_end_4=(( tom.library.adt.bytecode.types.TryCatchBlockList )list);do {{ /* unamed block */if (!( tomMatch762_end_4.isEmptyTryCatchBlockList() )) {

        try {
          TryCatchBlock block =  tomMatch762_end_4.getHeadTryCatchBlockList() ;
          Handler handler = block.gethandler();
          String id = getDotId(block);

          { /* unamed block */{ /* unamed block */if ( (handler instanceof tom.library.adt.bytecode.types.Handler) ) {if ( ((( tom.library.adt.bytecode.types.Handler )handler) instanceof tom.library.adt.bytecode.types.handler.CatchHandler) ) {

              Position labelPosition = (Position) labelMap.get( (( tom.library.adt.bytecode.types.Handler )handler).gethandler() );
              InstructionList labelInst = (InstructionList) labelPosition.getSubterm().visit(inst);
              out.write("\n                  "+id+" [label=\"Catch\\ntype : "+ (( tom.library.adt.bytecode.types.Handler )handler).gettype() +"\" shape=box];\n                  "+id+" -> "+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}{ /* unamed block */if ( (handler instanceof tom.library.adt.bytecode.types.Handler) ) {if ( ((( tom.library.adt.bytecode.types.Handler )handler) instanceof tom.library.adt.bytecode.types.handler.FinallyHandler) ) {


              Position labelPosition = (Position) labelMap.get( (( tom.library.adt.bytecode.types.Handler )handler).gethandler() );
              InstructionList labelInst = (InstructionList) labelPosition.getSubterm().visit(inst);
              out.write("\n                  "+id+" [label=\"Finally\" shape=box];\n                  "+id+" -> "+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}}


          Position startPosition = (Position) labelMap.get(block.getstart());
          InstructionList startInst = (InstructionList) startPosition.getSubterm().visit(inst);
          Position endPosition = (Position) labelMap.get(block.getend());
          InstructionList lastInst = (InstructionList) endPosition.getSubterm().visit(inst);
          out.write("\n              "+id+" -> "+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "+id+" -> "+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "


);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch762_end_4.isEmptyTryCatchBlockList() ) {tomMatch762_end_4=(( tom.library.adt.bytecode.types.TryCatchBlockList )list);} else {tomMatch762_end_4= tomMatch762_end_4.getTailTryCatchBlockList() ;}}} while(!( (tomMatch762_end_4==(( tom.library.adt.bytecode.types.TryCatchBlockList )list)) ));}}}}

  }

  /**
   * Prints all the local variables informations.
   * @param list the local variables list to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printLocalVariables(LocalVariableList list, Map labelMap, Writer out, InstructionList inst) throws VisitFailure {
    { /* unamed block */{ /* unamed block */if ( (list instanceof tom.library.adt.bytecode.types.LocalVariableList) ) {if ( (((( tom.library.adt.bytecode.types.LocalVariableList )list) instanceof tom.library.adt.bytecode.types.localvariablelist.ConsLocalVariableList) || ((( tom.library.adt.bytecode.types.LocalVariableList )list) instanceof tom.library.adt.bytecode.types.localvariablelist.EmptyLocalVariableList)) ) { tom.library.adt.bytecode.types.LocalVariableList  tomMatch764_end_4=(( tom.library.adt.bytecode.types.LocalVariableList )list);do {{ /* unamed block */if (!( tomMatch764_end_4.isEmptyLocalVariableList() )) {

        try {
          LocalVariable var =  tomMatch764_end_4.getHeadLocalVariableList() ;
          String id = getDotId(var);
          Position startPosition = (Position) labelMap.get(var.getstart());
          InstructionList startInst = (InstructionList) startPosition.getSubterm().visit(inst);
          Position endPosition = (Position) labelMap.get(var.getend());
          InstructionList lastInst = (InstructionList) endPosition.getSubterm().visit(inst);

          out.write("\n              "+id+" [label=\"var : "+var.getname()+"\\ndescriptor : "+var.gettypeDesc()+"\\nindex : "+Integer.toString(var.getindex())+"\" shape=box];\n              "+id+" -> "+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "+id+" -> "+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "



);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch764_end_4.isEmptyLocalVariableList() ) {tomMatch764_end_4=(( tom.library.adt.bytecode.types.LocalVariableList )list);} else {tomMatch764_end_4= tomMatch764_end_4.getTailLocalVariableList() ;}}} while(!( (tomMatch764_end_4==(( tom.library.adt.bytecode.types.LocalVariableList )list)) ));}}}}

  }

  /**
   * Used to pass the stored instruction as a strategy parameter.
   */
  private static class InsWrapper { public InstructionList ins; }
  




  /**
   * Assign the current instruction node to the given InsWrapper.
   * @param ins the instruction wrapper.
   */
  public static class Assign extends tom.library.sl.AbstractStrategyBasic {private  InsWrapper  ins;public Assign( InsWrapper  ins) {super(( new tom.library.sl.Identity() ));this.ins=ins;}public  InsWrapper  getins() {return ins;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.InstructionList) ) {return ((T)visit_InstructionList((( tom.library.adt.bytecode.types.InstructionList )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  _visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.library.adt.bytecode.types.InstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.library.adt.bytecode.types.InstructionList  visit_InstructionList( tom.library.adt.bytecode.types.InstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.library.adt.bytecode.types.InstructionList) ) {

 ins.ins = (( tom.library.adt.bytecode.types.InstructionList )tom__arg); }}}return _visit_InstructionList(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_Assign( InsWrapper  t0) { return new Assign(t0);}



  /**
   * Generates a control flow graph for each method of the given class.
   * @param ast the gom-term subject representing the class.
   */
  public static void classToDot(ClassNode ast) throws VisitFailure {
    Writer w = new BufferedWriter(new OutputStreamWriter(System.out)); 
    MethodList methods = ast.getmethods();
    { /* unamed block */{ /* unamed block */if ( (methods instanceof tom.library.adt.bytecode.types.MethodList) ) {if ( (((( tom.library.adt.bytecode.types.MethodList )methods) instanceof tom.library.adt.bytecode.types.methodlist.ConsMethodList) || ((( tom.library.adt.bytecode.types.MethodList )methods) instanceof tom.library.adt.bytecode.types.methodlist.EmptyMethodList)) ) { tom.library.adt.bytecode.types.MethodList  tomMatch766_end_4=(( tom.library.adt.bytecode.types.MethodList )methods);do {{ /* unamed block */if (!( tomMatch766_end_4.isEmptyMethodList() )) { tom.library.adt.bytecode.types.Method  tom___x= tomMatch766_end_4.getHeadMethodList() ;

        try {
          MethodInfo info = tom___x.getinfo();
          w.write("digraph "+info.getname()+" {\n              "
);

          // Print a root node with the method name and descriptor. Add a link to the first instruction if any.
          w.write("method [label=\"method : "+info.getname()+"\\ndescriptor : "+ToolBox.buildDescriptor(info.getdesc())+"\" shape=box];\n              "
);
          if(!tom___x.getcode().isEmptyCode()) {
            InstructionList ins = tom___x.getcode().getinstructions();
            if(!ins.isEmptyInstructionList()) {
              w.write("method -> "+getDotId(ins)+"\n                  "
);
            }

            // Compute the label map to allow us to retrieve an instruction from a label.
            HashMap labelMap = new HashMap();
            tom_make_TopDown(tom_make_BuildLabelMap(labelMap)).visit(ins);

            // Create a wrapper to pass a parent node to its children.
            InsWrapper insWrapper = new InsWrapper();

            // This strategy run through all node. For each of them, the node is printed.
            // Links between the current node and its children are printed by passing the parent to each of them.
            // AllCfg allows us to get all the children of the current node.
            Strategy toDot = tom_make_TopDown(tom_make_Try( tom.library.sl.Sequence.make(tom_make_PrintDotNode(w), tom.library.sl.Sequence.make( tom.library.sl.Sequence.make(tom_make_Assign(insWrapper), tom.library.sl.Sequence.make(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap), null ) ) , null ) ) ))







;

            toDot.visit(ins);

            // Prints the try/catch/finally blocks.
            printTryCatchBlocks(tom___x.getcode().gettryCatchBlocks(), labelMap, w, ins);

            // Prints the local variables informations.
            printLocalVariables(tom___x.getcode().getlocalVariables(), labelMap, w, ins);
          }

          w.write("}\n");
          w.flush();
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch766_end_4.isEmptyMethodList() ) {tomMatch766_end_4=(( tom.library.adt.bytecode.types.MethodList )methods);} else {tomMatch766_end_4= tomMatch766_end_4.getTailMethodList() ;}}} while(!( (tomMatch766_end_4==(( tom.library.adt.bytecode.types.MethodList )methods)) ));}}}}

  }

  /**
   * Generates the dot control flow graphs for each method of the specified class.
   * Usage : java bytecode.CFGViewer <class name>
   * Ex: java bytecode.CFGViewer bytecode.Subject
   * @param args args[0] : the class name
   */
   public static void main(String[] args) {
     if(args.length <= 0) {
       System.out.println("Usage : java bytecode.CFGViewer <class name>\nEx: java bytecode.CFGViewer MyClass");
       return;
     }
     BytecodeReader cg = new BytecodeReader(args[0]);
     ClassNode c = cg.getAst();
     try {
       classToDot(c);
     } catch (VisitFailure e) {
       System.out.println("Unexpected failure in strategies");
     }
   }

}


