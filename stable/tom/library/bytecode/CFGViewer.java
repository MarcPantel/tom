/* Generated by TOM (version 2.6): Do not edit this file *//*
 * Copyright (c) 2000-2009, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the INRIA nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.library.bytecode;

import java.util.Map;
import java.util.HashMap;
import java.io.Writer;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassAdapter;

import tom.library.sl.*;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;

/**
 * A dot control flow graph exporter.
 * This class generates a control flow graph for each method of a class.
 */
public class CFGViewer {
  
  /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */     private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Choice) )) {       if(( ((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )) ==null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Choice(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin):new tom.library.sl.Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)) );   }    /* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  v) { return ( ( (( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )==null)?v:new tom.library.sl.Choice(v,( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )) ) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) )) ) );}   /* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file */    private static   tom.library.adt.bytecode.types.TLabelList  tom_append_list_LabelList( tom.library.adt.bytecode.types.TLabelList l1,  tom.library.adt.bytecode.types.TLabelList  l2) {     if( l1.isEmptyLabelList() ) {       return l2;     } else if( l2.isEmptyLabelList() ) {       return l1;     } else if(  l1.getTailLabelList() .isEmptyLabelList() ) {       return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make( l1.getHeadLabelList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make( l1.getHeadLabelList() ,tom_append_list_LabelList( l1.getTailLabelList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TLabelList  tom_get_slice_LabelList( tom.library.adt.bytecode.types.TLabelList  begin,  tom.library.adt.bytecode.types.TLabelList  end, tom.library.adt.bytecode.types.TLabelList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyLabelList()  ||  (end== tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make( begin.getHeadLabelList() ,( tom.library.adt.bytecode.types.TLabelList )tom_get_slice_LabelList( begin.getTailLabelList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TMethodList  tom_append_list_MethodList( tom.library.adt.bytecode.types.TMethodList l1,  tom.library.adt.bytecode.types.TMethodList  l2) {     if( l1.isEmptyMethodList() ) {       return l2;     } else if( l2.isEmptyMethodList() ) {       return l1;     } else if(  l1.getTailMethodList() .isEmptyMethodList() ) {       return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make( l1.getHeadMethodList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make( l1.getHeadMethodList() ,tom_append_list_MethodList( l1.getTailMethodList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TMethodList  tom_get_slice_MethodList( tom.library.adt.bytecode.types.TMethodList  begin,  tom.library.adt.bytecode.types.TMethodList  end, tom.library.adt.bytecode.types.TMethodList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyMethodList()  ||  (end== tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make( begin.getHeadMethodList() ,( tom.library.adt.bytecode.types.TMethodList )tom_get_slice_MethodList( begin.getTailMethodList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_append_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList l1,  tom.library.adt.bytecode.types.TLocalVariableList  l2) {     if( l1.isEmptyLocalVariableList() ) {       return l2;     } else if( l2.isEmptyLocalVariableList() ) {       return l1;     } else if(  l1.getTailLocalVariableList() .isEmptyLocalVariableList() ) {       return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make( l1.getHeadLocalVariableList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make( l1.getHeadLocalVariableList() ,tom_append_list_LocalVariableList( l1.getTailLocalVariableList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_get_slice_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  begin,  tom.library.adt.bytecode.types.TLocalVariableList  end, tom.library.adt.bytecode.types.TLocalVariableList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyLocalVariableList()  ||  (end== tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make( begin.getHeadLocalVariableList() ,( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_slice_LocalVariableList( begin.getTailLocalVariableList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_append_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList l1,  tom.library.adt.bytecode.types.TTryCatchBlockList  l2) {     if( l1.isEmptyTryCatchBlockList() ) {       return l2;     } else if( l2.isEmptyTryCatchBlockList() ) {       return l1;     } else if(  l1.getTailTryCatchBlockList() .isEmptyTryCatchBlockList() ) {       return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make( l1.getHeadTryCatchBlockList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make( l1.getHeadTryCatchBlockList() ,tom_append_list_TryCatchBlockList( l1.getTailTryCatchBlockList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_slice_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  begin,  tom.library.adt.bytecode.types.TTryCatchBlockList  end, tom.library.adt.bytecode.types.TTryCatchBlockList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyTryCatchBlockList()  ||  (end== tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make( begin.getHeadTryCatchBlockList() ,( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_slice_TryCatchBlockList( begin.getTailTryCatchBlockList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TintList  tom_append_list_intList( tom.library.adt.bytecode.types.TintList l1,  tom.library.adt.bytecode.types.TintList  l2) {     if( l1.isEmptyintList() ) {       return l2;     } else if( l2.isEmptyintList() ) {       return l1;     } else if(  l1.getTailintList() .isEmptyintList() ) {       return  tom.library.adt.bytecode.types.tintlist.ConsintList.make( l1.getHeadintList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.tintlist.ConsintList.make( l1.getHeadintList() ,tom_append_list_intList( l1.getTailintList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TintList  tom_get_slice_intList( tom.library.adt.bytecode.types.TintList  begin,  tom.library.adt.bytecode.types.TintList  end, tom.library.adt.bytecode.types.TintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyintList()  ||  (end== tom.library.adt.bytecode.types.tintlist.EmptyintList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.tintlist.ConsintList.make( begin.getHeadintList() ,( tom.library.adt.bytecode.types.TintList )tom_get_slice_intList( begin.getTailintList() ,end,tail)) ;   }      private static   tom.library.adt.bytecode.types.TInstructionList  tom_append_list_InstructionList( tom.library.adt.bytecode.types.TInstructionList l1,  tom.library.adt.bytecode.types.TInstructionList  l2) {     if( l1.isEmptyInstructionList() ) {       return l2;     } else if( l2.isEmptyInstructionList() ) {       return l1;     } else if(  l1.getTailInstructionList() .isEmptyInstructionList() ) {       return  tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,l2) ;     } else {       return  tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,tom_append_list_InstructionList( l1.getTailInstructionList() ,l2)) ;     }   }   private static   tom.library.adt.bytecode.types.TInstructionList  tom_get_slice_InstructionList( tom.library.adt.bytecode.types.TInstructionList  begin,  tom.library.adt.bytecode.types.TInstructionList  end, tom.library.adt.bytecode.types.TInstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyInstructionList()  ||  (end== tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make( begin.getHeadInstructionList() ,( tom.library.adt.bytecode.types.TInstructionList )tom_get_slice_InstructionList( begin.getTailInstructionList() ,end,tail)) ;   }    public static class BuildLabelMap extends tom.library.sl.BasicStrategy {private  java.util.Map  m;public BuildLabelMap( java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.m=m;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch600NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;if ( (tomMatch600NameNumber_freshVar_1 instanceof tom.library.adt.bytecode.types.tinstruction.Anchor) ) {       m.put( tomMatch600NameNumber_freshVar_1.getlabel() , getEnvironment().getPosition());     }}}}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_BuildLabelMap( java.util.Map  t0) { return new BuildLabelMap(t0);}public static class OneCfg extends tom.library.sl.BasicStrategy {private  tom.library.sl.Strategy  s;private  java.util.Map  m;public OneCfg( tom.library.sl.Strategy  s,  java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.s=s;this.m=m;}public  tom.library.sl.Strategy  gets() {return s;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);stratChilds[1] = gets();return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);s = ( tom.library.sl.Strategy ) children[1];return this;}public int getChildCount() {return 2;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch601NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;if ( (tomMatch601NameNumber_freshVar_1 instanceof tom.library.adt.bytecode.types.tinstruction.Goto) ) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch601NameNumber_freshVar_1.getlabel() ));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }       return (TInstructionList) getEnvironment().getSubject();     }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch601NameNumber_freshVar_7= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch601NameNumber_freshVar_12= false ; tom.library.adt.bytecode.types.TLabel  tomMatch601NameNumber_freshVar_10= null ;if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifne) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Iflt) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifge) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifle) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Jsr) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch601NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull) ) {{tomMatch601NameNumber_freshVar_12= true ;tomMatch601NameNumber_freshVar_10= tomMatch601NameNumber_freshVar_7.getlabel() ;}}}}}}}}}}}}}}}}}}if ((tomMatch601NameNumber_freshVar_12 ==  true )) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch601NameNumber_freshVar_10));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));         return (TInstructionList) getEnvironment().getSubject();       } else {                 getEnvironment().followPathLocal(current.sub(p));       }     }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch601NameNumber_freshVar_14= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch601NameNumber_freshVar_20= false ; tom.library.adt.bytecode.types.TLabel  tomMatch601NameNumber_freshVar_17= null ; tom.library.adt.bytecode.types.TLabelList  tomMatch601NameNumber_freshVar_18= null ;if ( (tomMatch601NameNumber_freshVar_14 instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch) ) {{tomMatch601NameNumber_freshVar_20= true ;tomMatch601NameNumber_freshVar_17= tomMatch601NameNumber_freshVar_14.getdflt() ;tomMatch601NameNumber_freshVar_18= tomMatch601NameNumber_freshVar_14.getlabels() ;}} else {if ( (tomMatch601NameNumber_freshVar_14 instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch) ) {{tomMatch601NameNumber_freshVar_20= true ;tomMatch601NameNumber_freshVar_17= tomMatch601NameNumber_freshVar_14.getdflt() ;tomMatch601NameNumber_freshVar_18= tomMatch601NameNumber_freshVar_14.getlabels() ;}}}if ((tomMatch601NameNumber_freshVar_20 ==  true )) {       TLabelList labelList = tomMatch601NameNumber_freshVar_18;       {{if ( (labelList instanceof tom.library.adt.bytecode.types.TLabelList) ) {if ( (((( tom.library.adt.bytecode.types.TLabelList )labelList) instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) || ((( tom.library.adt.bytecode.types.TLabelList )labelList) instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList)) ) { tom.library.adt.bytecode.types.TLabelList  tomMatch602NameNumber_end_4=(( tom.library.adt.bytecode.types.TLabelList )labelList);do {{if (!( tomMatch602NameNumber_end_4.isEmptyLabelList() )) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch602NameNumber_end_4.getHeadLabelList() ));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(p.sub(current));           s.visit(getEnvironment());           if(getEnvironment().getStatus() == Environment.SUCCESS) {             getEnvironment().followPath(current.sub(p));             return (TInstructionList) getEnvironment().getSubject();           } else {                         getEnvironment().followPathLocal(current.sub(p));           }         }if ( tomMatch602NameNumber_end_4.isEmptyLabelList() ) {tomMatch602NameNumber_end_4=(( tom.library.adt.bytecode.types.TLabelList )labelList);} else {tomMatch602NameNumber_end_4= tomMatch602NameNumber_end_4.getTailLabelList() ;}}} while(!( (tomMatch602NameNumber_end_4==(( tom.library.adt.bytecode.types.TLabelList )labelList)) ));}}}}       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch601NameNumber_freshVar_17));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));         return (TInstructionList) getEnvironment().getSubject();       } else {                 getEnvironment().followPathLocal(current.sub(p));       }      }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstructionList  tomMatch601NameNumber_freshVar_23= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getTailInstructionList() ;boolean tomMatch601NameNumber_freshVar_26= false ;if ( ((tomMatch601NameNumber_freshVar_23 instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) || (tomMatch601NameNumber_freshVar_23 instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList)) ) {if ( tomMatch601NameNumber_freshVar_23.isEmptyInstructionList() ) {tomMatch601NameNumber_freshVar_26= true ;}}if ((tomMatch601NameNumber_freshVar_26 ==  false )) {       getEnvironment().down(2);       s.visit(getEnvironment());       getEnvironment().up();     }}}}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}public static class AllCfg extends tom.library.sl.BasicStrategy {private  tom.library.sl.Strategy  s;private  java.util.Map  m;public AllCfg( tom.library.sl.Strategy  s,  java.util.Map  m) {super(( new tom.library.sl.Identity() ));this.s=s;this.m=m;}public  tom.library.sl.Strategy  gets() {return s;}public  java.util.Map  getm() {return m;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);stratChilds[1] = gets();return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);s = ( tom.library.sl.Strategy ) children[1];return this;}public int getChildCount() {return 2;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch603NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;if ( (tomMatch603NameNumber_freshVar_1 instanceof tom.library.adt.bytecode.types.tinstruction.Goto) ) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch603NameNumber_freshVar_1.getlabel() ));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }                return (TInstructionList) getEnvironment().getSubject();     }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch603NameNumber_freshVar_7= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch603NameNumber_freshVar_12= false ; tom.library.adt.bytecode.types.TLabel  tomMatch603NameNumber_freshVar_10= null ;if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifne) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Iflt) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifge) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifle) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Jsr) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}} else {if ( (tomMatch603NameNumber_freshVar_7 instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull) ) {{tomMatch603NameNumber_freshVar_12= true ;tomMatch603NameNumber_freshVar_10= tomMatch603NameNumber_freshVar_7.getlabel() ;}}}}}}}}}}}}}}}}}}if ((tomMatch603NameNumber_freshVar_12 ==  true )) {       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch603NameNumber_freshVar_10));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }              }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstruction  tomMatch603NameNumber_freshVar_14= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() ;boolean tomMatch603NameNumber_freshVar_20= false ; tom.library.adt.bytecode.types.TLabel  tomMatch603NameNumber_freshVar_17= null ; tom.library.adt.bytecode.types.TLabelList  tomMatch603NameNumber_freshVar_18= null ;if ( (tomMatch603NameNumber_freshVar_14 instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch) ) {{tomMatch603NameNumber_freshVar_20= true ;tomMatch603NameNumber_freshVar_17= tomMatch603NameNumber_freshVar_14.getdflt() ;tomMatch603NameNumber_freshVar_18= tomMatch603NameNumber_freshVar_14.getlabels() ;}} else {if ( (tomMatch603NameNumber_freshVar_14 instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch) ) {{tomMatch603NameNumber_freshVar_20= true ;tomMatch603NameNumber_freshVar_17= tomMatch603NameNumber_freshVar_14.getdflt() ;tomMatch603NameNumber_freshVar_18= tomMatch603NameNumber_freshVar_14.getlabels() ;}}}if ((tomMatch603NameNumber_freshVar_20 ==  true )) {       TLabelList labelList = tomMatch603NameNumber_freshVar_18;       {{if ( (labelList instanceof tom.library.adt.bytecode.types.TLabelList) ) {if ( (((( tom.library.adt.bytecode.types.TLabelList )labelList) instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) || ((( tom.library.adt.bytecode.types.TLabelList )labelList) instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList)) ) { tom.library.adt.bytecode.types.TLabelList  tomMatch604NameNumber_end_4=(( tom.library.adt.bytecode.types.TLabelList )labelList);do {{if (!( tomMatch604NameNumber_end_4.isEmptyLabelList() )) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get( tomMatch604NameNumber_end_4.getHeadLabelList() ));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(current.sub(p));           s.visit(getEnvironment());           if(getEnvironment().getStatus() == Environment.SUCCESS) {             getEnvironment().followPath(current.sub(p));           } else {                         getEnvironment().followPathLocal(current.sub(p));           }              }if ( tomMatch604NameNumber_end_4.isEmptyLabelList() ) {tomMatch604NameNumber_end_4=(( tom.library.adt.bytecode.types.TLabelList )labelList);} else {tomMatch604NameNumber_end_4= tomMatch604NameNumber_end_4.getTailLabelList() ;}}} while(!( (tomMatch604NameNumber_end_4==(( tom.library.adt.bytecode.types.TLabelList )labelList)) ));}}}}       tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch603NameNumber_freshVar_17));       tom.library.sl.Position current = getEnvironment().getPosition();       getEnvironment().followPath(p.sub(current));       s.visit(getEnvironment());       if(getEnvironment().getStatus() == Environment.SUCCESS) {         getEnvironment().followPath(current.sub(p));       } else {                 getEnvironment().followPathLocal(current.sub(p));       }     }}}}{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) { tom.library.adt.bytecode.types.TInstructionList  tomMatch603NameNumber_freshVar_23= (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getTailInstructionList() ;boolean tomMatch603NameNumber_freshVar_26= false ;if ( ((tomMatch603NameNumber_freshVar_23 instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) || (tomMatch603NameNumber_freshVar_23 instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList)) ) {if ( tomMatch603NameNumber_freshVar_23.isEmptyInstructionList() ) {tomMatch603NameNumber_freshVar_26= true ;}}if ((tomMatch603NameNumber_freshVar_26 ==  false )) {       getEnvironment().down(2);       s.visit(getEnvironment());       getEnvironment().up();     }}}}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_AllCfg( tom.library.sl.Strategy  t0,  java.util.Map  t1) { return new AllCfg(t0,t1);}public static class Mark extends tom.library.sl.BasicStrategy {private  java.util.Map  map;public Mark( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) { tom.library.adt.bytecode.types.TInstructionList  tom_c=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);       Object o = map.get(tom_c);       int value = 1;       if(o != null)         value = ((Integer)o).intValue() + 1;       map.put(tom_c, new Integer(value));     }}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}public static class UnMark extends tom.library.sl.BasicStrategy {private  java.util.Map  map;public UnMark( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) { tom.library.adt.bytecode.types.TInstructionList  tom_c=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);       Object o = map.get(tom_c);       if(o == null) {         throw new tom.library.sl.VisitFailure();       }       int value = ((Integer)o).intValue() - 1;       map.put(tom_c, new Integer(value));     }}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}public static class IsMarked extends tom.library.sl.BasicStrategy {private  java.util.Map  map;public IsMarked( java.util.Map  map) {super(( new tom.library.sl.Identity() ));this.map=map;}public  java.util.Map  getmap() {return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {       Object o = map.get((( tom.library.adt.bytecode.types.TInstructionList )tom__arg));       if(o == null || ((Integer)o).intValue() <= 0)         throw new tom.library.sl.VisitFailure();     }}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}  






  /**
   * Returns the dot node id of the given TInstructionList.
   * @param ins the instruction.
   * @return the id.
   */
  private static String getDotId(TInstructionList ins) {
    return ("insid" + ins.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TTryCatchBlock.
   * @param bl the try/catch block.
   * @return the id.
   */
  private static String getDotId(TTryCatchBlock bl) {
    return ("blockid" + bl.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TLocalVariable.
   * @param the local variable.
   * @return the id.
   */
  private static String getDotId(TLocalVariable var) {
    return ("varid" + var.hashCode()).replace('-', 'm');
  }

  /**
   * Cleans the given string to prevent dot compilation problems.
   * (ex: replace the character '"' with the string "\"").
   * @param s the string to be cleaned.
   * @return the cleaned string.
   */
  private static String clean(String s) {
    return s.replaceAll("\\\"", "\\\\\\\"");
  }

  /**
   * Prints the current instruction node with a suitable label.
   * @param out the writer to be used for the dot output.
   */
  public static class PrintDotNode extends tom.library.sl.BasicStrategy {private java.io.Writer out;public PrintDotNode(java.io.Writer out) {super(( new tom.library.sl.Identity() ));this.out=out;}public java.io.Writer getout() {return out;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) {


        String id = getDotId((( tom.library.adt.bytecode.types.TInstructionList )tom__arg));
        printDotInstruction( (( tom.library.adt.bytecode.types.TInstructionList )tom__arg).getHeadInstructionList() , id, out);
      }}}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_PrintDotNode(java.io.Writer t0) { return new PrintDotNode(t0);}



  /**
   * Prints the given instruction with a suitable label and id.
   * @param ins the instruction to be printed.
   * @param id the id of the dot node.
   * @param out the writer to be used for the dot output.
   */
  private static void printDotInstruction(TInstruction ins, String id, Writer out) {
    try {
      {{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {boolean tomMatch609NameNumber_freshVar_3= false ; int  tomMatch609NameNumber_freshVar_1= 0 ;if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Bipush) ) {{tomMatch609NameNumber_freshVar_3= true ;tomMatch609NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstruction )ins).getoperand() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Sipush) ) {{tomMatch609NameNumber_freshVar_3= true ;tomMatch609NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstruction )ins).getoperand() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Newarray) ) {{tomMatch609NameNumber_freshVar_3= true ;tomMatch609NameNumber_freshVar_1= (( tom.library.adt.bytecode.types.TInstruction )ins).getoperand() ;}}}}if ((tomMatch609NameNumber_freshVar_3 ==  true )) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\noperand : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString(tomMatch609NameNumber_freshVar_1)+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Multianewarray) ) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\ntypeDesc : "/* Generated by TOM (version 2.6): Do not edit this file */+ (( tom.library.adt.bytecode.types.TInstruction )ins).gettypeDesc() +"\\ndims : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString( (( tom.library.adt.bytecode.types.TInstruction )ins).getdims() )+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Ldc) ) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\ncst : "/* Generated by TOM (version 2.6): Do not edit this file */+clean( (( tom.library.adt.bytecode.types.TInstruction )ins).getcst() .toString())+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {boolean tomMatch609NameNumber_freshVar_14= false ; int  tomMatch609NameNumber_freshVar_12= 0 ;if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Iload) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Lload) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Fload) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Dload) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Aload) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Istore) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Lstore) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Fstore) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Dstore) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Astore) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Ret) ) {{tomMatch609NameNumber_freshVar_14= true ;tomMatch609NameNumber_freshVar_12= (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() ;}}}}}}}}}}}}if ((tomMatch609NameNumber_freshVar_14 ==  true )) {




          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nvar : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString(tomMatch609NameNumber_freshVar_12)+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Iinc) ) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nincr : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString( (( tom.library.adt.bytecode.types.TInstruction )ins).getincr() )+"\\nvar : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString( (( tom.library.adt.bytecode.types.TInstruction )ins).getvar() )+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch) ) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nmin : "/* Generated by TOM (version 2.6): Do not edit this file */+ (( tom.library.adt.bytecode.types.TInstruction )ins).getmin() +"\\nmax : "/* Generated by TOM (version 2.6): Do not edit this file */+ (( tom.library.adt.bytecode.types.TInstruction )ins).getmax() +"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch) ) { tom.library.adt.bytecode.types.TintList  tom_keys= (( tom.library.adt.bytecode.types.TInstruction )ins).getkeys() ;


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nkeys : "
);
              TintList keys = tom_keys;
              {{if ( (tom_keys instanceof tom.library.adt.bytecode.types.TintList) ) {if ( (((( tom.library.adt.bytecode.types.TintList )tom_keys) instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) || ((( tom.library.adt.bytecode.types.TintList )tom_keys) instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList)) ) { tom.library.adt.bytecode.types.TintList  tomMatch610NameNumber_end_4=(( tom.library.adt.bytecode.types.TintList )tom_keys);do {{if (!( tomMatch610NameNumber_end_4.isEmptyintList() )) { tom.library.adt.bytecode.types.TintList  tomMatch610NameNumber_freshVar_5= tomMatch610NameNumber_end_4.getTailintList() ; tom.library.adt.bytecode.types.TintList  tomMatch610NameNumber_end_8=tomMatch610NameNumber_freshVar_5;do {{if (!( tomMatch610NameNumber_end_8.isEmptyintList() )) {if (  tomMatch610NameNumber_end_8.getTailintList() .isEmptyintList() ) {

                  out.write(""/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString( tomMatch610NameNumber_end_4.getHeadintList() )+", ");
                }}if ( tomMatch610NameNumber_end_8.isEmptyintList() ) {tomMatch610NameNumber_end_8=tomMatch610NameNumber_freshVar_5;} else {tomMatch610NameNumber_end_8= tomMatch610NameNumber_end_8.getTailintList() ;}}} while(!( (tomMatch610NameNumber_end_8==tomMatch610NameNumber_freshVar_5) ));}if ( tomMatch610NameNumber_end_4.isEmptyintList() ) {tomMatch610NameNumber_end_4=(( tom.library.adt.bytecode.types.TintList )tom_keys);} else {tomMatch610NameNumber_end_4= tomMatch610NameNumber_end_4.getTailintList() ;}}} while(!( (tomMatch610NameNumber_end_4==(( tom.library.adt.bytecode.types.TintList )tom_keys)) ));}}}{if ( (tom_keys instanceof tom.library.adt.bytecode.types.TintList) ) {if ( (((( tom.library.adt.bytecode.types.TintList )tom_keys) instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) || ((( tom.library.adt.bytecode.types.TintList )tom_keys) instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList)) ) { tom.library.adt.bytecode.types.TintList  tomMatch610NameNumber_end_14=(( tom.library.adt.bytecode.types.TintList )tom_keys);do {{if (!( tomMatch610NameNumber_end_14.isEmptyintList() )) {if (  tomMatch610NameNumber_end_14.getTailintList() .isEmptyintList() ) {

                  out.write(Integer.toString( tomMatch610NameNumber_end_14.getHeadintList() ));
                }}if ( tomMatch610NameNumber_end_14.isEmptyintList() ) {tomMatch610NameNumber_end_14=(( tom.library.adt.bytecode.types.TintList )tom_keys);} else {tomMatch610NameNumber_end_14= tomMatch610NameNumber_end_14.getTailintList() ;}}} while(!( (tomMatch610NameNumber_end_14==(( tom.library.adt.bytecode.types.TintList )tom_keys)) ));}}}}

              out.write("\"];");
              return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {boolean tomMatch609NameNumber_freshVar_31= false ; String  tomMatch609NameNumber_freshVar_28= "" ; String  tomMatch609NameNumber_freshVar_27= "" ; tom.library.adt.bytecode.types.TFieldDescriptor  tomMatch609NameNumber_freshVar_29= null ;if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Getstatic) ) {{tomMatch609NameNumber_freshVar_31= true ;tomMatch609NameNumber_freshVar_27= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_28= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_29= (( tom.library.adt.bytecode.types.TInstruction )ins).getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Putstatic) ) {{tomMatch609NameNumber_freshVar_31= true ;tomMatch609NameNumber_freshVar_27= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_28= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_29= (( tom.library.adt.bytecode.types.TInstruction )ins).getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Getfield) ) {{tomMatch609NameNumber_freshVar_31= true ;tomMatch609NameNumber_freshVar_27= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_28= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_29= (( tom.library.adt.bytecode.types.TInstruction )ins).getfieldDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Putfield) ) {{tomMatch609NameNumber_freshVar_31= true ;tomMatch609NameNumber_freshVar_27= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_28= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_29= (( tom.library.adt.bytecode.types.TInstruction )ins).getfieldDesc() ;}}}}}if ((tomMatch609NameNumber_freshVar_31 ==  true )) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.6): Do not edit this file */+tomMatch609NameNumber_freshVar_27+"\\nname : "/* Generated by TOM (version 2.6): Do not edit this file */+tomMatch609NameNumber_freshVar_28+"\\ndescriptor : "/* Generated by TOM (version 2.6): Do not edit this file */+ToolBox.buildDescriptor(tomMatch609NameNumber_freshVar_29)+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {boolean tomMatch609NameNumber_freshVar_37= false ; String  tomMatch609NameNumber_freshVar_33= "" ; tom.library.adt.bytecode.types.TMethodDescriptor  tomMatch609NameNumber_freshVar_35= null ; String  tomMatch609NameNumber_freshVar_34= "" ;if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Invokevirtual) ) {{tomMatch609NameNumber_freshVar_37= true ;tomMatch609NameNumber_freshVar_33= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_34= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_35= (( tom.library.adt.bytecode.types.TInstruction )ins).getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Invokespecial) ) {{tomMatch609NameNumber_freshVar_37= true ;tomMatch609NameNumber_freshVar_33= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_34= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_35= (( tom.library.adt.bytecode.types.TInstruction )ins).getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Invokestatic) ) {{tomMatch609NameNumber_freshVar_37= true ;tomMatch609NameNumber_freshVar_33= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_34= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_35= (( tom.library.adt.bytecode.types.TInstruction )ins).getmethodDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Invokeinterface) ) {{tomMatch609NameNumber_freshVar_37= true ;tomMatch609NameNumber_freshVar_33= (( tom.library.adt.bytecode.types.TInstruction )ins).getowner() ;tomMatch609NameNumber_freshVar_34= (( tom.library.adt.bytecode.types.TInstruction )ins).getname() ;tomMatch609NameNumber_freshVar_35= (( tom.library.adt.bytecode.types.TInstruction )ins).getmethodDesc() ;}}}}}if ((tomMatch609NameNumber_freshVar_37 ==  true )) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.6): Do not edit this file */+tomMatch609NameNumber_freshVar_33+"\\nname : "/* Generated by TOM (version 2.6): Do not edit this file */+tomMatch609NameNumber_freshVar_34+"\\ndescriptor : "/* Generated by TOM (version 2.6): Do not edit this file */+ToolBox.buildDescriptor(tomMatch609NameNumber_freshVar_35)+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {boolean tomMatch609NameNumber_freshVar_41= false ; String  tomMatch609NameNumber_freshVar_39= "" ;if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.New) ) {{tomMatch609NameNumber_freshVar_41= true ;tomMatch609NameNumber_freshVar_39= (( tom.library.adt.bytecode.types.TInstruction )ins).gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Anewarray) ) {{tomMatch609NameNumber_freshVar_41= true ;tomMatch609NameNumber_freshVar_39= (( tom.library.adt.bytecode.types.TInstruction )ins).gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Checkcast) ) {{tomMatch609NameNumber_freshVar_41= true ;tomMatch609NameNumber_freshVar_39= (( tom.library.adt.bytecode.types.TInstruction )ins).gettypeDesc() ;}} else {if ( ((( tom.library.adt.bytecode.types.TInstruction )ins) instanceof tom.library.adt.bytecode.types.tinstruction.Instanceof) ) {{tomMatch609NameNumber_freshVar_41= true ;tomMatch609NameNumber_freshVar_39= (( tom.library.adt.bytecode.types.TInstruction )ins).gettypeDesc() ;}}}}}if ((tomMatch609NameNumber_freshVar_41 ==  true )) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\\ndescriptor : "/* Generated by TOM (version 2.6): Do not edit this file */+tomMatch609NameNumber_freshVar_39+"\"];\n              "

);
          return;
        }}}{if ( (ins instanceof tom.library.adt.bytecode.types.TInstruction) ) {


          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.6): Do not edit this file */+ins.symbolName()+"\"];\n              "

);
        }}}

    } catch(IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * Prints a link from the `parent' instruction to the current node instruction.
   * @param out the writer to be used for the dot output.
   */
  public static class PrintDotLink extends tom.library.sl.BasicStrategy {private java.io.Writer out;private  InsWrapper  parent;public PrintDotLink(java.io.Writer out,  InsWrapper  parent) {super(( new tom.library.sl.Identity() ));this.out=out;this.parent=parent;}public java.io.Writer getout() {return out;}public  InsWrapper  getparent() {return parent;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {if ( ((( tom.library.adt.bytecode.types.TInstructionList )tom__arg) instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) ) {


        try {
          out.write(""/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(parent.ins)+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId((( tom.library.adt.bytecode.types.TInstructionList )tom__arg))+";\n              "
);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_PrintDotLink(java.io.Writer t0,  InsWrapper  t1) { return new PrintDotLink(t0,t1);}



  /**
   * Prints all the try/catch/finally informations of the given block list.
   * @param list the try/catch/finally blocks to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printTryCatchBlocks(TTryCatchBlockList list, Map labelMap, Writer out,TInstructionList inst) throws VisitFailure{
    {{if ( (list instanceof tom.library.adt.bytecode.types.TTryCatchBlockList) ) {if ( (((( tom.library.adt.bytecode.types.TTryCatchBlockList )list) instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList) || ((( tom.library.adt.bytecode.types.TTryCatchBlockList )list) instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList)) ) { tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch612NameNumber_end_4=(( tom.library.adt.bytecode.types.TTryCatchBlockList )list);do {{if (!( tomMatch612NameNumber_end_4.isEmptyTryCatchBlockList() )) {

        try {
          TTryCatchBlock block =  tomMatch612NameNumber_end_4.getHeadTryCatchBlockList() ;
          THandler handler = block.gethandler();
          String id = getDotId(block);

          {{if ( (handler instanceof tom.library.adt.bytecode.types.THandler) ) {if ( ((( tom.library.adt.bytecode.types.THandler )handler) instanceof tom.library.adt.bytecode.types.thandler.CatchHandler) ) {

              Position labelPosition = (Position) labelMap.get( (( tom.library.adt.bytecode.types.THandler )handler).gethandler() );
              TInstructionList labelInst = (TInstructionList) labelPosition.getSubterm().visit(inst);
              out.write("\n                  "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\"Catch\\ntype : "/* Generated by TOM (version 2.6): Do not edit this file */+ (( tom.library.adt.bytecode.types.THandler )handler).gettype() +"\" shape=box];\n                  "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}{if ( (handler instanceof tom.library.adt.bytecode.types.THandler) ) {if ( ((( tom.library.adt.bytecode.types.THandler )handler) instanceof tom.library.adt.bytecode.types.thandler.FinallyHandler) ) {


              Position labelPosition = (Position) labelMap.get( (( tom.library.adt.bytecode.types.THandler )handler).gethandler() );
              TInstructionList labelInst = (TInstructionList) labelPosition.getSubterm().visit(inst);
              out.write("\n                  "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\"Finally\" shape=box];\n                  "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}}


          Position startPosition = (Position) labelMap.get(block.getstart());
          TInstructionList startInst = (TInstructionList) startPosition.getSubterm().visit(inst);
          Position endPosition = (Position) labelMap.get(block.getend());
          TInstructionList lastInst = (TInstructionList) endPosition.getSubterm().visit(inst);
          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "


);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch612NameNumber_end_4.isEmptyTryCatchBlockList() ) {tomMatch612NameNumber_end_4=(( tom.library.adt.bytecode.types.TTryCatchBlockList )list);} else {tomMatch612NameNumber_end_4= tomMatch612NameNumber_end_4.getTailTryCatchBlockList() ;}}} while(!( (tomMatch612NameNumber_end_4==(( tom.library.adt.bytecode.types.TTryCatchBlockList )list)) ));}}}}

  }

  /**
   * Prints all the local variables informations.
   * @param list the local variables list to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printLocalVariables(TLocalVariableList list, Map labelMap, Writer out, TInstructionList inst) throws VisitFailure {
    {{if ( (list instanceof tom.library.adt.bytecode.types.TLocalVariableList) ) {if ( (((( tom.library.adt.bytecode.types.TLocalVariableList )list) instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList) || ((( tom.library.adt.bytecode.types.TLocalVariableList )list) instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList)) ) { tom.library.adt.bytecode.types.TLocalVariableList  tomMatch614NameNumber_end_4=(( tom.library.adt.bytecode.types.TLocalVariableList )list);do {{if (!( tomMatch614NameNumber_end_4.isEmptyLocalVariableList() )) {

        try {
          TLocalVariable var =  tomMatch614NameNumber_end_4.getHeadLocalVariableList() ;
          String id = getDotId(var);
          Position startPosition = (Position) labelMap.get(var.getstart());
          TInstructionList startInst = (TInstructionList) startPosition.getSubterm().visit(inst);
          Position endPosition = (Position) labelMap.get(var.getend());
          TInstructionList lastInst = (TInstructionList) endPosition.getSubterm().visit(inst);

          out.write("\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" [label=\"var : "/* Generated by TOM (version 2.6): Do not edit this file */+var.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.6): Do not edit this file */+var.gettypeDesc()+"\\nindex : "/* Generated by TOM (version 2.6): Do not edit this file */+Integer.toString(var.getindex())+"\" shape=box];\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.6): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "



);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch614NameNumber_end_4.isEmptyLocalVariableList() ) {tomMatch614NameNumber_end_4=(( tom.library.adt.bytecode.types.TLocalVariableList )list);} else {tomMatch614NameNumber_end_4= tomMatch614NameNumber_end_4.getTailLocalVariableList() ;}}} while(!( (tomMatch614NameNumber_end_4==(( tom.library.adt.bytecode.types.TLocalVariableList )list)) ));}}}}

  }

  /**
   * Used to pass the stored instruction as a strategy parameter.
   */
  private static class InsWrapper { public TInstructionList ins; }
  




  /**
   * Assign the current instruction node to the given InsWrapper.
   * @param ins the instruction wrapper.
   */
  public static class Assign extends tom.library.sl.BasicStrategy {private  InsWrapper  ins;public Assign( InsWrapper  ins) {super(( new tom.library.sl.Identity() ));this.ins=ins;}public  InsWrapper  getins() {return ins;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.library.adt.bytecode.types.TInstructionList) ) {

 ins.ins = (( tom.library.adt.bytecode.types.TInstructionList )tom__arg); }}}return _visit_TInstructionList(tom__arg,introspector); }public  tom.library.adt.bytecode.types.TInstructionList  _visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.library.adt.bytecode.types.TInstructionList )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.library.adt.bytecode.types.TInstructionList) ) {return ((T)visit_TInstructionList((( tom.library.adt.bytecode.types.TInstructionList )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_Assign( InsWrapper  t0) { return new Assign(t0);}



  /**
   * Generates a control flow graph for each method of the given class.
   * @param clazz the gom-term subject representing the class.
   */
  public static void classToDot(TClass clazz) throws VisitFailure {
    Writer w = new BufferedWriter(new OutputStreamWriter(System.out)); 
    TMethodList methods = clazz.getmethods();
    {{if ( (methods instanceof tom.library.adt.bytecode.types.TMethodList) ) {if ( (((( tom.library.adt.bytecode.types.TMethodList )methods) instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) || ((( tom.library.adt.bytecode.types.TMethodList )methods) instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList)) ) { tom.library.adt.bytecode.types.TMethodList  tomMatch616NameNumber_end_4=(( tom.library.adt.bytecode.types.TMethodList )methods);do {{if (!( tomMatch616NameNumber_end_4.isEmptyMethodList() )) { tom.library.adt.bytecode.types.TMethod  tom_x= tomMatch616NameNumber_end_4.getHeadMethodList() ;

        try {
          TMethodInfo info = tom_x.getinfo();
          w.write("digraph "/* Generated by TOM (version 2.6): Do not edit this file */+info.getname()+" {\n              "
);

          // Print a root node with the method name and descriptor. Add a link to the first instruction if any.
          w.write("method [label=\"method : "/* Generated by TOM (version 2.6): Do not edit this file */+info.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.6): Do not edit this file */+ToolBox.buildDescriptor(info.getdesc())+"\" shape=box];\n              "
);
          if(!tom_x.getcode().isEmptyCode()) {
            TInstructionList ins = tom_x.getcode().getinstructions();
            if(!ins.isEmptyInstructionList()) {
              w.write("method -> "/* Generated by TOM (version 2.6): Do not edit this file */+getDotId(ins)+"\n                  "
);
            }

            // Compute the label map to allow us to retrieve an instruction from a label.
            HashMap labelMap = new HashMap();
            tom_make_TopDown(tom_make_BuildLabelMap(labelMap)).visit(ins);

            // Create a wrapper to pass a parent node to its children.
            InsWrapper insWrapper = new InsWrapper();

            // This strategy run through all node. For each of them, the node is printed.
            // Links between the current node and its children are printed by passing the parent to each of them.
            // AllCfg allows us to get all the children of the current node.
            Strategy toDot = tom_make_TopDown(tom_make_Try(( (( (( null )==null)?( (( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )==null)?tom_make_Assign(insWrapper):new tom.library.sl.Sequence(tom_make_Assign(insWrapper),( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )) ):new tom.library.sl.Sequence(( (( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )==null)?tom_make_Assign(insWrapper):new tom.library.sl.Sequence(tom_make_Assign(insWrapper),( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )) ),( null )) )==null)?tom_make_PrintDotNode(w):new tom.library.sl.Sequence(tom_make_PrintDotNode(w),( (( null )==null)?( (( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )==null)?tom_make_Assign(insWrapper):new tom.library.sl.Sequence(tom_make_Assign(insWrapper),( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )) ):new tom.library.sl.Sequence(( (( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )==null)?tom_make_Assign(insWrapper):new tom.library.sl.Sequence(tom_make_Assign(insWrapper),( (( null )==null)?tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap):new tom.library.sl.Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),( null )) )) ),( null )) )) )))







;

            toDot.visit(ins);

            // Prints the try/catch/finally blocks.
            printTryCatchBlocks(tom_x.getcode().gettryCatchBlocks(), labelMap, w, ins);

            // Prints the local variables informations.
            printLocalVariables(tom_x.getcode().getlocalVariables(), labelMap, w, ins);
          }

          w.write("}\n");
          w.flush();
        } catch(IOException e) {
          e.printStackTrace();
        }
      }if ( tomMatch616NameNumber_end_4.isEmptyMethodList() ) {tomMatch616NameNumber_end_4=(( tom.library.adt.bytecode.types.TMethodList )methods);} else {tomMatch616NameNumber_end_4= tomMatch616NameNumber_end_4.getTailMethodList() ;}}} while(!( (tomMatch616NameNumber_end_4==(( tom.library.adt.bytecode.types.TMethodList )methods)) ));}}}}

  }

  /**
   * Generates the dot control flow graphs for each method of the specified class.
   * Usage : java bytecode.CFGViewer <class name>
   * Ex: java bytecode.CFGViewer bytecode.Subject
   * @param args args[0] : the class name
   */
   public static void main(String[] args) {
     if(args.length <= 0) {
       System.out.println("Usage : java bytecode.CFGViewer <class name>\nEx: java bytecode.CFGViewer MyClass");
       return;
     }
     BytecodeReader cg = new BytecodeReader(args[0]);
     TClass c = cg.getTClass();
     try {
       classToDot(c);
     } catch (VisitFailure e) {
       System.out.println("Unexpected failure in strategies");
     }
   }

}


