/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Copyright (c) 2000-2007, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the INRIA nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.library.bytecode;

import java.util.Map;
import java.util.HashMap;
import java.io.Writer;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassAdapter;

import tom.library.sl.*;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;

/**
 * A dot control flow graph exporter.
 * This class generates a control flow graph for each method of a class.
 */
public class CFGViewer {
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_TLocalVariable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariable(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariable ;}private static boolean tom_equal_term_TMethodList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodList ;}private static boolean tom_equal_term_TMethod(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethod(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethod ;}private static boolean tom_equal_term_TLabelList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabelList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabelList ;}private static boolean tom_equal_term_TInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstruction(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstruction ;}private static boolean tom_equal_term_TValue(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TValue(Object t) { return  t instanceof tom.library.adt.bytecode.types.TValue ;}private static boolean tom_equal_term_TTryCatchBlockList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlockList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlockList ;}private static boolean tom_equal_term_TMethodDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodDescriptor ;}private static boolean tom_equal_term_TFieldDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TFieldDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TFieldDescriptor ;}private static boolean tom_equal_term_TTryCatchBlock(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlock(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlock ;}private static boolean tom_equal_term_TintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TintList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TintList ;}private static boolean tom_equal_term_THandler(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_THandler(Object t) { return  t instanceof tom.library.adt.bytecode.types.THandler ;}private static boolean tom_equal_term_TInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstructionList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstructionList ;}private static boolean tom_equal_term_TLabel(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabel(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabel ;}private static boolean tom_equal_term_TLocalVariableList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariableList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariableList ;}private static boolean tom_is_fun_sym_Anchor( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Anchor ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Anchor_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Bipush( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Bipush ;}private static  int  tom_get_slot_Bipush_operand( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getoperand() ;}private static boolean tom_is_fun_sym_Sipush( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Sipush ;}private static  int  tom_get_slot_Sipush_operand( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getoperand() ;}private static boolean tom_is_fun_sym_Ldc( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ldc ;}private static  tom.library.adt.bytecode.types.TValue  tom_get_slot_Ldc_cst( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getcst() ;}private static boolean tom_is_fun_sym_Iload( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iload ;}private static  int  tom_get_slot_Iload_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Lload( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lload ;}private static  int  tom_get_slot_Lload_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Fload( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Fload ;}private static  int  tom_get_slot_Fload_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Dload( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Dload ;}private static  int  tom_get_slot_Dload_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Aload( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Aload ;}private static  int  tom_get_slot_Aload_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Istore( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Istore ;}private static  int  tom_get_slot_Istore_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Lstore( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lstore ;}private static  int  tom_get_slot_Lstore_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Fstore( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Fstore ;}private static  int  tom_get_slot_Fstore_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Dstore( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Dstore ;}private static  int  tom_get_slot_Dstore_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Astore( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Astore ;}private static  int  tom_get_slot_Astore_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Iinc( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iinc ;}private static  int  tom_get_slot_Iinc_incr( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getincr() ;}private static  int  tom_get_slot_Iinc_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Ifeq( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifeq_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ifne( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifne ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifne_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Iflt( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iflt ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Iflt_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ifge( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifge ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifge_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ifgt( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifgt_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ifle( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifle ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifle_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmpeq( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpeq_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmpne( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpne_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmplt( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmplt_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmpge( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpge_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmpgt( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpgt_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_icmple( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmple_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_acmpeq( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_acmpeq_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_If_acmpne( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_acmpne_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Goto( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Goto ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Goto_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Jsr( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Jsr ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Jsr_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ret( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ret ;}private static  int  tom_get_slot_Ret_var( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getvar() ;}private static boolean tom_is_fun_sym_Tableswitch( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch ;}private static  int  tom_get_slot_Tableswitch_min( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmin() ;}private static  int  tom_get_slot_Tableswitch_max( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmax() ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Tableswitch_dflt( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getdflt() ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_slot_Tableswitch_labels( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabels() ;}private static boolean tom_is_fun_sym_Lookupswitch( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Lookupswitch_dflt( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getdflt() ;}private static  tom.library.adt.bytecode.types.TintList  tom_get_slot_Lookupswitch_keys( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getkeys() ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_slot_Lookupswitch_labels( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabels() ;}private static boolean tom_is_fun_sym_Getstatic( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Getstatic ;}private static  String  tom_get_slot_Getstatic_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Getstatic_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Getstatic_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getfieldDesc() ;}private static boolean tom_is_fun_sym_Putstatic( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Putstatic ;}private static  String  tom_get_slot_Putstatic_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Putstatic_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Putstatic_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getfieldDesc() ;}private static boolean tom_is_fun_sym_Getfield( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Getfield ;}private static  String  tom_get_slot_Getfield_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Getfield_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Getfield_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getfieldDesc() ;}private static boolean tom_is_fun_sym_Putfield( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Putfield ;}private static  String  tom_get_slot_Putfield_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Putfield_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Putfield_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getfieldDesc() ;}private static boolean tom_is_fun_sym_Invokevirtual( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokevirtual ;}private static  String  tom_get_slot_Invokevirtual_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Invokevirtual_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokevirtual_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmethodDesc() ;}private static boolean tom_is_fun_sym_Invokespecial( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokespecial ;}private static  String  tom_get_slot_Invokespecial_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Invokespecial_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokespecial_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmethodDesc() ;}private static boolean tom_is_fun_sym_Invokestatic( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokestatic ;}private static  String  tom_get_slot_Invokestatic_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Invokestatic_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokestatic_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmethodDesc() ;}private static boolean tom_is_fun_sym_Invokeinterface( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokeinterface ;}private static  String  tom_get_slot_Invokeinterface_owner( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getowner() ;}private static  String  tom_get_slot_Invokeinterface_name( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getname() ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokeinterface_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getmethodDesc() ;}private static boolean tom_is_fun_sym_New( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.New ;}private static  String  tom_get_slot_New_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.gettypeDesc() ;}private static boolean tom_is_fun_sym_Newarray( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Newarray ;}private static  int  tom_get_slot_Newarray_operand( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getoperand() ;}private static boolean tom_is_fun_sym_Anewarray( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Anewarray ;}private static  String  tom_get_slot_Anewarray_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.gettypeDesc() ;}private static boolean tom_is_fun_sym_Checkcast( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Checkcast ;}private static  String  tom_get_slot_Checkcast_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.gettypeDesc() ;}private static boolean tom_is_fun_sym_Instanceof( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Instanceof ;}private static  String  tom_get_slot_Instanceof_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.gettypeDesc() ;}private static boolean tom_is_fun_sym_Multianewarray( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Multianewarray ;}private static  String  tom_get_slot_Multianewarray_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) { return  t.gettypeDesc() ;}private static  int  tom_get_slot_Multianewarray_dims( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getdims() ;}private static boolean tom_is_fun_sym_Ifnull( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifnull_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_Ifnonnull( tom.library.adt.bytecode.types.TInstruction  t) { return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifnonnull_label( tom.library.adt.bytecode.types.TInstruction  t) { return  t.getlabel() ;}private static boolean tom_is_fun_sym_CatchHandler( tom.library.adt.bytecode.types.THandler  t) { return  t instanceof tom.library.adt.bytecode.types.thandler.CatchHandler ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_CatchHandler_handler( tom.library.adt.bytecode.types.THandler  t) { return  t.gethandler() ;}private static  String  tom_get_slot_CatchHandler_type( tom.library.adt.bytecode.types.THandler  t) { return  t.gettype() ;}private static boolean tom_is_fun_sym_FinallyHandler( tom.library.adt.bytecode.types.THandler  t) { return  t instanceof tom.library.adt.bytecode.types.thandler.FinallyHandler ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_FinallyHandler_handler( tom.library.adt.bytecode.types.THandler  t) { return  t.gethandler() ;}private static boolean tom_is_fun_sym_ConsInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) { return  t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList ;}private static  tom.library.adt.bytecode.types.TInstruction  tom_get_slot_ConsInstructionList_HeadInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) { return  t.getHeadInstructionList() ;}private static  tom.library.adt.bytecode.types.TInstructionList  tom_get_slot_ConsInstructionList_TailInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) { return  t.getTailInstructionList() ;}private static boolean tom_is_fun_sym_MethodList( tom.library.adt.bytecode.types.TMethodList  t) { return  t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList || t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_empty_list_MethodList() { return  tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() ; }private static  tom.library.adt.bytecode.types.TMethodList  tom_cons_list_MethodList( tom.library.adt.bytecode.types.TMethod  e,  tom.library.adt.bytecode.types.TMethodList  l) { return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TMethod  tom_get_head_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.getHeadMethodList() ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_get_tail_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.getTailMethodList() ;}private static boolean tom_is_empty_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.isEmptyMethodList() ;}   private static   tom.library.adt.bytecode.types.TMethodList  tom_append_list_MethodList( tom.library.adt.bytecode.types.TMethodList l1,  tom.library.adt.bytecode.types.TMethodList  l2) {     if(tom_is_empty_MethodList_TMethodList(l1)) {       return l2;     } else if(tom_is_empty_MethodList_TMethodList(l2)) {       return l1;     } else if(tom_is_empty_MethodList_TMethodList(tom_get_tail_MethodList_TMethodList(l1))) {       return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(tom_get_head_MethodList_TMethodList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(tom_get_head_MethodList_TMethodList(l1),tom_append_list_MethodList(tom_get_tail_MethodList_TMethodList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TMethodList  tom_get_slice_MethodList( tom.library.adt.bytecode.types.TMethodList  begin,  tom.library.adt.bytecode.types.TMethodList  end, tom.library.adt.bytecode.types.TMethodList  tail) {     if(tom_equal_term_TMethodList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(tom_get_head_MethodList_TMethodList(begin),( tom.library.adt.bytecode.types.TMethodList )tom_get_slice_MethodList(tom_get_tail_MethodList_TMethodList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_LabelList( tom.library.adt.bytecode.types.TLabelList  t) { return  t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList || t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_empty_list_LabelList() { return  tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() ; }private static  tom.library.adt.bytecode.types.TLabelList  tom_cons_list_LabelList( tom.library.adt.bytecode.types.TLabel  e,  tom.library.adt.bytecode.types.TLabelList  l) { return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLabel  tom_get_head_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.getHeadLabelList() ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_tail_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.getTailLabelList() ;}private static boolean tom_is_empty_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) { return  l.isEmptyLabelList() ;}   private static   tom.library.adt.bytecode.types.TLabelList  tom_append_list_LabelList( tom.library.adt.bytecode.types.TLabelList l1,  tom.library.adt.bytecode.types.TLabelList  l2) {     if(tom_is_empty_LabelList_TLabelList(l1)) {       return l2;     } else if(tom_is_empty_LabelList_TLabelList(l2)) {       return l1;     } else if(tom_is_empty_LabelList_TLabelList(tom_get_tail_LabelList_TLabelList(l1))) {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(l1),tom_append_list_LabelList(tom_get_tail_LabelList_TLabelList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TLabelList  tom_get_slice_LabelList( tom.library.adt.bytecode.types.TLabelList  begin,  tom.library.adt.bytecode.types.TLabelList  end, tom.library.adt.bytecode.types.TLabelList  tail) {     if(tom_equal_term_TLabelList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(tom_get_head_LabelList_TLabelList(begin),( tom.library.adt.bytecode.types.TLabelList )tom_get_slice_LabelList(tom_get_tail_LabelList_TLabelList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  t) { return  t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList || t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_empty_list_TryCatchBlockList() { return  tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() ; }private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_cons_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlock  e,  tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TTryCatchBlock  tom_get_head_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.getHeadTryCatchBlockList() ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_tail_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.getTailTryCatchBlockList() ;}private static boolean tom_is_empty_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  l.isEmptyTryCatchBlockList() ;}   private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_append_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList l1,  tom.library.adt.bytecode.types.TTryCatchBlockList  l2) {     if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l1)) {       return l2;     } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l2)) {       return l1;     } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1))) {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),tom_append_list_TryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_slice_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  begin,  tom.library.adt.bytecode.types.TTryCatchBlockList  end, tom.library.adt.bytecode.types.TTryCatchBlockList  tail) {     if(tom_equal_term_TTryCatchBlockList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(tom_get_head_TryCatchBlockList_TTryCatchBlockList(begin),( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_slice_TryCatchBlockList(tom_get_tail_TryCatchBlockList_TTryCatchBlockList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_intList( tom.library.adt.bytecode.types.TintList  t) { return  t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList || t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList ;}private static  tom.library.adt.bytecode.types.TintList  tom_empty_list_intList() { return  tom.library.adt.bytecode.types.tintlist.EmptyintList.make() ; }private static  tom.library.adt.bytecode.types.TintList  tom_cons_list_intList( int  e,  tom.library.adt.bytecode.types.TintList  l) { return  tom.library.adt.bytecode.types.tintlist.ConsintList.make(e,l) ; }private static  int  tom_get_head_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.getHeadintList() ;}private static  tom.library.adt.bytecode.types.TintList  tom_get_tail_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.getTailintList() ;}private static boolean tom_is_empty_intList_TintList( tom.library.adt.bytecode.types.TintList  l) { return  l.isEmptyintList() ;}   private static   tom.library.adt.bytecode.types.TintList  tom_append_list_intList( tom.library.adt.bytecode.types.TintList l1,  tom.library.adt.bytecode.types.TintList  l2) {     if(tom_is_empty_intList_TintList(l1)) {       return l2;     } else if(tom_is_empty_intList_TintList(l2)) {       return l1;     } else if(tom_is_empty_intList_TintList(tom_get_tail_intList_TintList(l1))) {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(l1),tom_append_list_intList(tom_get_tail_intList_TintList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TintList  tom_get_slice_intList( tom.library.adt.bytecode.types.TintList  begin,  tom.library.adt.bytecode.types.TintList  end, tom.library.adt.bytecode.types.TintList  tail) {     if(tom_equal_term_TintList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(tom_get_head_intList_TintList(begin),( tom.library.adt.bytecode.types.TintList )tom_get_slice_intList(tom_get_tail_intList_TintList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  t) { return  t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList || t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_empty_list_LocalVariableList() { return  tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() ; }private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_cons_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariable  e,  tom.library.adt.bytecode.types.TLocalVariableList  l) { return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLocalVariable  tom_get_head_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.getHeadLocalVariableList() ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_get_tail_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.getTailLocalVariableList() ;}private static boolean tom_is_empty_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) { return  l.isEmptyLocalVariableList() ;}   private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_append_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList l1,  tom.library.adt.bytecode.types.TLocalVariableList  l2) {     if(tom_is_empty_LocalVariableList_TLocalVariableList(l1)) {       return l2;     } else if(tom_is_empty_LocalVariableList_TLocalVariableList(l2)) {       return l1;     } else if(tom_is_empty_LocalVariableList_TLocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(l1))) {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(l1),l2);     } else {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(l1),tom_append_list_LocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(l1),l2));     }   }   private static   tom.library.adt.bytecode.types.TLocalVariableList  tom_get_slice_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  begin,  tom.library.adt.bytecode.types.TLocalVariableList  end, tom.library.adt.bytecode.types.TLocalVariableList  tail) {     if(tom_equal_term_TLocalVariableList(begin,end)) {       return tail;     } else {       return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(tom_get_head_LocalVariableList_TLocalVariableList(begin),( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_slice_LocalVariableList(tom_get_tail_LocalVariableList_TLocalVariableList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t instanceof tom.library.sl.Identity ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static  tom.library.sl.Strategy  tom_make_Choice( tom.library.sl.Strategy  first,  tom.library.sl.Strategy  then) { return  new tom.library.sl.Choice(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Map(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_Map(Object t) { return  t instanceof java.util.Map ;} private static class BuildLabelMap extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  java.util.Map  m; public BuildLabelMap( java.util.Map  m) { super(tom_make_Identity());this.m=m;}public  java.util.Map  getm() { return m;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch1NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);if (tom_is_fun_sym_ConsInstructionList(tomMatch1NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TInstruction  tomMatch1NameNumber_freshVar_0=tom_get_slot_ConsInstructionList_HeadInstructionList(tomMatch1NameNumberfreshSubject_1);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch1NameNumber_freshVar_1=tom_get_slot_ConsInstructionList_TailInstructionList(tomMatch1NameNumberfreshSubject_1);if (tom_is_fun_sym_Anchor(tomMatch1NameNumber_freshVar_0)) {{  tom.library.adt.bytecode.types.TLabel  tomMatch1NameNumber_freshVar_2=tom_get_slot_Anchor_label(tomMatch1NameNumber_freshVar_0);if ( true ) {       m.put(tomMatch1NameNumber_freshVar_2, getEnvironment().getPosition());     }}}}}}}}return super.visit_TInstructionList(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_BuildLabelMap( java.util.Map  t0) { return new BuildLabelMap(t0); }private static class AllCfg extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  tom.library.sl.Strategy  s; private  java.util.Map  m; public AllCfg( tom.library.sl.Strategy  s,  java.util.Map  m) { super(tom_make_Identity());this.s=s;this.m=m;}public  tom.library.sl.Strategy  gets() { return s;}public  java.util.Map  getm() { return m;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 2; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch4NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);if (tom_is_fun_sym_ConsInstructionList(tomMatch4NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TInstruction  tomMatch4NameNumber_freshVar_0=tom_get_slot_ConsInstructionList_HeadInstructionList(tomMatch4NameNumberfreshSubject_1);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch4NameNumber_freshVar_1=tom_get_slot_ConsInstructionList_TailInstructionList(tomMatch4NameNumberfreshSubject_1);{  tom.library.adt.bytecode.types.TInstruction  tom_ins=tomMatch4NameNumber_freshVar_0;if ( true ) {       TInstruction ins = tom_ins;       if (tom_is_sort_TInstruction(tom_ins)) {{  tom.library.adt.bytecode.types.TInstruction  tomMatch3NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstruction )tom_ins);if (tom_is_fun_sym_Goto(tomMatch3NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TLabel  tomMatch3NameNumber_freshVar_0=tom_get_slot_Goto_label(tomMatch3NameNumberfreshSubject_1);if ( true ) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch3NameNumber_freshVar_0));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(p.sub(current));           execute(s);           getEnvironment().followPath(current.sub(p));                     return (TInstructionList) getEnvironment().getSubject();         }}}{ boolean tomMatch3NameNumber_freshVar_2= false ;{  tom.library.adt.bytecode.types.TLabel  tomMatch3NameNumber_freshVar_1= null ;if (tom_is_fun_sym_Ifeq(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifeq_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifne(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifne_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Iflt(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Iflt_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifge(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifge_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifgt(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifgt_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifle(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifle_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmpeq(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmpeq_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmpne(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmpne_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmplt(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmplt_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmpge(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmpge_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmpgt(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmpgt_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_icmple(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_icmple_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_acmpeq(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_acmpeq_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_If_acmpne(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_If_acmpne_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Jsr(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Jsr_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifnull(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifnull_label(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ifnonnull(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_2= true ;tomMatch3NameNumber_freshVar_1=tom_get_slot_Ifnonnull_label(tomMatch3NameNumberfreshSubject_1);}}}}}}}}}}}}}}}}}}if ((tomMatch3NameNumber_freshVar_2 ==  true )) {if ( true ) {           tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch3NameNumber_freshVar_1));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(current.sub(p));           execute(s);           getEnvironment().followPath(p.sub(current));         }}}}{ boolean tomMatch3NameNumber_freshVar_5= false ;{  tom.library.adt.bytecode.types.TLabelList  tomMatch3NameNumber_freshVar_4= null ;{  tom.library.adt.bytecode.types.TLabel  tomMatch3NameNumber_freshVar_3= null ;if (tom_is_fun_sym_Tableswitch(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_5= true ;tomMatch3NameNumber_freshVar_3=tom_get_slot_Tableswitch_dflt(tomMatch3NameNumberfreshSubject_1);tomMatch3NameNumber_freshVar_4=tom_get_slot_Tableswitch_labels(tomMatch3NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Lookupswitch(tomMatch3NameNumberfreshSubject_1)) {{tomMatch3NameNumber_freshVar_5= true ;tomMatch3NameNumber_freshVar_3=tom_get_slot_Lookupswitch_dflt(tomMatch3NameNumberfreshSubject_1);tomMatch3NameNumber_freshVar_4=tom_get_slot_Lookupswitch_labels(tomMatch3NameNumberfreshSubject_1);}}}if ((tomMatch3NameNumber_freshVar_5 ==  true )) {if ( true ) {           TLabelList labelList = tomMatch3NameNumber_freshVar_4;           if (tom_is_sort_TLabelList(labelList)) {{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TLabelList )labelList);if (tom_is_fun_sym_LabelList(tomMatch2NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumber_freshVar_0=tomMatch2NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumberbegin_1=tomMatch2NameNumber_freshVar_0;{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumberend_1=tomMatch2NameNumber_freshVar_0;do {{{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumber_freshVar_1=tomMatch2NameNumberend_1;if (!(tom_is_empty_LabelList_TLabelList(tomMatch2NameNumber_freshVar_1))) {{  tom.library.adt.bytecode.types.TLabelList  tomMatch2NameNumber_freshVar_2=tom_get_tail_LabelList_TLabelList(tomMatch2NameNumber_freshVar_1);if ( true ) {               tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tom_get_head_LabelList_TLabelList(tomMatch2NameNumber_freshVar_1)));               tom.library.sl.Position current = getEnvironment().getPosition();               getEnvironment().followPath(current.sub(p));               execute(s);               getEnvironment().followPath(p.sub(current));             }}}}if (tom_is_empty_LabelList_TLabelList(tomMatch2NameNumberend_1)) {tomMatch2NameNumberend_1=tomMatch2NameNumberbegin_1;} else {tomMatch2NameNumberend_1=tom_get_tail_LabelList_TLabelList(tomMatch2NameNumberend_1);}}} while(!(tom_equal_term_TLabelList(tomMatch2NameNumberend_1, tomMatch2NameNumberbegin_1)));}}}}}}           tom.library.sl.Position p = (tom.library.sl.Position) (m.get(tomMatch3NameNumber_freshVar_3));           tom.library.sl.Position current = getEnvironment().getPosition();           getEnvironment().followPath(current.sub(p));           execute(s);           getEnvironment().followPath(p.sub(current));         }}}}}if ( true ) {           getEnvironment().down(2);           execute(s);           getEnvironment().up();         }}}     }}}}}}}return super.visit_TInstructionList(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_AllCfg( tom.library.sl.Strategy  t0,  java.util.Map  t1) { return new AllCfg(t0,t1); }private static class Mark extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  java.util.Map  map; public Mark( java.util.Map  map) { super(tom_make_Identity());this.map=map;}public  java.util.Map  getmap() { return map;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch5NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch5NameNumber_freshVar_0=tomMatch5NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TInstructionList  tom_c=tomMatch5NameNumber_freshVar_0;if ( true ) {       Object o = map.get(tom_c);       int value = 1;       if(o != null)         value = ((Integer)o).intValue() + 1;       map.put(tom_c, new Integer(value));     }}}}}return super.visit_TInstructionList(tom__arg); }}private static class UnMark extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  java.util.Map  map; public UnMark( java.util.Map  map) { super(tom_make_Identity());this.map=map;}public  java.util.Map  getmap() { return map;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch6NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch6NameNumber_freshVar_0=tomMatch6NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TInstructionList  tom_c=tomMatch6NameNumber_freshVar_0;if ( true ) {       Object o = map.get(tom_c);       if(o == null) {         throw new jjtraveler.VisitFailure();       }       int value = ((Integer)o).intValue() - 1;       map.put(tom_c, new Integer(value));     }}}}}return super.visit_TInstructionList(tom__arg); }}private static class IsMarked extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  java.util.Map  map; public IsMarked( java.util.Map  map) { super(tom_make_Identity());this.map=map;}public  java.util.Map  getmap() { return map;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch7NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch7NameNumber_freshVar_0=tomMatch7NameNumberfreshSubject_1;if ( true ) {       Object o = map.get(tomMatch7NameNumber_freshVar_0);       if(o == null || ((Integer)o).intValue() <= 0)         throw new jjtraveler.VisitFailure();     }}}}return super.visit_TInstructionList(tom__arg); }}  private static boolean tom_is_sort_Writer(Object t) { return 




 t instanceof java.io.Writer ;}


  /**
   * Returns the dot node id of the given TInstructionList.
   * @param ins the instruction.
   * @return the id.
   */
  private static String getDotId(TInstructionList ins) {
    return ("insid" + ins.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TTryCatchBlock.
   * @param bl the try/catch block.
   * @return the id.
   */
  private static String getDotId(TTryCatchBlock bl) {
    return ("blockid" + bl.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TLocalVariable.
   * @param the local variable.
   * @return the id.
   */
  private static String getDotId(TLocalVariable var) {
    return ("varid" + var.hashCode()).replace('-', 'm');
  }

  /**
   * Cleans the given string to prevent dot compilation problems.
   * (ex: replace the character '"' with the string "\"").
   * @param s the string to be cleaned.
   * @return the cleaned string.
   */
  private static String clean(String s) {
    return s.replaceAll("\\\"", "\\\\\\\"");
  }

  /**
   * Prints the current instruction node with a suitable label.
   * @param out the writer to be used for the dot output.
   */
  private static class PrintDotNode extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private java.io.Writer out; public PrintDotNode(java.io.Writer out) { super(tom_make_Identity());this.out=out;}public java.io.Writer getout() { return out;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch8NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch8NameNumber_freshVar_0=tomMatch8NameNumberfreshSubject_1;if (tom_is_fun_sym_ConsInstructionList(tomMatch8NameNumber_freshVar_0)) {{  tom.library.adt.bytecode.types.TInstruction  tomMatch8NameNumber_freshVar_1=tom_get_slot_ConsInstructionList_HeadInstructionList(tomMatch8NameNumber_freshVar_0);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch8NameNumber_freshVar_2=tom_get_slot_ConsInstructionList_TailInstructionList(tomMatch8NameNumber_freshVar_0);if ( true ) {


        String id = getDotId(tomMatch8NameNumber_freshVar_0);
        printDotInstruction(tomMatch8NameNumber_freshVar_1, id, out);
      }}}}}}}return super.visit_TInstructionList(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_PrintDotNode(java.io.Writer t0) { return new PrintDotNode(t0); }



  /**
   * Prints the given instruction with a suitable label and id.
   * @param ins the instruction to be printed.
   * @param id the id of the dot node.
   * @param out the writer to be used for the dot output.
   */
  private static void printDotInstruction(TInstruction ins, String id, Writer out) {
    try {
      if (tom_is_sort_TInstruction(ins)) {{  tom.library.adt.bytecode.types.TInstruction  tomMatch10NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstruction )ins);{ boolean tomMatch10NameNumber_freshVar_1= false ;{  int  tomMatch10NameNumber_freshVar_0= 0 ;if (tom_is_fun_sym_Bipush(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_1= true ;tomMatch10NameNumber_freshVar_0=tom_get_slot_Bipush_operand(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Sipush(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_1= true ;tomMatch10NameNumber_freshVar_0=tom_get_slot_Sipush_operand(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Newarray(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_1= true ;tomMatch10NameNumber_freshVar_0=tom_get_slot_Newarray_operand(tomMatch10NameNumberfreshSubject_1);}}}}if ((tomMatch10NameNumber_freshVar_1 ==  true )) {if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\noperand : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tomMatch10NameNumber_freshVar_0)+"\"];\n              "

);
          return;
        }}}}if (tom_is_fun_sym_Multianewarray(tomMatch10NameNumberfreshSubject_1)) {{  String  tomMatch10NameNumber_freshVar_2=tom_get_slot_Multianewarray_typeDesc(tomMatch10NameNumberfreshSubject_1);{  int  tomMatch10NameNumber_freshVar_3=tom_get_slot_Multianewarray_dims(tomMatch10NameNumberfreshSubject_1);if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\ntypeDesc : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_2+"\\ndims : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tomMatch10NameNumber_freshVar_3)+"\"];\n              "

);
          return;
        }}}}if (tom_is_fun_sym_Ldc(tomMatch10NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TValue  tomMatch10NameNumber_freshVar_4=tom_get_slot_Ldc_cst(tomMatch10NameNumberfreshSubject_1);if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\ncst : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+clean(tomMatch10NameNumber_freshVar_4.toString())+"\"];\n              "

);
          return;
        }}}{ boolean tomMatch10NameNumber_freshVar_6= false ;{  int  tomMatch10NameNumber_freshVar_5= 0 ;if (tom_is_fun_sym_Iload(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Iload_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Lload(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Lload_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Fload(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Fload_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Dload(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Dload_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Aload(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Aload_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Istore(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Istore_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Lstore(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Lstore_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Fstore(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Fstore_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Dstore(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Dstore_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Astore(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Astore_var(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Ret(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_6= true ;tomMatch10NameNumber_freshVar_5=tom_get_slot_Ret_var(tomMatch10NameNumberfreshSubject_1);}}}}}}}}}}}}if ((tomMatch10NameNumber_freshVar_6 ==  true )) {if ( true ) {




          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nvar : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tomMatch10NameNumber_freshVar_5)+"\"];\n              "

);
          return;
        }}}}if (tom_is_fun_sym_Iinc(tomMatch10NameNumberfreshSubject_1)) {{  int  tomMatch10NameNumber_freshVar_7=tom_get_slot_Iinc_incr(tomMatch10NameNumberfreshSubject_1);{  int  tomMatch10NameNumber_freshVar_8=tom_get_slot_Iinc_var(tomMatch10NameNumberfreshSubject_1);if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nincr : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tomMatch10NameNumber_freshVar_7)+"\\nvar : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tomMatch10NameNumber_freshVar_8)+"\"];\n              "

);
          return;
        }}}}if (tom_is_fun_sym_Tableswitch(tomMatch10NameNumberfreshSubject_1)) {{  int  tomMatch10NameNumber_freshVar_9=tom_get_slot_Tableswitch_min(tomMatch10NameNumberfreshSubject_1);{  int  tomMatch10NameNumber_freshVar_10=tom_get_slot_Tableswitch_max(tomMatch10NameNumberfreshSubject_1);if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nmin : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_9+"\\nmax : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_10+"\"];\n              "

);
          return;
        }}}}if (tom_is_fun_sym_Lookupswitch(tomMatch10NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TintList  tomMatch10NameNumber_freshVar_11=tom_get_slot_Lookupswitch_keys(tomMatch10NameNumberfreshSubject_1);{  tom.library.adt.bytecode.types.TintList  tom_keys=tomMatch10NameNumber_freshVar_11;if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nkeys : "
);
              TintList keys = tom_keys;
              if (tom_is_sort_TintList(tom_keys)) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TintList )tom_keys);if (tom_is_fun_sym_intList(tomMatch9NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_0=tomMatch9NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberbegin_2=tomMatch9NameNumber_freshVar_0;{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberend_2=tomMatch9NameNumber_freshVar_0;do {{{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_1=tomMatch9NameNumberend_2;if (!(tom_is_empty_intList_TintList(tomMatch9NameNumber_freshVar_1))) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_2=tom_get_tail_intList_TintList(tomMatch9NameNumber_freshVar_1);{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberbegin_3=tomMatch9NameNumber_freshVar_2;{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberend_3=tomMatch9NameNumber_freshVar_2;do {{{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_3=tomMatch9NameNumberend_3;if (!(tom_is_empty_intList_TintList(tomMatch9NameNumber_freshVar_3))) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_4=tom_get_tail_intList_TintList(tomMatch9NameNumber_freshVar_3);if (tom_is_empty_intList_TintList(tomMatch9NameNumber_freshVar_4)) {if ( true ) {

                  out.write(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(tom_get_head_intList_TintList(tomMatch9NameNumber_freshVar_1))+", ");
                }}}}}if (tom_is_empty_intList_TintList(tomMatch9NameNumberend_3)) {tomMatch9NameNumberend_3=tomMatch9NameNumberbegin_3;} else {tomMatch9NameNumberend_3=tom_get_tail_intList_TintList(tomMatch9NameNumberend_3);}}} while(!(tom_equal_term_TintList(tomMatch9NameNumberend_3, tomMatch9NameNumberbegin_3)));}}}}}if (tom_is_empty_intList_TintList(tomMatch9NameNumberend_2)) {tomMatch9NameNumberend_2=tomMatch9NameNumberbegin_2;} else {tomMatch9NameNumberend_2=tom_get_tail_intList_TintList(tomMatch9NameNumberend_2);}}} while(!(tom_equal_term_TintList(tomMatch9NameNumberend_2, tomMatch9NameNumberbegin_2)));}}}}if (tom_is_fun_sym_intList(tomMatch9NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_5=tomMatch9NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberbegin_4=tomMatch9NameNumber_freshVar_5;{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumberend_4=tomMatch9NameNumber_freshVar_5;do {{{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_6=tomMatch9NameNumberend_4;if (!(tom_is_empty_intList_TintList(tomMatch9NameNumber_freshVar_6))) {{  tom.library.adt.bytecode.types.TintList  tomMatch9NameNumber_freshVar_7=tom_get_tail_intList_TintList(tomMatch9NameNumber_freshVar_6);if (tom_is_empty_intList_TintList(tomMatch9NameNumber_freshVar_7)) {if ( true ) {

                  out.write(Integer.toString(tom_get_head_intList_TintList(tomMatch9NameNumber_freshVar_6)));
                }}}}}if (tom_is_empty_intList_TintList(tomMatch9NameNumberend_4)) {tomMatch9NameNumberend_4=tomMatch9NameNumberbegin_4;} else {tomMatch9NameNumberend_4=tom_get_tail_intList_TintList(tomMatch9NameNumberend_4);}}} while(!(tom_equal_term_TintList(tomMatch9NameNumberend_4, tomMatch9NameNumberbegin_4)));}}}}}}

              out.write("\"];");
              return;
        }}}}{ boolean tomMatch10NameNumber_freshVar_15= false ;{  tom.library.adt.bytecode.types.TFieldDescriptor  tomMatch10NameNumber_freshVar_14= null ;{  String  tomMatch10NameNumber_freshVar_13= "" ;{  String  tomMatch10NameNumber_freshVar_12= "" ;if (tom_is_fun_sym_Getstatic(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_15= true ;tomMatch10NameNumber_freshVar_12=tom_get_slot_Getstatic_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_13=tom_get_slot_Getstatic_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_14=tom_get_slot_Getstatic_fieldDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Putstatic(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_15= true ;tomMatch10NameNumber_freshVar_12=tom_get_slot_Putstatic_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_13=tom_get_slot_Putstatic_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_14=tom_get_slot_Putstatic_fieldDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Getfield(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_15= true ;tomMatch10NameNumber_freshVar_12=tom_get_slot_Getfield_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_13=tom_get_slot_Getfield_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_14=tom_get_slot_Getfield_fieldDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Putfield(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_15= true ;tomMatch10NameNumber_freshVar_12=tom_get_slot_Putfield_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_13=tom_get_slot_Putfield_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_14=tom_get_slot_Putfield_fieldDesc(tomMatch10NameNumberfreshSubject_1);}}}}}if ((tomMatch10NameNumber_freshVar_15 ==  true )) {if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_12+"\\nname : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_13+"\\ndescriptor : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+ToolBox.buildDescriptor(tomMatch10NameNumber_freshVar_14)+"\"];\n              "

);
          return;
        }}}}}}{ boolean tomMatch10NameNumber_freshVar_19= false ;{  tom.library.adt.bytecode.types.TMethodDescriptor  tomMatch10NameNumber_freshVar_18= null ;{  String  tomMatch10NameNumber_freshVar_17= "" ;{  String  tomMatch10NameNumber_freshVar_16= "" ;if (tom_is_fun_sym_Invokevirtual(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_19= true ;tomMatch10NameNumber_freshVar_16=tom_get_slot_Invokevirtual_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_17=tom_get_slot_Invokevirtual_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_18=tom_get_slot_Invokevirtual_methodDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Invokespecial(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_19= true ;tomMatch10NameNumber_freshVar_16=tom_get_slot_Invokespecial_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_17=tom_get_slot_Invokespecial_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_18=tom_get_slot_Invokespecial_methodDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Invokestatic(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_19= true ;tomMatch10NameNumber_freshVar_16=tom_get_slot_Invokestatic_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_17=tom_get_slot_Invokestatic_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_18=tom_get_slot_Invokestatic_methodDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Invokeinterface(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_19= true ;tomMatch10NameNumber_freshVar_16=tom_get_slot_Invokeinterface_owner(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_17=tom_get_slot_Invokeinterface_name(tomMatch10NameNumberfreshSubject_1);tomMatch10NameNumber_freshVar_18=tom_get_slot_Invokeinterface_methodDesc(tomMatch10NameNumberfreshSubject_1);}}}}}if ((tomMatch10NameNumber_freshVar_19 ==  true )) {if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_16+"\\nname : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_17+"\\ndescriptor : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+ToolBox.buildDescriptor(tomMatch10NameNumber_freshVar_18)+"\"];\n              "

);
          return;
        }}}}}}{ boolean tomMatch10NameNumber_freshVar_21= false ;{  String  tomMatch10NameNumber_freshVar_20= "" ;if (tom_is_fun_sym_New(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_21= true ;tomMatch10NameNumber_freshVar_20=tom_get_slot_New_typeDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Anewarray(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_21= true ;tomMatch10NameNumber_freshVar_20=tom_get_slot_Anewarray_typeDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Checkcast(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_21= true ;tomMatch10NameNumber_freshVar_20=tom_get_slot_Checkcast_typeDesc(tomMatch10NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_Instanceof(tomMatch10NameNumberfreshSubject_1)) {{tomMatch10NameNumber_freshVar_21= true ;tomMatch10NameNumber_freshVar_20=tom_get_slot_Instanceof_typeDesc(tomMatch10NameNumberfreshSubject_1);}}}}}if ((tomMatch10NameNumber_freshVar_21 ==  true )) {if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\\ndescriptor : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch10NameNumber_freshVar_20+"\"];\n              "

);
          return;
        }}}}if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+ins.symbolName()+"\"];\n              "

);
        }}}

    } catch(IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * Prints a link from the `parent' instruction to the current node instruction.
   * @param out the writer to be used for the dot output.
   */
  private static class PrintDotLink extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private java.io.Writer out; private  InsWrapper  parent; public PrintDotLink(java.io.Writer out,  InsWrapper  parent) { super(tom_make_Identity());this.out=out;this.parent=parent;}public java.io.Writer getout() { return out;}public  InsWrapper  getparent() { return parent;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch11NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch11NameNumber_freshVar_0=tomMatch11NameNumberfreshSubject_1;if (tom_is_fun_sym_ConsInstructionList(tomMatch11NameNumber_freshVar_0)) {if ( true ) {


        try {
          out.write(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(parent.ins)+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(tomMatch11NameNumber_freshVar_0)+";\n              "
);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}}return super.visit_TInstructionList(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_PrintDotLink(java.io.Writer t0,  InsWrapper  t1) { return new PrintDotLink(t0,t1); }



  /**
   * Prints all the try/catch/finally informations of the given block list.
   * @param list the try/catch/finally blocks to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printTryCatchBlocks(TTryCatchBlockList list, Map labelMap, Writer out,TInstructionList inst) {
    if (tom_is_sort_TTryCatchBlockList(list)) {{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TTryCatchBlockList )list);if (tom_is_fun_sym_TryCatchBlockList(tomMatch13NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumber_freshVar_0=tomMatch13NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumberbegin_5=tomMatch13NameNumber_freshVar_0;{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumberend_5=tomMatch13NameNumber_freshVar_0;do {{{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumber_freshVar_1=tomMatch13NameNumberend_5;if (!(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(tomMatch13NameNumber_freshVar_1))) {{  tom.library.adt.bytecode.types.TTryCatchBlockList  tomMatch13NameNumber_freshVar_2=tom_get_tail_TryCatchBlockList_TTryCatchBlockList(tomMatch13NameNumber_freshVar_1);if ( true ) {

        try {
          TTryCatchBlock block = tom_get_head_TryCatchBlockList_TTryCatchBlockList(tomMatch13NameNumber_freshVar_1);
          THandler handler = block.gethandler();
          String id = getDotId(block);

          if (tom_is_sort_THandler(handler)) {{  tom.library.adt.bytecode.types.THandler  tomMatch12NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.THandler )handler);if (tom_is_fun_sym_CatchHandler(tomMatch12NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TLabel  tomMatch12NameNumber_freshVar_0=tom_get_slot_CatchHandler_handler(tomMatch12NameNumberfreshSubject_1);{  String  tomMatch12NameNumber_freshVar_1=tom_get_slot_CatchHandler_type(tomMatch12NameNumberfreshSubject_1);if ( true ) {

              Position labelPosition = (Position) labelMap.get(tomMatch12NameNumber_freshVar_0);
              TInstructionList labelInst = (TInstructionList) labelPosition.getSubterm().fire(inst);
              out.write("\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\"Catch\\ntype : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tomMatch12NameNumber_freshVar_1+"\" shape=box];\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}}if (tom_is_fun_sym_FinallyHandler(tomMatch12NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TLabel  tomMatch12NameNumber_freshVar_2=tom_get_slot_FinallyHandler_handler(tomMatch12NameNumberfreshSubject_1);if ( true ) {


              Position labelPosition = (Position) labelMap.get(tomMatch12NameNumber_freshVar_2);
              TInstructionList labelInst = (TInstructionList) labelPosition.getSubterm().fire(inst);
              out.write("\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\"Finally\" shape=box];\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(labelInst)+" [label=\"handler\" style=dotted];\n                  "


);
            }}}}}


          Position startPosition = (Position) labelMap.get(block.getstart());
          TInstructionList startInst = (TInstructionList) startPosition.getSubterm().fire(inst);
          Position endPosition = (Position) labelMap.get(block.getend());
          TInstructionList lastInst = (TInstructionList) endPosition.getSubterm().fire(inst);
          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "


);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}if (tom_is_empty_TryCatchBlockList_TTryCatchBlockList(tomMatch13NameNumberend_5)) {tomMatch13NameNumberend_5=tomMatch13NameNumberbegin_5;} else {tomMatch13NameNumberend_5=tom_get_tail_TryCatchBlockList_TTryCatchBlockList(tomMatch13NameNumberend_5);}}} while(!(tom_equal_term_TTryCatchBlockList(tomMatch13NameNumberend_5, tomMatch13NameNumberbegin_5)));}}}}}}

  }

  /**
   * Prints all the local variables informations.
   * @param list the local variables list to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   * @param inst the global list of instructions.
   */
  private static void printLocalVariables(TLocalVariableList list, Map labelMap, Writer out, TInstructionList inst) {
    if (tom_is_sort_TLocalVariableList(list)) {{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TLocalVariableList )list);if (tom_is_fun_sym_LocalVariableList(tomMatch14NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumber_freshVar_0=tomMatch14NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumberbegin_6=tomMatch14NameNumber_freshVar_0;{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumberend_6=tomMatch14NameNumber_freshVar_0;do {{{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumber_freshVar_1=tomMatch14NameNumberend_6;if (!(tom_is_empty_LocalVariableList_TLocalVariableList(tomMatch14NameNumber_freshVar_1))) {{  tom.library.adt.bytecode.types.TLocalVariableList  tomMatch14NameNumber_freshVar_2=tom_get_tail_LocalVariableList_TLocalVariableList(tomMatch14NameNumber_freshVar_1);if ( true ) {

        try {
          TLocalVariable var = tom_get_head_LocalVariableList_TLocalVariableList(tomMatch14NameNumber_freshVar_1);
          String id = getDotId(var);
          Position startPosition = (Position) labelMap.get(var.getstart());
          TInstructionList startInst = (TInstructionList) startPosition.getSubterm().fire(inst);
          Position endPosition = (Position) labelMap.get(var.getend());
          TInstructionList lastInst = (TInstructionList) endPosition.getSubterm().fire(inst);

          out.write("\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" [label=\"var : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+var.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+var.gettypeDesc()+"\\nindex : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+Integer.toString(var.getindex())+"\" shape=box];\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(startInst)+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(lastInst)+" [label=\"end\" style=dotted];\n              "



);
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}if (tom_is_empty_LocalVariableList_TLocalVariableList(tomMatch14NameNumberend_6)) {tomMatch14NameNumberend_6=tomMatch14NameNumberbegin_6;} else {tomMatch14NameNumberend_6=tom_get_tail_LocalVariableList_TLocalVariableList(tomMatch14NameNumberend_6);}}} while(!(tom_equal_term_TLocalVariableList(tomMatch14NameNumberend_6, tomMatch14NameNumberbegin_6)));}}}}}}

  }

  /**
   * Used to pass the stored instruction as a strategy parameter.
   */
  private static class InsWrapper { public TInstructionList ins; }
  private static boolean tom_is_sort_InsWrapper(Object t) { return 

 t instanceof InsWrapper ;}


  /**
   * Assign the current instruction node to the given InsWrapper.
   * @param ins the instruction wrapper.
   */
  private static class Assign extends  tom.library.adt.bytecode.BytecodeBasicStrategy  {private  InsWrapper  ins; public Assign( InsWrapper  ins) { super(tom_make_Identity());this.ins=ins;}public  InsWrapper  getins() { return ins;}public jjtraveler.Visitable[] getChildren() {jjtraveler.Visitable[] stratChilds = new jjtraveler.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList( tom.library.adt.bytecode.types.TInstructionList  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TInstructionList(tom__arg)) {{  tom.library.adt.bytecode.types.TInstructionList  tomMatch15NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg);{  tom.library.adt.bytecode.types.TInstructionList  tomMatch15NameNumber_freshVar_0=tomMatch15NameNumberfreshSubject_1;if ( true ) {

 ins.ins = tomMatch15NameNumber_freshVar_0; }}}}return super.visit_TInstructionList(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_Assign( InsWrapper  t0) { return new Assign(t0); }



  /**
   * Generates a control flow graph for each method of the given class.
   * @param clazz the gom-term subject representing the class.
   */
  public static void classToDot(TClass clazz) {
    Writer w = new BufferedWriter(new OutputStreamWriter(System.out)); 
    TMethodList methods = clazz.getmethods();
    if (tom_is_sort_TMethodList(methods)) {{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumberfreshSubject_1=(( tom.library.adt.bytecode.types.TMethodList )methods);if (tom_is_fun_sym_MethodList(tomMatch16NameNumberfreshSubject_1)) {{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumber_freshVar_0=tomMatch16NameNumberfreshSubject_1;{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumberbegin_7=tomMatch16NameNumber_freshVar_0;{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumberend_7=tomMatch16NameNumber_freshVar_0;do {{{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumber_freshVar_1=tomMatch16NameNumberend_7;if (!(tom_is_empty_MethodList_TMethodList(tomMatch16NameNumber_freshVar_1))) {{  tom.library.adt.bytecode.types.TMethod  tom_x=tom_get_head_MethodList_TMethodList(tomMatch16NameNumber_freshVar_1);{  tom.library.adt.bytecode.types.TMethodList  tomMatch16NameNumber_freshVar_2=tom_get_tail_MethodList_TMethodList(tomMatch16NameNumber_freshVar_1);if ( true ) {

        try {
          TMethodInfo info = tom_x.getinfo();
          w.write("digraph "/* Generated by TOM (version 2.5alpha): Do not edit this file */+info.getname()+" {\n              "
);

          // Print a root node with the method name and descriptor. Add a link to the first instruction if any.
          w.write("method [label=\"method : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+info.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.5alpha): Do not edit this file */+ToolBox.buildDescriptor(info.getdesc())+"\" shape=box];\n              "
);
          if(!tom_x.getcode().isEmptyCode()) {
            TInstructionList ins = tom_x.getcode().getinstructions();
            if(!ins.isEmptyInstructionList()) {
              w.write("method -> "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getDotId(ins)+"\n                  "
);
            }

            // Compute the label map to allow us to retrieve an instruction from a label.
            HashMap labelMap = new HashMap();
            tom_make_TopDown(tom_make_BuildLabelMap(labelMap)).fire(ins);

            // Create a wrapper to pass a parent node to its children.
            InsWrapper insWrapper = new InsWrapper();

            // This strategy run through all node. For each of them, the node is printed.
            // Links between the current node and its children are printed by passing the parent to each of them.
            // AllCfg allows us to get all the children of the current node.
            Strategy toDot = tom_make_TopDown(tom_make_Try(tom_cons_list_Sequence(tom_make_PrintDotNode(w),tom_cons_list_Sequence(tom_cons_list_Sequence(tom_make_Assign(insWrapper),tom_cons_list_Sequence(tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap),tom_empty_list_Sequence())),tom_empty_list_Sequence()))))







;

            toDot.fire(ins);

            // Prints the try/catch/finally blocks.
            printTryCatchBlocks(tom_x.getcode().gettryCatchBlocks(), labelMap, w, ins);

            // Prints the local variables informations.
            printLocalVariables(tom_x.getcode().getlocalVariables(), labelMap, w, ins);
          }

          w.write("}\n");
          w.flush();
        } catch(IOException e) {
          e.printStackTrace();
        }
      }}}}}if (tom_is_empty_MethodList_TMethodList(tomMatch16NameNumberend_7)) {tomMatch16NameNumberend_7=tomMatch16NameNumberbegin_7;} else {tomMatch16NameNumberend_7=tom_get_tail_MethodList_TMethodList(tomMatch16NameNumberend_7);}}} while(!(tom_equal_term_TMethodList(tomMatch16NameNumberend_7, tomMatch16NameNumberbegin_7)));}}}}}}

  }


  /**
   * Generates the dot control flow graphs for each method of the specified class.
   * Usage : java bytecode.CFGViewer <class name>
   * Ex: java bytecode.CFGViewer bytecode.Subject
   * @param args args[0] : the class name
   */
    public static void main(String[] args) {
      if(args.length <= 0) {
        System.out.println("Usage : java bytecode.CFGViewer <class name>\nEx: java bytecode.CFGViewer bytecode.Subject");
        return;
      }
      BytecodeReader cg = new BytecodeReader(args[0]);
      TClass c = cg.getTClass();
      classToDot(c);
    }
  }

