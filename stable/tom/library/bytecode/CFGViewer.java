/* Generated by TOM (version 2.4rc0): Do not edit this file *//*
 * Copyright (c) 2000-2006, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the INRIA nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.library.bytecode;

import java.util.Map;
import java.util.HashMap;
import java.io.Writer;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassAdapter;

import tom.library.strategy.mutraveler.MuStrategy;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;

/**
 * A dot control flow graph exporter.
 * This class generates a control flow graph for each method of a class.
 */
public class CFGViewer {
  /* Generated by TOM (version 2.4rc0): Do not edit this file *//* Generated by TOM (version 2.4rc0): Do not edit this file *//* Generated by TOM (version 2.4rc0): Do not edit this file *//* Generated by TOM (version 2.4rc0): Do not edit this file */private static boolean tom_terms_equal_boolean(boolean t1, boolean t2) {  return  (t1==t2)  ;}  private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4rc0): Do not edit this file */private static boolean tom_terms_equal_int(int t1, int t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4rc0): Do not edit this file */ /* Generated by TOM (version 2.4rc0): Do not edit this file */ /* Generated by TOM (version 2.4rc0): Do not edit this file */ /* Generated by TOM (version 2.4rc0): Do not edit this file */ /* Generated by TOM (version 2.4rc0): Do not edit this file */ private static boolean tom_terms_equal_TInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TTryCatchBlock(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TFieldDescriptor(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TMethodDescriptor(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TLocalVariable(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TLocalVariableList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TTryCatchBlockList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TMethodList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TLabelList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TValue(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TInstruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_THandler(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TMethod(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TLabel(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_ConsInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList  ;}private static  tom.library.adt.bytecode.types.TInstruction  tom_get_slot_ConsInstructionList_HeadInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) {  return  t.getHeadInstructionList()  ;}private static  tom.library.adt.bytecode.types.TInstructionList  tom_get_slot_ConsInstructionList_TailInstructionList( tom.library.adt.bytecode.types.TInstructionList  t) {  return  t.getTailInstructionList()  ;}private static boolean tom_is_fun_sym_Anchor( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Anchor  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Anchor_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Bipush( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Bipush  ;}private static  int  tom_get_slot_Bipush_operand( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getoperand()  ;}private static boolean tom_is_fun_sym_Sipush( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Sipush  ;}private static  int  tom_get_slot_Sipush_operand( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getoperand()  ;}private static boolean tom_is_fun_sym_Ldc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ldc  ;}private static  tom.library.adt.bytecode.types.TValue  tom_get_slot_Ldc_cst( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getcst()  ;}private static boolean tom_is_fun_sym_Iload( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iload  ;}private static  int  tom_get_slot_Iload_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Lload( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lload  ;}private static  int  tom_get_slot_Lload_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Fload( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Fload  ;}private static  int  tom_get_slot_Fload_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Dload( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Dload  ;}private static  int  tom_get_slot_Dload_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Aload( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Aload  ;}private static  int  tom_get_slot_Aload_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Istore( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Istore  ;}private static  int  tom_get_slot_Istore_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Lstore( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lstore  ;}private static  int  tom_get_slot_Lstore_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Fstore( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Fstore  ;}private static  int  tom_get_slot_Fstore_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Dstore( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Dstore  ;}private static  int  tom_get_slot_Dstore_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Astore( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Astore  ;}private static  int  tom_get_slot_Astore_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Iinc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iinc  ;}private static  int  tom_get_slot_Iinc_incr( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getincr()  ;}private static  int  tom_get_slot_Iinc_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Ifeq( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifeq_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ifne( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifne  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifne_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Iflt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Iflt  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Iflt_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ifge( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifge  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifge_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ifgt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifgt_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ifle( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifle  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifle_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmpeq( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpeq_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmpne( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpne_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmplt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmplt_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmpge( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpge_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmpgt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmpgt_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_icmple( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_icmple_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_acmpeq( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_acmpeq_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_If_acmpne( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_If_acmpne_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Goto( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Goto  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Goto_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Jsr( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Jsr  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Jsr_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ret( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ret  ;}private static  int  tom_get_slot_Ret_var( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getvar()  ;}private static boolean tom_is_fun_sym_Tableswitch( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch  ;}private static  int  tom_get_slot_Tableswitch_min( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmin()  ;}private static  int  tom_get_slot_Tableswitch_max( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmax()  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Tableswitch_dflt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getdflt()  ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_slot_Tableswitch_labels( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabels()  ;}private static boolean tom_is_fun_sym_Lookupswitch( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Lookupswitch_dflt( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getdflt()  ;}private static  tom.library.adt.bytecode.types.TintList  tom_get_slot_Lookupswitch_keys( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getkeys()  ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_slot_Lookupswitch_labels( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabels()  ;}private static boolean tom_is_fun_sym_Getstatic( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Getstatic  ;}private static  String  tom_get_slot_Getstatic_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Getstatic_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Getstatic_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getfieldDesc()  ;}private static boolean tom_is_fun_sym_Putstatic( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Putstatic  ;}private static  String  tom_get_slot_Putstatic_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Putstatic_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Putstatic_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getfieldDesc()  ;}private static boolean tom_is_fun_sym_Getfield( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Getfield  ;}private static  String  tom_get_slot_Getfield_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Getfield_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Getfield_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getfieldDesc()  ;}private static boolean tom_is_fun_sym_Putfield( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Putfield  ;}private static  String  tom_get_slot_Putfield_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Putfield_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TFieldDescriptor  tom_get_slot_Putfield_fieldDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getfieldDesc()  ;}private static boolean tom_is_fun_sym_Invokevirtual( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokevirtual  ;}private static  String  tom_get_slot_Invokevirtual_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Invokevirtual_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokevirtual_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmethodDesc()  ;}private static boolean tom_is_fun_sym_Invokespecial( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokespecial  ;}private static  String  tom_get_slot_Invokespecial_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Invokespecial_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokespecial_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmethodDesc()  ;}private static boolean tom_is_fun_sym_Invokestatic( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokestatic  ;}private static  String  tom_get_slot_Invokestatic_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Invokestatic_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokestatic_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmethodDesc()  ;}private static boolean tom_is_fun_sym_Invokeinterface( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Invokeinterface  ;}private static  String  tom_get_slot_Invokeinterface_owner( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getowner()  ;}private static  String  tom_get_slot_Invokeinterface_name( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getname()  ;}private static  tom.library.adt.bytecode.types.TMethodDescriptor  tom_get_slot_Invokeinterface_methodDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getmethodDesc()  ;}private static boolean tom_is_fun_sym_New( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.New  ;}private static  String  tom_get_slot_New_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.gettypeDesc()  ;}private static boolean tom_is_fun_sym_Newarray( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Newarray  ;}private static  int  tom_get_slot_Newarray_operand( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getoperand()  ;}private static boolean tom_is_fun_sym_Anewarray( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Anewarray  ;}private static  String  tom_get_slot_Anewarray_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.gettypeDesc()  ;}private static boolean tom_is_fun_sym_Checkcast( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Checkcast  ;}private static  String  tom_get_slot_Checkcast_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.gettypeDesc()  ;}private static boolean tom_is_fun_sym_Instanceof( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Instanceof  ;}private static  String  tom_get_slot_Instanceof_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.gettypeDesc()  ;}private static boolean tom_is_fun_sym_Multianewarray( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Multianewarray  ;}private static  String  tom_get_slot_Multianewarray_typeDesc( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.gettypeDesc()  ;}private static  int  tom_get_slot_Multianewarray_dims( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getdims()  ;}private static boolean tom_is_fun_sym_Ifnull( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifnull_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_Ifnonnull( tom.library.adt.bytecode.types.TInstruction  t) {  return  t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_Ifnonnull_label( tom.library.adt.bytecode.types.TInstruction  t) {  return  t.getlabel()  ;}private static boolean tom_is_fun_sym_CatchHandler( tom.library.adt.bytecode.types.THandler  t) {  return  t instanceof tom.library.adt.bytecode.types.thandler.CatchHandler  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_CatchHandler_handler( tom.library.adt.bytecode.types.THandler  t) {  return  t.gethandler()  ;}private static  String  tom_get_slot_CatchHandler_type( tom.library.adt.bytecode.types.THandler  t) {  return  t.gettype()  ;}private static boolean tom_is_fun_sym_FinallyHandler( tom.library.adt.bytecode.types.THandler  t) {  return  t instanceof tom.library.adt.bytecode.types.thandler.FinallyHandler  ;}private static  tom.library.adt.bytecode.types.TLabel  tom_get_slot_FinallyHandler_handler( tom.library.adt.bytecode.types.THandler  t) {  return  t.gethandler()  ;}private static boolean tom_is_fun_sym_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  t) {  return  t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList || t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList  ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_empty_list_LocalVariableList() { return  tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() ; }private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_cons_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariable  e,  tom.library.adt.bytecode.types.TLocalVariableList  l) { return  tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLocalVariable  tom_get_head_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) {  return  l.getHeadLocalVariableList()  ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_get_tail_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) {  return  l.getTailLocalVariableList()  ;}private static boolean tom_is_empty_LocalVariableList_TLocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l) {  return  l.isEmptyLocalVariableList()  ;}private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_append_list_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  l1,  tom.library.adt.bytecode.types.TLocalVariableList  l2) {    if(tom_is_empty_LocalVariableList_TLocalVariableList(l1)) {     return l2;    } else if(tom_is_empty_LocalVariableList_TLocalVariableList(l2)) {     return l1;    } else if(tom_is_empty_LocalVariableList_TLocalVariableList(( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_tail_LocalVariableList_TLocalVariableList(l1))) {     return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(( tom.library.adt.bytecode.types.TLocalVariable )tom_get_head_LocalVariableList_TLocalVariableList(l1),l2);    } else {      return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(( tom.library.adt.bytecode.types.TLocalVariable )tom_get_head_LocalVariableList_TLocalVariableList(l1),tom_append_list_LocalVariableList(( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_tail_LocalVariableList_TLocalVariableList(l1),l2));    }   }  private static  tom.library.adt.bytecode.types.TLocalVariableList  tom_get_slice_LocalVariableList( tom.library.adt.bytecode.types.TLocalVariableList  begin,  tom.library.adt.bytecode.types.TLocalVariableList  end) {    if(tom_terms_equal_TLocalVariableList(begin,end)) {      return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_empty_list_LocalVariableList();    } else {      return ( tom.library.adt.bytecode.types.TLocalVariableList )tom_cons_list_LocalVariableList(( tom.library.adt.bytecode.types.TLocalVariable )tom_get_head_LocalVariableList_TLocalVariableList(begin),( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_slice_LocalVariableList(( tom.library.adt.bytecode.types.TLocalVariableList )tom_get_tail_LocalVariableList_TLocalVariableList(begin),end));    }   }  private static boolean tom_is_fun_sym_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  t) {  return  t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList || t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList  ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_empty_list_TryCatchBlockList() { return  tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() ; }private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_cons_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlock  e,  tom.library.adt.bytecode.types.TTryCatchBlockList  l) { return  tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TTryCatchBlock  tom_get_head_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) {  return  l.getHeadTryCatchBlockList()  ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_tail_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) {  return  l.getTailTryCatchBlockList()  ;}private static boolean tom_is_empty_TryCatchBlockList_TTryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l) {  return  l.isEmptyTryCatchBlockList()  ;}private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_append_list_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  l1,  tom.library.adt.bytecode.types.TTryCatchBlockList  l2) {    if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l1)) {     return l2;    } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(l2)) {     return l1;    } else if(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1))) {     return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlock )tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),l2);    } else {      return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlock )tom_get_head_TryCatchBlockList_TTryCatchBlockList(l1),tom_append_list_TryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_tail_TryCatchBlockList_TTryCatchBlockList(l1),l2));    }   }  private static  tom.library.adt.bytecode.types.TTryCatchBlockList  tom_get_slice_TryCatchBlockList( tom.library.adt.bytecode.types.TTryCatchBlockList  begin,  tom.library.adt.bytecode.types.TTryCatchBlockList  end) {    if(tom_terms_equal_TTryCatchBlockList(begin,end)) {      return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_empty_list_TryCatchBlockList();    } else {      return ( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_cons_list_TryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlock )tom_get_head_TryCatchBlockList_TTryCatchBlockList(begin),( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_slice_TryCatchBlockList(( tom.library.adt.bytecode.types.TTryCatchBlockList )tom_get_tail_TryCatchBlockList_TTryCatchBlockList(begin),end));    }   }  private static boolean tom_is_fun_sym_intList( tom.library.adt.bytecode.types.TintList  t) {  return  t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList || t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList  ;}private static  tom.library.adt.bytecode.types.TintList  tom_empty_list_intList() { return  tom.library.adt.bytecode.types.tintlist.EmptyintList.make() ; }private static  tom.library.adt.bytecode.types.TintList  tom_cons_list_intList( int  e,  tom.library.adt.bytecode.types.TintList  l) { return  tom.library.adt.bytecode.types.tintlist.ConsintList.make(e,l) ; }private static  int  tom_get_head_intList_TintList( tom.library.adt.bytecode.types.TintList  l) {  return  l.getHeadintList()  ;}private static  tom.library.adt.bytecode.types.TintList  tom_get_tail_intList_TintList( tom.library.adt.bytecode.types.TintList  l) {  return  l.getTailintList()  ;}private static boolean tom_is_empty_intList_TintList( tom.library.adt.bytecode.types.TintList  l) {  return  l.isEmptyintList()  ;}private static  tom.library.adt.bytecode.types.TintList  tom_append_list_intList( tom.library.adt.bytecode.types.TintList  l1,  tom.library.adt.bytecode.types.TintList  l2) {    if(tom_is_empty_intList_TintList(l1)) {     return l2;    } else if(tom_is_empty_intList_TintList(l2)) {     return l1;    } else if(tom_is_empty_intList_TintList(( tom.library.adt.bytecode.types.TintList )tom_get_tail_intList_TintList(l1))) {     return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(( int )tom_get_head_intList_TintList(l1),l2);    } else {      return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(( int )tom_get_head_intList_TintList(l1),tom_append_list_intList(( tom.library.adt.bytecode.types.TintList )tom_get_tail_intList_TintList(l1),l2));    }   }  private static  tom.library.adt.bytecode.types.TintList  tom_get_slice_intList( tom.library.adt.bytecode.types.TintList  begin,  tom.library.adt.bytecode.types.TintList  end) {    if(tom_terms_equal_TintList(begin,end)) {      return ( tom.library.adt.bytecode.types.TintList )tom_empty_list_intList();    } else {      return ( tom.library.adt.bytecode.types.TintList )tom_cons_list_intList(( int )tom_get_head_intList_TintList(begin),( tom.library.adt.bytecode.types.TintList )tom_get_slice_intList(( tom.library.adt.bytecode.types.TintList )tom_get_tail_intList_TintList(begin),end));    }   }  private static boolean tom_is_fun_sym_MethodList( tom.library.adt.bytecode.types.TMethodList  t) {  return  t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList || t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList  ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_empty_list_MethodList() { return  tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() ; }private static  tom.library.adt.bytecode.types.TMethodList  tom_cons_list_MethodList( tom.library.adt.bytecode.types.TMethod  e,  tom.library.adt.bytecode.types.TMethodList  l) { return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TMethod  tom_get_head_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) {  return  l.getHeadMethodList()  ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_get_tail_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) {  return  l.getTailMethodList()  ;}private static boolean tom_is_empty_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) {  return  l.isEmptyMethodList()  ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_append_list_MethodList( tom.library.adt.bytecode.types.TMethodList  l1,  tom.library.adt.bytecode.types.TMethodList  l2) {    if(tom_is_empty_MethodList_TMethodList(l1)) {     return l2;    } else if(tom_is_empty_MethodList_TMethodList(l2)) {     return l1;    } else if(tom_is_empty_MethodList_TMethodList(( tom.library.adt.bytecode.types.TMethodList )tom_get_tail_MethodList_TMethodList(l1))) {     return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(( tom.library.adt.bytecode.types.TMethod )tom_get_head_MethodList_TMethodList(l1),l2);    } else {      return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(( tom.library.adt.bytecode.types.TMethod )tom_get_head_MethodList_TMethodList(l1),tom_append_list_MethodList(( tom.library.adt.bytecode.types.TMethodList )tom_get_tail_MethodList_TMethodList(l1),l2));    }   }  private static  tom.library.adt.bytecode.types.TMethodList  tom_get_slice_MethodList( tom.library.adt.bytecode.types.TMethodList  begin,  tom.library.adt.bytecode.types.TMethodList  end) {    if(tom_terms_equal_TMethodList(begin,end)) {      return ( tom.library.adt.bytecode.types.TMethodList )tom_empty_list_MethodList();    } else {      return ( tom.library.adt.bytecode.types.TMethodList )tom_cons_list_MethodList(( tom.library.adt.bytecode.types.TMethod )tom_get_head_MethodList_TMethodList(begin),( tom.library.adt.bytecode.types.TMethodList )tom_get_slice_MethodList(( tom.library.adt.bytecode.types.TMethodList )tom_get_tail_MethodList_TMethodList(begin),end));    }   }  private static boolean tom_is_fun_sym_LabelList( tom.library.adt.bytecode.types.TLabelList  t) {  return  t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList || t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList  ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_empty_list_LabelList() { return  tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() ; }private static  tom.library.adt.bytecode.types.TLabelList  tom_cons_list_LabelList( tom.library.adt.bytecode.types.TLabel  e,  tom.library.adt.bytecode.types.TLabelList  l) { return  tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TLabel  tom_get_head_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) {  return  l.getHeadLabelList()  ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_get_tail_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) {  return  l.getTailLabelList()  ;}private static boolean tom_is_empty_LabelList_TLabelList( tom.library.adt.bytecode.types.TLabelList  l) {  return  l.isEmptyLabelList()  ;}private static  tom.library.adt.bytecode.types.TLabelList  tom_append_list_LabelList( tom.library.adt.bytecode.types.TLabelList  l1,  tom.library.adt.bytecode.types.TLabelList  l2) {    if(tom_is_empty_LabelList_TLabelList(l1)) {     return l2;    } else if(tom_is_empty_LabelList_TLabelList(l2)) {     return l1;    } else if(tom_is_empty_LabelList_TLabelList(( tom.library.adt.bytecode.types.TLabelList )tom_get_tail_LabelList_TLabelList(l1))) {     return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(( tom.library.adt.bytecode.types.TLabel )tom_get_head_LabelList_TLabelList(l1),l2);    } else {      return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(( tom.library.adt.bytecode.types.TLabel )tom_get_head_LabelList_TLabelList(l1),tom_append_list_LabelList(( tom.library.adt.bytecode.types.TLabelList )tom_get_tail_LabelList_TLabelList(l1),l2));    }   }  private static  tom.library.adt.bytecode.types.TLabelList  tom_get_slice_LabelList( tom.library.adt.bytecode.types.TLabelList  begin,  tom.library.adt.bytecode.types.TLabelList  end) {    if(tom_terms_equal_TLabelList(begin,end)) {      return ( tom.library.adt.bytecode.types.TLabelList )tom_empty_list_LabelList();    } else {      return ( tom.library.adt.bytecode.types.TLabelList )tom_cons_list_LabelList(( tom.library.adt.bytecode.types.TLabel )tom_get_head_LabelList_TLabelList(begin),( tom.library.adt.bytecode.types.TLabelList )tom_get_slice_LabelList(( tom.library.adt.bytecode.types.TLabelList )tom_get_tail_LabelList_TLabelList(begin),end));    }   }   /* Generated by TOM (version 2.4rc0): Do not edit this file *//* Generated by TOM (version 2.4rc0): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.4rc0): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Sequence( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Choice( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /* Generated by TOM (version 2.4rc0): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Try( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("_x")))) ; }   /* Generated by TOM (version 2.4rc0): Do not edit this file */private static boolean tom_terms_equal_Map(Object l1, Object l2) {  return  l1.equals(l2)  ;}  private static class BuildLabelMap  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  java.util.Map  m;  public BuildLabelMap(  java.util.Map  m ) { super(tom_make_Identity() ); this.m=m; } public  java.util.Map  getm() { return m;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match1_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); if ( ( tom_is_fun_sym_ConsInstructionList(tom_match1_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TInstruction  tom_match1_1_HeadInstructionList=tom_get_slot_ConsInstructionList_HeadInstructionList(tom_match1_1); { tom.library.adt.bytecode.types.TInstructionList  tom_match1_1_TailInstructionList=tom_get_slot_ConsInstructionList_TailInstructionList(tom_match1_1); if ( ( tom_is_fun_sym_Anchor(tom_match1_1_HeadInstructionList) ||  false  ) ) { { tom.library.adt.bytecode.types.TLabel  tom_match1_1_HeadInstructionList_label=tom_get_slot_Anchor_label(tom_match1_1_HeadInstructionList); { tom.library.adt.bytecode.types.TLabel  tom_l=tom_match1_1_HeadInstructionList_label; {boolean tom_match1_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match1_1; if (tom_terms_equal_boolean(tom_match1_tom_anti_constraints_status,  true )) { if ( true ) {       m.put(tom_l, tom_c);      } } } } } } } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_BuildLabelMap( java.util.Map  t0) { return new BuildLabelMap(t0); } private static class AllCfg  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  tom.library.strategy.mutraveler.MuStrategy  s;  private  java.util.Map  m;  public AllCfg(  tom.library.strategy.mutraveler.MuStrategy  s ,   java.util.Map  m ) { super(tom_make_Identity() ); this.s=s; this.m=m; } public  tom.library.strategy.mutraveler.MuStrategy  gets() { return s;} public  java.util.Map  getm() { return m;} public int getChildCount() { return 2; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); case 1: return gets(); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); case 1: s = ( tom.library.strategy.mutraveler.MuStrategy )child; return this; default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match2_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); if ( ( tom_is_fun_sym_ConsInstructionList(tom_match2_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TInstruction  tom_match2_1_HeadInstructionList=tom_get_slot_ConsInstructionList_HeadInstructionList(tom_match2_1); { tom.library.adt.bytecode.types.TInstructionList  tom_match2_1_TailInstructionList=tom_get_slot_ConsInstructionList_TailInstructionList(tom_match2_1); { tom.library.adt.bytecode.types.TInstruction  tom_ins=tom_match2_1_HeadInstructionList; { tom.library.adt.bytecode.types.TInstructionList  tom_t=tom_match2_1_TailInstructionList; {boolean tom_match2_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match2_1; if (tom_terms_equal_boolean(tom_match2_tom_anti_constraints_status,  true )) { if ( true ) {       TInstruction ins = tom_ins;        if(tom_ins instanceof  tom.library.adt.bytecode.types.TInstruction ) { { tom.library.adt.bytecode.types.TInstruction  tom_match3_1=(( tom.library.adt.bytecode.types.TInstruction )tom_ins); if ( ( tom_is_fun_sym_Goto(tom_match3_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TLabel  tom_match3_1_label=tom_get_slot_Goto_label(tom_match3_1); { tom.library.adt.bytecode.types.TLabel  tom_l=tom_match3_1_label; {boolean tom_match3_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match3_tom_anti_constraints_status,  true )) { if ( true ) {           s.visit((TInstructionList)m.get(tom_l));           return tom_c;          } } } } } } {boolean tom_bool_match3_1= false ; { tom.library.adt.bytecode.types.TLabel  tom_match3_1_label= null ; if (tom_is_fun_sym_Ifeq(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifeq_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifne(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifne_label(tom_match3_1); } else { if (tom_is_fun_sym_Iflt(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Iflt_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifge(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifge_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifgt(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifgt_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifle(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifle_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmpeq(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmpeq_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmpne(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmpne_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmplt(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmplt_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmpge(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmpge_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmpgt(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmpgt_label(tom_match3_1); } else { if (tom_is_fun_sym_If_icmple(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_icmple_label(tom_match3_1); } else { if (tom_is_fun_sym_If_acmpeq(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_acmpeq_label(tom_match3_1); } else { if (tom_is_fun_sym_If_acmpne(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_If_acmpne_label(tom_match3_1); } else { if (tom_is_fun_sym_Jsr(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Jsr_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifnull(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifnull_label(tom_match3_1); } else { if (tom_is_fun_sym_Ifnonnull(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_label=tom_get_slot_Ifnonnull_label(tom_match3_1); } } } } } } } } } } } } } } } } } if (tom_bool_match3_1) { { tom.library.adt.bytecode.types.TLabel  tom_l=tom_match3_1_label; {boolean tom_match3_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match3_tom_anti_constraints_status,  true )) { if ( true ) {           s.visit((TInstructionList)m.get(tom_l));          } } } } } } } {boolean tom_bool_match3_1= false ; { tom.library.adt.bytecode.types.TLabel  tom_match3_1_dflt= null ; { tom.library.adt.bytecode.types.TLabelList  tom_match3_1_labels= null ; if (tom_is_fun_sym_Tableswitch(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_dflt=tom_get_slot_Tableswitch_dflt(tom_match3_1);tom_match3_1_labels=tom_get_slot_Tableswitch_labels(tom_match3_1); } else { if (tom_is_fun_sym_Lookupswitch(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_dflt=tom_get_slot_Lookupswitch_dflt(tom_match3_1);tom_match3_1_labels=tom_get_slot_Lookupswitch_labels(tom_match3_1); } } if (tom_bool_match3_1) { { tom.library.adt.bytecode.types.TLabel  tom_dflt=tom_match3_1_dflt; { tom.library.adt.bytecode.types.TLabelList  tom_labels=tom_match3_1_labels; {boolean tom_match3_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match3_tom_anti_constraints_status,  true )) { if ( true ) {           TLabelList labelList = tom_labels;            if(labelList instanceof  tom.library.adt.bytecode.types.TLabelList ) { { tom.library.adt.bytecode.types.TLabelList  tom_match4_1=(( tom.library.adt.bytecode.types.TLabelList )labelList); if ( ( tom_is_fun_sym_LabelList(tom_match4_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TLabelList  tom_match4_1_list1=tom_match4_1; { tom.library.adt.bytecode.types.TLabelList  tom_match4_1_begin1=tom_match4_1_list1; { tom.library.adt.bytecode.types.TLabelList  tom_match4_1_end1=tom_match4_1_list1; { while (!(tom_is_empty_LabelList_TLabelList(tom_match4_1_end1))) {tom_match4_1_list1=tom_match4_1_end1; { { tom.library.adt.bytecode.types.TLabel  tom_x=tom_get_head_LabelList_TLabelList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_LabelList_TLabelList(tom_match4_1_list1); {boolean tom_match4_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match4_tom_anti_constraints_status,  true )) { if ( true ) {               s.visit((TInstructionList)m.get(tom_x));              } } } }tom_match4_1_end1=tom_get_tail_LabelList_TLabelList(tom_match4_1_end1); } }tom_match4_1_list1=tom_match4_1_begin1; } } } } } } }           s.visit((TInstructionList)m.get(tom_dflt));           return tom_c;          } } } } } } } } } {boolean tom_match3_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match3_tom_anti_constraints_status,  true )) { if ( true ) { s.visit(tom_t);  } } } } }      } } } } } } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_AllCfg( tom.library.strategy.mutraveler.MuStrategy  t0,  java.util.Map  t1) { return new AllCfg(t0,t1); } private static class Mark  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  java.util.Map  map;  public Mark(  java.util.Map  map ) { super(tom_make_Identity() ); this.map=map; } public  java.util.Map  getmap() { return map;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match5_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); {boolean tom_match5_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match5_1; if (tom_terms_equal_boolean(tom_match5_tom_anti_constraints_status,  true )) { if ( true ) {       Object o = map.get(tom_c);       int value = 1;       if(o != null)         value = ((Integer)o).intValue() + 1;       map.put(tom_c, new Integer(value));      } } } } } } return super.visit_TInstructionList(tom__arg) ;  } } private static class UnMark  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  java.util.Map  map;  public UnMark(  java.util.Map  map ) { super(tom_make_Identity() ); this.map=map; } public  java.util.Map  getmap() { return map;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match6_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); {boolean tom_match6_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match6_1; if (tom_terms_equal_boolean(tom_match6_tom_anti_constraints_status,  true )) { if ( true ) {       Object o = map.get(tom_c);       if(o == null)         throw new jjtraveler.VisitFailure();       int value = ((Integer)o).intValue() - 1;       map.put(tom_c, new Integer(value));      } } } } } } return super.visit_TInstructionList(tom__arg) ;  } } private static class IsMarked  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  java.util.Map  map;  public IsMarked(  java.util.Map  map ) { super(tom_make_Identity() ); this.map=map; } public  java.util.Map  getmap() { return map;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match7_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); {boolean tom_match7_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match7_1; if (tom_terms_equal_boolean(tom_match7_tom_anti_constraints_status,  true )) { if ( true ) {       Object o = map.get(tom_c);       if(o == null || ((Integer)o).intValue() <= 0)         throw new jjtraveler.VisitFailure();      } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }   




  /**
   * Returns the dot node id of the given TInstructionList.
   * @param ins the instruction.
   * @return the id.
   */
  private static String getDotId(TInstructionList ins) {
    return ("insid" + ins.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TTryCatchBlock.
   * @param bl the try/catch block.
   * @return the id.
   */
  private static String getDotId(TTryCatchBlock bl) {
    return ("blockid" + bl.hashCode()).replace('-', 'm');
  }

  /**
   * Returns the dot node id of the given TLocalVariable.
   * @param the local variable.
   * @return the id.
   */
  private static String getDotId(TLocalVariable var) {
    return ("varid" + var.hashCode()).replace('-', 'm');
  }

  /**
   * Cleans the given string to prevent dot compilation problems.
   * (ex: replace the character '"' with the string "\"").
   * @param s the string to be cleaned.
   * @return the cleaned string.
   */
  private static String clean(String s) {
    return s.replaceAll("\\\"", "\\\\\\\"");
  }

  /**
   * Prints the current instruction node with a suitable label.
   * @param out the writer to be used for the dot output.
   */
   private static class PrintDotNode  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private java.io.Writer out;  public PrintDotNode( java.io.Writer out ) { super(tom_make_Identity() ); this.out=out; } public java.io.Writer getout() { return out;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match8_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); if ( ( tom_is_fun_sym_ConsInstructionList(tom_match8_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TInstruction  tom_match8_1_HeadInstructionList=tom_get_slot_ConsInstructionList_HeadInstructionList(tom_match8_1); { tom.library.adt.bytecode.types.TInstructionList  tom_match8_1_TailInstructionList=tom_get_slot_ConsInstructionList_TailInstructionList(tom_match8_1); { tom.library.adt.bytecode.types.TInstruction  tom_ins=tom_match8_1_HeadInstructionList; {boolean tom_match8_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match8_1; if (tom_terms_equal_boolean(tom_match8_tom_anti_constraints_status,  true )) { if ( true ) {


        String id = getDotId(tom_c);
        printDotInstruction(tom_ins, id, out);
       } } } } } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_PrintDotNode(java.io.Writer t0) { return new PrintDotNode(t0); }



  /**
   * Prints the given instruction with a suitable label and id.
   * @param ins the instruction to be printed.
   * @param id the id of the dot node.
   * @param out the writer to be used for the dot output.
   */
  private static void printDotInstruction(TInstruction ins, String id, Writer out) {
    try {
       if(ins instanceof  tom.library.adt.bytecode.types.TInstruction ) { { tom.library.adt.bytecode.types.TInstruction  tom_match9_1=(( tom.library.adt.bytecode.types.TInstruction )ins); {boolean tom_bool_match9_1= false ; { int  tom_match9_1_operand= 0 ; if (tom_is_fun_sym_Bipush(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_operand=tom_get_slot_Bipush_operand(tom_match9_1); } else { if (tom_is_fun_sym_Sipush(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_operand=tom_get_slot_Sipush_operand(tom_match9_1); } else { if (tom_is_fun_sym_Newarray(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_operand=tom_get_slot_Newarray_operand(tom_match9_1); } } } if (tom_bool_match9_1) { { int  tom_operand=tom_match9_1_operand; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\noperand : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_operand)+"\"];\n              "

);
          return;
         } } } } } } } if ( ( tom_is_fun_sym_Multianewarray(tom_match9_1) ||  false  ) ) { { String  tom_match9_1_typeDesc=tom_get_slot_Multianewarray_typeDesc(tom_match9_1); { int  tom_match9_1_dims=tom_get_slot_Multianewarray_dims(tom_match9_1); { String  tom_typeDesc=tom_match9_1_typeDesc; { int  tom_dims=tom_match9_1_dims; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\ntypeDesc : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_typeDesc+"\\ndims : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_dims)+"\"];\n              "

);
          return;
         } } } } } } } } if ( ( tom_is_fun_sym_Ldc(tom_match9_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TValue  tom_match9_1_cst=tom_get_slot_Ldc_cst(tom_match9_1); { tom.library.adt.bytecode.types.TValue  tom_cst=tom_match9_1_cst; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\ncst : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+clean(tom_cst.toString())+"\"];\n              "

);
          return;
         } } } } } } {boolean tom_bool_match9_1= false ; { int  tom_match9_1_var= 0 ; if (tom_is_fun_sym_Iload(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Iload_var(tom_match9_1); } else { if (tom_is_fun_sym_Lload(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Lload_var(tom_match9_1); } else { if (tom_is_fun_sym_Fload(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Fload_var(tom_match9_1); } else { if (tom_is_fun_sym_Dload(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Dload_var(tom_match9_1); } else { if (tom_is_fun_sym_Aload(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Aload_var(tom_match9_1); } else { if (tom_is_fun_sym_Istore(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Istore_var(tom_match9_1); } else { if (tom_is_fun_sym_Lstore(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Lstore_var(tom_match9_1); } else { if (tom_is_fun_sym_Fstore(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Fstore_var(tom_match9_1); } else { if (tom_is_fun_sym_Dstore(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Dstore_var(tom_match9_1); } else { if (tom_is_fun_sym_Astore(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Astore_var(tom_match9_1); } else { if (tom_is_fun_sym_Ret(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_var=tom_get_slot_Ret_var(tom_match9_1); } } } } } } } } } } } if (tom_bool_match9_1) { { int  tom_var=tom_match9_1_var; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {




          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nvar : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_var)+"\"];\n              "

);
          return;
         } } } } } } } if ( ( tom_is_fun_sym_Iinc(tom_match9_1) ||  false  ) ) { { int  tom_match9_1_incr=tom_get_slot_Iinc_incr(tom_match9_1); { int  tom_match9_1_var=tom_get_slot_Iinc_var(tom_match9_1); { int  tom_incr=tom_match9_1_incr; { int  tom_var=tom_match9_1_var; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nincr : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_incr)+"\\nvar : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_var)+"\"];\n              "

);
          return;
         } } } } } } } } if ( ( tom_is_fun_sym_Tableswitch(tom_match9_1) ||  false  ) ) { { int  tom_match9_1_min=tom_get_slot_Tableswitch_min(tom_match9_1); { int  tom_match9_1_max=tom_get_slot_Tableswitch_max(tom_match9_1); { int  tom_min=tom_match9_1_min; { int  tom_max=tom_match9_1_max; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nmin : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_min+"\\nmax : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_max+"\"];\n              "

);
          return;
         } } } } } } } } if ( ( tom_is_fun_sym_Lookupswitch(tom_match9_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TintList  tom_match9_1_keys=tom_get_slot_Lookupswitch_keys(tom_match9_1); { tom.library.adt.bytecode.types.TintList  tom_keys=tom_match9_1_keys; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nkeys : "
);
              TintList keys = tom_keys;
               if(tom_keys instanceof  tom.library.adt.bytecode.types.TintList ) { { tom.library.adt.bytecode.types.TintList  tom_match10_1=(( tom.library.adt.bytecode.types.TintList )tom_keys); if ( ( tom_is_fun_sym_intList(tom_match10_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TintList  tom_match10_1_list1=tom_match10_1; { tom.library.adt.bytecode.types.TintList  tom_match10_1_begin1=tom_match10_1_list1; { tom.library.adt.bytecode.types.TintList  tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_intList_TintList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { int  tom_x=tom_get_head_intList_TintList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_intList_TintList(tom_match10_1_list1); { tom.library.adt.bytecode.types.TintList  tom_match10_1_begin3=tom_match10_1_list1; { tom.library.adt.bytecode.types.TintList  tom_match10_1_end3=tom_match10_1_list1; { while (!(tom_is_empty_intList_TintList(tom_match10_1_end3))) {tom_match10_1_list1=tom_match10_1_end3; {tom_match10_1_list1=tom_get_tail_intList_TintList(tom_match10_1_list1); if (tom_is_empty_intList_TintList(tom_match10_1_list1)) { {boolean tom_match10_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match10_tom_anti_constraints_status,  true )) { if ( true ) {

                  out.write(""/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(tom_x)+", ");
                 } } } }tom_match10_1_end3=tom_get_tail_intList_TintList(tom_match10_1_end3); } }tom_match10_1_list1=tom_match10_1_begin3; } } } }tom_match10_1_end1=tom_get_tail_intList_TintList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } if ( ( tom_is_fun_sym_intList(tom_match10_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TintList  tom_match10_1_list1=tom_match10_1; { tom.library.adt.bytecode.types.TintList  tom_match10_1_begin1=tom_match10_1_list1; { tom.library.adt.bytecode.types.TintList  tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_intList_TintList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { int  tom_x=tom_get_head_intList_TintList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_intList_TintList(tom_match10_1_list1); if (tom_is_empty_intList_TintList(tom_match10_1_list1)) { {boolean tom_match10_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match10_tom_anti_constraints_status,  true )) { if ( true ) {

                  out.write(Integer.toString(tom_x));
                 } } } } }tom_match10_1_end1=tom_get_tail_intList_TintList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } } }

              out.write("\"];");
              return;
         } } } } } } {boolean tom_bool_match9_1= false ; { String  tom_match9_1_owner= "" ; { String  tom_match9_1_name= "" ; { tom.library.adt.bytecode.types.TFieldDescriptor  tom_match9_1_fieldDesc= null ; if (tom_is_fun_sym_Getstatic(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Getstatic_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Getstatic_name(tom_match9_1);tom_match9_1_fieldDesc=tom_get_slot_Getstatic_fieldDesc(tom_match9_1); } else { if (tom_is_fun_sym_Putstatic(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Putstatic_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Putstatic_name(tom_match9_1);tom_match9_1_fieldDesc=tom_get_slot_Putstatic_fieldDesc(tom_match9_1); } else { if (tom_is_fun_sym_Getfield(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Getfield_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Getfield_name(tom_match9_1);tom_match9_1_fieldDesc=tom_get_slot_Getfield_fieldDesc(tom_match9_1); } else { if (tom_is_fun_sym_Putfield(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Putfield_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Putfield_name(tom_match9_1);tom_match9_1_fieldDesc=tom_get_slot_Putfield_fieldDesc(tom_match9_1); } } } } if (tom_bool_match9_1) { { String  tom_owner=tom_match9_1_owner; { String  tom_name=tom_match9_1_name; { tom.library.adt.bytecode.types.TFieldDescriptor  tom_fieldDesc=tom_match9_1_fieldDesc; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_owner+"\\nname : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_name+"\\ndescriptor : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+ToolBox.buildDescriptor(tom_fieldDesc)+"\"];\n              "

);
          return;
         } } } } } } } } } } } {boolean tom_bool_match9_1= false ; { String  tom_match9_1_owner= "" ; { String  tom_match9_1_name= "" ; { tom.library.adt.bytecode.types.TMethodDescriptor  tom_match9_1_methodDesc= null ; if (tom_is_fun_sym_Invokevirtual(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Invokevirtual_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Invokevirtual_name(tom_match9_1);tom_match9_1_methodDesc=tom_get_slot_Invokevirtual_methodDesc(tom_match9_1); } else { if (tom_is_fun_sym_Invokespecial(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Invokespecial_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Invokespecial_name(tom_match9_1);tom_match9_1_methodDesc=tom_get_slot_Invokespecial_methodDesc(tom_match9_1); } else { if (tom_is_fun_sym_Invokestatic(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Invokestatic_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Invokestatic_name(tom_match9_1);tom_match9_1_methodDesc=tom_get_slot_Invokestatic_methodDesc(tom_match9_1); } else { if (tom_is_fun_sym_Invokeinterface(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_owner=tom_get_slot_Invokeinterface_owner(tom_match9_1);tom_match9_1_name=tom_get_slot_Invokeinterface_name(tom_match9_1);tom_match9_1_methodDesc=tom_get_slot_Invokeinterface_methodDesc(tom_match9_1); } } } } if (tom_bool_match9_1) { { String  tom_owner=tom_match9_1_owner; { String  tom_name=tom_match9_1_name; { tom.library.adt.bytecode.types.TMethodDescriptor  tom_methodDesc=tom_match9_1_methodDesc; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\nowner : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_owner+"\\nname : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_name+"\\ndescriptor : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+ToolBox.buildDescriptor(tom_methodDesc)+"\"];\n              "

);
          return;
         } } } } } } } } } } } {boolean tom_bool_match9_1= false ; { String  tom_match9_1_typeDesc= "" ; if (tom_is_fun_sym_New(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_typeDesc=tom_get_slot_New_typeDesc(tom_match9_1); } else { if (tom_is_fun_sym_Anewarray(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_typeDesc=tom_get_slot_Anewarray_typeDesc(tom_match9_1); } else { if (tom_is_fun_sym_Checkcast(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_typeDesc=tom_get_slot_Checkcast_typeDesc(tom_match9_1); } else { if (tom_is_fun_sym_Instanceof(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_typeDesc=tom_get_slot_Instanceof_typeDesc(tom_match9_1); } } } } if (tom_bool_match9_1) { { String  tom_typeDesc=tom_match9_1_typeDesc; {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\\ndescriptor : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_typeDesc+"\"];\n              "

);
          return;
         } } } } } } } {boolean tom_match9_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match9_tom_anti_constraints_status,  true )) { if ( true ) {


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\""/* Generated by TOM (version 2.4rc0): Do not edit this file */+ins.symbolName()+"\"];\n              "

);
         } } } } }

    } catch(IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * Prints a link from the `parent' instruction to the current node instruction.
   * @param out the writer to be used for the dot output.
   */
   private static class PrintDotLink  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private java.io.Writer out;  private  InsWrapper  parent;  public PrintDotLink( java.io.Writer out ,   InsWrapper  parent ) { super(tom_make_Identity() ); this.out=out; this.parent=parent; } public java.io.Writer getout() { return out;} public  InsWrapper  getparent() { return parent;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match11_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); if ( ( tom_is_fun_sym_ConsInstructionList(tom_match11_1) ||  false  ) ) { {boolean tom_match11_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match11_1; if (tom_terms_equal_boolean(tom_match11_tom_anti_constraints_status,  true )) { if ( true ) {


        try {
          out.write(""/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId(parent.ins)+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId(tom_c)+";\n              "
);
        } catch(IOException e) {
          e.printStackTrace();
        }
       } } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_PrintDotLink(java.io.Writer t0,  InsWrapper  t1) { return new PrintDotLink(t0,t1); }



  /**
   * Prints all the try/catch/finally informations of the given block list.
   * @param list the try/catch/finally blocks to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   */
  private static void printTryCatchBlocks(TTryCatchBlockList list, Map labelMap, Writer out) {
     if(list instanceof  tom.library.adt.bytecode.types.TTryCatchBlockList ) { { tom.library.adt.bytecode.types.TTryCatchBlockList  tom_match12_1=(( tom.library.adt.bytecode.types.TTryCatchBlockList )list); if ( ( tom_is_fun_sym_TryCatchBlockList(tom_match12_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TTryCatchBlockList  tom_match12_1_list1=tom_match12_1; { tom.library.adt.bytecode.types.TTryCatchBlockList  tom_match12_1_begin1=tom_match12_1_list1; { tom.library.adt.bytecode.types.TTryCatchBlockList  tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_TryCatchBlockList_TTryCatchBlockList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.library.adt.bytecode.types.TTryCatchBlock  tom_x=tom_get_head_TryCatchBlockList_TTryCatchBlockList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_TryCatchBlockList_TTryCatchBlockList(tom_match12_1_list1); {boolean tom_match12_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match12_tom_anti_constraints_status,  true )) { if ( true ) {

        try {
          TTryCatchBlock block = tom_x;
          THandler handler = block.gethandler();
          String id = getDotId(block);

           if(handler instanceof  tom.library.adt.bytecode.types.THandler ) { { tom.library.adt.bytecode.types.THandler  tom_match13_1=(( tom.library.adt.bytecode.types.THandler )handler); if ( ( tom_is_fun_sym_CatchHandler(tom_match13_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TLabel  tom_match13_1_handler=tom_get_slot_CatchHandler_handler(tom_match13_1); { String  tom_match13_1_type=tom_get_slot_CatchHandler_type(tom_match13_1); { tom.library.adt.bytecode.types.TLabel  tom_h=tom_match13_1_handler; { String  tom_t=tom_match13_1_type; {boolean tom_match13_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match13_tom_anti_constraints_status,  true )) { if ( true ) {

              out.write("\n                  "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\"Catch\\ntype : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+tom_t+"\" shape=box];\n                  "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(tom_h))+" [label=\"handler\" style=dotted];\n                  "


);
             } } } } } } } } if ( ( tom_is_fun_sym_FinallyHandler(tom_match13_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TLabel  tom_match13_1_handler=tom_get_slot_FinallyHandler_handler(tom_match13_1); { tom.library.adt.bytecode.types.TLabel  tom_h=tom_match13_1_handler; {boolean tom_match13_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match13_tom_anti_constraints_status,  true )) { if ( true ) {


              out.write("\n                  "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\"Finally\" shape=box];\n                  "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(tom_h))+" [label=\"handler\" style=dotted];\n                  "


);
             } } } } } } } }


          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(block.getstart()))+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(block.getend()))+" [label=\"end\" style=dotted];\n              "


);
        } catch(IOException e) {
          e.printStackTrace();
        }
       } } } }tom_match12_1_end1=tom_get_tail_TryCatchBlockList_TTryCatchBlockList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

  }

  /**
   * Prints all the local variables informations.
   * @param list the local variables list to be printed.
   * @param labelMap the label map (see the BuildLabelMap strategy).
   * @param out the writer to be used for the dot output.
   */
  private static void printLocalVariables(TLocalVariableList list, Map labelMap, Writer out) {
     if(list instanceof  tom.library.adt.bytecode.types.TLocalVariableList ) { { tom.library.adt.bytecode.types.TLocalVariableList  tom_match14_1=(( tom.library.adt.bytecode.types.TLocalVariableList )list); if ( ( tom_is_fun_sym_LocalVariableList(tom_match14_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TLocalVariableList  tom_match14_1_list1=tom_match14_1; { tom.library.adt.bytecode.types.TLocalVariableList  tom_match14_1_begin1=tom_match14_1_list1; { tom.library.adt.bytecode.types.TLocalVariableList  tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_LocalVariableList_TLocalVariableList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.library.adt.bytecode.types.TLocalVariable  tom_x=tom_get_head_LocalVariableList_TLocalVariableList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_LocalVariableList_TLocalVariableList(tom_match14_1_list1); {boolean tom_match14_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match14_tom_anti_constraints_status,  true )) { if ( true ) {

        try {
          TLocalVariable var = tom_x;
          String id = getDotId(var);

          out.write("\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" [label=\"var : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+var.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+var.gettypeDesc()+"\\nindex : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+Integer.toString(var.getindex())+"\" shape=box];\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(var.getstart()))+" [label=\"start\" style=dotted];\n              "/* Generated by TOM (version 2.4rc0): Do not edit this file */+id+" -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId((TInstructionList)labelMap.get(var.getend()))+" [label=\"end\" style=dotted];\n              "



);
        } catch(IOException e) {
          e.printStackTrace();
        }
       } } } }tom_match14_1_end1=tom_get_tail_LocalVariableList_TLocalVariableList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

  }

  /**
   * Used to pass the stored instruction as a strategy parameter.
   */
  private static class InsWrapper { public TInstructionList ins; }
  

  /**
   * Assign the current instruction node to the given InsWrapper.
   * @param ins the instruction wrapper.
   */
   private static class Assign  extends  tom.library.adt.bytecode.BytecodeBasicStrategy   { private  InsWrapper  ins;  public Assign(  InsWrapper  ins ) { super(tom_make_Identity() ); this.ins=ins; } public  InsWrapper  getins() { return ins;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.library.adt.bytecode.types.TInstructionList  visit_TInstructionList(  tom.library.adt.bytecode.types.TInstructionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.library.adt.bytecode.types.TInstructionList ) { { tom.library.adt.bytecode.types.TInstructionList  tom_match15_1=(( tom.library.adt.bytecode.types.TInstructionList )tom__arg); {boolean tom_match15_tom_anti_constraints_status= true ; { tom.library.adt.bytecode.types.TInstructionList  tom_c=tom_match15_1; if (tom_terms_equal_boolean(tom_match15_tom_anti_constraints_status,  true )) { if ( true ) {

 ins.ins = tom_c;  } } } } } } return super.visit_TInstructionList(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Assign( InsWrapper  t0) { return new Assign(t0); }



  /**
   * Generates a control flow graph for each method of the given class.
   * @param clazz the gom-term subject representing the class.
   */
  public static void classToDot(TClass clazz) {
    Writer w = new BufferedWriter(new OutputStreamWriter(System.out)); 
    TMethodList methods = clazz.getmethods();
     if(methods instanceof  tom.library.adt.bytecode.types.TMethodList ) { { tom.library.adt.bytecode.types.TMethodList  tom_match16_1=(( tom.library.adt.bytecode.types.TMethodList )methods); if ( ( tom_is_fun_sym_MethodList(tom_match16_1) ||  false  ) ) { { tom.library.adt.bytecode.types.TMethodList  tom_match16_1_list1=tom_match16_1; { tom.library.adt.bytecode.types.TMethodList  tom_match16_1_begin1=tom_match16_1_list1; { tom.library.adt.bytecode.types.TMethodList  tom_match16_1_end1=tom_match16_1_list1; { while (!(tom_is_empty_MethodList_TMethodList(tom_match16_1_end1))) {tom_match16_1_list1=tom_match16_1_end1; { { tom.library.adt.bytecode.types.TMethod  tom_x=tom_get_head_MethodList_TMethodList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_MethodList_TMethodList(tom_match16_1_list1); {boolean tom_match16_tom_anti_constraints_status= true ; if (tom_terms_equal_boolean(tom_match16_tom_anti_constraints_status,  true )) { if ( true ) {

        try {
          TMethodInfo info = tom_x.getinfo();
          w.write("digraph "/* Generated by TOM (version 2.4rc0): Do not edit this file */+info.getname()+" {\n              "
);

          // Print a root node with the method name and descriptor. Add a link to the first instruction if any.
          w.write("method [label=\"method : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+info.getname()+"\\ndescriptor : "/* Generated by TOM (version 2.4rc0): Do not edit this file */+ToolBox.buildDescriptor(info.getdesc())+"\" shape=box];\n              "
);
          if(!tom_x.getcode().isEmptyCode()) {
            TInstructionList ins = tom_x.getcode().getinstructions();
            if(!ins.isEmptyInstructionList()) {
              w.write("method -> "/* Generated by TOM (version 2.4rc0): Do not edit this file */+getDotId(ins)+"\n                  "
);
            }

            // Compute the label map to allow us to retrieve an instruction from a label.
            HashMap labelMap = new HashMap();
            tom_make_TopDown(tom_make_BuildLabelMap(labelMap)).apply(ins);

            // Create a wrapper to pass a parent node to its children.
            InsWrapper insWrapper = new InsWrapper();

            // This strategy run through all node. For each of them, the node is printed.
            // Links between the current node and its children are printed by passing the parent to each of them.
            // AllCfg allows us to get all the children of the current node.
            MuStrategy toDot = tom_make_TopDown(tom_make_Try(tom_make_Sequence(tom_make_PrintDotNode(w),tom_make_Sequence(tom_make_Assign(insWrapper),tom_make_AllCfg(tom_make_PrintDotLink(w,insWrapper),labelMap)))))







;

            toDot.apply(ins);

            // Prints the try/catch/finally blocks.
            printTryCatchBlocks(tom_x.getcode().gettryCatchBlocks(), labelMap, w);

            // Prints the local variables informations.
            printLocalVariables(tom_x.getcode().getlocalVariables(), labelMap, w);
          }

          w.write("}\n");
          w.flush();
        } catch(IOException e) {
          e.printStackTrace();
        }
       } } } }tom_match16_1_end1=tom_get_tail_MethodList_TMethodList(tom_match16_1_end1); } }tom_match16_1_list1=tom_match16_1_begin1; } } } } } } }

  }


  /**
   * Generates the dot control flow graphs for each method of the specified class.
   * Usage : java bytecode.CFGViewer <class name>
   * Ex: java bytecode.CFGViewer bytecode.Subject
   * @param args args[0] : the class name
   */
    public static void main(String[] args) {
      if(args.length <= 0) {
        System.out.println("Usage : java bytecode.CFGViewer <class name>\nEx: java bytecode.CFGViewer bytecode.Subject");
        return;
      }
      BytecodeReader cg = new BytecodeReader(args[0]);
      TClass c = cg.getTClass();
      classToDot(c);
    }
  }

