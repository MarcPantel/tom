/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Copyright (c) 2000-2007, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *	- Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.  
 *	- Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *	- Neither the name of the INRIA nor the names of its
 *	contributors may be used to endorse or promote products derived from
 *	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package tom.library.bytecode;

import org.objectweb.asm.*;

import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;
import java.io.IOException;

import tom.library.bytecode.*;
import tom.library.adt.bytecode.*;
import tom.library.adt.bytecode.types.*;


public class BytecodeReader implements ClassVisitor {
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_double(double t1, double t2) { return  (t1==t2) ;}private static boolean tom_is_sort_double(double t) { return  true ;} /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_long(long t1, long t2) { return  (t1==t2) ;}private static boolean tom_is_sort_long(long t) { return  true ;} /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_float(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_float(Object t) { return  true ;} private static boolean tom_equal_term_TLocalVariable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariable(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariable ;}private static boolean tom_equal_term_TMethodCode(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodCode(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodCode ;}private static boolean tom_equal_term_TMethodList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodList ;}private static boolean tom_equal_term_TSignature(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TSignature(Object t) { return  t instanceof tom.library.adt.bytecode.types.TSignature ;}private static boolean tom_equal_term_TInnerClassInfo(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInnerClassInfo(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInnerClassInfo ;}private static boolean tom_equal_term_TAccess(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TAccess(Object t) { return  t instanceof tom.library.adt.bytecode.types.TAccess ;}private static boolean tom_equal_term_TReturnDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TReturnDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TReturnDescriptor ;}private static boolean tom_equal_term_TStringList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TStringList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TStringList ;}private static boolean tom_equal_term_TMethod(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethod(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethod ;}private static boolean tom_equal_term_TLabelList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabelList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabelList ;}private static boolean tom_equal_term_TInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstruction(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstruction ;}private static boolean tom_equal_term_TClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TClass(Object t) { return  t instanceof tom.library.adt.bytecode.types.TClass ;}private static boolean tom_equal_term_TInnerClassInfoList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInnerClassInfoList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInnerClassInfoList ;}private static boolean tom_equal_term_TValue(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TValue(Object t) { return  t instanceof tom.library.adt.bytecode.types.TValue ;}private static boolean tom_equal_term_TField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TField(Object t) { return  t instanceof tom.library.adt.bytecode.types.TField ;}private static boolean tom_equal_term_TTryCatchBlockList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlockList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlockList ;}private static boolean tom_equal_term_TType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TType(Object t) { return  t instanceof tom.library.adt.bytecode.types.TType ;}private static boolean tom_equal_term_TClassInfo(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TClassInfo(Object t) { return  t instanceof tom.library.adt.bytecode.types.TClassInfo ;}private static boolean tom_equal_term_TAccessList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TAccessList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TAccessList ;}private static boolean tom_equal_term_TMethodDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodDescriptor ;}private static boolean tom_equal_term_TFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TFieldList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TFieldList ;}private static boolean tom_equal_term_TOuterClassInfo(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TOuterClassInfo(Object t) { return  t instanceof tom.library.adt.bytecode.types.TOuterClassInfo ;}private static boolean tom_equal_term_TFieldDescriptor(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TFieldDescriptor(Object t) { return  t instanceof tom.library.adt.bytecode.types.TFieldDescriptor ;}private static boolean tom_equal_term_TTryCatchBlock(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TTryCatchBlock(Object t) { return  t instanceof tom.library.adt.bytecode.types.TTryCatchBlock ;}private static boolean tom_equal_term_TintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TintList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TintList ;}private static boolean tom_equal_term_TMethodInfo(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TMethodInfo(Object t) { return  t instanceof tom.library.adt.bytecode.types.TMethodInfo ;}private static boolean tom_equal_term_THandler(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_THandler(Object t) { return  t instanceof tom.library.adt.bytecode.types.THandler ;}private static boolean tom_equal_term_TInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TInstructionList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TInstructionList ;}private static boolean tom_equal_term_TFieldDescriptorList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TFieldDescriptorList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TFieldDescriptorList ;}private static boolean tom_equal_term_TLabel(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLabel(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLabel ;}private static boolean tom_equal_term_TLocalVariableList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TLocalVariableList(Object t) { return  t instanceof tom.library.adt.bytecode.types.TLocalVariableList ;}private static  tom.library.adt.bytecode.types.TSignature  tom_make_Signature( String  t0) { return  tom.library.adt.bytecode.types.tsignature.Signature.make(t0) ; }private static  tom.library.adt.bytecode.types.TInnerClassInfo  tom_make_InnerClassInfo( String  t0,  String  t1,  String  t2,  tom.library.adt.bytecode.types.TAccessList  t3) { return  tom.library.adt.bytecode.types.tinnerclassinfo.InnerClassInfo.make(t0, t1, t2, t3) ; }private static  tom.library.adt.bytecode.types.TClass  tom_make_Class( tom.library.adt.bytecode.types.TClassInfo  t0,  tom.library.adt.bytecode.types.TFieldList  t1,  tom.library.adt.bytecode.types.TMethodList  t2) { return  tom.library.adt.bytecode.types.tclass.Class.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TField  tom_make_Field( tom.library.adt.bytecode.types.TAccessList  t0,  String  t1,  tom.library.adt.bytecode.types.TFieldDescriptor  t2,  tom.library.adt.bytecode.types.TSignature  t3,  tom.library.adt.bytecode.types.TValue  t4) { return  tom.library.adt.bytecode.types.tfield.Field.make(t0, t1, t2, t3, t4) ; }private static  tom.library.adt.bytecode.types.TClassInfo  tom_make_ClassInfo( String  t0,  tom.library.adt.bytecode.types.TSignature  t1,  tom.library.adt.bytecode.types.TAccessList  t2,  String  t3,  tom.library.adt.bytecode.types.TStringList  t4,  tom.library.adt.bytecode.types.TInnerClassInfoList  t5,  tom.library.adt.bytecode.types.TOuterClassInfo  t6) { return  tom.library.adt.bytecode.types.tclassinfo.ClassInfo.make(t0, t1, t2, t3, t4, t5, t6) ; }private static  tom.library.adt.bytecode.types.TOuterClassInfo  tom_make_OuterClassInfo( String  t0,  String  t1,  tom.library.adt.bytecode.types.TMethodDescriptor  t2) { return  tom.library.adt.bytecode.types.touterclassinfo.OuterClassInfo.make(t0, t1, t2) ; }private static  tom.library.adt.bytecode.types.TOuterClassInfo  tom_make_EmptyOuterClassInfo() { return  tom.library.adt.bytecode.types.touterclassinfo.EmptyOuterClassInfo.make() ; }private static boolean tom_is_fun_sym_MethodList( tom.library.adt.bytecode.types.TMethodList  t) { return  ((t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) || (t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList)) ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_empty_list_MethodList() { return  tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() ; }private static  tom.library.adt.bytecode.types.TMethodList  tom_cons_list_MethodList( tom.library.adt.bytecode.types.TMethod  e,  tom.library.adt.bytecode.types.TMethodList  l) { return  tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TMethod  tom_get_head_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.getHeadMethodList() ;}private static  tom.library.adt.bytecode.types.TMethodList  tom_get_tail_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.getTailMethodList() ;}private static boolean tom_is_empty_MethodList_TMethodList( tom.library.adt.bytecode.types.TMethodList  l) { return  l.isEmptyMethodList() ;}   private static   tom.library.adt.bytecode.types.TMethodList  tom_append_list_MethodList( tom.library.adt.bytecode.types.TMethodList l1,  tom.library.adt.bytecode.types.TMethodList  l2) {     if( l1.isEmptyMethodList() ) {       return l2;     } else if( l2.isEmptyMethodList() ) {       return l1;     } else if(  l1.getTailMethodList() .isEmptyMethodList() ) {       return tom_cons_list_MethodList( l1.getHeadMethodList() ,l2);     } else {       return tom_cons_list_MethodList( l1.getHeadMethodList() ,tom_append_list_MethodList( l1.getTailMethodList() ,l2));     }   }   private static   tom.library.adt.bytecode.types.TMethodList  tom_get_slice_MethodList( tom.library.adt.bytecode.types.TMethodList  begin,  tom.library.adt.bytecode.types.TMethodList  end, tom.library.adt.bytecode.types.TMethodList  tail) {     if(tom_equal_term_TMethodList(begin,end)) {       return tail;     } else {       return tom_cons_list_MethodList( begin.getHeadMethodList() ,( tom.library.adt.bytecode.types.TMethodList )tom_get_slice_MethodList( begin.getTailMethodList() ,end,tail));     }   }   private static boolean tom_is_fun_sym_InnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList  t) { return  ((t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList) || (t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList)) ;}private static  tom.library.adt.bytecode.types.TInnerClassInfoList  tom_empty_list_InnerClassInfoList() { return  tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList.make() ; }private static  tom.library.adt.bytecode.types.TInnerClassInfoList  tom_cons_list_InnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfo  e,  tom.library.adt.bytecode.types.TInnerClassInfoList  l) { return  tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TInnerClassInfo  tom_get_head_InnerClassInfoList_TInnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList  l) { return  l.getHeadInnerClassInfoList() ;}private static  tom.library.adt.bytecode.types.TInnerClassInfoList  tom_get_tail_InnerClassInfoList_TInnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList  l) { return  l.getTailInnerClassInfoList() ;}private static boolean tom_is_empty_InnerClassInfoList_TInnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList  l) { return  l.isEmptyInnerClassInfoList() ;}   private static   tom.library.adt.bytecode.types.TInnerClassInfoList  tom_append_list_InnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList l1,  tom.library.adt.bytecode.types.TInnerClassInfoList  l2) {     if( l1.isEmptyInnerClassInfoList() ) {       return l2;     } else if( l2.isEmptyInnerClassInfoList() ) {       return l1;     } else if(  l1.getTailInnerClassInfoList() .isEmptyInnerClassInfoList() ) {       return tom_cons_list_InnerClassInfoList( l1.getHeadInnerClassInfoList() ,l2);     } else {       return tom_cons_list_InnerClassInfoList( l1.getHeadInnerClassInfoList() ,tom_append_list_InnerClassInfoList( l1.getTailInnerClassInfoList() ,l2));     }   }   private static   tom.library.adt.bytecode.types.TInnerClassInfoList  tom_get_slice_InnerClassInfoList( tom.library.adt.bytecode.types.TInnerClassInfoList  begin,  tom.library.adt.bytecode.types.TInnerClassInfoList  end, tom.library.adt.bytecode.types.TInnerClassInfoList  tail) {     if(tom_equal_term_TInnerClassInfoList(begin,end)) {       return tail;     } else {       return tom_cons_list_InnerClassInfoList( begin.getHeadInnerClassInfoList() ,( tom.library.adt.bytecode.types.TInnerClassInfoList )tom_get_slice_InnerClassInfoList( begin.getTailInnerClassInfoList() ,end,tail));     }   }   private static boolean tom_is_fun_sym_FieldList( tom.library.adt.bytecode.types.TFieldList  t) { return  ((t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsFieldList) || (t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList)) ;}private static  tom.library.adt.bytecode.types.TFieldList  tom_empty_list_FieldList() { return  tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList.make() ; }private static  tom.library.adt.bytecode.types.TFieldList  tom_cons_list_FieldList( tom.library.adt.bytecode.types.TField  e,  tom.library.adt.bytecode.types.TFieldList  l) { return  tom.library.adt.bytecode.types.tfieldlist.ConsFieldList.make(e,l) ; }private static  tom.library.adt.bytecode.types.TField  tom_get_head_FieldList_TFieldList( tom.library.adt.bytecode.types.TFieldList  l) { return  l.getHeadFieldList() ;}private static  tom.library.adt.bytecode.types.TFieldList  tom_get_tail_FieldList_TFieldList( tom.library.adt.bytecode.types.TFieldList  l) { return  l.getTailFieldList() ;}private static boolean tom_is_empty_FieldList_TFieldList( tom.library.adt.bytecode.types.TFieldList  l) { return  l.isEmptyFieldList() ;}   private static   tom.library.adt.bytecode.types.TFieldList  tom_append_list_FieldList( tom.library.adt.bytecode.types.TFieldList l1,  tom.library.adt.bytecode.types.TFieldList  l2) {     if( l1.isEmptyFieldList() ) {       return l2;     } else if( l2.isEmptyFieldList() ) {       return l1;     } else if(  l1.getTailFieldList() .isEmptyFieldList() ) {       return tom_cons_list_FieldList( l1.getHeadFieldList() ,l2);     } else {       return tom_cons_list_FieldList( l1.getHeadFieldList() ,tom_append_list_FieldList( l1.getTailFieldList() ,l2));     }   }   private static   tom.library.adt.bytecode.types.TFieldList  tom_get_slice_FieldList( tom.library.adt.bytecode.types.TFieldList  begin,  tom.library.adt.bytecode.types.TFieldList  end, tom.library.adt.bytecode.types.TFieldList  tail) {     if(tom_equal_term_TFieldList(begin,end)) {       return tail;     } else {       return tom_cons_list_FieldList( begin.getHeadFieldList() ,( tom.library.adt.bytecode.types.TFieldList )tom_get_slice_FieldList( begin.getTailFieldList() ,end,tail));     }   }    


  public BytecodeReader(String className){
    super();
    try {
      ClassAdapter ca = new ClassAdapter(this);
      ClassReader cr = new ClassReader(className);
      cr.accept(ca, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
    } catch(IOException io) {
      System.err.println("Class not found : " + className);
    }
  }

  private TClass clazz;

  public TClass getTClass() {
    return clazz;
  }

  public void appendMethod(TMethod method){
    TMethodList l = clazz.getmethods();
    clazz = clazz.setmethods(tom_append_list_MethodList(l,tom_cons_list_MethodList(method,tom_empty_list_MethodList())));
  }

  public void appendField(TField field) {
    TFieldList l = clazz.getfields();
    clazz = clazz.setfields(tom_append_list_FieldList(l,tom_cons_list_FieldList(field,tom_empty_list_FieldList())));
  }

  public void appendInnerClass(TInnerClassInfo info) {
    TClassInfo i = clazz.getinfo();
    TInnerClassInfoList l = i.getinnerClasses();
    clazz = clazz.setinfo(i.setinnerClasses(tom_append_list_InnerClassInfoList(l,tom_cons_list_InnerClassInfoList(info,tom_empty_list_InnerClassInfoList()))));
  }

  public void visit(
      int version,
      int access,
      String name,
      String signature,
      String superName,
      String[] interfaces) {
    TClassInfo info = tom_make_ClassInfo(name,tom_make_Signature(signature),ToolBox.buildTAccess(access),superName,ToolBox.buildTStringList(interfaces),tom_empty_list_InnerClassInfoList(),tom_make_EmptyOuterClassInfo());
    clazz = tom_make_Class(info,tom_empty_list_FieldList(),tom_empty_list_MethodList());
  }

  public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
    // TODO
    return null;
  }

  public void visitAttribute(Attribute attr) {
    // TODO
  }

  public void visitEnd() {
    // do nothing
  }

  public FieldVisitor visitField(
      int access,
      String name,
      String desc,
      String signature,
      Object value) {
    TField field = tom_make_Field(ToolBox.buildTAccess(access),name,ToolBox.buildTFieldDescriptor(desc),tom_make_Signature(signature),ToolBox.buildTValue(value));
    appendField(field);

    return null;
  }

  public void visitInnerClass(
      String name,
      String outerName,
      String innerName,
      int access) {
    TInnerClassInfo info = tom_make_InnerClassInfo(name,outerName,innerName,ToolBox.buildTAccess(access));
    appendInnerClass(info);
  }

  public MethodVisitor visitMethod(
      int access,
      String name,
      String desc,
      String signature,
      String[] exceptions) {
    return new TMethodGenerator(this, ToolBox.buildTAccess(access), name, ToolBox.buildTMethodDescriptor(desc), tom_make_Signature(signature), ToolBox.buildTStringList(exceptions));
  }

  public void visitOuterClass(String owner, String name, String desc) {
    TOuterClassInfo info = tom_make_OuterClassInfo(owner,name,ToolBox.buildTMethodDescriptor(desc));
    TClassInfo i = clazz.getinfo();
    clazz = clazz.setinfo(i.setouterClass(info));
  }

  public void visitSource(String source, String debug) {
    // do nothing
  }
}

