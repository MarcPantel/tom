/* Generated by TOM (version 2.1 - under development): Do not edit this file */package jjtraveler;
import jjtraveler.reflective.VisitableVisitor;

public class TravelerFactory {
  /* Generated by TOM (version 2.1 - under development): Do not edit this file */public Object tom_get_fun_sym_VisitableVisitor( VisitableVisitor t) { return null; }public boolean tom_cmp_fun_sym_VisitableVisitor(Object s1, Object s2) { return  false; }public Object tom_get_subterm_VisitableVisitor( VisitableVisitor t, int n) { return null; }public boolean tom_terms_equal_VisitableVisitor(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Identity( VisitableVisitor t) { return  (t instanceof jjtraveler.Identity) ; }public  VisitableVisitor tom_make_Identity() { return  new jjtraveler.Identity() ; }public boolean tom_is_fun_sym_Fail( VisitableVisitor t) { return  (t instanceof jjtraveler.Fail) ; }public  VisitableVisitor tom_make_Fail() { return  new jjtraveler.Fail() ; }public boolean tom_is_fun_sym_Not( VisitableVisitor t) { return  (t instanceof jjtraveler.Not) ; }public  VisitableVisitor tom_make_Not( VisitableVisitor v) { return  new jjtraveler.Not((VisitableVisitor)v) ; }public boolean tom_is_fun_sym_Sequence( VisitableVisitor t) { return  (t instanceof jjtraveler.Sequence) ; }public  VisitableVisitor tom_make_Sequence( VisitableVisitor v1,  VisitableVisitor v2) { return  new jjtraveler.Sequence((VisitableVisitor)v1,(VisitableVisitor)v2) ; }public boolean tom_is_fun_sym_Choice( VisitableVisitor t) { return  (t instanceof jjtraveler.Choice) ; }public  VisitableVisitor tom_make_Choice( VisitableVisitor v1,  VisitableVisitor v2) { return  new jjtraveler.Choice((VisitableVisitor)v1,(VisitableVisitor)v2) ; }public boolean tom_is_fun_sym_All( VisitableVisitor t) { return  (t instanceof jjtraveler.All) ; }public  VisitableVisitor tom_make_All( VisitableVisitor v) { return  new jjtraveler.All((VisitableVisitor)v) ; }public boolean tom_is_fun_sym_One( VisitableVisitor t) { return  (t instanceof jjtraveler.One) ; }public  VisitableVisitor tom_make_One( VisitableVisitor v) { return  new jjtraveler.One((VisitableVisitor)v) ; }public boolean tom_is_fun_sym_IfThenElse( VisitableVisitor t) { return  (t instanceof jjtraveler.IfThenElse) ; }public  VisitableVisitor tom_make_IfThenElse( VisitableVisitor v1,  VisitableVisitor v2,  VisitableVisitor v3) { return  new jjtraveler.IfThenElse((VisitableVisitor)v1,(VisitableVisitor)v2,(VisitableVisitor)v3) ; }public boolean tom_is_fun_sym_MuVar( VisitableVisitor t) { return  (t instanceof jjtraveler.MuVar) ; }public  VisitableVisitor tom_make_MuVar(String name) { return  new jjtraveler.MuVar(name) ; } 

  public VisitableVisitor mu(VisitableVisitor var, VisitableVisitor v) {
    return jjtraveler.MuVar.mu(var,v);
  }

  public VisitableVisitor x() {
    return tom_make_MuVar("x");
  }

  public VisitableVisitor Try(VisitableVisitor v) {
    return tom_make_Choice(v,tom_make_Identity());
  }
  
  public VisitableVisitor BottomUp(VisitableVisitor v) {
    return mu(x(),tom_make_Sequence(tom_make_All(x()),v));
  }

  public VisitableVisitor OnceBottomUp(VisitableVisitor v) {
    return mu(x(),tom_make_Choice(tom_make_One(x()),v));
  }

  public VisitableVisitor Innermost(VisitableVisitor v) {
    return mu(x(),tom_make_Sequence(tom_make_All(x()),tom_make_Choice(tom_make_Sequence(v,x()),tom_make_Identity())));
  }

  public VisitableVisitor Repeat(VisitableVisitor v) {
    return mu(x(),tom_make_Choice(tom_make_Sequence(v,x()),tom_make_Identity()));
  }

}
