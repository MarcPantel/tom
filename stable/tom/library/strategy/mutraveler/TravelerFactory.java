/* Generated by TOM (version 2.1): Do not edit this file */package tom.library.strategy.mutraveler;
import jjtraveler.reflective.VisitableVisitor;

public class TravelerFactory {
  /* Generated by TOM (version 2.1): Do not edit this file */private Object tom_get_fun_sym_VisitableVisitor( VisitableVisitor t) { return null; }private boolean tom_cmp_fun_sym_VisitableVisitor(Object s1, Object s2) { return  false; }private Object tom_get_subterm_VisitableVisitor( VisitableVisitor t, int n) { return null; }private boolean tom_terms_equal_VisitableVisitor(Object t1, Object t2) { return t1.equals(t2); }private boolean tom_is_fun_sym_Identity( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Identity) ; }private  VisitableVisitor tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private boolean tom_is_fun_sym_Fail( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Fail) ; }private  VisitableVisitor tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private boolean tom_is_fun_sym_Not( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Not) ; }private  VisitableVisitor tom_make_Not( VisitableVisitor v) { return  new tom.library.strategy.mutraveler.Not((VisitableVisitor)v) ; }private boolean tom_is_fun_sym_Sequence( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Sequence) ; }private  VisitableVisitor tom_make_Sequence( VisitableVisitor first,  VisitableVisitor then) { return  new tom.library.strategy.mutraveler.Sequence((VisitableVisitor)first,(VisitableVisitor)then) ; }private boolean tom_is_fun_sym_Choice( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Choice) ; }private  VisitableVisitor tom_make_Choice( VisitableVisitor first,  VisitableVisitor then) { return  new tom.library.strategy.mutraveler.Choice((VisitableVisitor)first,(VisitableVisitor)then) ; }private boolean tom_is_fun_sym_All( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.All) ; }private  VisitableVisitor tom_make_All( VisitableVisitor v) { return  new tom.library.strategy.mutraveler.All((VisitableVisitor)v) ; }private boolean tom_is_fun_sym_One( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.One) ; }private  VisitableVisitor tom_make_One( VisitableVisitor v) { return  new tom.library.strategy.mutraveler.One((VisitableVisitor)v) ; }private boolean tom_is_fun_sym_Some( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Some) ; }private  VisitableVisitor tom_make_Some( VisitableVisitor v) { return  new tom.library.strategy.mutraveler.Some((VisitableVisitor)v) ; }private boolean tom_is_fun_sym_IfThenElse( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.IfThenElse) ; }private  VisitableVisitor tom_make_IfThenElse( VisitableVisitor condition,  VisitableVisitor trueCase,  VisitableVisitor falseCase) { return  new tom.library.strategy.mutraveler.IfThenElse((VisitableVisitor)condition,(VisitableVisitor)trueCase,(VisitableVisitor)falseCase) ; }private boolean tom_is_fun_sym_MuVar( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.MuVar) ; }private  VisitableVisitor tom_make_MuVar(String name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private boolean tom_is_fun_sym_Pselect( VisitableVisitor t) { return  (t instanceof tom.library.strategy.mutraveler.Pselect) ; }private  VisitableVisitor tom_make_Pselect(int p, int q,  VisitableVisitor first,  VisitableVisitor then) { return  new tom.library.strategy.mutraveler.Pselect(p,q,(VisitableVisitor)first,(VisitableVisitor)then) ; }  

  public VisitableVisitor mu(VisitableVisitor var, VisitableVisitor v) {
    return tom.library.strategy.mutraveler.MuVar.mu(var,v);
  }

  public VisitableVisitor x() {
    return tom_make_MuVar("x");
  }

  public VisitableVisitor Try(VisitableVisitor v) {
    return tom_make_Choice(v,tom_make_Identity());
  }
  
  public VisitableVisitor BottomUp(VisitableVisitor v) {
    return mu(x(),tom_make_Sequence(tom_make_All(x()),v));
  }

  public VisitableVisitor OnceBottomUp(VisitableVisitor v) {
    return mu(x(),tom_make_Choice(tom_make_One(x()),v));
  }

  public VisitableVisitor Innermost(VisitableVisitor v) {
    return mu(x(),tom_make_Sequence(tom_make_All(x()),tom_make_Choice(tom_make_Sequence(v,x()),tom_make_Identity())));
  }

  public VisitableVisitor Repeat(VisitableVisitor v) {
    return mu(x(),tom_make_Choice(tom_make_Sequence(v,x()),tom_make_Identity()));
  }

  /*
  public VisitableVisitor Pchoice(VisitableVisitor v) {
    return `mu(x(),Choice(Sequence(v,x()),Identity()));
  }
  */

}
