.TH TOM 1
.SH NAME
tom \- a pattern matching compiler

.SH SYNOPSIS
.B tom
.RI [ options ]
.I sources[.t] ...
.br
.B tom.src
.RI [ options ]
.I sources[.t] ...

.SH DESCRIPTION
Tom is a pattern matching compiler, developed at INRIA. Tom is
particularly well-suited for programming various transformations on
trees/terms. The tool can be seen as a Yacc-like compiler translating
patterns into executable pattern matching automata. Similarly to Yacc,
when a match is found, the corresponding semantic action (a sequence
of instructions written in C or Java) is triggered and executed.

.SH OPTIONS
The options are used either to choose the action to be performed or to
configure the building process. They are mostly the same in
.B tom
and
.BR tom.src .

.TP
.BI -X\ <file>
Defines an alternate XML configuration file
.TP
.BI --noTypeCheck
Do not perform type checking
.TP
.BI -D,\ --noDeclaration
Do not generate code for declarations
.TP
.BI -I,\ --import <path>
Path for %include
.TP
.BI -c,\ --cCode
Generate C code
.TP
.BI --camlCode
Generate Caml code
.TP
.BI -d,\ --destdir <directory>
Specify where to place generated files
.TP
.BI --stamp
Use stamp to simulate concrete ADT
.TP
.BI -h,\ --help
Display the list of all available options and exit.
.TP
.BI -i,\ --intermediate
Generates intermediate files
.TP
.BI --noOutput
Do not generate code
.TP
.BI --noWarning
Do not print warning
.TP
.BI --Wall
Print all warnings
.TP
.BI -O,\ --optimize
Generate optimized code
.TP
.BI -o,\ --output <file>
Set output file name
.TP
.BI -p,\ --pretty
Generate readable code
.TP
.BI --noSyntaxCheck
Do not perform syntax checking
.TP
.BI --static
Generate static functions
.TP
.BI -l,\ --lazyType
Use universal type
.TP
.BI -v,\ --verbose
Set verbose mode on
.TP
.BI -V,\ --version
Print version and exit.
.PP

.SH BUGS
Report them all...

This page documents TOM version 2.1-rc2alpha. 
The homepage for TOM can be found at http://tom.loria.fr.

.SH SEE ALSO
.BR javac (1),
.BR java (1)
