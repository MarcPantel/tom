<?xml version="1.0"?>

<project default="junit" basedir=".">
	<property name="classpath" location="../../../src/dist/lib/tom-runtime-full.jar"/>
	<property name="tom.home" location="../../../src/dist"/>
	<property name="test.dir" location="."/>
	<property name="test.build" location="${test.dir}/build"/>
	<property name="test.gen" location="${test.dir}/gen"/>

	<import file="${tom.home}/lib/tom-common.xml"/>

  	<path id="tom.classpath">
    		<path refid="external.classpath"/>
   		<fileset dir="${tom.home}/lib">
   			<include name="**/*.jar"/>
    		</fileset>
 	</path>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
    		<classpath>
          		<fileset file="${tom.home}/lib/compiletime/ant-contrib-1.0b3.jar"/>
 		</classpath>
	</taskdef>

	<target name="clean">
		<delete dir="${test.build}"/>
		<delete dir="${test.gen}"/>
	</target>

	<target name="init" depends="clean, tom.init">
		<mkdir dir="${test.build}"/>
		<mkdir dir="${test.gen}"/>
		<javac srcdir="${test.dir}" destdir="${test.build}" includeantruntime="false"/>	
	</target>	

	<target name="junit.all">
		<antcallback target="junit" return="failure"/>
		<antcallback target="junit.withType" return="failure"/>
		<antcallback target="junit.metalevel" return="failure"/>
		<antcallback target="junit.ordered" return="failure"/>
		<antcallback target="junit.orderedMetalevel" return="failure"/>
	<!--	<antcallback target="junit.orderedWithAP" return="failure"/>
		<antcallback target="junit.withAP" return="failure"/>
		<antcallback target="junit.withAPMetalevel" return="failure"/>
		<antcallback target="junit.orderedWithType" return="failure"/>   -->

		<if>
			<isset property="failure"/>
			<then>
				<echo> FAILURE ! </echo>
			</then>
			<else>
				<echo> SUCCESS </echo>
			</else>
		</if>
	</target>

	<target name="junit" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
			
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.withType" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
					<arg value="-withType"/>	
			
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="test"/>
	</target>

	<target name="junit.metalevel" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-metalevel"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.ordered" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-ordered"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.withAP" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-withAP"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>


	<target name="junit.orderedWithType" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-ordered"/>
					<arg value="-withType"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.orderedMetalevel" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-ordered"/>
					<arg value="-metalevel"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.orderedWithAP" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-ordered"/>
					<arg value="-withAP"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="junit.withAPMetalevel" depends="init">
		<for param="file"> 
			<path>
				<fileset dir="${test.dir}" includes="*.ns"/>
			</path>
			<sequential>
				<basename property="nsNameOf@{file}" file="@{file}" suffix=".ns"/>
				<java classpath="../build:${classpath}" classname="sa.Main" fork="true">
					<arg value="-i"/>
					<arg file="@{file}"/>
					<arg value="-withAP"/>
					<arg value="-metalevel"/>
					<arg value="-d"/>
					<arg value="${test.gen}"/>
					<arg value="-tom"/>
					<arg value="Main${nsNameOf@{file}}"/>
	        		</java>
			</sequential>
		</for>
		<antcallback target="runTests" return="failure"/>
	</target>

	<target name="tomSrc">
		<tom.preset nowarn="true" srcdir="${test.gen}" destdir="${test.gen}"> 
   			<include name="*.t"/>
			<exclude name="*Test*.t"/> 
    		</tom.preset>
	</target> 

	<target name="tomTest" depends="tomSrc">
		<tom.preset nowarn="true" srcdir="${test.dir}" destdir="${test.gen}">
			<include name="*Test*.t"/>
		</tom.preset>
	</target>
	
	<target name="compile" depends="tomTest">
		<javac classpath="${test.dir}:${tom.home}/lib/tom-runtime-full.jar:${tom.home}/lib/compiletime/junit.jar" srcdir="${test.gen}" destdir="${test.build}" includeantruntime="false"/>
	</target>	
	
	<target name="runTests" depends="compile">
		<for param="file">
			<path>
				<fileset dir="${test.build}" includes="*Test*.class"/>
			</path>
			<sequential>
				<basename property="classOf@{file}" file="@{file}" suffix=".class"/>
				<echo> Running test : ${classOf@{file}} </echo>
				<java classpath=".:${test.build}:${tom.home}/lib/tom-runtime-full.jar:${tom.home}/lib/compiletime/junit.jar" classname="org.junit.runner.JUnitCore" fork="true" resultproperty="success">
					<arg value="${classOf@{file}}"/>
				</java> 
				<if>
					<equals arg1="${success}" arg2="1"/>
					<then>
						<property name="failure" value="false"/>
					</then>
				</if>		
			</sequential>
		</for>
	</target>
</project>
