// // Example ex:encodeElem
// let S=signature {Zero:0, Succ:1, Plus:2} in
// let r1 = { Plus(Zero(),x) -> x } in 
// r1
// // on Plus(Zero(),Succ(Zero()))
// // on Zero()


// // Example ex:
// let S=signature {Zero:0, Succ:1, Plus:2} in
// let r1 = { Plus(Zero(),x) -> x } in 
// mu y. ( (r1 ; y) <+ identity )
// // mu y.(r1 ; ( y <+ identity ) ) 
// // r1;r1
// // all(r1)
// // on Plus(Zero(),Succ(Zero()))
// // on Plus(Zero(),Plus(Zero(),Succ(Zero())))
// // on Zero()


// // Example ex:
// let S=signature {Zero:0, Succ:1, Plus:2} in
// let r1 = { Plus(Zero(),x) -> x } in 
// all(r1)
// // on Plus(Zero(),Succ(Zero()))
// // on Plus(Zero(),Plus(Zero(),Succ(Zero())))
// // on Zero()


// repeat(otd(r1))
// let S=signature {a:0, b:0, f:1} in
// let r1 = { b() -> f(b()) } in 
// let otd = mu y.(r1<+one(y)) in
// mu x .((otd;x) <+ identity)


// // repeat(obu(r1))
//  let S=signature {a:0, b:0, f:2} in
//  let r1 = { f(x,x) -> f(b(),a()) } in 
// //  let obu = mu y.(one(y)<+r1) in
// //  mu x .((obu;x) <+ identity)
// r1

// // // td(try(r1))
// let S=signature {a:0, b:0, f:1} in
// // let r1 = { a() -> f(a()) } in 
// let r1 = { f(x) -> f(f(x)) } in 
// // let bu = mu y.(all(y);(r1<+identity)) in
// let td = mu y.((r1<+identity);all(y)) in
// // bu
// td



//let S=signature {A:0, B:0, Plus:2, Mult:2} in
//let r1 = { Mult(x,Plus(y,z)) -> Plus(Mult(x,y),Mult(x,z)) } in 
//let r2 = { Mult(Plus(y,z),x) -> Plus(Mult(y,x),Mult(z,x)) } in 
//let r3 = { Plus(Mult(x,y),Mult(x,z)) -> Mult(x,Plus(y,z)) } in 
//let r4 = { Plus(Mult(y,x),Mult(z,x)) -> Mult(Plus(y,z),x) } in 
//let obu12 = mu y.(one(y)<+(r1<+r2)) in
//let repeat12 = mu x .((obu12;x) <+ identity) in
//let obu34 = mu y.(one(y)<+(r3<+r4)) in
//let repeat34 = mu x .((obu34;x) <+ identity) in
//repeat12;repeat34


//let S=signature {Zero:0, Succ:1, Plus:2, Mult:2} in
//let r1 = { Mult(x,Plus(y,z)) -> Plus(Mult(x,y),Mult(x,z)) } in 
// let r2 = { Mult(Plus(y,z),x) -> Plus(Mult(y,x),Mult(z,x)) } in 
//let r3 = { Plus(Mult(x,y),Mult(x,z)) -> Mult(x,Plus(y,z)) } in 
// let r4 = { Plus(Mult(y,x),Mult(z,x)) -> Mult(Plus(y,z),x) } in 
//let obu12 = mu y.(one(y)<+r1) in
//let repeat12 = mu x .((obu12;x) <+ identity) in
//let obu34 = mu y.(one(y)<+r3) in
//let repeat34 = mu x .((obu34;x) <+ identity) in
//repeat12;repeat34

// Plus(Mult(Succ(Zero()),Plus(Succ(Zero()),Succ(Zero()))),Mult(Succ(Zero()),Plus(Succ(Zero()),Succ(Zero()))))
// Plus(Mult(Succ(Zero()),Plus(Succ(Zero()),Succ(Zero()))),Mult(Plus(Succ(Zero()),Succ(Zero())),Succ(Zero())))

let S=signature {A:0, S:1, Plus:2, Mult:2} in
let r1 = { Mult(x,Plus(y,z)) -> Plus(Mult(x,y),Mult(x,z)) } in 
let r3 = { Plus(Mult(x,y),Mult(x,z)) -> Mult(x,Plus(y,z)) } in 
let td1 = mu y.((r1<+identity);all(y)) in
let obu1 = mu y.(one(y)<+r1) in
let obu3 = mu y.(one(y)<+r3) in
//let td3 = mu y.((r3<+identity);all(y)) in
//let bu3 = mu y.(all(y);(r3<+identity)) in
let repeatobu1 = mu x .((obu1;x) <+ identity) in
let repeatobu3 = mu x .((obu3;x) <+ identity) in
//let repeat1 = mu x .((obu1;x) <+ identity) in
//let repeat3 = mu x .((r3;x) <+ identity) in
// let rbu3 = mu y.(all(y);((r3;all(y))<+identity)) in
//rbu3
//td1 ; bu3
//otd1 ; bu3
//td1 //; repeatobu3
repeatobu1

// repeat(obu(r1)) : ?
// repeat(otd(r1)) : ?
// repeat(r1) : OK
// td(r1) ; bu(r3) : OK
// repeat(td(r1)) : contre exemple

// Plus(Mult(A(),Mult(A(),A())),Mult(A(),Mult(A(),A())))
//Appl(symb_S,Cons( Appl(symb_Mult(), Cons( Appl(symb_A(),Nil()), Cons( Appl(symb_Plus(), Cons( Appl(symb_A(),Nil()), Cons( Appl(symb_A(),Nil()), Nil()))), Nil()))), Nil()))
