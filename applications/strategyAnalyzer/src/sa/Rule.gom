module sa.Rule
imports String int
abstract syntax

// New AST
Program = Program(productionList:ProductionList, functionList:ProductionList, stratList:StratDeclList, trs:Trs)
Production = SortType(Type:GomType,AlternativeList:AlternativeList)
ProductionList = ConcProduction(Production*)

Alternative = Alternative(Name:String, DomainList:FieldList, Codomain:GomType)
AlternativeList = ConcAlternative(Alternative*)
GomType = GomType(Name:String)
GomTypeList = ConcGomType(GomType*)
Field = UnamedField(FieldType:GomType)
FieldList = ConcField(Field*)

StratDecl = StratDecl(Name:String, ParamList:ParamList, Body:Strat)
StratDeclList = ConcStratDecl(StratDecl*)
Param = Param(Name:String)
ParamList = ConcParam(Param*)

TypeEnvironment = EmptyEnvironment()
                | PushEnvironment(Name:String, Type:GomType, Env:TypeEnvironment)

Trs = | Otrs(list:RuleList)
      | Trs(list:RuleList)
      | EmptyTrs()

RuleList = ConcRule(Rule*)

Rule = Rule(lhs:Term,rhs:Term)
     | ConditionalRule(lhs:Term,rhs:Term,cond:Condition)

Symbol = Symbol(name:String,arity:int)

Term = Appl(symbol:String,args:TermList)
     | Var(name:String)
     | BuiltinInt(i:int)
     | Anti(term:Term)
     | At(term1:Term,term2:Term)
     | Add(addlist:AddList)
     | Sub(term1:Term, term2:Term)
     | Inter(term1:Term, term2:Term)
     | Match(term1:Term, term2:Term)
     | TrueMatch()
     | Empty()

TermList = TermList(Term*)
AddList = ConcAdd(Term*)

Condition = 
          | CondEquals(t1:Term,t2:Term)
          | CondAnd(c1:Condition,c2:Condition)
          | CondNot(c1:Condition)
          | CondTrue()
          | CondFalse()

Strat = StratName(name:String)
      | StratRule(rule:Rule)
      | StratSequence(s1:Strat, s2:Strat)
      | StratChoice(s1:Strat, s2:Strat)
      | StratIdentity()
      | StratFail()
      | StratAll(s:Strat)
      | StratOne(s:Strat)
      | StratTrs(trs:Trs)
      | StratMu(name:String, s:Strat)
      | StratAppl(name:String, args:StratList)

StratList = ConcStrat(Strat*)

module Rule:rules() {
  StratName("Identity") -> StratIdentity()
  StratName("Fail") -> StratFail()

  // CleanAdd
  Add(ConcAdd()) -> Empty()
  Add(ConcAdd(t)) -> t
}

/*
// optim: can be removed
// hooks for PropagateTrueMatch and PropagateEmpty
// needed to use matchConstaint instead of match
Appl:make(f,args) {
  %match(args) {
    TermList(Empty()) -> { return `Empty(); }
    TermList(_,_*) -> { // at least one argument
      boolean ok = true;
      sa.rule.types.Term truematch = `TrueMatch();
      sa.rule.types.TermList tl = `args;
      while(ok && !tl.isEmptyTermList()) {
        ok &= (tl.getHeadTermList() == truematch);
        tl = tl.getTailTermList();
      }
      if(ok) {
        return truematch;
      }
    }

  }
}

// optim: can be removed
// hooks for PropagateEmpty
// needed to use matchConstaint instead of match
TermList:make_insert(e,l) {
  %match(e,l) {
    _      ,TermList(Empty()) -> { return l; }
    Empty(),_                 -> { return `realMake(Empty(),TermList()); }
  }
}
*/

ConcAdd:make_insert(e,l) {
  %match(e) {
    Empty() -> { return l; }
    Add(ConcAdd(L*)) -> { return `ConcAdd(L*,l*); }
  }

  if(!l.isEmptyConcAdd()) {
    int cmp = e.compareToLPO(l.getHeadConcAdd());
    if(cmp == 0) { // eliminate identical elements: t + t -> t
      // optim: can be removed
      return l;
    } else if(cmp > 0) { // recursive insertion
      sa.rule.types.AddList newTail = l.getTailConcAdd();
      return realMake(l.getHeadConcAdd(), `ConcAdd(e,newTail*));
    } else { // head insertion
      return realMake(e,l);
    }
  }
}

