module sa.Rule
imports String int
abstract syntax

Expression = Let(name:String, v:Expression, t:Expression)
           | Set(list:RuleList)
           | Strat(strat:Strat)

ExpressionList = ExpressionList(Expression*)

Term = Appl(symbol:String,args:TermList)
     | Var(name:String)
     | BuiltinInt(i:int)
     | Anti(term:Term)

TermList = TermList(Term*)

Rule = Rule(lhs:Term,rhs:Term)
     | ConditionalRule(lhs:Term,rhs:Term,cond:Condition)

Condition = 
          | CondEquals(t1:Term,t2:Term)

RuleList = RuleList(Rule*)

Strat = RS(name:String)
      | Seq(s1:Strat, s2:Strat)
      | LChoice(s1:Strat, s2:Strat)
      | Identity()
      | Fail()
