import org.eclipse.emf.common.util.*;
import org.eclipse.emf.ecore.*;

import ligneproduitstelephones.*;

import tom.library.sl.*;

class ClassUsingLPTMapping {

  private static boolean tom_equal_term_LigneProduitsTelephones(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_LigneProduitsTelephones(Object t) {return  t instanceof ligneproduitstelephones.LigneProduitsTelephones ;}private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} private static boolean tom_equal_term_Marque(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_Marque(Object t) {return  t instanceof ligneproduitstelephones.Marque ;}private static boolean tom_equal_term_Telephone(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_Telephone(Object t) {return  t instanceof ligneproduitstelephones.Telephone ;}private static boolean tom_equal_term_boolean(boolean t1, boolean t2) {return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) {return  true ;} private static boolean tom_equal_term_OSTelephone(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_OSTelephone(Object t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static boolean tom_is_fun_sym_Android( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static  ligneproduitstelephones.OSTelephone  tom_make_Android() { return  (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "Android") ;}private static boolean tom_is_fun_sym_MACOS( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static  ligneproduitstelephones.OSTelephone  tom_make_MACOS() { return  (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "MACOS") ;}private static boolean tom_is_fun_sym_WINDOWSCE( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static boolean tom_is_fun_sym_BLACKBERRY( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static  ligneproduitstelephones.OSTelephone  tom_make_BLACKBERRY() { return  (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "BLACKBERRY") ;}private static boolean tom_is_fun_sym_Symbian( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static  ligneproduitstelephones.OSTelephone  tom_make_Symbian() { return  (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "Symbian") ;}private static boolean tom_is_fun_sym_Other( ligneproduitstelephones.OSTelephone  t) {return  t instanceof ligneproduitstelephones.OSTelephone ;}private static boolean tom_is_fun_sym_Telephone( ligneproduitstelephones.Telephone  t) {return  t instanceof ligneproduitstelephones.Telephone ;}private static  ligneproduitstelephones.Telephone  tom_make_Telephone( String  name,  boolean  tactile,  ligneproduitstelephones.OSTelephone  oSTelephone,  ligneproduitstelephones.Marque  marque) { return  construct((ligneproduitstelephones.Telephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Telephone")),new Object[]{name, tactile, oSTelephone, marque}) ;}private static  String  tom_get_slot_Telephone_name( ligneproduitstelephones.Telephone  t) {return  (java.lang.String)t.eGet(t.eClass().getEStructuralFeature("name")) ;}private static  boolean  tom_get_slot_Telephone_tactile( ligneproduitstelephones.Telephone  t) {return  (java.lang.Boolean)t.eGet(t.eClass().getEStructuralFeature("tactile")) ;}private static  ligneproduitstelephones.OSTelephone  tom_get_slot_Telephone_oSTelephone( ligneproduitstelephones.Telephone  t) {return  (ligneproduitstelephones.OSTelephone)t.eGet(t.eClass().getEStructuralFeature("oSTelephone")) ;}private static  ligneproduitstelephones.Marque  tom_get_slot_Telephone_marque( ligneproduitstelephones.Telephone  t) {return  (ligneproduitstelephones.Marque)t.eGet(t.eClass().getEStructuralFeature("marque")) ;} public static <O extends EObject> O construct(O o, Object[] objs){ int i=0; EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures(); for(EStructuralFeature esf : sfes) {   if(esf.isChangeable()){     o.eSet(esf, objs[i]);     i++;   } }   return o; } private static boolean tom_equal_term_TelephoneEList(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_TelephoneEList(Object t) {return  t instanceof EList<?> && (((EList<ligneproduitstelephones.Telephone>)t).size() == 0 || (((EList<ligneproduitstelephones.Telephone>)t).size()>0 && ((EList<ligneproduitstelephones.Telephone>)t).get(0) instanceof ligneproduitstelephones.Telephone)) ;}private static boolean tom_is_fun_sym_TelephoneEList( EList<ligneproduitstelephones.Telephone>  t) {return  t instanceof EList<?> && (t.size() == 0 || (t.size()>0 && t.get(0) instanceof ligneproduitstelephones.Telephone)) ;}private static  EList<ligneproduitstelephones.Telephone>  tom_empty_array_TelephoneEList(int n) { return  new BasicEList<ligneproduitstelephones.Telephone>(n) ;}private static  EList<ligneproduitstelephones.Telephone>  tom_cons_array_TelephoneEList( ligneproduitstelephones.Telephone  e,  EList<ligneproduitstelephones.Telephone>  l) { return  append(e,l) ;}private static  ligneproduitstelephones.Telephone  tom_get_element_TelephoneEList_TelephoneEList( EList<ligneproduitstelephones.Telephone>  l, int n) {return  l.get(n) ;}private static int tom_get_size_TelephoneEList_TelephoneEList( EList<ligneproduitstelephones.Telephone>  l) {return  l.size() ;}   private static   EList<ligneproduitstelephones.Telephone>  tom_get_slice_TelephoneEList( EList<ligneproduitstelephones.Telephone>  subject, int begin, int end) {      EList<ligneproduitstelephones.Telephone>  result =  new BasicEList<ligneproduitstelephones.Telephone>(end-begin) ;     while(begin!=end) {       result =  append( subject.get(begin) ,result) ;       begin++;     }     return result;   }    private static   EList<ligneproduitstelephones.Telephone>  tom_append_array_TelephoneEList( EList<ligneproduitstelephones.Telephone>  l2,  EList<ligneproduitstelephones.Telephone>  l1) {     int size1 =  l1.size() ;     int size2 =  l2.size() ;     int index;      EList<ligneproduitstelephones.Telephone>  result =  new BasicEList<ligneproduitstelephones.Telephone>(size1+size2) ;     index=size1;     while(index >0) {       result =  append( l1.get(size1-index) ,result) ;       index--;     }      index=size2;     while(index > 0) {       result =  append( l2.get(size2-index) ,result) ;       index--;     }     return result;   } private static <O> EList<O> append(O e,EList<O> l) {   l.add(e);   return l; } private static  ligneproduitstelephones.Marque  tom_make_Marque( String  name,  EList<ligneproduitstelephones.Telephone>  telephones) { return  construct((ligneproduitstelephones.Marque)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Marque")),new Object[]{name, telephones}) ;}private static boolean tom_equal_term_MarqueEList(Object l1, Object l2) {return  l1.equals(l2) ;}private static boolean tom_is_sort_MarqueEList(Object t) {return  t instanceof EList<?> && (((EList<ligneproduitstelephones.Marque>)t).size() == 0 || (((EList<ligneproduitstelephones.Marque>)t).size()>0 && ((EList<ligneproduitstelephones.Marque>)t).get(0) instanceof ligneproduitstelephones.Marque)) ;}private static boolean tom_is_fun_sym_MarqueEList( EList<ligneproduitstelephones.Marque>  t) {return  t instanceof EList<?> && (t.size() == 0 || (t.size()>0 && t.get(0) instanceof ligneproduitstelephones.Marque)) ;}private static  EList<ligneproduitstelephones.Marque>  tom_empty_array_MarqueEList(int n) { return  new BasicEList<ligneproduitstelephones.Marque>(n) ;}private static  EList<ligneproduitstelephones.Marque>  tom_cons_array_MarqueEList( ligneproduitstelephones.Marque  e,  EList<ligneproduitstelephones.Marque>  l) { return  append(e,l) ;}private static  ligneproduitstelephones.Marque  tom_get_element_MarqueEList_MarqueEList( EList<ligneproduitstelephones.Marque>  l, int n) {return  l.get(n) ;}private static int tom_get_size_MarqueEList_MarqueEList( EList<ligneproduitstelephones.Marque>  l) {return  l.size() ;}   private static   EList<ligneproduitstelephones.Marque>  tom_get_slice_MarqueEList( EList<ligneproduitstelephones.Marque>  subject, int begin, int end) {      EList<ligneproduitstelephones.Marque>  result =  new BasicEList<ligneproduitstelephones.Marque>(end-begin) ;     while(begin!=end) {       result =  append( subject.get(begin) ,result) ;       begin++;     }     return result;   }    private static   EList<ligneproduitstelephones.Marque>  tom_append_array_MarqueEList( EList<ligneproduitstelephones.Marque>  l2,  EList<ligneproduitstelephones.Marque>  l1) {     int size1 =  l1.size() ;     int size2 =  l2.size() ;     int index;      EList<ligneproduitstelephones.Marque>  result =  new BasicEList<ligneproduitstelephones.Marque>(size1+size2) ;     index=size1;     while(index >0) {       result =  append( l1.get(size1-index) ,result) ;       index--;     }      index=size2;     while(index > 0) {       result =  append( l2.get(size2-index) ,result) ;       index--;     }     return result;   }private static boolean tom_is_fun_sym_LigneProduitsTelephones( ligneproduitstelephones.LigneProduitsTelephones  t) {return  t instanceof ligneproduitstelephones.LigneProduitsTelephones ;}private static  ligneproduitstelephones.LigneProduitsTelephones  tom_make_LigneProduitsTelephones( String  name,  EList<ligneproduitstelephones.Marque>  marque,  EList<ligneproduitstelephones.Telephone>  telephones) { return  construct((ligneproduitstelephones.LigneProduitsTelephones)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("LigneProduitsTelephones")),new Object[]{name, marque, telephones}) ;}private static  String  tom_get_slot_LigneProduitsTelephones_name( ligneproduitstelephones.LigneProduitsTelephones  t) {return  (java.lang.String)t.eGet(t.eClass().getEStructuralFeature("name")) ;}private static  EList<ligneproduitstelephones.Marque>  tom_get_slot_LigneProduitsTelephones_marque( ligneproduitstelephones.LigneProduitsTelephones  t) {return  (EList<ligneproduitstelephones.Marque>)t.eGet(t.eClass().getEStructuralFeature("marque")) ;}private static  EList<ligneproduitstelephones.Telephone>  tom_get_slot_LigneProduitsTelephones_telephones( ligneproduitstelephones.LigneProduitsTelephones  t) {return  (EList<ligneproduitstelephones.Telephone>)t.eGet(t.eClass().getEStructuralFeature("telephones")) ;} private static boolean tom_equal_term_Strategy(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Strategy(Object t) {return  (t instanceof tom.library.sl.Strategy) ;} private static boolean tom_equal_term_Position(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Position(Object t) {return  (t instanceof tom.library.sl.Position) ;} private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return ( new tom.library.sl.Mu(var,v) );}private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return ( new tom.library.sl.MuVar(name) );}private static  tom.library.sl.Strategy  tom_make_Identity() { return ( new tom.library.sl.Identity() );}private static  tom.library.sl.Strategy  tom_make_One( tom.library.sl.Strategy  v) { return ( new tom.library.sl.One(v) );}private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return ( new tom.library.sl.All(v) );}private static  tom.library.sl.Strategy  tom_make_Fail() { return ( new tom.library.sl.Fail() );}private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) {return ( (t instanceof tom.library.sl.Sequence) );}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return ( null );}private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return ( (tail==null)?head:new tom.library.sl.Sequence(head,tail) );}private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) );}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return ( (l2==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):new tom.library.sl.Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) );       } else {         return ( (tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):new tom.library.sl.Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_Sequence())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):tom_empty_list_Sequence()),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):tom_empty_list_Sequence()),end,tail)) );   }   private static boolean tom_is_fun_sym_Choice( tom.library.sl.Strategy  t) {return ( (t instanceof tom.library.sl.Choice) );}private static  tom.library.sl.Strategy  tom_empty_list_Choice() { return ( null );}private static  tom.library.sl.Strategy  tom_cons_list_Choice( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return ( (tail==null)?head:new tom.library.sl.Choice(head,tail) );}private static  tom.library.sl.Strategy  tom_get_head_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.THEN) );}private static boolean tom_is_empty_Choice_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Choice) )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return ( (l2==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):new tom.library.sl.Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) );       } else {         return ( (tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):new tom.library.sl.Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Choice(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_Choice())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):tom_empty_list_Choice()),end,tail)==null)?((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin):new tom.library.sl.Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):tom_empty_list_Choice()),end,tail)) );   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) {return ( (t instanceof tom.library.sl.SequenceId) );}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return ( null );}private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return ( (tail==null)?head:new tom.library.sl.SequenceId(head,tail) );}private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) );}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.SequenceId) )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return ( (l2==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):new tom.library.sl.SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) );       } else {         return ( (tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):new tom.library.sl.SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.SequenceId(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_SequenceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):tom_empty_list_SequenceId()),end,tail)==null)?((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin):new tom.library.sl.SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):tom_empty_list_SequenceId()),end,tail)) );   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) {return ( (t instanceof tom.library.sl.ChoiceId) );}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return ( null );}private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return ( (tail==null)?head:new tom.library.sl.ChoiceId(head,tail) );}private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) );}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.ChoiceId) )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return ( (l2==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):new tom.library.sl.ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) );       } else {         return ( (tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)==null)?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):new tom.library.sl.ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.ChoiceId(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_ChoiceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):tom_empty_list_ChoiceId()),end,tail)==null)?((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin):new tom.library.sl.ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):tom_empty_list_ChoiceId()),end,tail)) );   }   private static  tom.library.sl.Strategy  tom_make_OneId( tom.library.sl.Strategy  v) { return ( new tom.library.sl.OneId(v) );}   private static  tom.library.sl.Strategy  tom_make_AllSeq( tom.library.sl.Strategy  s) { return ( new tom.library.sl.AllSeq(s) );}private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_cons_list_Sequence(tom_make_One(tom_make_Identity()),tom_empty_list_Sequence())),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_One(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_empty_list_Choice()))));} private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return ( tom_cons_list_Choice(s,tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice())) );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(tom_cons_list_Sequence(s,tom_cons_list_Sequence(tom_make_MuVar("_x"),tom_empty_list_Sequence())),tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(v,tom_cons_list_Choice(tom_make_One(tom_make_MuVar("_x")),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_OneId(tom_make_MuVar("_x")),tom_empty_list_ChoiceId()))) );}   



  public static void main(String[] args) {
    Telephone t1=tom_make_Telephone("Milestone",true,tom_make_Android(),null);
    Telephone t2=tom_make_Telephone("Dext",true,tom_make_Android(),null);
    Telephone t3=tom_make_Telephone("iPhone",true,tom_make_MACOS(),null);
    Telephone t4=tom_make_Telephone("8800c",false,tom_make_BLACKBERRY(),null);
    Telephone t5=tom_make_Telephone("Dream",true,tom_make_Android(),null);
    Telephone t6=tom_make_Telephone("iPhone 3G",true,tom_make_MACOS(),null);
    Telephone t7=tom_make_Telephone("iPhone 3GS",true,tom_make_MACOS(),null);
    Telephone t8=tom_make_Telephone("6210 navigator",false,tom_make_Symbian(),null);
    Marque m1=tom_make_Marque("Motorola",tom_cons_array_TelephoneEList(t2,tom_cons_array_TelephoneEList(t1,tom_empty_array_TelephoneEList(2))));
    Marque m2=tom_make_Marque("Apple",tom_cons_array_TelephoneEList(t3,tom_empty_array_TelephoneEList(1)));
    Marque m3=tom_make_Marque("BlackBerry",tom_cons_array_TelephoneEList(t4,tom_empty_array_TelephoneEList(1)));
    Marque m4=tom_make_Marque("HTC",tom_cons_array_TelephoneEList(t5,tom_empty_array_TelephoneEList(1)));
    Marque m5=tom_make_Marque("Nokia",tom_cons_array_TelephoneEList(t8,tom_empty_array_TelephoneEList(1)));
    t1.setMarque(m1);
    t2.setMarque(m1);
    t3.setMarque(m2);
    t4.setMarque(m3);
    t5.setMarque(m4);
    t6.setMarque(m2);
    t7.setMarque(m2);
    t8.setMarque(m5);
    LigneProduitsTelephones lpt = tom_make_LigneProduitsTelephones("My product line name",tom_cons_array_MarqueEList(m5,tom_cons_array_MarqueEList(m4,tom_cons_array_MarqueEList(m3,tom_cons_array_MarqueEList(m2,tom_cons_array_MarqueEList(m1,tom_empty_array_MarqueEList(5)))))),tom_cons_array_TelephoneEList(t8,tom_cons_array_TelephoneEList(t7,tom_cons_array_TelephoneEList(t6,tom_cons_array_TelephoneEList(t5,tom_cons_array_TelephoneEList(t4,tom_cons_array_TelephoneEList(t3,tom_cons_array_TelephoneEList(t2,tom_cons_array_TelephoneEList(t1,tom_empty_array_TelephoneEList(8))))))))))
;

    System.out.println("Test1 :");
    /* List phones */
    try {
      listPhones(lpt);
    } catch (VisitFailure e) {
      System.out.println("Erreur dans l'application de la stratégie stratPrintPhone " + e);
    }
    System.out.println("\n#################################################");
    System.out.println("Test2 :");
    //try {
      whichIsTactile(lpt);
    /*} catch (VisitFailure e) {
      System.out.println("Erreur dans l'application de la stratégie stratIsTactile " + e);
    }*/
    System.out.println("\n#################################################");
    System.out.println("Test3 :");
    brandsHavingAndroidPhones(lpt);

    System.out.println("\n#################################################");
    System.out.println("Test4 :");
    //phonesByOS(lpt);
  }
  
  
  public static void listPhones(LigneProduitsTelephones lpt) throws VisitFailure {
    // print all phones names from product line lpt
    System.out.println("\nListe des téléphones avec '%match' :");
    {{if (tom_is_sort_LigneProduitsTelephones(lpt)) {if (tom_is_fun_sym_LigneProduitsTelephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt))) { EList<ligneproduitstelephones.Telephone>  tomMatch1_3=tom_get_slot_LigneProduitsTelephones_telephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt));if (tom_is_fun_sym_TelephoneEList(tomMatch1_3)) {int tomMatch1__end__9=0;do {{if (!(tomMatch1__end__9 >= tom_get_size_TelephoneEList_TelephoneEList(tomMatch1_3))) { ligneproduitstelephones.Telephone  tomMatch1_16=tom_get_element_TelephoneEList_TelephoneEList(tomMatch1_3,tomMatch1__end__9);if (tom_is_fun_sym_Telephone(tomMatch1_16)) {

        System.out.println(tom_get_slot_Telephone_name(tomMatch1_16));
      }}tomMatch1__end__9=tomMatch1__end__9 + 1;}} while(!(tomMatch1__end__9 > tom_get_size_TelephoneEList_TelephoneEList(tomMatch1_3)));}}}}}


    // same thing using strategies and a containment instrospector
    System.out.println("\nListe des téléphones avec '%strategy' :");
    tom_make_TopDown(tom_make_Try(tom_make_stratPrintPhone())).visitLight(lpt, new EcoreContainmentIntrospector());
  }

  public static class stratPrintPhone extends tom.library.sl.AbstractStrategyBasic {public stratPrintPhone() {super(tom_make_Fail());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (tom_is_sort_Telephone(v)) {return ((T)visit_Telephone((( ligneproduitstelephones.Telephone )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  ligneproduitstelephones.Telephone  _visit_Telephone( ligneproduitstelephones.Telephone  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( ligneproduitstelephones.Telephone )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  ligneproduitstelephones.Telephone  visit_Telephone( ligneproduitstelephones.Telephone  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if (tom_is_sort_Telephone(tom__arg)) {if (tom_is_fun_sym_Telephone((( ligneproduitstelephones.Telephone )tom__arg))) {

 System.out.println(tom_get_slot_Telephone_name((( ligneproduitstelephones.Telephone )tom__arg))); }}}}return _visit_Telephone(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_stratPrintPhone() { return new stratPrintPhone();}




 public static void whichIsTactile(LigneProduitsTelephones lpt) { //throws VisitFailure {
    // print all tactile phones names from product line lpt
    System.out.println("\nListe des téléphones tactiles :");
    {{if (tom_is_sort_LigneProduitsTelephones(lpt)) {if (tom_is_fun_sym_LigneProduitsTelephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt))) { EList<ligneproduitstelephones.Telephone>  tomMatch3_3=tom_get_slot_LigneProduitsTelephones_telephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt));if (tom_is_fun_sym_TelephoneEList(tomMatch3_3)) {int tomMatch3__end__9=0;do {{if (!(tomMatch3__end__9 >= tom_get_size_TelephoneEList_TelephoneEList(tomMatch3_3))) { ligneproduitstelephones.Telephone  tomMatch3_16=tom_get_element_TelephoneEList_TelephoneEList(tomMatch3_3,tomMatch3__end__9);if (tom_is_fun_sym_Telephone(tomMatch3_16)) {if ((true == tom_get_slot_Telephone_tactile(tomMatch3_16))) {

        System.out.println(tom_get_slot_Telephone_name(tomMatch3_16));
      }}}tomMatch3__end__9=tomMatch3__end__9 + 1;}} while(!(tomMatch3__end__9 > tom_get_size_TelephoneEList_TelephoneEList(tomMatch3_3)));}}}}}

    //`TopDown(Try(stratIsTactile())).visitLight(lpt, new EcoreContainmentIntrospector());
  }

 /*%strategy stratIsTactile() extends Fail() {
   visit Telephone {
     Telephone(name,tactile,_,_) && tactile == true -> {
       System.out.println(`name);
     }
   }
 }*/


  public static void brandsHavingAndroidPhones(LigneProduitsTelephones lpt) {
    java.util.HashSet<String> brandList = new java.util.HashSet<String>();
    // print all brands having at least an Android phone
    {{if (tom_is_sort_LigneProduitsTelephones(lpt)) {if (tom_is_fun_sym_LigneProduitsTelephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt))) { EList<ligneproduitstelephones.Telephone>  tomMatch4_3=tom_get_slot_LigneProduitsTelephones_telephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt));if (tom_is_fun_sym_TelephoneEList(tomMatch4_3)) {int tomMatch4__end__9=0;do {{if (!(tomMatch4__end__9 >= tom_get_size_TelephoneEList_TelephoneEList(tomMatch4_3))) { ligneproduitstelephones.Telephone  tomMatch4_16=tom_get_element_TelephoneEList_TelephoneEList(tomMatch4_3,tomMatch4__end__9);if (tom_is_fun_sym_Telephone(tomMatch4_16)) {if (tom_equal_term_OSTelephone(tom_make_Android(), tom_get_slot_Telephone_oSTelephone(tomMatch4_16))) {


        brandList.add(tom_get_slot_Telephone_marque(tomMatch4_16).getName());
      }}}tomMatch4__end__9=tomMatch4__end__9 + 1;}} while(!(tomMatch4__end__9 > tom_get_size_TelephoneEList_TelephoneEList(tomMatch4_3)));}}}}}

    System.out.println("\nListe des marques ayant au moins un téléphone Android : " + brandList);
  }

  public static void phonesByOS(LigneProduitsTelephones lpt) {
    java.util.List<String> androidList = new java.util.ArrayList<String>();
    java.util.List<String> macosList = new java.util.ArrayList<String>();
    java.util.List<String> windowsList = new java.util.ArrayList<String>();
    java.util.List<String> symbianList = new java.util.ArrayList<String>();
    java.util.List<String> bbList = new java.util.ArrayList<String>();
    java.util.List<String> otherosList = new java.util.ArrayList<String>();

    {{if (tom_is_sort_LigneProduitsTelephones(lpt)) {if (tom_is_fun_sym_LigneProduitsTelephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt))) { EList<ligneproduitstelephones.Telephone>  tomMatch5_3=tom_get_slot_LigneProduitsTelephones_telephones((( ligneproduitstelephones.LigneProduitsTelephones )lpt));if (tom_is_fun_sym_TelephoneEList(tomMatch5_3)) {int tomMatch5__end__9=0;do {{if (!(tomMatch5__end__9 >= tom_get_size_TelephoneEList_TelephoneEList(tomMatch5_3))) { ligneproduitstelephones.Telephone  tomMatch5_16=tom_get_element_TelephoneEList_TelephoneEList(tomMatch5_3,tomMatch5__end__9);if (tom_is_fun_sym_Telephone(tomMatch5_16)) { String  tom_name=tom_get_slot_Telephone_name(tomMatch5_16); ligneproduitstelephones.OSTelephone  tom_os=tom_get_slot_Telephone_oSTelephone(tomMatch5_16);{{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_Android((( ligneproduitstelephones.OSTelephone )tom_os))) {


 androidList.add(tom_name); }}}{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_MACOS((( ligneproduitstelephones.OSTelephone )tom_os))) {
 macosList.add(tom_name); }}}{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_WINDOWSCE((( ligneproduitstelephones.OSTelephone )tom_os))) {
 windowsList.add(tom_name); }}}{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_BLACKBERRY((( ligneproduitstelephones.OSTelephone )tom_os))) {
 bbList.add(tom_name); }}}{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_Symbian((( ligneproduitstelephones.OSTelephone )tom_os))) {
 symbianList.add(tom_name); }}}{if (tom_is_sort_OSTelephone(tom_os)) {if (tom_is_fun_sym_Other((( ligneproduitstelephones.OSTelephone )tom_os))) {
 otherosList.add(tom_name); }}}}

      }}tomMatch5__end__9=tomMatch5__end__9 + 1;}} while(!(tomMatch5__end__9 > tom_get_size_TelephoneEList_TelephoneEList(tomMatch5_3)));}}}}}


    System.out.println("\nTri des téléphones par OS\n");
    System.out.println("Téléphones sous Android : " + androidList);
    System.out.println("Téléphones sous MacOS : " + macosList);
    System.out.println("Téléphones sous Windows : " + windowsList);
    System.out.println("Téléphones sous BlackBerry : " + bbList);
    System.out.println("Téléphones sous Symbian : " + symbianList);
    System.out.println("Téléphones sous d'autres systèmes : " + otherosList);
  }

}
