%typeterm Forfait {
  implement { ligneproduitstelephones.Forfait }
  is_sort(t) { $t instanceof ligneproduitstelephones.Forfait }
  equals(l1,l2) { $l1.equals($l2) }
}
%include { string.tom }
%include { float.tom }
%typeterm Operateur {
  implement { ligneproduitstelephones.Operateur }
  is_sort(t) { $t instanceof ligneproduitstelephones.Operateur }
  equals(l1,l2) { $l1.equals($l2) }
}
%typeterm Marque {
  implement { ligneproduitstelephones.Marque }
  is_sort(t) { $t instanceof ligneproduitstelephones.Marque }
  equals(l1,l2) { $l1.equals($l2) }
}
%typeterm Telephone {
  implement { ligneproduitstelephones.Telephone }
  is_sort(t) { $t instanceof ligneproduitstelephones.Telephone }
  equals(l1,l2) { $l1.equals($l2) }
}
%include { boolean.tom }
%typeterm OSTelephone {
  implement { ligneproduitstelephones.OSTelephone }
  is_sort(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  equals(l1,l2) { $l1.equals($l2) }
}
%op OSTelephone Android() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "Android") }
}
%op OSTelephone MACOS() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "MACOS") }
}
%op OSTelephone WINDOWSCE() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "WINDOWSCE") }
}
%op OSTelephone BLACKBERRY() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "BLACKBERRY") }
}
%op OSTelephone Symbian() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "Symbian") }
}
%op OSTelephone Other() {
  is_fsym(t) { $t instanceof ligneproduitstelephones.OSTelephone }
  make() { (ligneproduitstelephones.OSTelephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.createFromString((EDataType) ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getOSTelephone(), "Other") }
}
%op Telephone Telephone(name : String, tactile : boolean, oSTelephone : OSTelephone, marque : Marque) {
  is_fsym(t) { $t instanceof ligneproduitstelephones.Telephone }
  get_slot(name, t)  { (java.lang.String)$t.eGet(t.eClass().getEStructuralFeature("name")) }
  get_slot(tactile, t)  { (java.lang.Boolean)$t.eGet(t.eClass().getEStructuralFeature("tactile")) }
  get_slot(oSTelephone, t)  { (ligneproduitstelephones.OSTelephone)$t.eGet(t.eClass().getEStructuralFeature("oSTelephone")) }
  get_slot(marque, t)  { (ligneproduitstelephones.Marque)$t.eGet(t.eClass().getEStructuralFeature("marque")) }
  make(name, tactile, oSTelephone, marque) { construct((ligneproduitstelephones.Telephone)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Telephone")),new Object[]{$name, $tactile, $oSTelephone, $marque}) }
}
public static <O extends EObject> O construct(O o, Object[] objs){
int i=0;
EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
for(EStructuralFeature esf : sfes) {
  if(esf.isChangeable()){
    o.eSet(esf, objs[i]);
    i++;
  }
}
  return o;
}
%typeterm TelephoneEList {
  implement { EList<ligneproduitstelephones.Telephone> }
  is_sort(t) { $t instanceof EList<?> && (((EList<ligneproduitstelephones.Telephone>)$t).size() == 0 || (((EList<ligneproduitstelephones.Telephone>)$t).size()>0 && ((EList<ligneproduitstelephones.Telephone>)$t).get(0) instanceof ligneproduitstelephones.Telephone)) }
  equals(l1,l2) { $l1.equals($l2) }
}
%oparray TelephoneEList TelephoneEList(Telephone*) {
  is_fsym(t) { $t instanceof EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof ligneproduitstelephones.Telephone)) }
  make_empty(n) { new BasicEList<ligneproduitstelephones.Telephone>($n) }
  make_append(e,l) { append($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}
private static <O> EList<O> append(O e,EList<O> l) {
  l.add(e);
  return l;
}
%typeterm OperateurEList {
  implement { EList<ligneproduitstelephones.Operateur> }
  is_sort(t) { $t instanceof EList<?> && (((EList<ligneproduitstelephones.Operateur>)$t).size() == 0 || (((EList<ligneproduitstelephones.Operateur>)$t).size()>0 && ((EList<ligneproduitstelephones.Operateur>)$t).get(0) instanceof ligneproduitstelephones.Operateur)) }
  equals(l1,l2) { $l1.equals($l2) }
}
%oparray OperateurEList OperateurEList(Operateur*) {
  is_fsym(t) { $t instanceof EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof ligneproduitstelephones.Operateur)) }
  make_empty(n) { new BasicEList<ligneproduitstelephones.Operateur>($n) }
  make_append(e,l) { append($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}
%op Marque Marque(name : String, telephones : TelephoneEList, operateurs : OperateurEList) {
  is_fsym(t) { $t instanceof ligneproduitstelephones.Marque }
  get_slot(name, t)  { (java.lang.String)$t.eGet(t.eClass().getEStructuralFeature("name")) }
  get_slot(telephones, t)  { (EList<ligneproduitstelephones.Telephone>)$t.eGet(t.eClass().getEStructuralFeature("telephones")) }
  get_slot(operateurs, t)  { (EList<ligneproduitstelephones.Operateur>)$t.eGet(t.eClass().getEStructuralFeature("operateurs")) }
  make(name, telephones, operateurs) { construct((ligneproduitstelephones.Marque)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Marque")),new Object[]{$name, $telephones, $operateurs}) }
}
%typeterm MarqueEList {
  implement { EList<ligneproduitstelephones.Marque> }
  is_sort(t) { $t instanceof EList<?> && (((EList<ligneproduitstelephones.Marque>)$t).size() == 0 || (((EList<ligneproduitstelephones.Marque>)$t).size()>0 && ((EList<ligneproduitstelephones.Marque>)$t).get(0) instanceof ligneproduitstelephones.Marque)) }
  equals(l1,l2) { $l1.equals($l2) }
}
%oparray MarqueEList MarqueEList(Marque*) {
  is_fsym(t) { $t instanceof EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof ligneproduitstelephones.Marque)) }
  make_empty(n) { new BasicEList<ligneproduitstelephones.Marque>($n) }
  make_append(e,l) { append($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}
%op Operateur Operateur(name : String, marques : MarqueEList) {
  is_fsym(t) { $t instanceof ligneproduitstelephones.Operateur }
  get_slot(name, t)  { (java.lang.String)$t.eGet(t.eClass().getEStructuralFeature("name")) }
  get_slot(marques, t)  { (EList<ligneproduitstelephones.Marque>)$t.eGet(t.eClass().getEStructuralFeature("marques")) }
  make(name, marques) { construct((ligneproduitstelephones.Operateur)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Operateur")),new Object[]{$name, $marques}) }
}
%include { int.tom }
%op Forfait Forfait(name : String, price : float, operateur : Operateur, hours : int, sMS : int, specificPhone : Telephone) {
  is_fsym(t) { $t instanceof ligneproduitstelephones.Forfait }
  get_slot(name, t)  { (java.lang.String)$t.eGet(t.eClass().getEStructuralFeature("name")) }
  get_slot(price, t)  { (java.lang.Float)$t.eGet(t.eClass().getEStructuralFeature("price")) }
  get_slot(operateur, t)  { (ligneproduitstelephones.Operateur)$t.eGet(t.eClass().getEStructuralFeature("operateur")) }
  get_slot(hours, t)  { (java.lang.Integer)$t.eGet(t.eClass().getEStructuralFeature("hours")) }
  get_slot(sMS, t)  { (java.lang.Integer)$t.eGet(t.eClass().getEStructuralFeature("sMS")) }
  get_slot(specificPhone, t)  { (ligneproduitstelephones.Telephone)$t.eGet(t.eClass().getEStructuralFeature("specificPhone")) }
  make(name, price, operateur, hours, sMS, specificPhone) { construct((ligneproduitstelephones.Forfait)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("Forfait")),new Object[]{$name, $price, $operateur, $hours, $sMS, $specificPhone}) }
}
%typeterm LigneProduitsTelephones {
  implement { ligneproduitstelephones.LigneProduitsTelephones }
  is_sort(t) { $t instanceof ligneproduitstelephones.LigneProduitsTelephones }
  equals(l1,l2) { $l1.equals($l2) }
}
%op LigneProduitsTelephones LigneProduitsTelephones(name : String, marque : MarqueEList, telephones : TelephoneEList) {
  is_fsym(t) { $t instanceof ligneproduitstelephones.LigneProduitsTelephones }
  get_slot(name, t)  { (java.lang.String)$t.eGet(t.eClass().getEStructuralFeature("name")) }
  get_slot(marque, t)  { (EList<ligneproduitstelephones.Marque>)$t.eGet(t.eClass().getEStructuralFeature("marque")) }
  get_slot(telephones, t)  { (EList<ligneproduitstelephones.Telephone>)$t.eGet(t.eClass().getEStructuralFeature("telephones")) }
  make(name, marque, telephones) { construct((ligneproduitstelephones.LigneProduitsTelephones)ligneproduitstelephones.LigneproduitstelephonesFactory.eINSTANCE.create((EClass)ligneproduitstelephones.LigneproduitstelephonesPackage.eINSTANCE.getEClassifier("LigneProduitsTelephones")),new Object[]{$name, $marque, $telephones}) }
}
