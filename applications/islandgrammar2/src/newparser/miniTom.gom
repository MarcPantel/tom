module newparser.miniTom
imports String
abstract syntax

// Program ===================================================================
gt_Program = CsProgram(blocks:gt_BlockList)

gt_BlockList = CsBlockList(gt_Block*)

gt_Block = HOSTBLOCK(hContent:String)
         | CsMatchConstruct(arguments:gt_MatchArgumentList,
                            constraintActionList:gt_ConstraintActionList)


// MatchConstruct ============================================================
gt_MatchArgumentList = CsMatchArgumentList(gt_TypedTerm*)

gt_ConstraintAction =
  CsConstraintAction(constraint:gt_Constraint, action:gt_BlockList) // supprimer (ou pas...)

gt_ConstraintActionList = CsConstraintActionList(gt_ConstraintAction*)

gt_Constraint = CsMatchTermConstraint    (object:gt_Pattern, subject:gt_Term)
              | CsMatchArgumentConstraint(object:gt_Pattern)
              | CsAndConstraint (gt_Constraint*)
              | CsOrConstraint  (gt_Constraint*)
              | CsNumLessThan         (lefthand:gt_Term, righthand:gt_Term)
              | CsNumLessOrEqualTo    (lefthand:gt_Term, righthand:gt_Term)
              | CsNumGreaterThan      (lefthand:gt_Term, righthand:gt_Term)
              | CsNumGreaterOrEqualTo (lefthand:gt_Term, righthand:gt_Term)
              | CsNumEqualTo          (lefthand:gt_Term, righthand:gt_Term)
              | CsNumDifferent        (lefthand:gt_Term, righthand:gt_Term)
              
gt_ConstraintList = CsConstraintList(gt_Constraint*)

// gt_Term in CST context is "equivalent" to BQTerm in AST context
// (it's much simpler because very close to synthax)
gt_Term = CsVariableName(name : String)
        | CsVariableNameStar(name : String)
        | CsTerm(name : String, termList : gt_TermList)

gt_TermList = CsTermList(gt_Term*)

gt_TypedTerm = CsTypedTerm(term:gt_Term, type:gt_TermType)
             
gt_TermType = CsTermType(type:String)
            | CsTermTypeUnknown()

// gt_Pattern in CST context is "equivalent" to TomTerm in AST context
gt_Pattern = CsPattern(annotations:gt_AnnotationList, pattern:gt_PlainPattern)
gt_AnnotationList = CsAnnotationList(String*)


gt_PlainPattern = 
  CsAnti(pattern:gt_PlainPattern)
| CsVariable        (name : String) 
| CsVariableStar    (name : String)
| CsConstant        (value : String)
| CsConstantStar    (value : String)
| CsUnamedVariable    ()
| CsUnamedVariableStar()
| CsSymbolList (headSymbolList : gt_HeadSymbolList,
                patternList    : gt_PatternList)


gt_HeadSymbolList = CsHeadSymbolList(gt_HeadSymbol*)
  gt_HeadSymbol = CsHeadSymbol(name : String, theory : gt_TheoryType)
                | CsConstantHeadSymbol(value : String, theory : gt_TheoryType)

    gt_TheoryType = CsTheoryAU()
                  | CsTheoryCS() // AC()
                  | CsTheoryDEFAULT()

gt_PatternList = CsExplicitPatternList(gt_Pattern*)
               | CsImplicitPairList(gt_PairPattern*)

gt_PairPattern = CsPairPattern(slotName:String, pattern:gt_Pattern)
