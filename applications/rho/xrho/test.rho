Some examples are taken from Luigi Liquori iRho.

(*Heating: pure rho-terms*)

X;

a;

a -> b . a;

X -> X .a;

(* traffic lights : encoding the non determinism of rewriting*)

((red -> go) | (green-> ok) | (orange->go) | (orange -> stop) ).orange;

(s.a) -> b . c ;

c -> b . (s.a);

X -> X . a;

(f.X.Y) -> X . (f.a.b);

(f.X) -> X . (f.a);

(f.X.Y.Z) -> Y . (f.a.b.c);

Z -> ((f.X.Y) -> X. (f.a.b));

Z -> ((f.X.Y) -> X. (f.a.b)) . c;

Z -> ((f.X.Y) -> X|Y|Z. (f.a.b)) . c;

(f.X.Y) -> X|Y . (f.a.b);

(f.X.Y) -> Y|Y . (f.a.b);

(f.X.Y) -> Y|Y|Y|X|X|X . (f.a.b);

((f.X.Y) -> X) | ((f.X.Y) -> Y ). (f.a.b);





X -> (X -> X) .a .b;

(*Define macros: must begin with "!". Replacement done at parsing time (thus obtaining a 

!id   := (X->X);
!id := (X->X . X->X);
!id;
(!id. a);
!idid;
(!idid. a);


(* Non Terminating Programs *)

1. classical lambda-term 

!omega := X -> (X.X);
(!omega.!omega);

2. (typed) fixpoints with pattern-matching

!omega := (fix.X) -> (X.(fix.X));
(!omega.(fix.!omega));

(* Recursion using typed fixpoints a la Benjamin in pure rhoCal*)
!zero:=0;
!one:=(suc.!zero);
!two:=(suc.!one);
!three:=(suc.!two);
!four:=(suc.!three);
!five:=(suc.!four);
!six:=(suc.!five);
!plus := (S -> ((add.0.Y) -> Y)) | (S -> ((add.(suc.X).Y) -> (suc.((S.S).(add.X.Y)))));
!addition:=X -> (Y -> ((!plus).(!plus).(add.X.Y)));
(!addition).(!zero).(!zero);
(!addition).(!six).(!six);

((f.X.Y) -> X) | ((f.X.Y) -> Y ). (f.Z.H);

(h.Z.H.(h.(g.I))) -> (((f.X.Y) -> X) | ((f.X.Y) -> Y ). (f.Z.H)) . (h.(h.a).(h.b).(h.(g.b)));

(f.X.(h.Y).(g.(h.Z))) -> (((h.T) -> T . Y)| ((U|V) -> U . (X|Z))) . (f.a.(h.(h.b)).(g.(h.a)));

(f.X.(h.Y).(g.(h.Z))) -> (((h.T) -> T . Y)| ((U|V) -> (i.U.V.Y) . (X|Z))) . (f.a.(h.(h.b)).(g.(h.a)));

