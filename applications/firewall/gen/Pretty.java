/* Generated by TOM (version 20090303 (src)): Do not edit this file */import firewall.ast.types.*;
import tom.library.sl.*; 
import java.util.*;

public class Pretty {

  /* Generated by TOM (version 20090303 (src)): Do not edit this file *//* Generated by TOM (version 20090303 (src)): Do not edit this file *//* Generated by TOM (version 20090303 (src)): Do not edit this file */public static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}public static boolean tom_is_sort_char(char t) {return  true ;} public static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}public static boolean tom_is_sort_String(String t) {return  t instanceof String ;} /* Generated by TOM (version 20090303 (src)): Do not edit this file */public static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}public static boolean tom_is_sort_int(int t) {return  true ;} public static boolean tom_equal_term_Block(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Block(Object t) {return  (t instanceof firewall.ast.types.Block) ;}public static boolean tom_equal_term_Options(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Options(Object t) {return  (t instanceof firewall.ast.types.Options) ;}public static boolean tom_equal_term_Rule(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Rule(Object t) {return  (t instanceof firewall.ast.types.Rule) ;}public static boolean tom_equal_term_File(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_File(Object t) {return  (t instanceof firewall.ast.types.File) ;}public static boolean tom_equal_term_InstructionList(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_InstructionList(Object t) {return  (t instanceof firewall.ast.types.InstructionList) ;}public static boolean tom_equal_term_Opts(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Opts(Object t) {return  (t instanceof firewall.ast.types.Opts) ;}public static boolean tom_equal_term_Communication(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Communication(Object t) {return  (t instanceof firewall.ast.types.Communication) ;}public static boolean tom_equal_term_Target(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Target(Object t) {return  (t instanceof firewall.ast.types.Target) ;}public static boolean tom_equal_term_Protocol(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Protocol(Object t) {return  (t instanceof firewall.ast.types.Protocol) ;}public static boolean tom_equal_term_Instruction(Object t1, Object t2) {return  (t1==t2) ;}public static boolean tom_is_sort_Instruction(Object t) {return  (t instanceof firewall.ast.types.Instruction) ;}public static boolean tom_is_fun_sym_Block( firewall.ast.types.Block  t) {return  (t instanceof firewall.ast.types.block.Block) ;}public static  firewall.ast.types.Rule  tom_get_slot_Block_rule( firewall.ast.types.Block  t) {return  t.getrule() ;}public static  firewall.ast.types.InstructionList  tom_get_slot_Block_instructionList( firewall.ast.types.Block  t) {return  t.getinstructionList() ;}public static boolean tom_is_fun_sym_Options( firewall.ast.types.Options  t) {return  (t instanceof firewall.ast.types.options.Options) ;}public static  String  tom_get_slot_Options_lo( firewall.ast.types.Options  t) {return  t.getlo() ;}public static boolean tom_is_fun_sym_Input( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.Input) ;}public static boolean tom_is_fun_sym_Forward( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.Forward) ;}public static boolean tom_is_fun_sym_Output( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.Output) ;}public static boolean tom_is_fun_sym_Prerouting( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.Prerouting) ;}public static boolean tom_is_fun_sym_Postrouting( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.Postrouting) ;}public static boolean tom_is_fun_sym_UserRuleDef( firewall.ast.types.Rule  t) {return  (t instanceof firewall.ast.types.rule.UserRuleDef) ;}public static  String  tom_get_slot_UserRuleDef_user_rule_name( firewall.ast.types.Rule  t) {return  t.getuser_rule_name() ;}public static boolean tom_is_fun_sym_None( firewall.ast.types.Opts  t) {return  (t instanceof firewall.ast.types.opts.None) ;}public static boolean tom_is_fun_sym_Anywhere( firewall.ast.types.Communication  t) {return  (t instanceof firewall.ast.types.communication.Anywhere) ;}public static boolean tom_is_fun_sym_Localhost( firewall.ast.types.Communication  t) {return  (t instanceof firewall.ast.types.communication.Localhost) ;}public static boolean tom_is_fun_sym_Ip_Addr( firewall.ast.types.Communication  t) {return  (t instanceof firewall.ast.types.communication.Ip_Addr) ;}public static  String  tom_get_slot_Ip_Addr_ip( firewall.ast.types.Communication  t) {return  t.getip() ;}public static boolean tom_is_fun_sym_Accept( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Accept) ;}public static boolean tom_is_fun_sym_Classify( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Classify) ;}public static boolean tom_is_fun_sym_ClusterIp( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.ClusterIp) ;}public static boolean tom_is_fun_sym_ConnMark( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.ConnMark) ;}public static boolean tom_is_fun_sym_ConnSecMark( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.ConnSecMark) ;}public static boolean tom_is_fun_sym_Dnat( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Dnat) ;}public static boolean tom_is_fun_sym_Drop( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Drop) ;}public static boolean tom_is_fun_sym_Dscp( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Dscp) ;}public static boolean tom_is_fun_sym_Ecn( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Ecn) ;}public static boolean tom_is_fun_sym_Log( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Log) ;}public static boolean tom_is_fun_sym_Mark( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Mark) ;}public static boolean tom_is_fun_sym_Masquerade( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Masquerade) ;}public static boolean tom_is_fun_sym_Mirror( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Mirror) ;}public static boolean tom_is_fun_sym_NetMap( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.NetMap) ;}public static boolean tom_is_fun_sym_NfLog( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.NfLog) ;}public static boolean tom_is_fun_sym_NfQueue( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.NfQueue) ;}public static boolean tom_is_fun_sym_NoTrack( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.NoTrack) ;}public static boolean tom_is_fun_sym_Queue( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Queue) ;}public static boolean tom_is_fun_sym_Redirect( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Redirect) ;}public static boolean tom_is_fun_sym_Reject( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Reject) ;}public static boolean tom_is_fun_sym_Return( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Return) ;}public static boolean tom_is_fun_sym_UserRuleCall( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.UserRuleCall) ;}public static  String  tom_get_slot_UserRuleCall_user_rule_name( firewall.ast.types.Target  t) {return  t.getuser_rule_name() ;}public static boolean tom_is_fun_sym_Same( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Same) ;}public static boolean tom_is_fun_sym_SecMark( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.SecMark) ;}public static boolean tom_is_fun_sym_Snat( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Snat) ;}public static boolean tom_is_fun_sym_TcpMss( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.TcpMss) ;}public static boolean tom_is_fun_sym_Tos( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Tos) ;}public static boolean tom_is_fun_sym_Trace( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Trace) ;}public static boolean tom_is_fun_sym_Ttl( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Ttl) ;}public static boolean tom_is_fun_sym_Ulog( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Ulog) ;}public static boolean tom_is_fun_sym_Ipv4OptSstRip( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Ipv4OptSstRip) ;}public static boolean tom_is_fun_sym_Set( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Set) ;}public static boolean tom_is_fun_sym_Tarpit( firewall.ast.types.Target  t) {return  (t instanceof firewall.ast.types.target.Tarpit) ;}public static boolean tom_is_fun_sym_All_( firewall.ast.types.Protocol  t) {return  (t instanceof firewall.ast.types.protocol.All_) ;}public static boolean tom_is_fun_sym_Icmp( firewall.ast.types.Protocol  t) {return  (t instanceof firewall.ast.types.protocol.Icmp) ;}public static boolean tom_is_fun_sym_Udp( firewall.ast.types.Protocol  t) {return  (t instanceof firewall.ast.types.protocol.Udp) ;}public static boolean tom_is_fun_sym_Tcp( firewall.ast.types.Protocol  t) {return  (t instanceof firewall.ast.types.protocol.Tcp) ;}public static boolean tom_is_fun_sym_Ins( firewall.ast.types.Instruction  t) {return  (t instanceof firewall.ast.types.instruction.Ins) ;}public static  firewall.ast.types.Target  tom_get_slot_Ins_target( firewall.ast.types.Instruction  t) {return  t.gettarget() ;}public static  firewall.ast.types.Protocol  tom_get_slot_Ins_prot( firewall.ast.types.Instruction  t) {return  t.getprot() ;}public static  firewall.ast.types.Opts  tom_get_slot_Ins_opt( firewall.ast.types.Instruction  t) {return  t.getopt() ;}public static  firewall.ast.types.Communication  tom_get_slot_Ins_source( firewall.ast.types.Instruction  t) {return  t.getsource() ;}public static  firewall.ast.types.Communication  tom_get_slot_Ins_destination( firewall.ast.types.Instruction  t) {return  t.getdestination() ;}public static  firewall.ast.types.Options  tom_get_slot_Ins_options( firewall.ast.types.Instruction  t) {return  t.getoptions() ;}public static boolean tom_is_fun_sym_Blocks( firewall.ast.types.File  t) {return  ((t instanceof firewall.ast.types.file.ConsBlocks) || (t instanceof firewall.ast.types.file.EmptyBlocks)) ;}public static  firewall.ast.types.File  tom_empty_list_Blocks() { return  firewall.ast.types.file.EmptyBlocks.make() ;}public static  firewall.ast.types.File  tom_cons_list_Blocks( firewall.ast.types.Block  e,  firewall.ast.types.File  l) { return  firewall.ast.types.file.ConsBlocks.make(e,l) ;}public static  firewall.ast.types.Block  tom_get_head_Blocks_File( firewall.ast.types.File  l) {return  l.getHeadBlocks() ;}public static  firewall.ast.types.File  tom_get_tail_Blocks_File( firewall.ast.types.File  l) {return  l.getTailBlocks() ;}public static boolean tom_is_empty_Blocks_File( firewall.ast.types.File  l) {return  l.isEmptyBlocks() ;}   public static   firewall.ast.types.File  tom_append_list_Blocks( firewall.ast.types.File l1,  firewall.ast.types.File  l2) {     if( l1.isEmptyBlocks() ) {       return l2;     } else if( l2.isEmptyBlocks() ) {       return l1;     } else if(  l1.getTailBlocks() .isEmptyBlocks() ) {       return  firewall.ast.types.file.ConsBlocks.make( l1.getHeadBlocks() ,l2) ;     } else {       return  firewall.ast.types.file.ConsBlocks.make( l1.getHeadBlocks() ,tom_append_list_Blocks( l1.getTailBlocks() ,l2)) ;     }   }   public static   firewall.ast.types.File  tom_get_slice_Blocks( firewall.ast.types.File  begin,  firewall.ast.types.File  end, firewall.ast.types.File  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyBlocks()  ||  (end==tom_empty_list_Blocks()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  firewall.ast.types.file.ConsBlocks.make( begin.getHeadBlocks() ,( firewall.ast.types.File )tom_get_slice_Blocks( begin.getTailBlocks() ,end,tail)) ;   }   public static boolean tom_is_fun_sym_InstructionList( firewall.ast.types.InstructionList  t) {return  ((t instanceof firewall.ast.types.instructionlist.ConsInstructionList) || (t instanceof firewall.ast.types.instructionlist.EmptyInstructionList)) ;}public static  firewall.ast.types.InstructionList  tom_empty_list_InstructionList() { return  firewall.ast.types.instructionlist.EmptyInstructionList.make() ;}public static  firewall.ast.types.InstructionList  tom_cons_list_InstructionList( firewall.ast.types.Instruction  e,  firewall.ast.types.InstructionList  l) { return  firewall.ast.types.instructionlist.ConsInstructionList.make(e,l) ;}public static  firewall.ast.types.Instruction  tom_get_head_InstructionList_InstructionList( firewall.ast.types.InstructionList  l) {return  l.getHeadInstructionList() ;}public static  firewall.ast.types.InstructionList  tom_get_tail_InstructionList_InstructionList( firewall.ast.types.InstructionList  l) {return  l.getTailInstructionList() ;}public static boolean tom_is_empty_InstructionList_InstructionList( firewall.ast.types.InstructionList  l) {return  l.isEmptyInstructionList() ;}   public static   firewall.ast.types.InstructionList  tom_append_list_InstructionList( firewall.ast.types.InstructionList l1,  firewall.ast.types.InstructionList  l2) {     if( l1.isEmptyInstructionList() ) {       return l2;     } else if( l2.isEmptyInstructionList() ) {       return l1;     } else if(  l1.getTailInstructionList() .isEmptyInstructionList() ) {       return  firewall.ast.types.instructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,l2) ;     } else {       return  firewall.ast.types.instructionlist.ConsInstructionList.make( l1.getHeadInstructionList() ,tom_append_list_InstructionList( l1.getTailInstructionList() ,l2)) ;     }   }   public static   firewall.ast.types.InstructionList  tom_get_slice_InstructionList( firewall.ast.types.InstructionList  begin,  firewall.ast.types.InstructionList  end, firewall.ast.types.InstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyInstructionList()  ||  (end==tom_empty_list_InstructionList()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  firewall.ast.types.instructionlist.ConsInstructionList.make( begin.getHeadInstructionList() ,( firewall.ast.types.InstructionList )tom_get_slice_InstructionList( begin.getTailInstructionList() ,end,tail)) ;   }    /* Generated by TOM (version 20090303 (src)): Do not edit this file */public static boolean tom_equal_term_Strategy(Object t1, Object t2) {return  (t1.equals(t2)) ;}public static boolean tom_is_sort_Strategy(Object t) {return  (t instanceof tom.library.sl.Strategy) ;}public static boolean tom_equal_term_Position(Object t1, Object t2) {return  (t1.equals(t2)) ;}public static boolean tom_is_sort_Position(Object t) {return  (t instanceof tom.library.sl.Position) ;}/* Generated by TOM (version 20090303 (src)): Do not edit this file */ /* Generated by TOM (version 20090303 (src)): Do not edit this file */ /* Generated by TOM (version 20090303 (src)): Do not edit this file */   

  
  public String toString(File f) {
    StringBuffer sb = new StringBuffer() ;
    {{if (tom_is_sort_File(f)) {if (tom_is_fun_sym_Blocks((( firewall.ast.types.File )f))) { firewall.ast.types.File  tomMatch1NameNumber_end_4=(( firewall.ast.types.File )f);do {{if (!(tom_is_empty_Blocks_File(tomMatch1NameNumber_end_4))) {

        sb.append(toString(tom_get_head_Blocks_File(tomMatch1NameNumber_end_4))+"\n\n") ;
      }if (tom_is_empty_Blocks_File(tomMatch1NameNumber_end_4)) {tomMatch1NameNumber_end_4=(( firewall.ast.types.File )f);} else {tomMatch1NameNumber_end_4=tom_get_tail_Blocks_File(tomMatch1NameNumber_end_4);}}} while(!(tom_equal_term_File(tomMatch1NameNumber_end_4, (( firewall.ast.types.File )f))));}}}}

    return sb.toString() ;
  }

  public String toString(Block b) {
    StringBuffer sb = new StringBuffer() ;
    {{if (tom_is_sort_Block(b)) {if (tom_is_fun_sym_Block((( firewall.ast.types.Block )b))) {

        return "Chain " + toString(tom_get_slot_Block_rule((( firewall.ast.types.Block )b)))+ "\n" + toString(tom_get_slot_Block_instructionList((( firewall.ast.types.Block )b))) ;
      }}}}

  }

  public String toString(Rule r) {
    {{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_Input((( firewall.ast.types.Rule )r))) {
return "INPUT";}}}{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_Forward((( firewall.ast.types.Rule )r))) {
return "FORWARD";}}}{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_Output((( firewall.ast.types.Rule )r))) {
return "OUTPUT";}}}{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_Prerouting((( firewall.ast.types.Rule )r))) {
return "PREROUTING";}}}{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_Postrouting((( firewall.ast.types.Rule )r))) {
return "POSTROUTING";}}}{if (tom_is_sort_Rule(r)) {if (tom_is_fun_sym_UserRuleDef((( firewall.ast.types.Rule )r))) {
return tom_get_slot_UserRuleDef_user_rule_name((( firewall.ast.types.Rule )r));}}}}

  }

  public String toString(InstructionList il) {
    StringBuffer sb = new StringBuffer() ;
    {{if (tom_is_sort_InstructionList(il)) {if (tom_is_fun_sym_InstructionList((( firewall.ast.types.InstructionList )il))) { firewall.ast.types.InstructionList  tomMatch4NameNumber_end_4=(( firewall.ast.types.InstructionList )il);do {{if (!(tom_is_empty_InstructionList_InstructionList(tomMatch4NameNumber_end_4))) {

        sb.append(toString(tom_get_head_InstructionList_InstructionList(tomMatch4NameNumber_end_4)) + "\n") ;
      }if (tom_is_empty_InstructionList_InstructionList(tomMatch4NameNumber_end_4)) {tomMatch4NameNumber_end_4=(( firewall.ast.types.InstructionList )il);} else {tomMatch4NameNumber_end_4=tom_get_tail_InstructionList_InstructionList(tomMatch4NameNumber_end_4);}}} while(!(tom_equal_term_InstructionList(tomMatch4NameNumber_end_4, (( firewall.ast.types.InstructionList )il))));}}}}

    return sb.toString() ;
  }

  public String toString(Instruction i) {
    {{if (tom_is_sort_Instruction(i)) {if (tom_is_fun_sym_Ins((( firewall.ast.types.Instruction )i))) {

        return toString(tom_get_slot_Ins_target((( firewall.ast.types.Instruction )i))) + "\t" + toString(tom_get_slot_Ins_prot((( firewall.ast.types.Instruction )i))) + " " + toString(tom_get_slot_Ins_opt((( firewall.ast.types.Instruction )i))) + " " + toString(tom_get_slot_Ins_source((( firewall.ast.types.Instruction )i))) + "\t\t" + toString(tom_get_slot_Ins_destination((( firewall.ast.types.Instruction )i))) 
	       		    + "\t\t" + toString(tom_get_slot_Ins_options((( firewall.ast.types.Instruction )i))) ;
      }}}}

  }

  public String toString(Target t) {
    {{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Accept((( firewall.ast.types.Target )t))) {
return "ACCEPT";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Classify((( firewall.ast.types.Target )t))) {
return "CLASSIFY";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_ClusterIp((( firewall.ast.types.Target )t))) {
return "CLUSTERIP";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_ConnMark((( firewall.ast.types.Target )t))) {
return "CONN_MARK";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_ConnSecMark((( firewall.ast.types.Target )t))) {
return "CONNSECMARK";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Dnat((( firewall.ast.types.Target )t))) {
return "DNAT";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Drop((( firewall.ast.types.Target )t))) {
return "DROP";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Dscp((( firewall.ast.types.Target )t))) {
return "DSCP";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Ecn((( firewall.ast.types.Target )t))) {
return "ECN";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Log((( firewall.ast.types.Target )t))) {
return "LOG";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Mark((( firewall.ast.types.Target )t))) {
return "MARK";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Masquerade((( firewall.ast.types.Target )t))) {
return "MASQUERADE";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Mirror((( firewall.ast.types.Target )t))) {
return "MIRROR";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_NetMap((( firewall.ast.types.Target )t))) {
return "NETMAP";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_NfLog((( firewall.ast.types.Target )t))) {
return "NFLOG";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_NfQueue((( firewall.ast.types.Target )t))) {
return "NFQUEUE";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_NoTrack((( firewall.ast.types.Target )t))) {
return "NOTRACK";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Queue((( firewall.ast.types.Target )t))) {
return "QUEUE";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Redirect((( firewall.ast.types.Target )t))) {
return "REDIRECT";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Reject((( firewall.ast.types.Target )t))) {
return "REJECT";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Return((( firewall.ast.types.Target )t))) {
return "RETURN";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_UserRuleCall((( firewall.ast.types.Target )t))) {
return tom_get_slot_UserRuleCall_user_rule_name((( firewall.ast.types.Target )t));}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Same((( firewall.ast.types.Target )t))) {
return "SAME";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_SecMark((( firewall.ast.types.Target )t))) {
return "SECMARK";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Snat((( firewall.ast.types.Target )t))) {
return "SNAT";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_TcpMss((( firewall.ast.types.Target )t))) {
return "TCPMSS";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Tos((( firewall.ast.types.Target )t))) {
return "TOS";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Trace((( firewall.ast.types.Target )t))) {
return "TRACE";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Ttl((( firewall.ast.types.Target )t))) {
return "TTL";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Ulog((( firewall.ast.types.Target )t))) {
return "ULOG";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Ipv4OptSstRip((( firewall.ast.types.Target )t))) {
return "IPV4OPTSSTRIP";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Set((( firewall.ast.types.Target )t))) {
return "SET";}}}{if (tom_is_sort_Target(t)) {if (tom_is_fun_sym_Tarpit((( firewall.ast.types.Target )t))) {
return "TARPIT";}}}}

  }

  public String toString(Protocol p) {
    {{if (tom_is_sort_Protocol(p)) {if (tom_is_fun_sym_All_((( firewall.ast.types.Protocol )p))) {
return "all ";}}}{if (tom_is_sort_Protocol(p)) {if (tom_is_fun_sym_Icmp((( firewall.ast.types.Protocol )p))) {
return "icmp";}}}{if (tom_is_sort_Protocol(p)) {if (tom_is_fun_sym_Udp((( firewall.ast.types.Protocol )p))) {
return "udp ";}}}{if (tom_is_sort_Protocol(p)) {if (tom_is_fun_sym_Tcp((( firewall.ast.types.Protocol )p))) {
return "tcp ";}}}}

  }

  public String toString(Opts o) {
    {{if (tom_is_sort_Opts(o)) {if (tom_is_fun_sym_None((( firewall.ast.types.Opts )o))) {
return "--";}}}}

  }

  public String toString(Communication c) {
    {{if (tom_is_sort_Communication(c)) {if (tom_is_fun_sym_Anywhere((( firewall.ast.types.Communication )c))) {
return "anywhere";}}}{if (tom_is_sort_Communication(c)) {if (tom_is_fun_sym_Localhost((( firewall.ast.types.Communication )c))) {
return "localhost";}}}{if (tom_is_sort_Communication(c)) {if (tom_is_fun_sym_Ip_Addr((( firewall.ast.types.Communication )c))) {
return tom_get_slot_Ip_Addr_ip((( firewall.ast.types.Communication )c));}}}}

  }

  public String toString(Options lo) {
    {{if (tom_is_sort_Options(lo)) {if (tom_is_fun_sym_Options((( firewall.ast.types.Options )lo))) {
return tom_get_slot_Options_lo((( firewall.ast.types.Options )lo));}}}}

  }

  public static void main(String[] args) {
    System.out.println(toString(
				Blocks(
					Block(
						Input(),
						InstructionList(
								Ins(
								    Accept(),
								    All(),
								    None(),
								    Anywhere(),
								    Anywhere(),
								    "optionsssssss"
								    ),
								nil
								)
					     )
				      )
			       )
	               ) ;
  }

}