/* Generated by TOM (version 20080112 (src)): Do not edit this file */import accesscontrol.*;
import accesscontrol.types.*;

public class Tests {

  /* Generated by TOM (version 20080112 (src)): Do not edit this file *//* Generated by TOM (version 20080112 (src)): Do not edit this file */private static boolean tom_equal_term_boolean(boolean t1, boolean t2) { return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) { return  true ;} /* Generated by TOM (version 20080112 (src)): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  t1==t2 ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_State(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_State(Object t) { return  (t instanceof accesscontrol.types.State) ;}private static boolean tom_equal_term_Response(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Response(Object t) { return  (t instanceof accesscontrol.types.Response) ;}private static boolean tom_equal_term_RequestType(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_RequestType(Object t) { return  (t instanceof accesscontrol.types.RequestType) ;}private static boolean tom_equal_term_ListOfAccesses(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_ListOfAccesses(Object t) { return  (t instanceof accesscontrol.types.ListOfAccesses) ;}private static boolean tom_equal_term_SecurityLevelsSet(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevelsSet(Object t) { return  (t instanceof accesscontrol.types.SecurityLevelsSet) ;}private static boolean tom_equal_term_Resource(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Resource(Object t) { return  (t instanceof accesscontrol.types.Resource) ;}private static boolean tom_equal_term_ListOfResources(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_ListOfResources(Object t) { return  (t instanceof accesscontrol.types.ListOfResources) ;}private static boolean tom_equal_term_SecurityLevelsLattice(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevelsLattice(Object t) { return  (t instanceof accesscontrol.types.SecurityLevelsLattice) ;}private static boolean tom_equal_term_AccessMode(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_AccessMode(Object t) { return  (t instanceof accesscontrol.types.AccessMode) ;}private static boolean tom_equal_term_ListOfSubjects(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_ListOfSubjects(Object t) { return  (t instanceof accesscontrol.types.ListOfSubjects) ;}private static boolean tom_equal_term_Subject(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Subject(Object t) { return  (t instanceof accesscontrol.types.Subject) ;}private static boolean tom_equal_term_AccessType(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_AccessType(Object t) { return  (t instanceof accesscontrol.types.AccessType) ;}private static boolean tom_equal_term_SecurityLevel(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevel(Object t) { return  (t instanceof accesscontrol.types.SecurityLevel) ;}private static boolean tom_equal_term_RequestUponState(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_RequestUponState(Object t) { return  (t instanceof accesscontrol.types.RequestUponState) ;}private static boolean tom_equal_term_Access(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Access(Object t) { return  (t instanceof accesscontrol.types.Access) ;}private static boolean tom_equal_term_Request(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Request(Object t) { return  (t instanceof accesscontrol.types.Request) ;}private static boolean tom_equal_term_Decision(Object t1, Object t2) { return  (t1==t2) ;}private static boolean tom_is_sort_Decision(Object t) { return  (t instanceof accesscontrol.types.Decision) ;}private static  accesscontrol.types.State  tom_make_state( accesscontrol.types.ListOfAccesses  t0,  accesscontrol.types.ListOfAccesses  t1) { return  accesscontrol.types.state.state.make(t0, t1) ; }private static  accesscontrol.types.AccessMode  tom_make_am( int  t0) { return  accesscontrol.types.accessmode.am.make(t0) ; }private static  accesscontrol.types.SecurityLevel  tom_make_sl( int  t0) { return  accesscontrol.types.securitylevel.sl.make(t0) ; }private static boolean tom_is_fun_sym_accesses( accesscontrol.types.ListOfAccesses  t) { return  ((t instanceof accesscontrol.types.listofaccesses.Consaccesses) || (t instanceof accesscontrol.types.listofaccesses.Emptyaccesses)) ;}private static  accesscontrol.types.ListOfAccesses  tom_empty_list_accesses() { return  accesscontrol.types.listofaccesses.Emptyaccesses.make() ; }private static  accesscontrol.types.ListOfAccesses  tom_cons_list_accesses( accesscontrol.types.Access  e,  accesscontrol.types.ListOfAccesses  l) { return  accesscontrol.types.listofaccesses.Consaccesses.make(e,l) ; }private static  accesscontrol.types.Access  tom_get_head_accesses_ListOfAccesses( accesscontrol.types.ListOfAccesses  l) { return  l.getHeadaccesses() ;}private static  accesscontrol.types.ListOfAccesses  tom_get_tail_accesses_ListOfAccesses( accesscontrol.types.ListOfAccesses  l) { return  l.getTailaccesses() ;}private static boolean tom_is_empty_accesses_ListOfAccesses( accesscontrol.types.ListOfAccesses  l) { return  l.isEmptyaccesses() ;}   private static   accesscontrol.types.ListOfAccesses  tom_append_list_accesses( accesscontrol.types.ListOfAccesses l1,  accesscontrol.types.ListOfAccesses  l2) {     if( l1.isEmptyaccesses() ) {       return l2;     } else if( l2.isEmptyaccesses() ) {       return l1;     } else if(  l1.getTailaccesses() .isEmptyaccesses() ) {       return  accesscontrol.types.listofaccesses.Consaccesses.make( l1.getHeadaccesses() ,l2) ;     } else {       return  accesscontrol.types.listofaccesses.Consaccesses.make( l1.getHeadaccesses() ,tom_append_list_accesses( l1.getTailaccesses() ,l2)) ;     }   }   private static   accesscontrol.types.ListOfAccesses  tom_get_slice_accesses( accesscontrol.types.ListOfAccesses  begin,  accesscontrol.types.ListOfAccesses  end, accesscontrol.types.ListOfAccesses  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyaccesses()  ||  (end==tom_empty_list_accesses()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.listofaccesses.Consaccesses.make( begin.getHeadaccesses() ,( accesscontrol.types.ListOfAccesses )tom_get_slice_accesses( begin.getTailaccesses() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_slSet( accesscontrol.types.SecurityLevelsSet  t) { return  ((t instanceof accesscontrol.types.securitylevelsset.ConsslSet) || (t instanceof accesscontrol.types.securitylevelsset.EmptyslSet)) ;}private static  accesscontrol.types.SecurityLevelsSet  tom_empty_list_slSet() { return  accesscontrol.types.securitylevelsset.EmptyslSet.make() ; }private static  accesscontrol.types.SecurityLevelsSet  tom_cons_list_slSet( accesscontrol.types.SecurityLevel  e,  accesscontrol.types.SecurityLevelsSet  l) { return  accesscontrol.types.securitylevelsset.ConsslSet.make(e,l) ; }private static  accesscontrol.types.SecurityLevel  tom_get_head_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) { return  l.getHeadslSet() ;}private static  accesscontrol.types.SecurityLevelsSet  tom_get_tail_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) { return  l.getTailslSet() ;}private static boolean tom_is_empty_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) { return  l.isEmptyslSet() ;}   private static   accesscontrol.types.SecurityLevelsSet  tom_append_list_slSet( accesscontrol.types.SecurityLevelsSet l1,  accesscontrol.types.SecurityLevelsSet  l2) {     if( l1.isEmptyslSet() ) {       return l2;     } else if( l2.isEmptyslSet() ) {       return l1;     } else if(  l1.getTailslSet() .isEmptyslSet() ) {       return  accesscontrol.types.securitylevelsset.ConsslSet.make( l1.getHeadslSet() ,l2) ;     } else {       return  accesscontrol.types.securitylevelsset.ConsslSet.make( l1.getHeadslSet() ,tom_append_list_slSet( l1.getTailslSet() ,l2)) ;     }   }   private static   accesscontrol.types.SecurityLevelsSet  tom_get_slice_slSet( accesscontrol.types.SecurityLevelsSet  begin,  accesscontrol.types.SecurityLevelsSet  end, accesscontrol.types.SecurityLevelsSet  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyslSet()  ||  (end==tom_empty_list_slSet()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.securitylevelsset.ConsslSet.make( begin.getHeadslSet() ,( accesscontrol.types.SecurityLevelsSet )tom_get_slice_slSet( begin.getTailslSet() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_slLattice( accesscontrol.types.SecurityLevelsLattice  t) { return  ((t instanceof accesscontrol.types.securitylevelslattice.ConsslLattice) || (t instanceof accesscontrol.types.securitylevelslattice.EmptyslLattice)) ;}private static  accesscontrol.types.SecurityLevelsLattice  tom_empty_list_slLattice() { return  accesscontrol.types.securitylevelslattice.EmptyslLattice.make() ; }private static  accesscontrol.types.SecurityLevelsLattice  tom_cons_list_slLattice( accesscontrol.types.SecurityLevelsSet  e,  accesscontrol.types.SecurityLevelsLattice  l) { return  accesscontrol.types.securitylevelslattice.ConsslLattice.make(e,l) ; }private static  accesscontrol.types.SecurityLevelsSet  tom_get_head_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) { return  l.getHeadslLattice() ;}private static  accesscontrol.types.SecurityLevelsLattice  tom_get_tail_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) { return  l.getTailslLattice() ;}private static boolean tom_is_empty_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) { return  l.isEmptyslLattice() ;}   private static   accesscontrol.types.SecurityLevelsLattice  tom_append_list_slLattice( accesscontrol.types.SecurityLevelsLattice l1,  accesscontrol.types.SecurityLevelsLattice  l2) {     if( l1.isEmptyslLattice() ) {       return l2;     } else if( l2.isEmptyslLattice() ) {       return l1;     } else if(  l1.getTailslLattice() .isEmptyslLattice() ) {       return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( l1.getHeadslLattice() ,l2) ;     } else {       return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( l1.getHeadslLattice() ,tom_append_list_slLattice( l1.getTailslLattice() ,l2)) ;     }   }   private static   accesscontrol.types.SecurityLevelsLattice  tom_get_slice_slLattice( accesscontrol.types.SecurityLevelsLattice  begin,  accesscontrol.types.SecurityLevelsLattice  end, accesscontrol.types.SecurityLevelsLattice  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyslLattice()  ||  (end==tom_empty_list_slLattice()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( begin.getHeadslLattice() ,( accesscontrol.types.SecurityLevelsLattice )tom_get_slice_slLattice( begin.getTailslLattice() ,end,tail)) ;   }    

	public static void main(String[] args) {

		System.out.println("START ---------------------");

    AccessMode am = tom_make_am(0);
		System.out.println("AM: "+am);

    SecurityLevelsLattice sls = tom_cons_list_slLattice(tom_cons_list_slSet(tom_make_sl(0),tom_cons_list_slSet(tom_make_sl(1),tom_empty_list_slSet())),tom_cons_list_slLattice(tom_cons_list_slSet(tom_make_sl(0),tom_cons_list_slSet(tom_make_sl(1),tom_empty_list_slSet())),tom_empty_list_slLattice()));
    int c = sls.compare(tom_make_sl(0),tom_make_sl(1));
		System.out.println("C ="+c);
    c = sls.compare(tom_make_sl(1),tom_make_sl(0));
		System.out.println("C ="+c);
    c = sls.compare(tom_make_sl(1),tom_make_sl(1));
		System.out.println("C ="+c);
    c = sls.compare(tom_make_sl(10),tom_make_sl(0));
		System.out.println("C ="+c);

    State s = tom_make_state(tom_empty_list_accesses(),tom_empty_list_accesses());
		System.out.println("State: "+s);
	}
	
	
	

}
