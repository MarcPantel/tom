/* Generated by TOM (version 20080216 (src)): Do not edit this file */import accesscontrol.*;
import accesscontrol.types.*;
import policy.*;
import java.util.*;

public class Tests {

  /* Generated by TOM (version 20080216 (src)): Do not edit this file *//* Generated by TOM (version 20080216 (src)): Do not edit this file */private static boolean tom_equal_term_boolean(boolean t1, boolean t2) {return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) {return  true ;} /* Generated by TOM (version 20080216 (src)): Do not edit this file *//* Generated by TOM (version 20080216 (src)): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} /* Generated by TOM (version 20080216 (src)): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static boolean tom_equal_term_State(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_State(Object t) {return  (t instanceof accesscontrol.types.State) ;}private static boolean tom_equal_term_ListOfRequests(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_ListOfRequests(Object t) {return  (t instanceof accesscontrol.types.ListOfRequests) ;}private static boolean tom_equal_term_Response(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Response(Object t) {return  (t instanceof accesscontrol.types.Response) ;}private static boolean tom_equal_term_RequestType(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_RequestType(Object t) {return  (t instanceof accesscontrol.types.RequestType) ;}private static boolean tom_equal_term_ListOfAccesses(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_ListOfAccesses(Object t) {return  (t instanceof accesscontrol.types.ListOfAccesses) ;}private static boolean tom_equal_term_SecurityLevelsSet(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevelsSet(Object t) {return  (t instanceof accesscontrol.types.SecurityLevelsSet) ;}private static boolean tom_equal_term_Resource(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Resource(Object t) {return  (t instanceof accesscontrol.types.Resource) ;}private static boolean tom_equal_term_ListOfResources(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_ListOfResources(Object t) {return  (t instanceof accesscontrol.types.ListOfResources) ;}private static boolean tom_equal_term_SecurityLevelsLattice(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevelsLattice(Object t) {return  (t instanceof accesscontrol.types.SecurityLevelsLattice) ;}private static boolean tom_equal_term_AccessMode(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_AccessMode(Object t) {return  (t instanceof accesscontrol.types.AccessMode) ;}private static boolean tom_equal_term_ListOfSubjects(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_ListOfSubjects(Object t) {return  (t instanceof accesscontrol.types.ListOfSubjects) ;}private static boolean tom_equal_term_Subject(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Subject(Object t) {return  (t instanceof accesscontrol.types.Subject) ;}private static boolean tom_equal_term_AccessType(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_AccessType(Object t) {return  (t instanceof accesscontrol.types.AccessType) ;}private static boolean tom_equal_term_SecurityLevel(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_SecurityLevel(Object t) {return  (t instanceof accesscontrol.types.SecurityLevel) ;}private static boolean tom_equal_term_RequestUponState(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_RequestUponState(Object t) {return  (t instanceof accesscontrol.types.RequestUponState) ;}private static boolean tom_equal_term_Access(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Access(Object t) {return  (t instanceof accesscontrol.types.Access) ;}private static boolean tom_equal_term_Request(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Request(Object t) {return  (t instanceof accesscontrol.types.Request) ;}private static boolean tom_equal_term_Decision(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Decision(Object t) {return  (t instanceof accesscontrol.types.Decision) ;}private static  accesscontrol.types.RequestType  tom_make_add() { return  accesscontrol.types.requesttype.add.make() ;}private static  accesscontrol.types.Resource  tom_make_resource( int  t0,  accesscontrol.types.SecurityLevel  t1) { return  accesscontrol.types.resource.resource.make(t0, t1) ;}private static boolean tom_is_fun_sym_read( accesscontrol.types.AccessMode  t) {return  (t instanceof accesscontrol.types.accessmode.read) ;}private static  accesscontrol.types.AccessMode  tom_make_read() { return  accesscontrol.types.accessmode.read.make() ;}private static  accesscontrol.types.AccessMode  tom_make_write() { return  accesscontrol.types.accessmode.write.make() ;}private static  accesscontrol.types.AccessMode  tom_make_am( int  t0) { return  accesscontrol.types.accessmode.am.make(t0) ;}private static  accesscontrol.types.Subject  tom_make_subject( int  t0,  accesscontrol.types.SecurityLevel  t1) { return  accesscontrol.types.subject.subject.make(t0, t1) ;}private static  accesscontrol.types.AccessType  tom_make_explicit() { return  accesscontrol.types.accesstype.explicit.make() ;}private static  accesscontrol.types.SecurityLevel  tom_make_sl( String  t0) { return  accesscontrol.types.securitylevel.sl.make(t0) ;}private static boolean tom_is_fun_sym_access( accesscontrol.types.Access  t) {return  (t instanceof accesscontrol.types.access.access) ;}private static  accesscontrol.types.Access  tom_make_access( accesscontrol.types.Subject  t0,  accesscontrol.types.Resource  t1,  accesscontrol.types.AccessMode  t2,  accesscontrol.types.AccessType  t3) { return  accesscontrol.types.access.access.make(t0, t1, t2, t3) ;}private static  accesscontrol.types.Subject  tom_get_slot_access_subject( accesscontrol.types.Access  t) {return  t.getsubject() ;}private static  accesscontrol.types.Resource  tom_get_slot_access_resource( accesscontrol.types.Access  t) {return  t.getresource() ;}private static  accesscontrol.types.AccessMode  tom_get_slot_access_am( accesscontrol.types.Access  t) {return  t.getam() ;}private static  accesscontrol.types.AccessType  tom_get_slot_access_at( accesscontrol.types.Access  t) {return  t.getat() ;}private static boolean tom_is_fun_sym_request( accesscontrol.types.Request  t) {return  (t instanceof accesscontrol.types.request.request) ;}private static  accesscontrol.types.Request  tom_make_request( accesscontrol.types.RequestType  t0,  accesscontrol.types.Access  t1) { return  accesscontrol.types.request.request.make(t0, t1) ;}private static  accesscontrol.types.RequestType  tom_get_slot_request_rt( accesscontrol.types.Request  t) {return  t.getrt() ;}private static  accesscontrol.types.Access  tom_get_slot_request_access( accesscontrol.types.Request  t) {return  t.getaccess() ;}private static boolean tom_is_fun_sym_requests( accesscontrol.types.ListOfRequests  t) {return  ((t instanceof accesscontrol.types.listofrequests.Consrequests) || (t instanceof accesscontrol.types.listofrequests.Emptyrequests)) ;}private static  accesscontrol.types.ListOfRequests  tom_empty_list_requests() { return  accesscontrol.types.listofrequests.Emptyrequests.make() ;}private static  accesscontrol.types.ListOfRequests  tom_cons_list_requests( accesscontrol.types.Request  e,  accesscontrol.types.ListOfRequests  l) { return  accesscontrol.types.listofrequests.Consrequests.make(e,l) ;}private static  accesscontrol.types.Request  tom_get_head_requests_ListOfRequests( accesscontrol.types.ListOfRequests  l) {return  l.getHeadrequests() ;}private static  accesscontrol.types.ListOfRequests  tom_get_tail_requests_ListOfRequests( accesscontrol.types.ListOfRequests  l) {return  l.getTailrequests() ;}private static boolean tom_is_empty_requests_ListOfRequests( accesscontrol.types.ListOfRequests  l) {return  l.isEmptyrequests() ;}   private static   accesscontrol.types.ListOfRequests  tom_append_list_requests( accesscontrol.types.ListOfRequests l1,  accesscontrol.types.ListOfRequests  l2) {     if( l1.isEmptyrequests() ) {       return l2;     } else if( l2.isEmptyrequests() ) {       return l1;     } else if(  l1.getTailrequests() .isEmptyrequests() ) {       return  accesscontrol.types.listofrequests.Consrequests.make( l1.getHeadrequests() ,l2) ;     } else {       return  accesscontrol.types.listofrequests.Consrequests.make( l1.getHeadrequests() ,tom_append_list_requests( l1.getTailrequests() ,l2)) ;     }   }   private static   accesscontrol.types.ListOfRequests  tom_get_slice_requests( accesscontrol.types.ListOfRequests  begin,  accesscontrol.types.ListOfRequests  end, accesscontrol.types.ListOfRequests  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyrequests()  ||  (end==tom_empty_list_requests()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.listofrequests.Consrequests.make( begin.getHeadrequests() ,( accesscontrol.types.ListOfRequests )tom_get_slice_requests( begin.getTailrequests() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_slSet( accesscontrol.types.SecurityLevelsSet  t) {return  ((t instanceof accesscontrol.types.securitylevelsset.ConsslSet) || (t instanceof accesscontrol.types.securitylevelsset.EmptyslSet)) ;}private static  accesscontrol.types.SecurityLevelsSet  tom_empty_list_slSet() { return  accesscontrol.types.securitylevelsset.EmptyslSet.make() ;}private static  accesscontrol.types.SecurityLevelsSet  tom_cons_list_slSet( accesscontrol.types.SecurityLevel  e,  accesscontrol.types.SecurityLevelsSet  l) { return  accesscontrol.types.securitylevelsset.ConsslSet.make(e,l) ;}private static  accesscontrol.types.SecurityLevel  tom_get_head_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) {return  l.getHeadslSet() ;}private static  accesscontrol.types.SecurityLevelsSet  tom_get_tail_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) {return  l.getTailslSet() ;}private static boolean tom_is_empty_slSet_SecurityLevelsSet( accesscontrol.types.SecurityLevelsSet  l) {return  l.isEmptyslSet() ;}   private static   accesscontrol.types.SecurityLevelsSet  tom_append_list_slSet( accesscontrol.types.SecurityLevelsSet l1,  accesscontrol.types.SecurityLevelsSet  l2) {     if( l1.isEmptyslSet() ) {       return l2;     } else if( l2.isEmptyslSet() ) {       return l1;     } else if(  l1.getTailslSet() .isEmptyslSet() ) {       return  accesscontrol.types.securitylevelsset.ConsslSet.make( l1.getHeadslSet() ,l2) ;     } else {       return  accesscontrol.types.securitylevelsset.ConsslSet.make( l1.getHeadslSet() ,tom_append_list_slSet( l1.getTailslSet() ,l2)) ;     }   }   private static   accesscontrol.types.SecurityLevelsSet  tom_get_slice_slSet( accesscontrol.types.SecurityLevelsSet  begin,  accesscontrol.types.SecurityLevelsSet  end, accesscontrol.types.SecurityLevelsSet  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyslSet()  ||  (end==tom_empty_list_slSet()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.securitylevelsset.ConsslSet.make( begin.getHeadslSet() ,( accesscontrol.types.SecurityLevelsSet )tom_get_slice_slSet( begin.getTailslSet() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_resources( accesscontrol.types.ListOfResources  t) {return  ((t instanceof accesscontrol.types.listofresources.Consresources) || (t instanceof accesscontrol.types.listofresources.Emptyresources)) ;}private static  accesscontrol.types.ListOfResources  tom_empty_list_resources() { return  accesscontrol.types.listofresources.Emptyresources.make() ;}private static  accesscontrol.types.ListOfResources  tom_cons_list_resources( accesscontrol.types.Resource  e,  accesscontrol.types.ListOfResources  l) { return  accesscontrol.types.listofresources.Consresources.make(e,l) ;}private static  accesscontrol.types.Resource  tom_get_head_resources_ListOfResources( accesscontrol.types.ListOfResources  l) {return  l.getHeadresources() ;}private static  accesscontrol.types.ListOfResources  tom_get_tail_resources_ListOfResources( accesscontrol.types.ListOfResources  l) {return  l.getTailresources() ;}private static boolean tom_is_empty_resources_ListOfResources( accesscontrol.types.ListOfResources  l) {return  l.isEmptyresources() ;}   private static   accesscontrol.types.ListOfResources  tom_append_list_resources( accesscontrol.types.ListOfResources l1,  accesscontrol.types.ListOfResources  l2) {     if( l1.isEmptyresources() ) {       return l2;     } else if( l2.isEmptyresources() ) {       return l1;     } else if(  l1.getTailresources() .isEmptyresources() ) {       return  accesscontrol.types.listofresources.Consresources.make( l1.getHeadresources() ,l2) ;     } else {       return  accesscontrol.types.listofresources.Consresources.make( l1.getHeadresources() ,tom_append_list_resources( l1.getTailresources() ,l2)) ;     }   }   private static   accesscontrol.types.ListOfResources  tom_get_slice_resources( accesscontrol.types.ListOfResources  begin,  accesscontrol.types.ListOfResources  end, accesscontrol.types.ListOfResources  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyresources()  ||  (end==tom_empty_list_resources()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.listofresources.Consresources.make( begin.getHeadresources() ,( accesscontrol.types.ListOfResources )tom_get_slice_resources( begin.getTailresources() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_slLattice( accesscontrol.types.SecurityLevelsLattice  t) {return  ((t instanceof accesscontrol.types.securitylevelslattice.ConsslLattice) || (t instanceof accesscontrol.types.securitylevelslattice.EmptyslLattice)) ;}private static  accesscontrol.types.SecurityLevelsLattice  tom_empty_list_slLattice() { return  accesscontrol.types.securitylevelslattice.EmptyslLattice.make() ;}private static  accesscontrol.types.SecurityLevelsLattice  tom_cons_list_slLattice( accesscontrol.types.SecurityLevelsSet  e,  accesscontrol.types.SecurityLevelsLattice  l) { return  accesscontrol.types.securitylevelslattice.ConsslLattice.make(e,l) ;}private static  accesscontrol.types.SecurityLevelsSet  tom_get_head_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) {return  l.getHeadslLattice() ;}private static  accesscontrol.types.SecurityLevelsLattice  tom_get_tail_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) {return  l.getTailslLattice() ;}private static boolean tom_is_empty_slLattice_SecurityLevelsLattice( accesscontrol.types.SecurityLevelsLattice  l) {return  l.isEmptyslLattice() ;}   private static   accesscontrol.types.SecurityLevelsLattice  tom_append_list_slLattice( accesscontrol.types.SecurityLevelsLattice l1,  accesscontrol.types.SecurityLevelsLattice  l2) {     if( l1.isEmptyslLattice() ) {       return l2;     } else if( l2.isEmptyslLattice() ) {       return l1;     } else if(  l1.getTailslLattice() .isEmptyslLattice() ) {       return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( l1.getHeadslLattice() ,l2) ;     } else {       return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( l1.getHeadslLattice() ,tom_append_list_slLattice( l1.getTailslLattice() ,l2)) ;     }   }   private static   accesscontrol.types.SecurityLevelsLattice  tom_get_slice_slLattice( accesscontrol.types.SecurityLevelsLattice  begin,  accesscontrol.types.SecurityLevelsLattice  end, accesscontrol.types.SecurityLevelsLattice  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyslLattice()  ||  (end==tom_empty_list_slLattice()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.securitylevelslattice.ConsslLattice.make( begin.getHeadslLattice() ,( accesscontrol.types.SecurityLevelsLattice )tom_get_slice_slLattice( begin.getTailslLattice() ,end,tail)) ;   }   private static boolean tom_is_fun_sym_subjects( accesscontrol.types.ListOfSubjects  t) {return  ((t instanceof accesscontrol.types.listofsubjects.Conssubjects) || (t instanceof accesscontrol.types.listofsubjects.Emptysubjects)) ;}private static  accesscontrol.types.ListOfSubjects  tom_empty_list_subjects() { return  accesscontrol.types.listofsubjects.Emptysubjects.make() ;}private static  accesscontrol.types.ListOfSubjects  tom_cons_list_subjects( accesscontrol.types.Subject  e,  accesscontrol.types.ListOfSubjects  l) { return  accesscontrol.types.listofsubjects.Conssubjects.make(e,l) ;}private static  accesscontrol.types.Subject  tom_get_head_subjects_ListOfSubjects( accesscontrol.types.ListOfSubjects  l) {return  l.getHeadsubjects() ;}private static  accesscontrol.types.ListOfSubjects  tom_get_tail_subjects_ListOfSubjects( accesscontrol.types.ListOfSubjects  l) {return  l.getTailsubjects() ;}private static boolean tom_is_empty_subjects_ListOfSubjects( accesscontrol.types.ListOfSubjects  l) {return  l.isEmptysubjects() ;}   private static   accesscontrol.types.ListOfSubjects  tom_append_list_subjects( accesscontrol.types.ListOfSubjects l1,  accesscontrol.types.ListOfSubjects  l2) {     if( l1.isEmptysubjects() ) {       return l2;     } else if( l2.isEmptysubjects() ) {       return l1;     } else if(  l1.getTailsubjects() .isEmptysubjects() ) {       return  accesscontrol.types.listofsubjects.Conssubjects.make( l1.getHeadsubjects() ,l2) ;     } else {       return  accesscontrol.types.listofsubjects.Conssubjects.make( l1.getHeadsubjects() ,tom_append_list_subjects( l1.getTailsubjects() ,l2)) ;     }   }   private static   accesscontrol.types.ListOfSubjects  tom_get_slice_subjects( accesscontrol.types.ListOfSubjects  begin,  accesscontrol.types.ListOfSubjects  end, accesscontrol.types.ListOfSubjects  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptysubjects()  ||  (end==tom_empty_list_subjects()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  accesscontrol.types.listofsubjects.Conssubjects.make( begin.getHeadsubjects() ,( accesscontrol.types.ListOfSubjects )tom_get_slice_subjects( begin.getTailsubjects() ,end,tail)) ;   }    

	public static void main(String[] args) {
    //     SecurityLevelsLattice sls = `slLattice(slSet(sl("very low"),sl("low")),slSet(sl("high"),sl(4),sl(5)));
    SecurityLevelsLattice sls = tom_cons_list_slLattice(tom_cons_list_slSet(tom_make_sl("low"),tom_cons_list_slSet(tom_make_sl("high"),tom_empty_list_slSet())),tom_empty_list_slLattice());
    //     boolean c = `sls.smaller(`sl("low"),`sl("high"));
    // 		System.out.println("C ="+c);

		System.out.println("START  BLP---------------------");

    BLP blp = new BLP(sls);

    Resource r1 = tom_make_resource(1,tom_make_sl("low"));
    Resource r2 = tom_make_resource(2,tom_make_sl("medium"));
    Resource r3 = tom_make_resource(3,tom_make_sl("high"));
    Subject s1 = tom_make_subject(1,tom_make_sl("high"));
    Subject s2 = tom_make_subject(2,tom_make_sl("medium"));
    Request req = tom_make_request(tom_make_add(),tom_make_access(s1,r3,tom_make_read(),tom_make_explicit()));
    Decision result = blp.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+blp);

    req = tom_make_request(tom_make_add(),tom_make_access(s1,r2,tom_make_write(),tom_make_explicit()));
    result = blp.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+blp); 

    req = tom_make_request(tom_make_add(),tom_make_access(s2,r2,tom_make_read(),tom_make_explicit()));
    result = blp.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+blp);

    req = tom_make_request(tom_make_add(),tom_make_access(s2,r1,tom_make_write(),tom_make_explicit()));
    result = blp.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+blp);

		System.out.println("\nVALID STATUS: "+ blp.valid()+"\n");


		System.out.println("START  McLean ---------------------");

    McLean mcl = new McLean(sls);

    req = tom_make_request(tom_make_add(),tom_make_access(s1,r3,tom_make_read(),tom_make_explicit()));
    result = mcl.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+mcl);

    //mcl.transition(`request(add(),access(s1,r3,write(),explicit())));
    //mcl.transition(`request(add(),access(s1,r2,read(),explicit())));

    req = tom_make_request(tom_make_add(),tom_make_access(s1,r2,tom_make_write(),tom_make_explicit()));
    result = mcl.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+mcl); 

    req = tom_make_request(tom_make_add(),tom_make_access(s2,r2,tom_make_read(),tom_make_explicit()));
    result = mcl.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+mcl);

    //mcl.transition(`request(add(),access(s2,r2,write(),explicit())));
    //mcl.transition(`request(add(),access(s2,r1,read(),explicit())));

    req = tom_make_request(tom_make_add(),tom_make_access(s2,r1,tom_make_write(),tom_make_explicit()));
    result = mcl.transition(req);
		System.out.println("Request: "+req+"------------------------------------>"+result);
		System.out.println(""+mcl);

		System.out.println("\nVALID STATUS: "+ mcl.valid()+"\n");

    /*
     * check a configuration
     */
    ListOfSubjects slist = tom_cons_list_subjects(s1,tom_cons_list_subjects(s2,tom_empty_list_subjects()));
    ListOfResources rlist = tom_cons_list_resources(r1,tom_cons_list_resources(r2,tom_cons_list_resources(r3,tom_empty_list_resources())));
    int numberOfAccessMode = 2;
   
    ListOfRequests lor = genListOfRequests(slist,rlist,numberOfAccessMode);
    System.out.println("lor = " + lor);

    System.out.println("check BLP");
    checker(new BLP(sls),lor, new HashSet<State>());

    System.out.println("check McLean");
    checker(new McLean(sls),lor, new HashSet<State>());

	}
	
  /*
   * a naive checker
   */
  private static ListOfRequests genListOfRequests(ListOfSubjects subjects, ListOfResources resources, int numberOfAccessMode) {
    ListOfRequests res = tom_empty_list_requests();
    {if (tom_is_sort_ListOfSubjects(subjects)) {{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumberfreshSubject_1=(( accesscontrol.types.ListOfSubjects )subjects);if (tom_is_fun_sym_subjects(tomMatch1NameNumberfreshSubject_1)) {{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumber_freshVar_0=tomMatch1NameNumberfreshSubject_1;{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumber_begin_2=tomMatch1NameNumber_freshVar_0;{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumber_end_3=tomMatch1NameNumber_freshVar_0;do {{{  accesscontrol.types.ListOfSubjects  tom_S1=tom_get_slice_subjects(tomMatch1NameNumber_begin_2,tomMatch1NameNumber_end_3,tom_empty_list_subjects());{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumber_freshVar_1=tomMatch1NameNumber_end_3;if (!(tom_is_empty_subjects_ListOfSubjects(tomMatch1NameNumber_freshVar_1))) {{  accesscontrol.types.Subject  tom_s=tom_get_head_subjects_ListOfSubjects(tomMatch1NameNumber_freshVar_1);{  accesscontrol.types.ListOfSubjects  tomMatch1NameNumber_freshVar_4=tom_get_tail_subjects_ListOfSubjects(tomMatch1NameNumber_freshVar_1);{  accesscontrol.types.ListOfSubjects  tom_S2=tomMatch1NameNumber_freshVar_4;if (tom_is_sort_ListOfResources(resources)) {{  accesscontrol.types.ListOfResources  tomMatch1NameNumberfreshSubject_2=(( accesscontrol.types.ListOfResources )resources);if (tom_is_fun_sym_resources(tomMatch1NameNumberfreshSubject_2)) {{  accesscontrol.types.ListOfResources  tomMatch1NameNumber_freshVar_6=tomMatch1NameNumberfreshSubject_2;{  accesscontrol.types.ListOfResources  tomMatch1NameNumber_begin_8=tomMatch1NameNumber_freshVar_6;{  accesscontrol.types.ListOfResources  tomMatch1NameNumber_end_9=tomMatch1NameNumber_freshVar_6;do {{{  accesscontrol.types.ListOfResources  tom_R1=tom_get_slice_resources(tomMatch1NameNumber_begin_8,tomMatch1NameNumber_end_9,tom_empty_list_resources());{  accesscontrol.types.ListOfResources  tomMatch1NameNumber_freshVar_7=tomMatch1NameNumber_end_9;if (!(tom_is_empty_resources_ListOfResources(tomMatch1NameNumber_freshVar_7))) {{  accesscontrol.types.Resource  tom_r=tom_get_head_resources_ListOfResources(tomMatch1NameNumber_freshVar_7);{  accesscontrol.types.ListOfResources  tomMatch1NameNumber_freshVar_10=tom_get_tail_resources_ListOfResources(tomMatch1NameNumber_freshVar_7);{  accesscontrol.types.ListOfResources  tom_R2=tomMatch1NameNumber_freshVar_10;if ( true ) {

        // we create a list with all possible access modes
        for(int level = 0 ; level<numberOfAccessMode ; level++) {
          AccessMode am = tom_make_am(level);
          res = tom_cons_list_requests(tom_make_request(tom_make_add(),tom_make_access(tom_s,tom_r,am,tom_make_explicit())),tom_append_list_requests(res,tom_empty_list_requests()));
        }
      }}}}}}}if (tom_is_empty_resources_ListOfResources(tomMatch1NameNumber_end_9)) {tomMatch1NameNumber_end_9=tomMatch1NameNumber_begin_8;} else {tomMatch1NameNumber_end_9=tom_get_tail_resources_ListOfResources(tomMatch1NameNumber_end_9);}}} while(!(tom_equal_term_ListOfResources(tomMatch1NameNumber_end_9, tomMatch1NameNumber_begin_8)));}}}}}}}}}}}}if (tom_is_empty_subjects_ListOfSubjects(tomMatch1NameNumber_end_3)) {tomMatch1NameNumber_end_3=tomMatch1NameNumber_begin_2;} else {tomMatch1NameNumber_end_3=tom_get_tail_subjects_ListOfSubjects(tomMatch1NameNumber_end_3);}}} while(!(tom_equal_term_ListOfSubjects(tomMatch1NameNumber_end_3, tomMatch1NameNumber_begin_2)));}}}}}}}

    return res;
  }

  private static void checker(MultilevelPolicy p, ListOfRequests lor, HashSet<State> space) {
    {if (tom_is_sort_ListOfRequests(lor)) {{  accesscontrol.types.ListOfRequests  tomMatch2NameNumberfreshSubject_1=(( accesscontrol.types.ListOfRequests )lor);if (tom_is_fun_sym_requests(tomMatch2NameNumberfreshSubject_1)) {{  accesscontrol.types.ListOfRequests  tomMatch2NameNumber_freshVar_0=tomMatch2NameNumberfreshSubject_1;{  accesscontrol.types.ListOfRequests  tomMatch2NameNumber_begin_2=tomMatch2NameNumber_freshVar_0;{  accesscontrol.types.ListOfRequests  tomMatch2NameNumber_end_3=tomMatch2NameNumber_freshVar_0;do {{{  accesscontrol.types.ListOfRequests  tom_R1=tom_get_slice_requests(tomMatch2NameNumber_begin_2,tomMatch2NameNumber_end_3,tom_empty_list_requests());{  accesscontrol.types.ListOfRequests  tomMatch2NameNumber_freshVar_1=tomMatch2NameNumber_end_3;if (!(tom_is_empty_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1))) {if (tom_is_fun_sym_request(tom_get_head_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1))) {{  accesscontrol.types.RequestType  tomMatch2NameNumber_freshVar_6=tom_get_slot_request_rt(tom_get_head_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1));{  accesscontrol.types.Access  tomMatch2NameNumber_freshVar_7=tom_get_slot_request_access(tom_get_head_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1));{  accesscontrol.types.RequestType  tom_rt=tomMatch2NameNumber_freshVar_6;if (tom_is_fun_sym_access(tomMatch2NameNumber_freshVar_7)) {{  accesscontrol.types.Subject  tomMatch2NameNumber_freshVar_8=tom_get_slot_access_subject(tomMatch2NameNumber_freshVar_7);{  accesscontrol.types.Resource  tomMatch2NameNumber_freshVar_9=tom_get_slot_access_resource(tomMatch2NameNumber_freshVar_7);{  accesscontrol.types.AccessMode  tomMatch2NameNumber_freshVar_10=tom_get_slot_access_am(tomMatch2NameNumber_freshVar_7);{  accesscontrol.types.AccessType  tomMatch2NameNumber_freshVar_11=tom_get_slot_access_at(tomMatch2NameNumber_freshVar_7);{  accesscontrol.types.Subject  tom_subject=tomMatch2NameNumber_freshVar_8;{  accesscontrol.types.Resource  tom_resource=tomMatch2NameNumber_freshVar_9;if (tom_is_fun_sym_read(tomMatch2NameNumber_freshVar_10)) {{  accesscontrol.types.AccessMode  tom_am=tomMatch2NameNumber_freshVar_10;{  accesscontrol.types.AccessType  tom_at=tomMatch2NameNumber_freshVar_11;{  accesscontrol.types.Request  tom_r=tom_get_head_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1);{  accesscontrol.types.ListOfRequests  tomMatch2NameNumber_freshVar_4=tom_get_tail_requests_ListOfRequests(tomMatch2NameNumber_freshVar_1);{  accesscontrol.types.ListOfRequests  tom_R2=tomMatch2NameNumber_freshVar_4;if ( true ) {




        MultilevelPolicy localp = (MultilevelPolicy) p.clone();
        Decision decision1 = localp.transition(tom_r);
        // needed with sol2:
        Decision decision2 = localp.transition(tom_make_request(tom_rt,tom_make_access(tom_subject,tom_resource,tom_make_write(),tom_at)));
       
        State cs = localp.getCurrentState();
        if(space.contains(cs)) {
          // CUT the search space
          // the current state has already be visited
          // note: do not perform a return, otherwise, the enumeration is stopped

          // En fait c'est surement faux : a-t-on le droit de couper l'espace de recherche
          // independamment des request R1*,R2* ?
          // l'ensemble space est commun a toutes les branches de l'exploration
        } else {
          space.add(cs);
          checker(localp,tom_append_list_requests(tom_R1,tom_append_list_requests(tom_R2,tom_empty_list_requests())),space);
          // note: do not perform a return, otherwise, the enumeration is stopped
        }
      
        //System.out.println("request  = " + `r);
        //System.out.println("decision = " + decision);
      }}}}}}}}}}}}}}}}}}}}}if (tom_is_empty_requests_ListOfRequests(tomMatch2NameNumber_end_3)) {tomMatch2NameNumber_end_3=tomMatch2NameNumber_begin_2;} else {tomMatch2NameNumber_end_3=tom_get_tail_requests_ListOfRequests(tomMatch2NameNumber_end_3);}}} while(!(tom_equal_term_ListOfRequests(tomMatch2NameNumber_end_3, tomMatch2NameNumber_begin_2)));}}}}}}if (tom_is_sort_ListOfRequests(lor)) {{  accesscontrol.types.ListOfRequests  tomMatch2NameNumberfreshSubject_1=(( accesscontrol.types.ListOfRequests )lor);if ( true ) {


        // this part is executed after the previous match
        // do the validation when no more request matches
        if(p.valid() == false) {
          System.out.println(p);
          System.out.println("LEAKAGE DETECTED");
        }

      }}}}


  }
	
	

}
