 module accesscontrol
 imports int boolean
 abstract syntax 
 
 
 // Sort representing a security level identified by an int
 SecurityLevel = sl(l:int)
 
 //	Sort representing a set of comparable security levels where the first element is the lowest
 OrderedSubSetOfSecurityLevels = cl(SecurityLevel *)
 
 // Sort representing partially ordered set of security levels
 PartiallyOrderdedSetOfSecurityLevels = setsl(OrderedSubSetOfSecurityLevels *)
 
 //Subject who has an ID for identification and a security level SL.
 Subject = subject(id:int,sl:SecurityLevel)
 
 //Object who has an ID for identification and a security level SL.
 SecurityObject = securityObject(id:int,sl:SecurityLevel)
 
 //Access mode, in this case could be read or write; others can be added
 AccessMode = am(m:int)//0 for read, 1 for write
 
 //Request type: 
 // add - to request the addition of an access,  
 // delete - to request the deletion of an access
 RequestType = add()|delete()
 
 // Sort of expression, explicit to specify that the access is explicit or conversely implicit
 // to specify that the access is implicit
 AccessType =explicit()|implicit()
 
 //An access is defined by the "subject" that accesses  the  "object" in "access mode" 
 //It can be explicitly requested by the subjects or an implicit consequence of other accesses
 Access = access(subject:Subject,securityObject:SecurityObject,a:AccessMode,e:AccessType)
 
 //Request, composed of a request type and an access
 Request = request(rt:RequestType, ac:Access)
 
 //List of accesses
 ListOfAccesses = accesses(Access *)
 
 //List of subjects
ListOfSubjects = subjects(Subject *)

 //List of objects
ListOfObjects = objects(SecurityObject *)
 
 //State compose of a list of read accesses (Reads) and a list of write accesses(Write)
 // !!!!!!!!!!!!!! The AccessMode flag is not really necessary then !!!!!!!!!!!!!!
 State = state(reads: ListOfAccesses,writes: ListOfAccesses)
 
 //Sort representing a request upon a state
 RequestUponState = rus(r:Request,s:State)

 //Response given after a request composed of the new obtained state and a boolean specifying whether the request is granted or not
 Response = response(granted:boolean, state:State)



 


 