module accesscontrol
  imports int boolean
  abstract syntax 
  
  
// Security level identified by an int
  SecurityLevel = sl(l:int)
// List of comparable security levels where the first element is the lowest
  SecurityLevelsSet = slSet(SecurityLevel *)
// List of partially ordered lists of security levels
  SecurityLevelsLattice = slLattice(SecurityLevelsSet *)


	/**
	 * Compare two levels of security wrt a security lelev lattice 
	 * 
	 * @param l1,l2 the two security levels
	 * @return 0 if equal
   *         1 if l1 > l2
   *        -1 if l1 < l2
   *       100 if not comparable
	 */
 sort SecurityLevelsLattice:block() {
	public int compare(SecurityLevel l1,SecurityLevel l2){
    if(l1.equals(l2)){
      return 0;
    }

    %match (this){ 
      slLattice(_*,a@slSet(_*,m,_*,n,_*),_*) -> {
        if(l1.equals(`m) && l2.equals(`n)) {return -1;}
        if(l2.equals(`m) && l1.equals(`n)) {return 1;}
      }
    }
    return 100;
  }
}
  
//Subject which has an ID for identification and a security level SL.
  Subject = subject(id:int,sl:SecurityLevel)
  ListOfSubjects = subjects(Subject *)
   
//Resource which has an ID for identification and a security level SL.
  Resource  = resource(id:int,sl:SecurityLevel)
  ListOfResources = resources(Resource *)
  
//Access mode, in this case could be read or write; others can be added
//0 for read, 1 for write
  AccessMode = read()
             | write()
             | am(m:int)

  module accesscontrol:rules() {
      am(0) -> read()
      am(1) -> write()
  }

// Explicit access or implicit consequence of explicit accesses
  AccessType = explicit()
             | implicit()
   
//An access is defined by the "subject" that accesses  the  "resource" in "access mode" 
//It can be explicitly requested by the subjects or an implicit consequence of other accesses 
//at is not really necessary
  Access = access(subject:Subject,resource:Resource,am:AccessMode,at:AccessType)
  ListOfAccesses = accesses(Access *)

//State composed of a list of read accesses (Reads) and a list of write accesses(Write)
// can add  the lattice of levels - maybe interesting when dynamic
// splitted just for efficiency reasons 
  State = state(reads: ListOfAccesses,writes: ListOfAccesses
//                 , sl:SecurityLevelsLattice
                )


//Request type: 
// add - to request the addition of an access,  
// delete - to request the deletion of an access
  RequestType = add()
               |delete()

//Request, composed of a request type and an access
  Request = request(rt:RequestType, ac:Access)
 
//Request done wrt to a given state
 RequestUponState = rus(r:Request,s:State)

//Decision for an access request: (not) granted, not applicable, ...
  Decision = grant()
           | deny()
           | na()
           | granted(yn:boolean)
//Response given after a request composed of the new obtained state
//   and a boolean specifying whether the request is granted or not
  Response = response(granted:boolean, state:State)
