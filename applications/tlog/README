------------VERSION GNU-PROLOG---------

Modification de l'interpeteur Prolog GNU-PROLOG écrit en JAVA pour permettre l'interpretation dynamique de code Prolog
et l'utilisation des résultats dans un programme JAVA.
L'algorithme utilisé est SLD-Resolution et on rencontre les même problèmes de terminaison.

Sources :
Modification du code original + ajout de la classe "test/Context"

Exemples :
Voir la classe "test/DynamicProlog"

-----------VERSION TOM-PROLOG----------

Librairie dynamique Prolog.
Algorithme SLD-Resolution naïf.

Sources :

Terms.gom : Termes TOM utilisés.
Context.t : Représente un contexte PROLOG dans lequel on peut ajouter des règles et des faits; et sur lequel on peut demander de résoudre une liste de faits.
Unification.t : Permet de tenter d'unifier un fait avec un but d'une règle. Si l'unification réussit, on peut récupérer les sustitutions.

Exemples :

Arcs.t : exemple de construction d'un contexte.



------------A VOIR-------------

* Etudier la possibilité d'améliorer l'algorithme
* Recoder l'algorithme ou réutiliser l'existant ?

