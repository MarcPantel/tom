grammar Demo;
 
// Les mots-clefs de notre langage
tokens {
    MATCH = '%match';
}
 
// Code Java ajouté en tête du fichier source du lexer
@lexer::header
{
    package com.octo.testantlr;
}
 
 
// Code Java ajouté en tête du fichier source du parser
@parser::header
{
    package com.octo.testantlr;
}
 
// Règles du parser (les noms commencent par une minuscule)
program
    :    statement*
    ;
 
statement
    :     MATCH CHARSPECIAL      // Ex
    :     PRINT INTEGER ';'          // Ex. : print 123;
    |     PRINT VARIABLE ';'         // Ex. : print toto;
    |     VARIABLE '=' INTEGER ';'   // Ex. : toto = 123;
    ;
 
// Règles du lexer (les noms commencent par une majuscule ; la convention est de tout mettre en majuscules)
 
// Nom de variable
VARIABLE
    :     LETTER (LETTER | DIGIT)*
    ;
 
// Constante entière
INTEGER
    :     DIGIT+
    ;
 
// Commentaire -> ignoré
COMMENT
    :     '//' (~ NL)* NL? { skip(); }
    ;
 
// Sauts de ligne (ignorés via la règle WS)
NL
    :     'n' | 'r'
    ;
 
// Espaces -> ignorés
WS
    :     (' ' | 't' | NL) { skip(); }
    ;
 
fragment LETTER
    :     'A'..'Z' | 'a'..'z' | '_'
    ;

fragment DIGIT
    :	'0'..'9'
    ;