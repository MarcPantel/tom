/*
 * Created on 10 août 2004
 *
 * Copyright (c) 2004-2006, Michael Moossen
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.  
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the INRIA nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package fr.loria.protheo.psgenerator.generator;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;

import fr.loria.protheo.psgenerator.Tracer;
import fr.loria.protheo.psgenerator.representation.*;

/**
 *  The ClipsGenerator class
 *
 *      <p align="left"><font color="#003063"><b>Change Log</b></font>
 *      <table border="0" cellpadding="1">
 *        <tr bordercolor="#FF0000" bgcolor="#CCCCCC" align="center"> 
 *          <th width="107"><strong>Date</strong></th>
 *          <th width="67"><strong>Version</strong></th>
 *          <th width="491"><strong>Description</strong></th>
 *        </tr>
 *        <tr align="center"> 
 *          <td>10 août 2004</td>
 *          <td>0</td>
 *          <td align="left"> 
 *            File Creation
 *          </td>
 *        </tr>
 *        <tr bgcolor="#EAEAEA"  align="center"> 
 *          <td>13 août 2004</td>
 *          <td>0.1</td>
 *          <td align="left"> 
 *            Initial Working Version
 *          </td>
 *        </tr>
 *        <tr align="center"> 
 *          <td>15 sept 2004</td>
 *          <td>0</td>
 *          <td align="left"> 
 *            Added generateHeader() method
 *          </td>
 *        </tr>
 *      </table>
 *
 * @author <a href="mailto:moossen@loria.fr">Michael Moossen</a>
 */
public class ClipsGenerator extends AbstractGenerator implements ClipsConstants {
	public ClipsGenerator(Program program) {
		super(program);
	}

	protected void generateKnowledgeBase() {
		assert(Tracer.trace());
		// TODO Auto-generated method stub
		output += LINE_SEPARATOR;
	}

	protected void generateHeader() {
		output += LINE_COMMENT + "Program name: " + program.getName() + LINE_SEPARATOR;
		output += LINE_COMMENT + "Program version: " + program.getVersion() + LINE_SEPARATOR;
		if (program.getComments()!=null) {
			output += LINE_COMMENT + program.getComments() + LINE_SEPARATOR;
		}
		output += LINE_COMMENT + LINE_SEPARATOR;
		output += LINE_COMMENT + "Generated by PSGenerator, the " + new SimpleDateFormat("dd. MMM yyyy 'at' HH'h'mm").format(new Date()) + LINE_SEPARATOR;
		output += LINE_SEPARATOR;
	}
	
	protected void generateInicialization() {
		assert(Tracer.trace());
		output += "(" + INITIAL_FACTS_SET_KEYWORD + LINE_SEPARATOR;
		for(int i = 0; i < initialFacts.size(); i++) {
			generateInitialFact((FactInstance) initialFacts.get(i)); 
		}
		output += ")" + LINE_SEPARATOR;
		output += LINE_SEPARATOR;
	}
	
	protected void generateInitialFact(FactInstance initialFact) {
		assert(Tracer.trace());
		if (initialFact.getComment()!=null) {
			output += LINE_COMMENT + initialFact.getComment() + LINE_SEPARATOR; 
		}
		FactType type = initialFact.getType(); 
		output += "\t(" + type.getName();
		switch(type.getType()) {
			case FactType.UNORDERED_TYPE:
				UnorderedFactInstance ufi = (UnorderedFactInstance)initialFact;
				for (Iterator it = ufi.getValues().keySet().iterator(); it.hasNext();) {
					String slotName = (String) it.next();
					String slotValue = ufi.getValue(slotName);
					output += " (";
					if (slotValue.indexOf(" ")>=0)
						slotValue = "\""+slotValue+"\"";
					output += slotName + " " + slotValue + ")";
				}
				break;
			case FactType.ORDERED_TYPE:
				OrderedFactInstance ofi = (OrderedFactInstance)initialFact;
				for (int j = 0; j < type.getArity(); j++) {
					output += " ";
					String value = ofi.getValue(j);
					if (value.indexOf(" ")>=0)
						value = "\""+value+"\"";
					output += value;
				}
				break;
			default:
				assert(false);
		}
		output += ")" + LINE_SEPARATOR;
	}

	protected void generateDefinitions() {
		assert(Tracer.trace());
		for(int i = 0; i < factTypes.size(); i++) {
			generateFactTypeDefinition((FactType) factTypes.get(i));
		}
		output += LINE_SEPARATOR;
	}

	protected void generateFactTypeDefinition(FactType factType) {
		assert(Tracer.trace());
		if (factType.getComment()!=null) {
			output += LINE_COMMENT + factType.getComment() + LINE_SEPARATOR; 
		}
		switch(factType.getType()) {
			case FactType.UNORDERED_TYPE:
				UnorderedFactType uft = (UnorderedFactType)factType;
				output += "(" + FACT_TYPE_DEFINITION_KEYWORD + " " + uft.getName();
				for (Iterator it = uft.getSlotNames().iterator(); it.hasNext();) {
					String slotName = (String) it.next();
					output += " (slot " + slotName + ")";
				}
				output += ")" + LINE_SEPARATOR;
			case FactType.ORDERED_TYPE:
				// dont need declaration
				break;
			default:
				assert(false);
		}
	}
}
