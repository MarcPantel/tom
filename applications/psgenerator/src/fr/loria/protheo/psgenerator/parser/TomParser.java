/* Generated by TOM (version 2.1 - under development): Do not edit this file *//*
 * Created on 15 sept. 2004
 *
 * Copyright (c) 2004-2009, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.  
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the INRIA nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package fr.loria.protheo.psgenerator.parser;

import tom.library.xml.*;
import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;
import aterm.*;
import tom.library.traversal.*;
import fr.loria.protheo.psgenerator.representation.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

/**
 *  The TomParser class
 *
 *      <p align="left"><font color="#003063"><b>Change Log</b></font>
 *      <table border="0" cellpadding="1">
 *        <tr bordercolor="#FF0000" bgcolor="#CCCCCC" align="center"> 
 *          <th width="107"><strong>Date</strong></th>
 *          <th width="67"><strong>Version</strong></th>
 *          <th width="491"><strong>Description</strong></th>
 *        </tr>
 *        <tr align="center"> 
 *          <td>15 sept 2004</td>
 *          <td>0</td>
 *          <td align="left"> 
 *            File Creation
 *          </td>
 *        </tr>
 *        <tr bgcolor="#EAEAEA"  align="center"> 
 *          <td>15 sept 2004</td>
 *          <td>0.1</td>
 *          <td align="left"> 
 *            Initial Working Version
 *          </td>
 *        </tr>
 *      </table>
 *
 * @author <a href="mailto:moossen@loria.fr">Michael Moossen</a>
 */
public class TomParser extends AbstractParser {
    /* Generated by TOM (version 2.1 - under development): Do not edit this file *//* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  *  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  *  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  *  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  *  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.1 - under development): Do not edit this file *//*  *  * Copyright (c) 2004-2009, INRIA  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_TNode( tom.library.adt.tnode.types.TNode t) { return null; }public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TNode( tom.library.adt.tnode.types.TNode t,  int  n) { return null; }public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_CommentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }public  String  tom_get_slot_CommentNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_ProcessingInstructionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }public  String  tom_get_slot_ProcessingInstructionNode_target( tom.library.adt.tnode.types.TNode t) { return  t.getTarget(); }public  String  tom_get_slot_ProcessingInstructionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_TextNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }public  tom.library.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }public  String  tom_get_slot_TextNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_CDATASectionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }public  String  tom_get_slot_CDATASectionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_DocumentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentNode( tom.library.adt.tnode.types.TNode t0,  tom.library.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( tom.library.adt.tnode.types.TNode t) { return  t.getDocType(); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( tom.library.adt.tnode.types.TNode t) { return  t.getDocElem(); }public boolean tom_is_fun_sym_ElementNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1,  tom.library.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }public  String  tom_get_slot_ElementNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( tom.library.adt.tnode.types.TNode t) { return  t.getAttrList(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_AttributeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }public  String  tom_get_slot_AttributeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_AttributeNode_specified( tom.library.adt.tnode.types.TNode t) { return  t.getSpecified(); }public  String  tom_get_slot_AttributeNode_value( tom.library.adt.tnode.types.TNode t) { return  t.getValue(); }public boolean tom_is_fun_sym_DocumentTypeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  tom.library.adt.tnode.types.TNodeList t4,  tom.library.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }public  String  tom_get_slot_DocumentTypeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_DocumentTypeNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_DocumentTypeNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public  String  tom_get_slot_DocumentTypeNode_internalSubset( tom.library.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( tom.library.adt.tnode.types.TNode t) { return  t.getEntities(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( tom.library.adt.tnode.types.TNode t) { return  t.getNotations(); }public boolean tom_is_fun_sym_EntityReferenceNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }public  String  tom_get_slot_EntityReferenceNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_EntityNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }public  String  tom_get_slot_EntityNode_notationName( tom.library.adt.tnode.types.TNode t) { return  t.getNotationName(); }public  String  tom_get_slot_EntityNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_EntityNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public boolean tom_is_fun_sym_NotationNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }public  tom.library.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }public  String  tom_get_slot_NotationNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_NotationNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public Object tom_get_fun_sym_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return null; }public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }public  tom.library.adt.tnode.types.TNode tom_get_head_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_tail_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getTail(); }public boolean tom_is_empty_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTNode( tom.library.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_cons_list_concTNode( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNodeList tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  public  tom.library.adt.tnode.types.TNodeList tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList begin,  tom.library.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( tom.library.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( tom.library.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }public  tom.library.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }public boolean tom_is_fun_sym_manyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }public  tom.library.adt.tnode.types.TNodeList tom_make_manyTNodeList( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( tom.library.adt.tnode.types.TNodeList t) { return  t.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( tom.library.adt.tnode.types.TNodeList t) { return  t.getTail(); } 
    
	private XmlTools xtools;
	private ATerm document;

	private GenericTraversal traversal = new GenericTraversal();

	private TNodeFactory getTNodeFactory() {
		return xtools.getTNodeFactory();
	}

	public TomParser(String fileName) {
        super(fileName);
	}

	public void readFile(String fileName) {
		xtools = new XmlTools();
		document = xtools.convertXMLToATerm(fileName);
    }
	
	public void parse() {
		parse(document);		
	}

  private List slotNamesList(ATerm t) {
	final List slotNames = Collections.checkedList(new Vector(), String.class);
    Collect1 collect = new Collect1 () {
	public boolean apply(ATerm t) {
	    if (t instanceof TNode) {
	       { tom.library.adt.tnode.types.TNode tom_match1_1=(( tom.library.adt.tnode.types.TNode)t);{ if(tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_ElementNode_name(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_2=tom_get_slot_ElementNode_attrList(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3=tom_get_slot_ElementNode_childList(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "SlotName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_2_list1=tom_match1_1_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_list1=tom_match1_1_3; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_begin1=tom_match1_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_end1=tom_match1_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_end1))) {tom_match1_1_3_list1=tom_match1_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match1_1_3_2=tom_get_head_TNodeList(tom_match1_1_3_list1);tom_match1_1_3_list1=tom_get_tail_TNodeList(tom_match1_1_3_list1); if(tom_is_fun_sym_TextNode(tom_match1_1_3_2) ||  false ) { { String  tom_match1_1_3_2_1=tom_get_slot_TextNode_data(tom_match1_1_3_2); { String  slotName=tom_match1_1_3_2_1;

		  slotNames.add(slotName);
		  return false;
		}} }}tom_match1_1_3_end1=tom_get_tail_TNodeList(tom_match1_1_3_end1);} }}}} }} } }}}} }

		  return true;
		}}

	    } else {
	      return true;
	    }
	}
      };
    traversal.genericCollect(t, collect);
    return slotNames;
  }

  private List slotValuesList(ATerm t) {
	final List slotValues = Collections.checkedList(new Vector(), String.class);
    Collect1 collect = new Collect1 () {
	public boolean apply(ATerm t) {
	    if (t instanceof TNode) {
	       { tom.library.adt.tnode.types.TNode tom_match2_1=(( tom.library.adt.tnode.types.TNode)t);{ if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_2=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_1) , "SlotValue") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_list1=tom_match2_1_2; if(tom_is_fun_sym_concTNode(tom_match2_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_list1=tom_match2_1_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_begin1=tom_match2_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_end1=tom_match2_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_3_end1))) {tom_match2_1_3_list1=tom_match2_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_3_2=tom_get_head_TNodeList(tom_match2_1_3_list1);tom_match2_1_3_list1=tom_get_tail_TNodeList(tom_match2_1_3_list1); if(tom_is_fun_sym_TextNode(tom_match2_1_3_2) ||  false ) { { String  tom_match2_1_3_2_1=tom_get_slot_TextNode_data(tom_match2_1_3_2); { String  slotValue=tom_match2_1_3_2_1;

		  slotValues.add(slotValue);
		  return false;
		}} }}tom_match2_1_3_end1=tom_get_tail_TNodeList(tom_match2_1_3_end1);} }}}} }} } }}}} }

		  return true;
		}}

	    } else {
	      return true;
	    }
	}
      };
    traversal.genericCollect(t, collect);
    return slotValues;
  }

  private Map slotsList(ATerm t) {
	final Map slots = Collections.checkedMap(new HashMap(), String.class, String.class);
    Collect1 collect = new Collect1 () {
	public boolean apply(ATerm t) {
	    if (t instanceof TNode) {
	       { tom.library.adt.tnode.types.TNode tom_match3_1=(( tom.library.adt.tnode.types.TNode)t);{ if(tom_is_fun_sym_ElementNode(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_ElementNode_name(tom_match3_1); { tom.library.adt.tnode.types.TNodeList tom_match3_1_2=tom_get_slot_ElementNode_attrList(tom_match3_1); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3=tom_get_slot_ElementNode_childList(tom_match3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_1) , "Slot") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_2_list1=tom_match3_1_2; if(tom_is_fun_sym_concTNode(tom_match3_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_list1=tom_match3_1_3; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_begin1=tom_match3_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_end1=tom_match3_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_3_end1))) {tom_match3_1_3_list1=tom_match3_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match3_1_3_2=tom_get_head_TNodeList(tom_match3_1_3_list1);tom_match3_1_3_list1=tom_get_tail_TNodeList(tom_match3_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match3_1_3_2) ||  false ) { { String  tom_match3_1_3_2_1=tom_get_slot_ElementNode_name(tom_match3_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match3_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match3_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_3_2_1) , "SlotName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_2_list1=tom_match3_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match3_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_3_list1=tom_match3_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_3_begin1=tom_match3_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_2_3_end1=tom_match3_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_3_2_3_end1))) {tom_match3_1_3_2_3_list1=tom_match3_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match3_1_3_2_3_2=tom_get_head_TNodeList(tom_match3_1_3_2_3_list1);tom_match3_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match3_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match3_1_3_2_3_2) ||  false ) { { String  tom_match3_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match3_1_3_2_3_2); { String  slotName=tom_match3_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_begin3=tom_match3_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_end3=tom_match3_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_3_end3))) {tom_match3_1_3_list1=tom_match3_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match3_1_3_4=tom_get_head_TNodeList(tom_match3_1_3_list1);tom_match3_1_3_list1=tom_get_tail_TNodeList(tom_match3_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match3_1_3_4) ||  false ) { { String  tom_match3_1_3_4_1=tom_get_slot_ElementNode_name(tom_match3_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match3_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match3_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_3_4_1) , "SlotValue") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_2_list1=tom_match3_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match3_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_3_list1=tom_match3_1_3_4_3; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_3_begin1=tom_match3_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_4_3_end1=tom_match3_1_3_4_3_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_3_4_3_end1))) {tom_match3_1_3_4_3_list1=tom_match3_1_3_4_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match3_1_3_4_3_2=tom_get_head_TNodeList(tom_match3_1_3_4_3_list1);tom_match3_1_3_4_3_list1=tom_get_tail_TNodeList(tom_match3_1_3_4_3_list1); if(tom_is_fun_sym_TextNode(tom_match3_1_3_4_3_2) ||  false ) { { String  tom_match3_1_3_4_3_2_1=tom_get_slot_TextNode_data(tom_match3_1_3_4_3_2); { String  slotValue=tom_match3_1_3_4_3_2_1;




		  slots.put(slotName, slotValue);
		  return false;
		}} }}tom_match3_1_3_4_3_end1=tom_get_tail_TNodeList(tom_match3_1_3_4_3_end1);} }}}} }} } }}}} }}tom_match3_1_3_end3=tom_get_tail_TNodeList(tom_match3_1_3_end3);} }}}}} }}tom_match3_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match3_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match3_1_3_end1=tom_get_tail_TNodeList(tom_match3_1_3_end1);} }}}} }} } }}}} }

		  return true;
		}}

	    } else {
	      return true;
	    }
	}
      };
    traversal.genericCollect(t, collect);
    return slots;
  }

/*
how to use java variables/constantes for identifying XML elements/attributes names? like in this case:
		<UNORDERED_FACT_DEFINITION>
			content*
		</UNORDERED_FACT_DEFINITION>
		-> { ... }
where UNORDERED_FACT_DEFINITION is a constant equals to "UnorderedFactDefinition"

related to that: 
it could be nice to reuse method slotValuesList() for implementing slotNamesList()
the only diff is the XML element's name, which could be given as an additional argument
*/
/*
how to handle efficiently optional attributes and elements without to try all combinations??, like in the following case:
	      <psp-spec name=progName version=progVersion>
	      	<Comments>#TEXT(comments)</Comments> 
	      	<FactDefinitions>factDefs*</FactDefinitions> 
	      	<InitialWorkingMemory>initialFacts*</InitialWorkingMemory> 
	      	<InitialProductionMemory>knowledgeBase*</InitialProductionMemory> 
	      </psp-spec> -> { ... }
where both attributes name and version, and the element Comments are all optional
*/
/*
how to handle efficiently unsorted lists of elements efficiently??, like in this case:
		<UnorderedFactDefinition>
			<SlotName>id</SlotName>
			<Comments>fact type representing a house</Comments>
			<SlotName>color</SlotName>
			<SlotName>price</SlotName>
			<FactName>house</FactName>
			<SlotName>forrent</SlotName>
		</UnorderedFactDefinition>
i know... AC-matching is not in question :(
... but my DomParser does it very efficiently...
*/
	private void parse(ATerm subject) {
		Collect1 collect = new Collect1() {
			public boolean apply(ATerm t) {
				if (t instanceof TNode) {
	     { tom.library.adt.tnode.types.TNode tom_match4_1=(( tom.library.adt.tnode.types.TNode)t);{ if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { String  tom_match4_1_1=tom_get_slot_ElementNode_name(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_2=tom_get_slot_ElementNode_attrList(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_1) , "psp-spec") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_list1=tom_match4_1_2; { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_begin1=tom_match4_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_end1=tom_match4_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_2_end1))) {tom_match4_1_2_list1=tom_match4_1_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_2_2=tom_get_head_TNodeList(tom_match4_1_2_list1);tom_match4_1_2_list1=tom_get_tail_TNodeList(tom_match4_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match4_1_2_2) ||  false ) { { String  tom_match4_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match4_1_2_2); { String  tom_match4_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match4_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_2_2_1) , "name") ||  false ) { { String  progName=tom_match4_1_2_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_begin3=tom_match4_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_end3=tom_match4_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_2_end3))) {tom_match4_1_2_list1=tom_match4_1_2_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_2_4=tom_get_head_TNodeList(tom_match4_1_2_list1);tom_match4_1_2_list1=tom_get_tail_TNodeList(tom_match4_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match4_1_2_4) ||  false ) { { String  tom_match4_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match4_1_2_4); { String  tom_match4_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match4_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_2_4_1) , "version") ||  false ) { { String  progVersion=tom_match4_1_2_4_3; if(tom_is_fun_sym_concTNode(tom_match4_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_list1=tom_match4_1_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin1=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end1=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end1))) {tom_match4_1_3_list1=tom_match4_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_2) ||  false ) { { String  tom_match4_1_3_2_1=tom_get_slot_ElementNode_name(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_2_1) , "Comments") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2_list1=tom_match4_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_begin1=tom_match4_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_end1=tom_match4_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_2_3_end1))) {tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2_3_2=tom_get_head_TNodeList(tom_match4_1_3_2_3_list1);tom_match4_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_2_3_2) ||  false ) { { String  tom_match4_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_2_3_2); { String  comments=tom_match4_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin3=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end3=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end3))) {tom_match4_1_3_list1=tom_match4_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_4) ||  false ) { { String  tom_match4_1_3_4_1=tom_get_slot_ElementNode_name(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_4_1) , "FactDefinitions") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2_list1=tom_match4_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3; { tom.library.adt.tnode.types.TNodeList factDefs=tom_match4_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin5=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end5=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end5))) {tom_match4_1_3_list1=tom_match4_1_3_end5;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_6=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_6) ||  false ) { { String  tom_match4_1_3_6_1=tom_get_slot_ElementNode_name(tom_match4_1_3_6); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_6); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_6_1) , "InitialWorkingMemory") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_6_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_2_list1=tom_match4_1_3_6_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_6_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3_list1=tom_match4_1_3_6_3; { tom.library.adt.tnode.types.TNodeList initialFacts=tom_match4_1_3_6_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin7=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end7=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end7))) {tom_match4_1_3_list1=tom_match4_1_3_end7;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_8=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_8) ||  false ) { { String  tom_match4_1_3_8_1=tom_get_slot_ElementNode_name(tom_match4_1_3_8); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_8_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_8); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_8_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_8_1) , "InitialProductionMemory") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_8_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_8_2_list1=tom_match4_1_3_8_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_8_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_8_3_list1=tom_match4_1_3_8_3; { tom.library.adt.tnode.types.TNodeList knowledgeBase=tom_match4_1_3_8_3_list1;






                program = new Program(progName, progVersion, comments);
				parse(factDefs);
				parse(initialFacts);
				parse(knowledgeBase);		
				return false;
	      }} }} } }}}} }}tom_match4_1_3_end7=tom_get_tail_TNodeList(tom_match4_1_3_end7);} }}}}} }} } }}}} }}tom_match4_1_3_end5=tom_get_tail_TNodeList(tom_match4_1_3_end5);} }}}}} }} } }}}} }}tom_match4_1_3_end3=tom_get_tail_TNodeList(tom_match4_1_3_end3);} }}}}} }}tom_match4_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_end1);} }}}} }} }}} }}tom_match4_1_2_end3=tom_get_tail_TNodeList(tom_match4_1_2_end3);} }}}} }}} }}tom_match4_1_2_end1=tom_get_tail_TNodeList(tom_match4_1_2_end1);} }}}} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { String  tom_match4_1_1=tom_get_slot_ElementNode_name(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_2=tom_get_slot_ElementNode_attrList(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_1) , "UnorderedFactDefinition") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_list1=tom_match4_1_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_list1=tom_match4_1_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin1=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end1=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end1))) {tom_match4_1_3_list1=tom_match4_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_2) ||  false ) { { String  tom_match4_1_3_2_1=tom_get_slot_ElementNode_name(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_2_1) , "FactName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2_list1=tom_match4_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_begin1=tom_match4_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_end1=tom_match4_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_2_3_end1))) {tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2_3_2=tom_get_head_TNodeList(tom_match4_1_3_2_3_list1);tom_match4_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_2_3_2) ||  false ) { { String  tom_match4_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_2_3_2); { String  factName=tom_match4_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin3=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end3=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end3))) {tom_match4_1_3_list1=tom_match4_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_4) ||  false ) { { String  tom_match4_1_3_4_1=tom_get_slot_ElementNode_name(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_4_1) , "Comments") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2_list1=tom_match4_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_begin1=tom_match4_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_end1=tom_match4_1_3_4_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_4_3_end1))) {tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4_3_2=tom_get_head_TNodeList(tom_match4_1_3_4_3_list1);tom_match4_1_3_4_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_4_3_2) ||  false ) { { String  tom_match4_1_3_4_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_4_3_2); { String  comment=tom_match4_1_3_4_3_2_1; { tom.library.adt.tnode.types.TNodeList slotNamesT=tom_match4_1_3_list1;






		     List slotNames = slotNamesList(slotNamesT);
 			 program.addFactType(new UnorderedFactType(factName,comment,slotNames));
		  }}} }}tom_match4_1_3_4_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end3=tom_get_tail_TNodeList(tom_match4_1_3_end3);} }}}}} }}tom_match4_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_end1);} }}}} }} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { String  tom_match4_1_1=tom_get_slot_ElementNode_name(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_2=tom_get_slot_ElementNode_attrList(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_1) , "OrderedFactDefinition") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_list1=tom_match4_1_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_list1=tom_match4_1_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin1=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end1=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end1))) {tom_match4_1_3_list1=tom_match4_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_2) ||  false ) { { String  tom_match4_1_3_2_1=tom_get_slot_ElementNode_name(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_2_1) , "Comments") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2_list1=tom_match4_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_begin1=tom_match4_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_end1=tom_match4_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_2_3_end1))) {tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2_3_2=tom_get_head_TNodeList(tom_match4_1_3_2_3_list1);tom_match4_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_2_3_2) ||  false ) { { String  tom_match4_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_2_3_2); { String  comment=tom_match4_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin3=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end3=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end3))) {tom_match4_1_3_list1=tom_match4_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_4) ||  false ) { { String  tom_match4_1_3_4_1=tom_get_slot_ElementNode_name(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_4_1) , "FactName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2_list1=tom_match4_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_begin1=tom_match4_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_end1=tom_match4_1_3_4_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_4_3_end1))) {tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4_3_2=tom_get_head_TNodeList(tom_match4_1_3_4_3_list1);tom_match4_1_3_4_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_4_3_2) ||  false ) { { String  tom_match4_1_3_4_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_4_3_2); { String  factName=tom_match4_1_3_4_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin5=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end5=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end5))) {tom_match4_1_3_list1=tom_match4_1_3_end5;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_6=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_6) ||  false ) { { String  tom_match4_1_3_6_1=tom_get_slot_ElementNode_name(tom_match4_1_3_6); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_6); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_6_1) , "FactArity") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_6_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_2_list1=tom_match4_1_3_6_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_6_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3_list1=tom_match4_1_3_6_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3_begin1=tom_match4_1_3_6_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_6_3_end1=tom_match4_1_3_6_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_6_3_end1))) {tom_match4_1_3_6_3_list1=tom_match4_1_3_6_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_6_3_2=tom_get_head_TNodeList(tom_match4_1_3_6_3_list1);tom_match4_1_3_6_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_6_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_6_3_2) ||  false ) { { String  tom_match4_1_3_6_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_6_3_2); { String  factArity=tom_match4_1_3_6_3_2_1;






			 int arity = Integer.parseInt(factArity);
 			 program.addFactType(new OrderedFactType(factName,comment,arity));
		  }} }}tom_match4_1_3_6_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_6_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end5=tom_get_tail_TNodeList(tom_match4_1_3_end5);} }}}}} }}tom_match4_1_3_4_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end3=tom_get_tail_TNodeList(tom_match4_1_3_end3);} }}}}} }}tom_match4_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_end1);} }}}} }} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { String  tom_match4_1_1=tom_get_slot_ElementNode_name(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_2=tom_get_slot_ElementNode_attrList(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_1) , "UnorderedFactInstance") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_list1=tom_match4_1_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_list1=tom_match4_1_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin1=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end1=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end1))) {tom_match4_1_3_list1=tom_match4_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_2) ||  false ) { { String  tom_match4_1_3_2_1=tom_get_slot_ElementNode_name(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_2_1) , "Comments") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2_list1=tom_match4_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_begin1=tom_match4_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_end1=tom_match4_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_2_3_end1))) {tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2_3_2=tom_get_head_TNodeList(tom_match4_1_3_2_3_list1);tom_match4_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_2_3_2) ||  false ) { { String  tom_match4_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_2_3_2); { String  comment=tom_match4_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin3=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end3=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end3))) {tom_match4_1_3_list1=tom_match4_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_4) ||  false ) { { String  tom_match4_1_3_4_1=tom_get_slot_ElementNode_name(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_4_1) , "FactName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2_list1=tom_match4_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_begin1=tom_match4_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_end1=tom_match4_1_3_4_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_4_3_end1))) {tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4_3_2=tom_get_head_TNodeList(tom_match4_1_3_4_3_list1);tom_match4_1_3_4_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_4_3_2) ||  false ) { { String  tom_match4_1_3_4_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_4_3_2); { String  factName=tom_match4_1_3_4_3_2_1; { tom.library.adt.tnode.types.TNodeList slotsT=tom_match4_1_3_list1;






			FactType type = program.getFactType(factName);
			if (type.getType()!=FactType.UNORDERED_TYPE) {
				throw new IllegalStateException("FactType "+factName+" is not unordered");
			}
		    Map slots = slotsList(slotsT);
			program.addInitialFact(type.newInstance(comment,slots));
		  }}} }}tom_match4_1_3_4_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end3=tom_get_tail_TNodeList(tom_match4_1_3_end3);} }}}}} }}tom_match4_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_end1);} }}}} }} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { String  tom_match4_1_1=tom_get_slot_ElementNode_name(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_2=tom_get_slot_ElementNode_attrList(tom_match4_1); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_1) , "OrderedFactInstance") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_2_list1=tom_match4_1_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_list1=tom_match4_1_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin1=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end1=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end1))) {tom_match4_1_3_list1=tom_match4_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_2) ||  false ) { { String  tom_match4_1_3_2_1=tom_get_slot_ElementNode_name(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_2_1) , "Comments") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_2_list1=tom_match4_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_begin1=tom_match4_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_2_3_end1=tom_match4_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_2_3_end1))) {tom_match4_1_3_2_3_list1=tom_match4_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_2_3_2=tom_get_head_TNodeList(tom_match4_1_3_2_3_list1);tom_match4_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_2_3_2) ||  false ) { { String  tom_match4_1_3_2_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_2_3_2); { String  comment=tom_match4_1_3_2_3_2_1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_begin3=tom_match4_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_end3=tom_match4_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_end3))) {tom_match4_1_3_list1=tom_match4_1_3_end3;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4=tom_get_head_TNodeList(tom_match4_1_3_list1);tom_match4_1_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match4_1_3_4) ||  false ) { { String  tom_match4_1_3_4_1=tom_get_slot_ElementNode_name(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2=tom_get_slot_ElementNode_attrList(tom_match4_1_3_4); { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3=tom_get_slot_ElementNode_childList(tom_match4_1_3_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match4_1_3_4_1) , "FactName") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_2_list1=tom_match4_1_3_4_2; if(tom_is_fun_sym_concTNode(tom_match4_1_3_4_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_begin1=tom_match4_1_3_4_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match4_1_3_4_3_end1=tom_match4_1_3_4_3_list1; while (!(tom_is_empty_TNodeList(tom_match4_1_3_4_3_end1))) {tom_match4_1_3_4_3_list1=tom_match4_1_3_4_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match4_1_3_4_3_2=tom_get_head_TNodeList(tom_match4_1_3_4_3_list1);tom_match4_1_3_4_3_list1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_list1); if(tom_is_fun_sym_TextNode(tom_match4_1_3_4_3_2) ||  false ) { { String  tom_match4_1_3_4_3_2_1=tom_get_slot_TextNode_data(tom_match4_1_3_4_3_2); { String  factName=tom_match4_1_3_4_3_2_1; { tom.library.adt.tnode.types.TNodeList slotValuesT=tom_match4_1_3_list1;






			FactType type = program.getFactType(factName);
			if (type.getType()!=FactType.ORDERED_TYPE) {
				throw new IllegalStateException("FactType "+factName+" is not ordered");
			}
		    List slotValues = slotValuesList(slotValuesT);
			program.addInitialFact(type.newInstance(comment,slotValues));
		  }}} }}tom_match4_1_3_4_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_4_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end3=tom_get_tail_TNodeList(tom_match4_1_3_end3);} }}}}} }}tom_match4_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match4_1_3_end1=tom_get_tail_TNodeList(tom_match4_1_3_end1);} }}}} }} } }}}} }


							return true;
						}}
	// match
				} else {
					return true;
				}
			} //apply
		};
		traversal.genericCollect(subject, collect);
	} //parse
}