%include { string.tom }

%typeterm Term {
  implement { Term }
  equals(t1,t2) {t1.equals(t2)}
}

%op Term L(name:String) {
  is_fsym(t)       { (t!= null) && (t instanceof Leaf) }
  get_slot(name,t) { ((L) t).name                   }
  make(n)          { new L(n)                       }
}

%op Term F(fsym:String, left:Term, right:Term) {
  is_fsym(t)             { (t!= null) && (t instanceof F) }
  get_slot(fsym ,t)      { ((F) t).fsym       }
  get_slot(left ,t)      { ((F) t).left       }
  get_slot(right,t)      { ((F) t).right      }
  make(fsym,left, right) { new F(fsym, left, right) }
}