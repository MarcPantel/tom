%include{ int.tom }
%include{ boolean.tom }
%include{ string.tom }

%typeterm T {
  implement { mi._.data.types.T }
  is_sort(t) { $t instanceof mi._.data.types.T }
  equals(t1, t2) { $t1.equals($t2) }
}

%typeterm T1 {
  implement { mi._.data.types.T1 }
  is_sort(t) { $t instanceof mi._.data.types.T1 }
  equals(t1, t2) { $t1.equals($t2) }
}

%typeterm T2 {
  implement { mi._.data.types.T2 }
  is_sort(t) { $t instanceof mi._.data.types.T2 }
  equals(t1, t2) { $t1.equals($t2) }
}

%op T1 a() {
  make() { mi._.data.Module.a_Mapping.instance.make() }
  is_fsym(t) { mi._.data.Module.a_Mapping.instance.isSym($t) }
}

%op T2 b() {
  make() { mi._.data.Module.b_Mapping.instance.make() }
  is_fsym(t) { mi._.data.Module.b_Mapping.instance.isSym($t) }
}

%op T1 f(s1:T1, s2:T2) {
  make(s1, s2) { mi._.data.Module.f_Mapping.instance.make($s1, $s2) }
  is_fsym(t) { mi._.data.Module.f_Mapping.instance.isSym($t) }
  get_slot(s1, t)  { mi._.data.Module.f_Mapping.instance.getS1($t) }
  get_slot(s2, t)  { mi._.data.Module.f_Mapping.instance.getS2($t) }
}

%op T2 g(s2:T2) {
  make(s2) { mi._.data.Module.g_Mapping.instance.make($s2) }
  is_fsym(t) { mi._.data.Module.g_Mapping.instance.isSym($t) }
  get_slot(s2, t)  { mi._.data.Module.g_Mapping.instance.getS2($t) }
}

