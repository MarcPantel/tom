package mi3;

import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.framework.Assert;


import base.data.types.*;
import base.data.types.t1.*;
import base.data.types.t2.*;
import tom.library.sl.*;

public class MainGom extends TestCase {
  %include { gom/mapping.tom }
  %include { sl.tom }

  /*
   * new way of defining signatures in Tom
   %module {
     module Signature

     base.data.types.T1 // defines the implementation of T1
     T1 = a()
        | f(s1:T1, s2:T2)
  
     base.data.types.T2
     T2 = b()
        | g(s2:T2)
   }
  */

  // generated by Tom, in this file
  public interface ISignature {
    mi3.mapping.Mapping0<base.data.types.T1> getMapping_a();
    mi3.mapping.Mapping0<base.data.types.T2> getMapping_b();
    mi3.mapping.Mapping2<base.data.types.T1,base.data.types.T1,base.data.types.T2> getMapping_f();
    mi3.mapping.Mapping1<base.data.types.T2,base.data.types.T2> getMapping_g();
  }
  
  /*
   * the body of the following method is hand-written
   * but an empty method with return null; is generated
   */
  public static ISignature getSignature() {
    return signature;
  }

  private static ISignature signature = new ISignature() {
    private mi3.gom.Module.a_Mapping a_Mapping = new mi3.gom.Module.a_Mapping();
    private mi3.gom.Module.b_Mapping b_Mapping = new mi3.gom.Module.b_Mapping();
    private mi3.gom.Module.f_Mapping f_Mapping = new mi3.gom.Module.f_Mapping();
    private mi3.gom.Module.g_Mapping g_Mapping = new mi3.gom.Module.g_Mapping();
    public mi3.mapping.Mapping0<T1>       getMapping_a() { return a_Mapping; }
    public mi3.mapping.Mapping0<T2>       getMapping_b() { return b_Mapping; }
    public mi3.mapping.Mapping2<T1,T1,T2> getMapping_f() { return f_Mapping; }
    public mi3.mapping.Mapping1<T2,T2>    getMapping_g() { return g_Mapping; }
  };

  public static void main(String[] args) {
    junit.textui.TestRunner.run(new TestSuite(MainGom.class));
  }

  public void testMatch() {
    T1 subject = `f(f(a(),b()),g(b()));
    %match(subject) {
      f(x,g(y)) -> { 
        assertEquals(`x,`f(a(),b()));
        assertEquals(`y,`b());
        return;
      }
    }
    fail();
  }


  public void testVisit() {
    T1 subject = `f(f(a(),b()),g(b()));
    try {
      T1 res = (T1) `Repeat(OnceBottomUp(Rule())).visitLight(subject, mi3.mapping.Introspector.instance);
      assertEquals(res, `a());
    } catch(VisitFailure e) {
      fail();
    }

  }

  %strategy Rule() extends Fail() {
    visit T1 {
      f(x,y) -> {
        return `x;
      }
    }
  }

}
