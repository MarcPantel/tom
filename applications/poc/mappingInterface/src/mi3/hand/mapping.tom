%include{ int.tom }
%include{ boolean.tom }
%include{ string.tom }

%typeterm T1 {
  implement { base.hand.types.T1 }
  is_sort(t) { $t instanceof base.hand.types.T1 }
  equals(t1, t2) { $t1.equals($t2) }
}

%typeterm T2 {
  implement { base.hand.types.T2 }
  is_sort(t) { $t instanceof base.hand.types.T2 }
  equals(t1, t2) { $t1.equals($t2) }
}

%op T1 a() {
  make() { getSignature().getMapping_a().make() }
  is_fsym(t) { getSignature().getMapping_a().isInstanceOf($t) }
}

%op T2 b() {
  make() { getSignature().getMapping_b().make() }
  is_fsym(t) { getSignature().getMapping_b().isInstanceOf($t) }
}

%op T1 f(s1:T1, s2:T2) {
  make(s1, s2) { getSignature().getMapping_f().make($s1, $s2) }
  is_fsym(t) { getSignature().getMapping_f().isInstanceOf($t) }
  get_slot(s1, t)  { getSignature().getMapping_f().get0($t) }
  get_slot(s2, t)  { getSignature().getMapping_f().get1($t) }
}

%op T2 g(s2:T2) {
  make(s2) { getSignature().getMapping_g().make($s2) }
  is_fsym(t) { getSignature().getMapping_g().isInstanceOf($t) }
  get_slot(s2, t)  { getSignature().getMapping_g().get0($t) }
}

%op T2 h(ts:ListT1) {
  make(s) { getSignature().getMapping_h().make($s) }
  is_fsym(t) { getSignature().getMapping_h().isInstanceOf($t) }
  get_slot(ts, t)  { getSignature().getMapping_h().get0($t) }
}

%typeterm ListT1 {
  implement { java.util.List<T1> }
  is_sort(t) { $t instanceof java.util.List }
  equals(t1, t2) { $t1.equals($t2) }
}

%oplist ListT1 concT1(T1*) {
  is_fsym(l)       { getSignature().getMapping_concT1().isInstanceOf($l) }
  make_empty()     { getSignature().getMapping_concT1().makeEmpty() } 
  make_insert(o,l) { getSignature().getMapping_concT1().makeInsert($o,$l) }
  get_head(l)      { getSignature().getMapping_concT1().getHead($l) }
  get_tail(l)      { getSignature().getMapping_concT1().getTail($l) }
  is_empty(l)      { getSignature().getMapping_concT1().isEmpty($l) }
}


