%include{ int.tom }
%include{ boolean.tom }
%include{ string.tom }

%typeterm T1 {
  implement { base.data.types.T1 }
  is_sort(t) { $t instanceof base.data.types.T1 }
  equals(t1, t2) { $t1.equals($t2) }
}

%typeterm T2 {
  implement { base.data.types.T2 }
  is_sort(t) { $t instanceof base.data.types.T2 }
  equals(t1, t2) { $t1.equals($t2) }
}

%op T1 a() {
  make() { mi3.gom.Module.a_Mapping.make() }
  is_fsym(t) { mi3.gom.Module.a_Mapping.isInstanceOf($t) }
}

%op T2 b() {
  make() { mi3.gom.Module.b_Mapping.make() }
  is_fsym(t) { mi3.gom.Module.b_Mapping.isInstanceOf($t) }
}

%op T1 f(s1:T1, s2:T2) {
  make(s1, s2) { mi3.gom.Module.f_Mapping.make($s1, $s2) }
  is_fsym(t) { mi3.gom.Module.f_Mapping.isInstanceOf($t) }
  get_slot(s1, t)  { (T1) mi3.gom.Module.f_Mapping.get0($t) }
  get_slot(s2, t)  { (T2) mi3.gom.Module.f_Mapping.get1($t) }
}

%op T2 g(s2:T2) {
  make(s2) { mi3.gom.Module.g_Mapping.make($s2) }
  is_fsym(t) { mi3.gom.Module.g_Mapping.isInstanceOf($t) }
  get_slot(s2, t)  { (T2) mi3.gom.Module.g_Mapping.get0($t) }
}

