addrules subst(lappl(b,a),s) -> lappl(subst(b,s),subst(a,s))
addrules subst(one.,lcons(a,s)) -> a
addrules subst(a,id.) -> a
addrules subst(lambda(a),s) -> lambda(subst(a,lcons(one.,rond(s,shift.))))
addrules subst(subst(a,s),t) -> subst(a,rond(s,t))
addrules rond(id.,s) -> s
addrules rond(shift.,lcons(a,s)) -> s
addrules rond(rond(s1,s2),s3) -> rond(s1,rond(s2,s3))
addrules rond(lcons(a,s),t) -> lcons(subst(a,t),rond(s,t))
addrules rond(s,id.) -> s
addrules lcons(one.,shift.) -> id.
addrules lcons(subst(one.,s), rond(shift., s)) -> s
addrules lappl(lambda(a),b) -> subst(a,lcons(b,id.)) 

addrules subst(pitype(a,b),s) -> pitype(subst(a,s),subst(b,lcons(one.,rond(s,shift.))))
addrules subst(pikind(a,b),s) -> pikind(subst(a,s),subst(b,lcons(one.,rond(s,shift.))))

addrules in(pitype(a,b),type.) --> in(a,type.) /\ %
		    (ALL z. (in(z,a) => in(subst(b,lcons(z,id.)), type.)))
addrules in(pikind(a,b),kind.) --> in(a,type.) /\ %
		    (ALL z. (in(z,a) => in(subst(b,lcons(z,id.)), kind.)))
addrules in(a,pitype(b,c)) --> in(pitype(b,c),type.) /\ %
	 (ALL z. (in(z,b) => in(lappl(a,z),subst(c,lcons(z,id.)))))
addrules in(a,pikind(b,c)) --> in(pikind(b,c),kind.) /\ %
	 (ALL z. (in(z,b) => in(lappl(a,z),subst(c,lcons(z,id.)))))

addrules imp(a,b) -> pitype(a,subst(b,shift.))

%At the end to make the proof close more quickly
addrules in(type.,kind.) --> A\/-A

tab in(a.,type.) => in(t,pitype(a.,subst(a.,shift.)))

quit

tab ((in(a.,type.) /\ in(b.,type.)) /\ in(c.,type.)) => in( lambda(lambda(lambda(lappl(lappl(subst(one.,rond(shift.,shift.)),one.),lappl(subst(one.,shift.),one.))))), imp(imp(a.,imp(b.,c.)),imp(imp(a.,b.),imp(a.,c.))))

quit

lappl(lappl(subst(one.,rond(shift.,shift.)),one.),%
lappl(subst(one.,shift.),one.))))) )%,
%imp(imp(a,imp(b,c)),imp(imp(a,b),imp(a,c)))))





in( lambda(lambda(lambda(lappl(lappl(subst(one.,rond(shift.,shift.)),one.),%
lappl(subst(one.,shift.),one.))))) )%,
%imp(imp(a,imp(b,c)),imp(imp(a,b),imp(a,c)))))
