//Gom File for all polygraphic programs
//Caution : this is a quite complete grammar for polygraphic programs though most of the things concerning 3-paths are actually never used

module PolygraphicProgram
	imports int String
	abstract syntax
	
OnePath = Id() //means null, empty
		| OneCell (Name:String)
		| OneC0 (OnePath*)
	
TwoPath = TwoId (onePath:OnePath) //to be able to cast wires as cells when needed
		| TwoCell (Name:String,Source:OnePath,Target:OnePath,Type:CellType,ID:int)
		| TwoC0 (TwoPath*)
		| TwoC1 (TwoPath*)

ThreePath = ThreeId (twoPath:TwoPath)//useless for the moment
		| ThreeCell (Name:String,Source:TwoPath,Target:TwoPath,Type:CellType)
		| ThreeC0 (ThreePath*)//useless
		| ThreeC1 (ThreePath*)//useless
		| ThreeC2 (ThreePath*)//useless

CellType = Constructor()
		| Function()

		
//HOOKS on variadic operators		

//ONEC0

//defines variadic operator OneC0 as associative and unitary with neutral element Id() 
OneC0:AU() { `Id() }


//TWOC0

//desactivates the default hook
TwoC0:Free() {}

//defines how to create an empty TwoC0
TwoC0:make_empty() { return `TwoId(Id()); }

//defines variadic operator TwoC0 as associative and unitary with neutral element TwoId(Id()) 
TwoC0:make_insert(x,y) {
%match(x,y){
	TwoId(Id()),tail -> {return `tail; }
	head,TwoId(Id())  -> {return `head; }
	TwoC0(h,t),tail -> {return `TwoC0(h,TwoC0(t,tail)); }
	TwoC1(),g -> { return `g; }
	g,TwoC1() -> { return `g; }
	}
}

//TWOC1

//desactivates the default hook
TwoC1:Free() {}

//defines how to create an empty TwoC0
TwoC1:make_empty() { return `TwoId(Id()); }

//defines variadic operator TwoC0 as associative and unitary with neutral element TwoId(Id()) 
TwoC1:make_insert(x,y) {
	//first we test if x and y are compatible for the *1 association
	if(y!=`TwoId(Id())&&x.target()!=y.source())
	{	//System.out.println(x);System.out.println(x.target());
		//System.out.println(y);System.out.println(y.source());
		throw new RuntimeException("composition of incompatible 2-Paths");
	}
%match(x,y){
	TwoId(Id()),tail -> {return `tail; }
	head,TwoId(Id())  -> {return `head; }
	TwoC1(h,t),tail -> {return `TwoC1(h,TwoC1(t,tail)); }
	TwoC0(),g -> { return `g; }
	g,TwoC0() -> { return `g; }
	}
}

//the same for variadic operators for 3-paths which we never use
//useless for the use we have of them now

ThreeC0:Free() {}
ThreeC0:make_empty() { return `ThreeId(TwoId(Id())); }
ThreeC0:make_insert(x,y) {
%match(x,y){
	ThreeId(TwoId(Id())),tail -> {return `tail; }
	head,ThreeId(TwoId(Id()))  -> {return `head; }
	ThreeC0(h,t),tail -> {return `ThreeC0(h,ThreeC0(t,tail)); }
	ThreeC1(),g -> { return `g; }
	g,ThreeC1() -> { return `g; }
	ThreeC2(),g -> { return `g; }
	g,ThreeC2() -> { return `g; }
	}
}

ThreeC1:Free() {}
ThreeC1:make_empty() { return `ThreeId(TwoId(Id())); }
ThreeC1:make_insert(x,y) {
	if(y!=`ThreeId(TwoId(Id()))&&x.source().target()!=y.source().source())
	{
		throw new RuntimeException("composition of incompatible 3-Paths");
	}
%match(x,y){
	ThreeId(TwoId(Id())),tail -> {return `tail; }
	head,ThreeId(TwoId(Id()))  -> {return `head; }
	ThreeC1(h,t),tail -> {return `ThreeC1(h,ThreeC1(t,tail)); }
	ThreeC0(),g -> { return `g; }
	g,ThreeC0() -> { return `g; }
	ThreeC2(),g -> { return `g; }
	g,ThreeC2() -> { return `g; }
	}
}

ThreeC2:Free() {}
ThreeC2:make_empty() { return `ThreeId(TwoId(Id())); }
ThreeC2:make_insert(x,y) {
	if(y!=`ThreeId(TwoId(Id()))&&x.target()!=y.source())
	{
		throw new RuntimeException("composition of incompatible 3-Paths");
	}
%match(x,y){
	ThreeId(TwoId(Id())),tail -> {return `tail; }
	head,ThreeId(TwoId(Id()))  -> {return `head; }
	ThreeC2(h,t),tail -> {return `ThreeC2(h,ThreeC2(t,tail)); }
	ThreeC0(),g -> { return `g; }
	g,ThreeC0() -> { return `g; }
	ThreeC1(),g -> { return `g; }
	g,ThreeC1() -> { return `g; }
	}
}

//verifies if a three-cell is valid before creating it
ThreeCell:make(name,source,target,type) {
	if(source.source()!=target.source()||source.target()!=target.target())
	{
	throw new RuntimeException ("three-cell unvalid, the source two-path and the target two-path should have the same one-source and one-target");	
	}
	else{
		realMake(name,source,target,type);
		}
}



//METHODS for polygraphic terms

//set of methods for 1-paths
sort OnePath:block(){
	
	//returns true if the path is valid (=well-constructed) (always true for a 1-path)
	//actually useless with our custom make methods
	public boolean defined(){return true;}
	
	//methods to print 1-path in a more "readable" way
	//top level
	public String prettyPrint(){
		%match (this){
			OneC0(left,right*) -> { return "OneC0("+`left.prettyPrint()+","+`OneC0(right*).prettyPrint()+")";}
		}
		return this.toString();
	}
	//other levels
	public String prettyPrintBis(){
		%match (this){
			o@OneCell(_) -> { return `o.getName(); }
			OneC0(left,right*) -> { return `left.prettyPrintBis()+","+`OneC0(right*).prettyPrintBis();}
		}
		return this.toString();
	}
	//called method
	public void print(){System.out.println(this.prettyPrint());}
}

//set of methods for 2-paths
sort TwoPath:block(){
	
	//returns the source 1-Path of any 2-Path
	public OnePath source(){
		%match (this){
					TwoId(X) -> { return `X; }
					TwoCell[Source=x] -> { return `x; }
					TwoC0(head,tail*) -> { return `OneC0(head.source(),tail*.source()); }
					TwoC1(head,tail*) -> { return `head.source(); }
		}
		//return `OneId();//actually useless
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
		}

	//returns the target 1-Path of any 2-Path
	public OnePath target(){
		%match (this){
					TwoId(X) -> { return `X; }
					TwoCell[Target=x] -> { return `x; }
					TwoC0(head,tail*) -> { return `OneC0(head.target(),tail*.target()); }
					TwoC1(head*,tail) -> { return `tail.target(); }
		}
		//return `OneId();//actually useless
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
		}
	
	//returns true if the path is valid (=well-constructed)
	//actually useless with our custom make methods
	public boolean defined(){
		%match (this){
					TwoCell[] -> { return true; }
					TwoC0(_*) -> { return true; }
					TwoC1(head, tail*) -> { return `head.target()==`tail.source()&&`tail.defined();}
		}
		return false;
		}
	
	//return the size of the source defined as the number of 1-Cells in the input
	public int sourcesize(){
		OnePath source=this.source();
		%match(source){
			Id() -> { return 0; }
			OneCell(_) -> { return 1; }
			o@OneC0(_*) -> { return `o.length(); }
		}
		return 0;
	}
	
	//return the size of the target defined as the number of 1-Cells in the output
	public int targetsize(){
		OnePath target=this.target();
		%match(target){
			Id() -> { return 0; }
			OneCell(_) -> { return 1; }
			o@OneC0(_*) -> { return `o.length(); }
		}
		return 0;
	}
	
	//methods to print 2-path in a more "readable" way
	//top level
	public  String prettyPrint (){
		%match (this){
					TwoC0(left,right*) -> { return "TwoC0("+`left.prettyPrint()+","+`TwoC0(right*).prettyPrint()+")";}
					TwoC1(left,right*) -> { return "TwoC1("+`left.prettyPrint()+","+`TwoC0(right*).prettyPrint()+")";}
		}
		return this.prettyPrintBis();
		}
	//other levels
	public  String prettyPrintBis(){
		%match (this){
						t@TwoCell(_,_,_,_,_) -> { return `t.getName(); }
						TwoId(o@OneCell(_)) -> { return `o.prettyPrintBis(); }
						TwoC0(left,right*) -> { return `left.prettyPrintBis()+","+`TwoC0(right*).prettyPrintBis();}
		}
		return this.toString();
		}
	//called method
	public void print(){System.out.println(this.prettyPrint());}
}


//set of methods for 3-paths (never used in this project except for the print method)
sort ThreePath:block(){
	
	//returns the source 1-Path of any 3-Path (same 1-source and 1-target for the source and the target of a 3-Cell) 
	public OnePath oneSource(){
		%match (this){	
					ThreeId(X) -> { return `X.source(); }
					ThreeCell[Source=x] -> { return `x.source(); }
					ThreeC0(head,tail*) -> { return `OneC0(head.oneSource(),tail*.oneSource()); }
					ThreeC1(head,tail*) -> { return `head.oneSource(); }
					ThreeC2(head,tail*) -> { return `head.oneSource(); }
		}
		//return `OneId();
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
	}

	//returns the source 1-Path of any 3-Path (same 1-source and 1-target for the source and the target of a 3-Cell) 
	public OnePath oneTarget(){
		%match (this){
					ThreeId(X) -> { return `X.target(); }
					ThreeCell[Target=x] -> { return `x.target(); }
					ThreeC0(head,tail*) -> { return `OneC0(head.oneTarget(),tail*.oneTarget()); }
					ThreeC1(head*,tail) -> { return `tail.oneTarget(); }
					ThreeC2(head,tail*) -> { return `head.oneTarget(); }
		}
		//return `OneId();
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
	}
	
	//returns the source 2-Path of any 3-Path
	public TwoPath source(){
		%match (this){
					ThreeId(X) -> { return `X; }
					ThreeCell[Source=x] -> { return `x; }
					ThreeC0(head,tail*) -> { return `TwoC0(head.source(),tail*.source()); }
					ThreeC1(head,tail*) -> { return `TwoC1(head.source(),tail*.source()); }
					ThreeC2(head,tail*) -> { return `head.source(); }
		}
		//return `TwoId(OneId());
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
	}

	//returns the target 2-Path of any 3-Path
	public TwoPath target(){
		%match (this){
					ThreeId(X) -> { return `X; }
					ThreeCell[Target=x] -> { return `x; }
					ThreeC0(head,tail*) -> { return `TwoC0(head.target(),tail*.target()); }
					ThreeC1(head,tail*) -> { return `TwoC1(head.target(),tail*.target()); }
					ThreeC2(head*,tail) -> { return `tail.target(); }
		}
		//return `TwoId(OneId());
		throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
	}
	
	//returns true if the path is valid (=well-constructed)
	//actually useless with our custom make methods
	public boolean defined(){
			%match (this){
						ThreeCell[] -> { return true; }
						ThreeC0(_*) -> { return true; }
						ThreeC1(ThreeCell[Source=source1],ThreeCell[Source=source2],tail*) -> { return `source1.target()==`source2.source()&&`tail.defined();}
						ThreeC2(ThreeCell[Target=target1],ThreeCell[Source=source2],tail*) -> { return `target1==`source2&&`tail.defined();}
				}
			return false;
		}
	//print method
	public void print(){System.out.println("ThreeCell("+this.getName()+","+this.getSource().prettyPrint()+","+this.getTarget().prettyPrint()+")");}
		
}