termrule lappl(lambda(a),b) -> subst(a,lcons(b,id())) .
termrule subst(lappl(b,a),s) -> lappl(subst(b,s),subst(a,s)).
termrule subst(one(),lcons(a,s)) -> a.
termrule subst(a,id()) -> a.
termrule subst(lambda(a),s) -> lambda(subst(a,lcons(one(),rond(s,shift())))).
termrule subst(subst(a,s),t) -> subst(a,rond(s,t)).
termrule rond(id(),s) -> s.
termrule rond(shift(),lcons(a,s)) -> s.
termrule rond(rond(s1,s2),s3) -> rond(s1,rond(s2,s3)).
termrule rond(lcons(a,s),t) -> lcons(subst(a,t),rond(s,t)).
termrule rond(s,id()) -> s.
termrule lcons(one(),shift()) -> id().
termrule lcons(subst(one(),s), rond(shift(), s)) -> s.

termrule subst(pitype(a,b),s) -> pitype(subst(a,s),subst(b,lcons(one(),rond(s,shift())))).
termrule subst(pikind(a,b),s) -> pikind(subst(a,s),subst(b,lcons(one(),rond(s,shift())))).

rule in(type(),kind()) -> \T.
rule in(pitype(a,b),type()) -> in(a,type()) /\ 
		    forall z, (in(z,a) => in(subst(b,lcons(z,id())), type())).
rule in(pikind(a,b),kind()) -> in(a,type()) /\ 
		    forall z, (in(z,a) => in(subst(b,lcons(z,id())), kind())).
rule in(a,pitype(b,c)) -> in(b,type()) /\ forall z, (in(z,b) =>
	       	  (in(lappl(a,z),subst(c,lcons(z,id()))) /\ in(subst(c,lcons(z,id())),type()))).
rule in(a,pikind(b,c)) -> in(b,type()) /\ forall z, (in(z,b) =>
	       	  (in(lappl(a,z),subst(c,lcons(z,id()))) /\ in(subst(c,lcons(z,id())),kind()))).

rule WF(cons(gamma,e(a,b))) ->
    (WF(gamma)=>(in(b,type())\/in(b,kind()))) => (C(gamma) /\in(a,b)).

rule C(cons(gamma,e(a,b))) -> 
     C(gamma) /\ in(a,b).

proof a_simple_proof: WF(cons(nil(),e(nat,type()))) => 
      	 in(lambda(one()),pitype(nat,subst(nat,shift()))).

autoreduce.

//display a_simple_proof.

rule NatListTheory(nat,z,succ,natList,nil,cons) ->
     WF(cons(cons(cons(cons(cons(cons(nil(),
     e(nat,type())),
     e(z,nat)), 
     e(succ,pitype(nat,subst(nat,shift())))),
     e(natList, pikind(nat, subst(type(),shift())))),
     e(nil,lappl(natList,z))),
     e(cons, pitype(nat, pitype(subst(nat,shift()), (pitype(lappl(subst(natList,rond(shift(),shift())), one()), 
      	 	  	    lappl(subst(natList,rond(shift(),rond(shift(),shift()))), lappl(subst(succ,rond(shift(),rond(shift(),shift()))),subst(one(),shift())))))))))).

proof singletonZ: NatListTheory(nat,z,succ,natList,nil,cons) =>
      in(lappl(lappl(lappl(cons, lappl(succ, z)), z), nil), lappl(natList,lappl(succ,z))).
autoreduce.
next.
focus h6.
rule. z.
autoreduce.
axiom.
next.
focus h7. rule. z.
autoreduce.
axiom.
next.
focus h6. rule. z1.
autoreduce.
axiom.
next.
focus h7. rule. lappl(succ,z1).
autoreduce.
focus h7. rule. z1.
autoreduce.
axiom.
focus h7. rule. lappl(succ,z).
autoreduce.
focus h2. rule. z.
autoreduce.
focus h2. rule. nil.
autoreduce.
axiom.
axiom.
focus h5. rule. z. autoreduce. autoreduce.

rule SimpleTypeTheory(tp,arrow,nat,lterm,z,s,app,lam) ->
       forall A,(forall B,(forall C,(forall D,( WF(cons(cons(cons(cons(cons(cons(cons(cons(nil(),
       e(tp,type())),
       e(arrow, pitype(tp, pitype(subst(tp,shift()),subst(tp,rond(shift(),shift())))))),
       e(nat, tp)),
       e(lterm, pikind(tp,subst(type(),shift())))),
       e(z, lappl(lterm, nat))),
       e(s, lappl(lterm, lappl(lappl(arrow,nat),nat)))),
       e(app, pitype(lappl(lterm, lappl(lappl(arrow,A),B)),
	       			pitype(lappl(subst(lterm,shift()),subst(A,shift())),
				lappl(subst(lterm,rond(shift(),shift())),subst(B,rond(shift(),shift()))))))),
       e(lam, pitype(pitype(lappl(lterm, C), lappl(subst(lterm,shift()),subst(D,shift()))), lappl(subst(lterm,shift()),lappl(lappl(subst(arrow,shift()),subst(C,shift())),subst(D,shift()))))))))))).


proof lambdaXsX: SimpleTypeTheory(tp,arrow,nat,lterm,z,s,app,lam) =>
	       in(lappl(lam, lambda(lappl(lappl(subst(app,shift()),subst(s,shift())),one()))),
	          lappl(lterm, lappl(lappl(arrow, nat), nat))).
intro. focus h1. rule. nat. nat. nat. nat.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. lappl(lappl(arrow, nat), nat).
autoreduce.
focus h4. rule. nat.
autoreduce.
reduce. focus h2. rule. nat.

autoreduce.
autoreduce.
focus h5. rule. lappl(lappl(arrow, nat), nat).
autoreduce.
focus h4. rule. nat.
autoreduce.
reduce. focus h2. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. lappl(lappl(arrow, nat), nat).
autoreduce.
focus h4. rule. nat.
autoreduce.
reduce. focus h2. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.
focus h5. rule. nat.
autoreduce.
autoreduce.

focus h9. rule. lambda(lappl(lappl(subst(app,shift()),subst(s,shift())),one())).
autoreduce.
focus h7. rule. nat.
autoreduce.
autoreduce.
focus h6. rule. nat.
autoreduce.
autoreduce.
focus h10. rule. s.
autoreduce.
reduce. focus h2. rule. z0.
autoreduce.
autoreduce.
autoreduce.
