termrule appl(t,nil()) -> t.
termrule appl(one(),cons(t,l)) -> t.
termrule appl(S(n),cons(t,l)) -> appl(n,l).
termrule appl(succ(t),l) -> succ(appl(t,l)).
termrule appl(pred(t),l) -> pred(appl(t,l)).
termrule appl(t1+t2,l) -> appl(t1,l) + appl(t2,l).
termrule appl(t1*t2,l) -> appl(t1,l) * appl(t2,l).

termrule pred(0) -> 0.
termrule pred(succ(x)) -> x.
termrule 0 + y -> y.
termrule 0 * y -> 0.
termrule succ(x) + y -> succ(x+y).
termrule succ(x) * y -> x * y + y.

rule in(l,fNull(t)) -> Null(appl(t,l)).
rule in(l,fEq(t1,t2)) -> eq( appl(t1,l), appl(t2,l) ).
rule in(l,fN(t)) -> N(appl(t,l)).
rule eq(x,y) -> \Ap.(  in(cons(x,nil()),p) => in(cons(y,nil()),p) ).
rule N(n) -> \Ap.( in(cons(0,nil()),p) => ( \Ay.(N(y) => in(cons(y,nil()),p) =>  in(cons(succ(y),nil()),p)) => in(cons(n,nil()),p) )).
hered.
hered2.
rule Null(0) -> \T.
rule Null(succ(x)) -> \B.
rule in(l,inter(A,B)) -> in(l,A) /\ in(l,B).
rule in(l,union(A,B)) -> in(l,A) \/ in(l,B).
rule in(l,supset(A,B)) -> in(l,A) => in(l,B).
rule in(l,emptyset()) -> \B.
rule in(l,P(a)) -> \En.(in(cons(n,l),A)).
rule in(l,C(a)) -> \An.(in(cons(n,l),A)).


proof zisnat: N(0).
rule. 0.
axiom.

proof oneisnat: N(1).
rule. 0.
focus h2. rule. 0.
axiom. axiom.
theorem zisnat. axiom.

proof ind: \A n. (N(n) => N(succ(n))).
auto.
focus h3. rule. p0.
next. axiom.
next.


il faut hered = hered2 ... corriger lemu avant

