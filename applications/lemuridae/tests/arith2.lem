termrule s(n) + m -> s(n+m).
termrule 0 + n -> n.
termrule s(n) * m -> n*m +m.
termrule 0 * n -> 0.

rule N(n) -> \AP.( appl(P,0) => ( \Am.(appl(P,m) => appl(P,s(m))) => appl(P,n) ) ).
hered.

rule N(s(n)) -> \T.
rule N(0) -> \T.
rule eq(x,y) -> \AP. ((appl(P,x) => appl(P,y)) /\ (appl(P,y) => appl(P,x))).


proof eqrefl: |- \Ax.(eq(x,x)).
auto.

proof eqsym: |- \Ax.(\Ay.(eq(x,y) => eq(y,x)) /\ (eq(y,x) => eq(x,y))).
auto.
focus h2. rule. P0.
axiom.
axiom.
focus h2. rule. P0.
axiom.
axiom.
focus h2. rule. P0.
axiom.
axiom.
focus h2. rule. P0.
axiom.
axiom.

proof eqtrans: |- \Ax.(\Ay.(\Az.( eq(x,y) => (eq(y,z) => eq(x,z)) ))).
auto.
focus h2. rule. P0.
axiom.
focus h3. rule. P0.
axiom.
axiom.
focus h2. rule. P0.
focus h5. rule. P0.
axiom.
axiom.
axiom.


rule appl(res(),n) -> eq(n+0,n).
rule eq(s(x),s(y)) -> eq(x,y).

proof nplus0: |- \An.( N(n) => appl(res(),n) ).
elim. elim.
focus h1. rule. res().
axiom.
rule.
next.
rule.
reduce. theorem eqrefl.
focus h2. elim. 0. axiom.
rule.
focus h1. rule.
reduce.
focus c1. rule 12. axiom.


rule N(n,m) -> \AP.( appl(P,0,m) => ( \Aq.(appl(P,q,m) => appl(P,s(q),m)) => appl(P,n,m) ) ).
hered2.

rule appl(snplusm(),n,m) -> eq(s(n)+m,n+s(m)).
proof lemme1: |- \An.(\Am.(N(n,m) => appl(snplusm(),n,m))).
elim. elim. elim.
focus h1 . rule . snplusm().
axiom.
rule.
focus h1. rule. rule.
reduce.
rule 12. axiom.
rule.
reduce.
theorem eqrefl.
focus h2. elim. s(m0). axiom.




