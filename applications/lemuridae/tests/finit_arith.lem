termrule appl(t,nil()) -> t.
termrule appl(one(),cons(t,l)) -> t.
termrule appl(S(n),cons(t,l)) -> appl(n,t,l).
termrule appl(succ(t),l) -> succ(appl(t,l)).
termrule appl(pred(t),l) -> pred(appl(t,l)).
termrule appl(t1+t2,l) -> appl(t1,l) + appl(t2,l).

termrule pred(0) -> 0.
termrule pred(succ(x)) -> x.
termrule 0 + y -> y.
termrule 0 * y -> 0.
termrule succ(x) + y -> succ(x+y).
termrule succ(x) * y -> x * y + y.

rule in(l,fNull(t)) -> Null(appl(t,l)).
rule in(l,fEq(t1,t2)) -> eq( appl(t1,l), appl(t2,l) ).
rule in(l,fN(t)) -> N(appl(t,l)).
rule eq(x,y) -> \AA.(  in(cons(x,nil()),A) => in(cons(y,nil()),A) ).
rule N(n) -> \AA.( in(cons(0,nil()),A) => ( \Ay.(in(cons(y,nil()),A) =>  in(cons(succ(y),nil()),A)) => in(cons(n,nil()),A) )).
hered.
rule Null(0) -> \T.
rule Null(succ(x)) -> \B.
rule in(l,inter(A,B)) -> in(l,A) /\ in(l,B).
rule union(A,B)) -> in(l,A) \/ in(l,B).
rule in(l,supset(A,B)) -> in(l,A) => in(l,B).
rule in(l,emptyset()) -> \B.
rule in(l,P(a)) -> \En.(in(cons(n,l),A)).
rule in(l,C(a)) -> \An.(in(cons(n,l),A)).


rule Pair(0) -> \T.
rule Pair(succ(n)) -> Impair(n).
rule Impair(succ(n)) -> Pair(n).

rule in(l,fPair(t)) -> Pair(appl(t,l)).
rule in(l,fImpair(t)) -> Impair(appl(t,l)).


proof pair2n : \Ax.(\Ay.eq(x+y,y+x)) |- \An.(N(n) => Pair(succ(succ(0))*n)).
reduce.
auto.
cut in(cons(n0,nil()),fPair(one()+one())).
auto.
reduce.
axiom.
focus h2.
rule. fPair((one()+one())).
axiom.
next.
auto. 
reduce. 
auto.

auto.
reduce.
auto.
focus h2. elim. succ(y0).
focus h3. elim. y0.
focus h4. rule. fImpair(one()).
auto. reduce.
axiom.
auto. reduce.
auto.

display pair2n.

