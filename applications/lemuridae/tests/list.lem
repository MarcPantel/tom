termrule appl(t,nil()) -> t.
termrule appl(one(),cons(t,l)) -> t.
termrule appl(S(n),cons(t,l)) -> appl(n,l).
proprule in(l,inter(A,B)) -> in(l,A) /\ in(l,B).
proprule in(l,union(A,B)) -> in(l,A) \/ in(l,B).
proprule in(l,supset(A,B)) -> in(l,A) => in(l,B).
proprule in(l,emptyset()) -> \B.
proprule in(l,P(p)) -> exists n, in(cons(n,l),p).
proprule in(l,C(p)) -> forall n, in(cons(n,l),p).


termrule pred(0) -> 0.
termrule pred(succ(x)) -> x.
termrule 0 + y -> y.
termrule 0 * y -> 0.
termrule succ(x) + y -> succ(x+y).
termrule succ(x) * y -> x * y + y.
termrule appl(succ(t),l) -> succ(appl(t,l)).
termrule appl(pred(t),l) -> pred(appl(t,l)).
termrule appl(t1+t2,l) -> appl(t1,l) + appl(t2,l).
termrule appl(t1*t2,l) -> appl(t1,l) * appl(t2,l).



rule Null(0) -> \T.
rule Null(succ(x)) -> \B.
proprule in(l,fNull(t)) -> Null(appl(t,l)).


rule eq(x,y) -> forall A,(  in(cons(x,nil()),A) => in(cons(y,nil()),A) ).
proprule in(l,fEq(t1,t2)) -> eq( appl(t1,l), appl(t2,l) ).


rule Nat(n) -> forall p, in(cons(0,nil()),p) => (forall y,in(cons(y,nil()),p) =>  in(cons(succ(y),nil()),p)) => in(cons(n,nil()),p).
herednat.
proprule in(l,fNat(t)) -> Nat(appl(t,l)).


rule List(l) -> forall p, in(cons(lnil(),nil()),p) => (forall a, (forall ll, in(cons(ll,nil()),p) => in(cons(lcons(a,ll),nil()),p))) => in(cons(l,nil()),p).
heredlist.
proprule in(l,fList(t)) -> List(appl(t,l)).


termrule appl(lcons(h,t),l) -> lcons(appl(h,l),appl(t,l)).


termrule len(lcons(h,t)) -> 1 + len(t).
termrule len(lnil()) -> 0.
termrule appl(len(x),l) -> len(appl(x,l)).


termrule append(lnil(),l) -> l.
termrule append(lcons(h,t),l) -> lcons(h,append(t,l)).
termrule appl(append(x,y),l) -> append(appl(x,l),appl(y,l)).


proof testlist :  P(len(lcons(1,lcons(2,lnil())))) => P(len(lcons(0,lcons(3,lnil())))).
intro.
reduce.
axiom.

proof testAppNilEnd: forall l, List(l) => eq(l,append(l,lnil())).
intros.
focus h1.
rule. fEq(one(),append(one(),S(lnil()))).
reduce.
axiom.
focus c2. remove.
rule.
reduce.
focus h1.
rule.
fEq( lcons(S(a0),S(ll0)) ,   lcons(S(a0), one()  ) ).
reduce.
axiom.
reduce.
rule. axiom.
reduce.
rule. axiom.

proof appAss: forall l,(forall n,(forall m,  List(l) =>  eq(append(append(l,n),m), append(l,append(n,m))))).
intros.
focus h1.
rule.
fEq(append(append(one(),S(n0)),S(m0)) , append(one(),append(S(n0), S(m0)))).
reduce.
axiom.
focus c2. remove.
focus h1. remove.
rule. reduce.
focus h1.
rule.
fEq(lcons(S(a0),append(append(S(ll0),S(n0)),S(m0)) ) , lcons(S(a0),one() ) ).
reduce.
axiom.
reduce.
rule. axiom.
reduce.
rule. axiom.


proof lnilIsList: List(lnil()).
rule.
axiom.

proof oneElemIsList: forall x, List(lcons(x,lnil())).
intro.
rule.
focus h2. rule. lnil(). x0.
axiom.
axiom.


rule IsNil(lnil()) -> True.
rule IsNil(lcons(x,y)) -> False.
proprule in(l,fIsNil(t)) -> IsNil(appl(t,l)).


proof discrim: ~eq(lnil(),lcons(0,lnil())).
intro.
focus h1.
rule.
fIsNil(one()).
reduce.
focus h1. rule. 
reduce.
rule.

/*
proof appCommCons : forall x,(forall y,(forall a,(eq ( lcons(a,append(x,y)) , append(lcons(a,x),y) )))).
intro. intro. intro.
cut List(lcons(a0,lnil())) => 
*/












































































































