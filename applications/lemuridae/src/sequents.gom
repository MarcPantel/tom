module sequents
imports String int 

abstract syntax

Term = Var(name:String)
     | funAppl(fun:String, p:TermList)
     | NewVar(name:String, base_name: String) // asks for a new var
     | FreshVar(name:String, base_name: String) // asks for a fresh var

TermList = concTerm(Term*)

Prop = relationAppl(r:String, t:TermList)
     | and(p1:Prop, p2:Prop)
     | or(p1:Prop, p2:Prop)
     | implies(p1:Prop, p2:Prop)
     | forAll(var:String, p:Prop)
     | exists(var:String, p:Prop)
     | bottom()
     | top()
     | nullProp() // for open leaves

Context = context(Prop*)

Sequent = sequent(h:Context,c:Context)

Premisses = premisses(Tree*)

// st == symbol table
Tree = rule(type:RuleType, p:Premisses, c:Sequent, active:Prop)
     | nullTree() // for conveniance

RuleType = axiomInfo()
         | impliesLeftInfo()
         | impliesRightInfo()
         | andLeftInfo()
         | andRightInfo()
         | orLeftInfo()
         | orRightInfo()
         | forAllRightInfo(freshvar:Term)
         | forAllLeftInfo(newterm:Term)
         | existsRightInfo(newterm:Term)
         | existsLeftInfo(freshvar:Term)
         | bottomInfo()
         | topInfo()
         | cutInfo(p:Prop)
         | contractionLeftInfo()
         | contractionRightInfo()
         | weakLeftInfo()
         | weakRightInfo()
         | openInfo() // open leaf
         | reductionInfo() // reduction step
         | customRuleInfo(name:String,expanded:Tree)

//--- new rules ---
SeqList = concSeq(Sequent*)

VarList = varlist(String*)

// hs == hand-side : 0 left, 1 right
Rule = ruledesc(hs:int, concl:Prop, prem:SeqList, tree:Tree)

TermRule = termrule(lhs:Term,rh:Term)
TermRuleList = termrulelist(TermRule*)
PropRule = proprule(lhs:Prop,rhs:Prop)
PropRuleList = proprulelist(PropRule*)

// --- for the new rules computation---
RuleList = rlist(Rule*)


// parsed in interactive mode
Command = rewriteprop(l:Prop, r:Prop)
        | rewritesuper(l:Prop, r:Prop)
        | rewriteterm(lt:Term, rt:Term)
        | normalizeProp(p: Prop)
        | normalizeTerm(t: Term)
        | proof(name:String, p:Prop)
        | display(name:String)
        | proofterm(name:String)
        | quit()
        | proofcheck(name:String)
        | print(name:String)
        | resume(text:String)
        | gibber()
        | importfile(name:String)
        | endoffile()
	
ProofCommand = proofCommand(text:String)
             | focusCommand(hyp:String)
             | cutCommand(p:Prop)
             | ruleCommand(n:int)
             | askrulesCommand()
             | theoremCommand(name:String)
             | normalizeSequent()
             | proofquit()
             | abort()
             | proofendoffile()


// hooks maintaining free vars

/*

sort Term:block() {
  protected java.util.HashSet<String> freeVars = 
    new java.util.HashSet();

  public java.util.HashSet<String> getFreeVars() { return freeVars; }

}

Var:make(name) {
  freeVars.add(`name);
}

funAppl:make(fun,args) {
  %match(TermList args) {
    (_*,x,_*) -> { freeVars.addAll(`x.getFreeVars()); }
  }
}

FreshVar:make(name,bname) {
  freeVars.add(`name);
}

NewVar:make(name,bname) {
  freeVars.add(`name);
}

sort Prop:block() {
  protected java.util.HashSet<String> freeVars = 
    new java.util.HashSet();
}

*/

