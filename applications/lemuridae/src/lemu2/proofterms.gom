module proofterms 
imports String int 

abstract syntax

atom Name
atom CoName
atom FoVar

/* first-order terms */

Term = var(v:FoVar)
     | funApp(fun:String, p:TermList)

TermList = termList(Term*)

/* propositions */

Prop = relApp(r:String, t:TermList)
     | and(p1:Prop, p2:Prop)
     | or(p1:Prop, p2:Prop)
     | implies(p1:Prop, p2:Prop)
     | forall(fa:<Fa>)
     | exists(ex:<Ex>)
     | bottom()
     | top()

Fa binds FoVar = Fa(x:FoVar,inner p:Prop)
Ex binds FoVar = Ex(x:FoVar,inner p:Prop)

/* rewrite rules */

FoBound binds FoVar = foBound(FoVar*)

TermRewriteRule = termrrule(cl:<TRule>)
TRule binds FoVar = trule(bound:FoBound, inner lhs:Term, inner rhs:Term)

TermRewriteRules = termrrules(TermRewriteRule*)

/* proof terms */

ProofTerm = ax(x:Name,a:CoName)
          | cut(cp1:<CutPrem1>,cp2:<CutPrem2>)
          | falseL(x:Name)
          | trueR(a:CoName)
          | andR(arp1:<AndRPrem1>,arp2:<AndRPrem2>,cn:CoName)
          | andL(alp1:<AndLPrem1>,n:Name)
          | orR(orp1:<OrRPrem1>,cn:CoName)
          | orL(olp1:<OrLPrem1>,olp2:<OrLPrem2>, n:Name)
          | implyR(irp1:<ImplyRPrem1>, cn:CoName)
          | implyL(ilp1:<ImplyLPrem1>,ilp2:<ImplyLPrem2>,n:Name)
          | existsR(erp1:<ExistsRPrem1>,t:Term,cn:CoName)
          | existsL(elp1:<ExistsLPrem1>,n:Name)
          | forallR(frp1:<ForallRPrem1>,cn:CoName)
          | forallL(flp1:<ForallLPrem1>,t:Term,n:Name)
          | rootL(rlp1:<RootLPrem1>)
          | rootR(rrp1:<RootRPrem1>)

RootLPrem1 binds Name = RootLPrem1(x:Name,neutral px:Prop,inner M:ProofTerm)
RootRPrem1 binds CoName = RootRPrem1(a:CoName,neutral pa:Prop,inner M:ProofTerm)

CutPrem1 binds CoName = CutPrem1(a:CoName,neutral pa:Prop,inner M:ProofTerm)
CutPrem2 binds Name = CutPrem2(x:Name,neutral px:Prop,inner N:ProofTerm)

AndRPrem1 binds CoName = AndRPrem1(a:CoName,neutral pa:Prop,inner M:ProofTerm)
AndRPrem2 binds CoName = AndRPrem2(b:CoName,neutral pb:Prop,inner N:ProofTerm)
AndLPrem1 binds Name = AndLPrem1(x:Name,neutral px:Prop,y:Name,neutral py:Prop,inner M:ProofTerm)

OrLPrem1 binds Name = OrLPrem1(x:Name,neutral px:Prop,inner M:ProofTerm)
OrLPrem2 binds Name = OrLPrem2(y:Name,neutral py:Prop,inner N:ProofTerm)
OrRPrem1 binds CoName = OrRPrem1(a:CoName,neutral pa:Prop,b:CoName,neutral pb:Prop,inner M:ProofTerm)

ImplyRPrem1 binds Name CoName = ImplyRPrem1(x:Name,neutral px:Prop,a:CoName,neutral pa:Prop,inner M:ProofTerm)
ImplyLPrem1 binds Name = ImplyLPrem1(x:Name,neutral px:Prop,inner M:ProofTerm)
ImplyLPrem2 binds CoName = ImplyLPrem2(a:CoName,neutral pa:Prop,inner N:ProofTerm)

ExistsRPrem1 binds CoName = ExistsRPrem1(a:CoName,neutral pa:Prop,inner M:ProofTerm)
ExistsLPrem1 binds Name FoVar = ExistsLPrem1(x:Name,inner px:Prop,fx:FoVar,inner M:ProofTerm)

ForallRPrem1 binds CoName FoVar = ForallRPrem1(a:CoName,inner pa:Prop,fx:FoVar,inner M:ProofTerm)
ForallLPrem1 binds Name = ForallLPrem1(x:Name,neutral px:Prop,inner M:ProofTerm)

/* -- data structures used by Evaluation.t -- */

NameList = nameList(Name*)
CoNameList = conameList(CoName*)

/* -- data structures used by TypeChecker.t */

FoVarList = fovarList(FoVar*)
NProp = nprop(n:Name,p:Prop)
CNProp = cnprop(cn:CoName,p:Prop)
LCtx = lctx(NProp*)
RCtx = rctx(CNProp*)
Sequent = seq(l:LCtx,r:RCtx)

/* data structures used by Rewriting.t */

FoMap = fomap(v:FoVar,t:Term)
FoSubst = fosubst(FoMap*)

