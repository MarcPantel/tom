term modulo { }

prop modulo { 
  r1 : [] In(r(),r()) -> forall y, Eq(y,r()) => In(r(),y) => A => A
  r2 : [y,z] Eq(y,z) -> forall x, In(x,y) => In(x,z)
}

prop fold { }

prop super { }

rootR(
  <root:In(r(),r()) => A => A> implyR(
  <z:In(r(),r())> <r:A => A> 
forallL(
            <z1:Eq(r(),r()) => In(r(),r()) => A => A>implyL(
              <z2:In(r(),r()) => A => A> implyL(
                <z3:A => A>ax(z3,r),<a:In(r(),r())>ax(z,a),z2),
              <a1:Eq(r(),r())> forallR(
                <a2:In(y,r()) => In(y,r())><y>implyR(
                  <z3:In(y,r())><a3:In(y,r())>ax(z3,a3),a2),a1),z1),r(),z),root

))

