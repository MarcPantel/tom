module urban
imports String int sequents

abstract syntax


NProp = nprop(x:Name,p:Prop)
CNProp = cnprop(a:CoName,p:Prop)

NContext = ncontext(NProp*)
CNContext = cncontext(CNProp*)
ncontext:make_insert(a,l) {
  %match(NProp a, NContext l) {
    nprop(x,p1),ncontext(_*,nprop(x,p2),_*) -> {
      if (`p1 !=`p2) { throw new RuntimeException("illformed context"); }
    }
  }
}

cncontext:make_insert(a,l) {
  %match(CNProp a, CNContext l) {
    cnprop(x,p1),cncontext(_*,cnprop(x,p2),_*) -> {
      if (`p1 !=`p2) { throw new RuntimeException("illformed context"); }
    }
  }
}


NSequent = nsequent(h:NContext,c:CNContext)


// Proofterms
Name = name(n:int)
CoName = coname(n:int)

ProofTerm = ax(n:Name,cn:CoName)
          | cut(a:CNProp,m1:ProofTerm,x:NProp,m2:ProofTerm)
          | falseL(n:Name)
          | trueR(cn:CoName)
          | andR(a:CNProp,m1:ProofTerm,b:CNProp,m2:ProofTerm, nc:CoName)
          | andL(x:NProp,y:NProp,m:ProofTerm, n:Name)
          | orR(a:CNProp,b:CNProp,m:ProofTerm, cn:CoName)
          | orL(x:NProp,m1:ProofTerm,y:NProp,m2:ProofTerm, n:Name)
          | implyR(x:NProp,a:CNProp,m1:ProofTerm, cn:CoName)
          | implyL(a:CNProp,m1:ProofTerm,x:NProp,m2:ProofTerm, n:Name)
          | existsR(a:CNProp,m:ProofTerm,t:Term,cn:CoName)
          | existsL(x:NProp,varx:Term,m:ProofTerm,n:Name)
          | forallR(a:CNProp,varx:Term,m:ProofTerm,cn:CoName)
          | forallL(x:NProp,m:ProofTerm,t:Term,n:Name)
existsL:make(x,varx,m,y) {
  %match(Term varx) {
    !Var(varname) -> { throw new RuntimeException("Exists Left not on variable"); }
  }
}

forallR:make(a,varx,m,b) {
  %match(Term varx) {
    !Var(varname) -> { throw new RuntimeException("Forall Right not on variable"); }
  }
}

NPremisses = npremisses(NTree*)

NTree = nrule(type:RuleType, p:NPremisses, c:NSequent, pt:ProofTerm)

