package material;

import system.types.Formula;

public class ExamplesFormula{

  private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static boolean tom_equal_term_boolean(boolean t1, boolean t2) {return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) {return  true ;} private static boolean tom_equal_term_ATerm(Object t1, Object t2) {return  t1 == t2 ;}private static boolean tom_is_sort_ATerm(Object t) {return  t instanceof aterm.ATerm ;}private static boolean tom_equal_term_ATermList(Object l1, Object l2) {return  l1==l2 ;}private static boolean tom_is_sort_ATermList(Object t) {return  t instanceof aterm.ATermList ;}private static boolean tom_equal_term_AFun(Object t1, Object t2) {return  t1 == t2 ;}private static boolean tom_is_sort_AFun(Object t) {return  t instanceof aterm.AFun ;} private static boolean tom_equal_term_CounterExample(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_CounterExample(Object t) {return  (t instanceof system.types.CounterExample) ;}private static boolean tom_equal_term_Formula(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Formula(Object t) {return  (t instanceof system.types.Formula) ;}private static boolean tom_equal_term_Args(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Args(Object t) {return  (t instanceof system.types.Args) ;}private static boolean tom_equal_term_Term(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Term(Object t) {return  (t instanceof system.types.Term) ;}private static  system.types.Formula  tom_make_Predicate( String  t0,  system.types.Args  t1) { return  system.types.formula.Predicate.make(t0, t1) ;}private static  system.types.Formula  tom_make_Forall( String  t0,  String  t1,  system.types.Formula  t2) { return  system.types.formula.Forall.make(t0, t1, t2) ;}private static  system.types.Term  tom_make_Var( String  t0) { return  system.types.term.Var.make(t0) ;}private static boolean tom_is_fun_sym_ListArgs( system.types.Args  t) {return  ((t instanceof system.types.args.ConsListArgs) || (t instanceof system.types.args.EmptyListArgs)) ;}private static  system.types.Args  tom_empty_list_ListArgs() { return  system.types.args.EmptyListArgs.make() ;}private static  system.types.Args  tom_cons_list_ListArgs( system.types.Term  e,  system.types.Args  l) { return  system.types.args.ConsListArgs.make(e,l) ;}private static  system.types.Term  tom_get_head_ListArgs_Args( system.types.Args  l) {return  l.getHeadListArgs() ;}private static  system.types.Args  tom_get_tail_ListArgs_Args( system.types.Args  l) {return  l.getTailListArgs() ;}private static boolean tom_is_empty_ListArgs_Args( system.types.Args  l) {return  l.isEmptyListArgs() ;}   private static   system.types.Args  tom_append_list_ListArgs( system.types.Args l1,  system.types.Args  l2) {     if( l1.isEmptyListArgs() ) {       return l2;     } else if( l2.isEmptyListArgs() ) {       return l1;     } else if(  l1.getTailListArgs() .isEmptyListArgs() ) {       return  system.types.args.ConsListArgs.make( l1.getHeadListArgs() ,l2) ;     } else {       return  system.types.args.ConsListArgs.make( l1.getHeadListArgs() ,tom_append_list_ListArgs( l1.getTailListArgs() ,l2)) ;     }   }   private static   system.types.Args  tom_get_slice_ListArgs( system.types.Args  begin,  system.types.Args  end, system.types.Args  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyListArgs()  ||  (end==tom_empty_list_ListArgs()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  system.types.args.ConsListArgs.make( begin.getHeadListArgs() ,( system.types.Args )tom_get_slice_ListArgs( begin.getTailListArgs() ,end,tail)) ;   }    

  public static Formula f1 = tom_make_Forall("x","D",tom_make_Predicate("P",tom_cons_list_ListArgs(tom_make_Var("x"),tom_empty_list_ListArgs())));

}
