
%include { int.tom }

%typeterm B {
  implement { examples.data.types.types.B }
  is_sort(t) { ($t instanceof examples.data.types.types.B) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm A {
  implement { examples.data.types.types.A }
  is_sort(t) { ($t instanceof examples.data.types.types.A) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm C {
  implement { examples.data.types.types.C }
  is_sort(t) { ($t instanceof examples.data.types.types.C) }

  equals(t1,t2) { ($t1==$t2) }

}
%op B b1() {
  is_fsym(t) { ($t instanceof examples.data.types.types.b.b1) }
  make() { examples.data.types.types.b.b1.make() }
}

%op B b2() {
  is_fsym(t) { ($t instanceof examples.data.types.types.b.b2) }
  make() { examples.data.types.types.b.b2.make() }
}

%op B b3() {
  is_fsym(t) { ($t instanceof examples.data.types.types.b.b3) }
  make() { examples.data.types.types.b.b3.make() }
}

%op B goo(a:A) {
  is_fsym(t) { ($t instanceof examples.data.types.types.b.goo) }
  get_slot(a, t) { $t.geta() }
  make(t0) { examples.data.types.types.b.goo.make($t0) }
}

%op A a1() {
  is_fsym(t) { ($t instanceof examples.data.types.types.a.a1) }
  make() { examples.data.types.types.a.a1.make() }
}

%op A a2() {
  is_fsym(t) { ($t instanceof examples.data.types.types.a.a2) }
  make() { examples.data.types.types.a.a2.make() }
}

%op A a3() {
  is_fsym(t) { ($t instanceof examples.data.types.types.a.a3) }
  make() { examples.data.types.types.a.a3.make() }
}

%op A foo(b:B) {
  is_fsym(t) { ($t instanceof examples.data.types.types.a.foo) }
  get_slot(b, t) { $t.getb() }
  make(t0) { examples.data.types.types.a.foo.make($t0) }
}

%op A hoo(a:A, v:int) {
  is_fsym(t) { ($t instanceof examples.data.types.types.a.hoo) }
  get_slot(a, t) { $t.geta() }
  get_slot(v, t) { $t.getv() }
  make(t0, t1) { examples.data.types.types.a.hoo.make($t0, $t1) }
}

%op C c1() {
  is_fsym(t) { ($t instanceof examples.data.types.types.c.c1) }
  make() { examples.data.types.types.c.c1.make() }
}

%op C c2() {
  is_fsym(t) { ($t instanceof examples.data.types.types.c.c2) }
  make() { examples.data.types.types.c.c2.make() }
}

%op C c3() {
  is_fsym(t) { ($t instanceof examples.data.types.types.c.c3) }
  make() { examples.data.types.types.c.c3.make() }
}

%op C coo(a:A, b:B, c:C, aa:A) {
  is_fsym(t) { ($t instanceof examples.data.types.types.c.coo) }
  get_slot(a, t) { $t.geta() }
  get_slot(b, t) { $t.getb() }
  get_slot(c, t) { $t.getc() }
  get_slot(aa, t) { $t.getaa() }
  make(t0, t1, t2, t3) { examples.data.types.types.c.coo.make($t0, $t1, $t2, $t3) }
}

