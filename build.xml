<?xml version="1.0" encoding="UTF-8"?>
<project name="Ant for TOM" default="stable" basedir=".">
	<description>
		Build script using Ant offering checks, dists,
		installation, and so on.
		
		To use this build file, install ant,
		and just run ./build.sh in the current directory.
		
		You can modify default settings via
		ant -Ddist="/home/yourdirectory"
		for the various properties listed below.
	</description>
	
	<!-- set local properties for this build -->
	<property file="local.properties"/>
	<property name="build.sysclasspath" value="ignore" />
	<property name="nowarnings" value="false" />  
	<!-- current version of TOM -->
	<property name="version" value="2.1 - under development"/>
	
	<!-- some used directory location -->
	<property name="test"           location="test"/>
	<property name="examples"       location="examples"/>
	<property name="utils"          location="utils"/>
	<property name="lib"            location="lib"/>
	<property name="share"          location="share"/>

	<!-- libraries -->
	<property name="concurrent.lib" value="${lib}/concurrent.jar"/>
	<property name="aterm.lib" value="${lib}/aterm.jar"/>
	<property name="sharedobject.lib" value="${lib}/shared-objects.jar"/>
	<property name="jjtraveler.lib" value="${lib}/jjtraveler.jar"/>
	<property name="apigen.lib" value="${lib}/apigen.jar"/>
	<property name="vastoadt.lib" value="${lib}/vas-to-adt.jar"/>
	<property name="antlr.lib" value="${lib}/antlr.jar"/>
	
	<!-- Aircube bundle -->
	<property name="bundle.dir" value="bundle"/>
	<property name="aircubebundle" value="aircube-bundle.jar"/>

	<path id="external.classpath">
	</path>

	<!-- for stable -->
	<property name="stable.src"     location="stable"/>
	<property name="stable.adt"     location="${stable.src}/jtom/adt"/>
	<property name="stable.mapping" location="${stable.src}/tom/library/mapping"/>
	<property name="stable.build"   location="${stable.src}/build"/>
	<property name="stable.dist"    location="${stable.src}/dist"/>
	
	<!-- for devel (src) -->
	<property name="src.src"      location="src"/>
	<property name="src.adt"      location="${src.src}/jtom/adt"/>
	<property name="src.library"  location="${src.src}/tom/library"/>
	<property name="src.mapping"  location="${src.src}/tom/library/mapping"/>
	<property name="src.gen"      location="${src.src}/gen"/>   
	<property name="src.build"    location="${src.src}/build"/>   
	<property name="src.dist"     location="${src.src}/dist"/>
	
	<!-- for dist -->
	<property name="dist"         location="dist"/>

	<property name="stable.bin"   location="${stable.dist}/bin"/>
	<property name="stable.lib"   location="${stable.dist}/lib"/>
	<property name="stable.share" location="${stable.dist}/share/jtom"/>
	<property name="stable.doc"   location="${stable.dist}/doc"/>

	<property name="src.bin"      location="${src.dist}/bin"/>
	<property name="src.lib"      location="${src.dist}/lib"/>
	<property name="src.share"    location="${src.dist}/share/jtom"/>
	<property name="src.doc"      location="${src.dist}/doc"/>

	<!-- for test -->
	<property name="test.gen"     location="${test}/gen"/>    
	<property name="test.build"   location="${test}/build"/>

	<property name="src.configfile"     location="${utils}/Tom.src.xml"/>    
	<property name="stable.configfile"  location="${utils}/Tom.xml"/>    

	<!-- for bootstrap -->
	<property name="bootstrap.dir" location="${src.src}/bootstrap" />

	<!-- Properties for Javac compilation
			 <property name="javacFailOnError" value="false"/>
			 <property name="javacSource" value="1.3"/>
			 <property name="javacTarget" value="1.2"/>
	-->
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	
	
	<!-- Define classpath for building stable and source  -->
	<path id="stable.classpath">
		<path refid="external.classpath"/>
		<fileset dir="${stable.src}"><!-- ADT jar files -->
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="src.classpath">
		<path refid="external.classpath"/>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${src.build}"/>
		<pathelement location="${src.src}"/>
	</path>

	<path id="tom.classpath">
		<path refid="stable.classpath"/>
		<pathelement location="${stable.build}"/>
		<pathelement location="${stable.src}"/>
	</path>

	<path id="tomsrc.classpath">
		<path refid="src.classpath"/>
	</path>

	<target name="prepare.src">
		<mkdir dir="${src.build}"/>
		<mkdir dir="${src.gen}"/>
		<mkdir dir="${src.dist}"/>
	</target>
	
	<target name="prepare.stable">
		<mkdir dir="${stable.build}"/>
		<mkdir dir="${stable.dist}"/>
	</target>

	<target name="prepare.test">
		<mkdir dir="${test.gen}"/>
		<mkdir dir="${test.build}"/>
	</target>

	<target name="prepare.dist.stable">
		<mkdir dir="${dist}"/>
		<mkdir dir="${stable.bin}"/>
		<mkdir dir="${stable.lib}"/>
		<mkdir dir="${stable.share}"/>
		<mkdir dir="${stable.doc}"/>
	</target>

	<target name="prepare.dist.src">
		<mkdir dir="${dist}"/>
		<mkdir dir="${src.bin}"/>
		<mkdir dir="${src.lib}"/>
		<mkdir dir="${src.share}"/>
		<mkdir dir="${src.doc}"/>
	</target>

	<!-- target debug to help finding properties problems -->
	<target name="debug"> 
		<echoproperties/>
	</target>

	<!-- builds and defines the custom tasks -->
	<!-- tasks for building src -->
	<target name="initTaskDef" depends="stable">
		<taskdef name="adt" 
						 classname="jtom.tools.ant.ApigenTask" 
						 classpathref="tom.classpath"/>
		<taskdef name="tom" 
						 classname="jtom.tools.ant.TomTask">
			<classpath refid="tom.classpath"/>
		</taskdef>
	</target>

	<!-- define task for running tom.src -->
	<target name="initsrc" depends="src">
		<taskdef name="tomsrc" classname="jtom.tools.ant.TomTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>

	<!-- compile tom files in src.src with tom.stable -->
	<target name="buildtom" depends="initTaskDef, buildadt">

		<tom config="${stable.configfile}"
				 srcdir="${src.src}"
				 outputfile="${src.gen}/jtom/parser/TomLanguage.g"
				 options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/TomLanguage.g.t"/>  
		</tom>
		<tom config="${stable.configfile}"
				 srcdir="${src.src}"
				 outputfile="${src.gen}/jtom/parser/HostLanguage.g"
				 options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/HostLanguage.g.t"/>  
		</tom>
		<tom config="${stable.configfile}"
				 srcdir="${src.src}"
				 outputfile="${src.gen}/jtom/parser/BackQuoteLanguage.g"
				 options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/BackQuoteLanguage.g.t"/>  
		</tom>

		<tom config="${stable.configfile}"
				 srcdir="${src.src}" 
				 destdir="${src.gen}" 
				 options="-I ${src.mapping}">
			<include name="tom/library/**/*.t"/> 
			<include name="tom/platform/**/*.t"/> 
			<include name="jtom/*.t"/> 
			<include name="**/Verifier.t"/>
		</tom>

		<tom config="${stable.configfile}"
				 srcdir="${src.src}" 
				 destdir="${src.gen}" 
				 options="-I ${src.mapping} --noDeclaration">
			<include name="jtom/**/*.t"/> 
			<exclude name="jtom/*.t"/>
			<exclude name="**/Verifier.t"/>
			<exclude name="**/TomLanguage.g.t"/>
			<exclude name="**/HostLanguage.g.t"/>
			<exclude name="**/BackQuoteLanguage.g.t"/>
		</tom>
	</target>

	<!-- builds the parser using antlr -->
	<target name="buildparser">
		<mkdir dir="${src.gen}/jtom/parser"/>
		
		<antlr target="${src.src}/jtom/parser/TomJavaParser.g"
					 outputdirectory="${src.gen}/jtom/parser">
			<classpath refid="stable.classpath"/>
		</antlr>

		<antlr target="${src.gen}/jtom/parser/TomLanguage.g"
					 outputdirectory="${src.gen}/jtom/parser">
			<classpath refid="stable.classpath"/>
		</antlr>
		<antlr target="${src.gen}/jtom/parser/HostLanguage.g"
					 outputdirectory="${src.gen}/jtom/parser">
			<classpath refid="stable.classpath"/>
		</antlr>
		<antlr target="${src.gen}/jtom/parser/BackQuoteLanguage.g"
					 outputdirectory="${src.gen}/jtom/parser">
			<classpath refid="stable.classpath"/>
		</antlr>
	</target>

	<!-- compile adt's -->
	<target name="buildadt" depends="initTaskDef, prepare.src">
		<adt srcdir="${src.src}"
				 package="tom.library.adt" 
				 destdir="${src.gen}">
			<include name="tom/library/adt/*.adt"/>
		</adt>

		<adt srcdir="${src.src}"
				 package="tom.platform.adt" 
				 destdir="${src.gen}">
			<include name="tom/platform/adt/*.adt"/>
		</adt>

		<adt srcdir="${src.src}"
				 package="jtom.adt" 
				 factory="tomsignature" 
				 destdir="${src.gen}">
			<include name="jtom/adt/*.adt"/>
		</adt>

		<copy todir="${src.mapping}/adt">
			<fileset dir="${src.gen}/tom/library/adt" includes="*.tom"/>
			<fileset dir="${src.gen}/tom/platform/adt" includes="*.tom"/>
			<fileset dir="${src.gen}/jtom/adt" includes="*.tom"/>
		</copy>
	</target>

	<target name="build.src" depends="src"/>
	<target name="src" description="compile the TOM development sources" depends="prepare.src">
		<antcall target="buildtom"/>
		<antcall target="buildparser"/>
		<!--<property name="unixpath" refid="src.classpath" />
				 <echo>classpath = ${unixpath}</echo>-->
		<javac destdir="${src.build}" 
					 debug="${javacDebugInfo}" 
					 verbose="${javacVerbose}"
					 nowarn="${nowarnings}">
			<src path="${src.src}"/>
			<src path="${src.gen}"/>
			<classpath refid="src.classpath"/>
			<include name="**/*.java"/>
			<!--
			<include name="tom/**/*.java"/>
			<include name="jtom/**/*.java"/>
			-->
		</javac>
	</target>
	
	<target name="build.stable" depends="stable"/>
	<target name="stable" description="compile the TOM stable sources" depends="prepare.stable">
		<!-- Compile the java code from ${stable} into ${build} -->
		<javac srcdir="${stable.src}" 
					 destdir="${stable.build}" 
					 debug="${javacDebugInfo}"
					 verbose="${javacVerbose}"
					 nowarn="${nowarnings}">
			<classpath refid="stable.classpath"/>
		</javac>
	</target>  

	<target name="dist.common" 
					description="Prepare common part of distribution">
		<fail unless="tomdocdir"
					message="You have to specify tomdocdir in your local.properties
					file in order to build distributions">
		</fail>
		<!-- "tom README and INSTALL" -->
		
		<copy todir="${dest}" file="README"/>
		<copy todir="${dest}" file="INSTALL"/>
		<copy todir="${dest}" file="NEWS"/>
		<copy todir="${dest}" file="AUTHORS"/>
		<!-- tom doc -->
		<copy todir="${dest}/doc">
			<fileset dir="${tomdocdir}">
				<include name="**/*.pdf"/>
			</fileset>
		</copy>
		<!-- external libs -->
		<copy todir="${dest}/lib" file="${aterm.lib}"/>
		<copy todir="${dest}/lib" file="${sharedobject.lib}"/>
		<!-- <copy todir="${dest}/lib" file="${jjtraveler.lib}"/> -->
		<copy todir="${dest}/lib" file="${apigen.lib}"/>
		<copy todir="${dest}/lib" file="${vastoadt.lib}"/>
		<copy todir="${dest}/lib" file="${concurrent.lib}"/>
		<copy todir="${dest}/lib" file="${antlr.lib}"/>
	</target>

	<target name="dist.stable" 
					description="Prepare a distribution ready stable package" 
					depends="clean.dist.stable, stable, prepare.dist.stable">
		<antcall target="dist.common">
			<param name="dest" value="${stable.dist}"/>
		</antcall>
		<!-- "tom config file" -->
		<copy todir="${stable.dist}" file="${stable.configfile}"/>
		<!-- "tom binary" -->
		<copy todir="${stable.bin}" file="${utils}/javac-tom"/>
		<copy todir="${stable.bin}" file="${utils}/tom.bat"/>
		<copy todir="${stable.bin}" file="${utils}/tom"/>
		<copy todir="${stable.dist}" file="${stable.configfile}"/>
		<copy todir="${stable.bin}">
			<fileset dir="${utils}"> 
				<include name="adt-to-tom.*"/>
			</fileset>
		</copy>
		<chmod dir="${stable.bin}" perm="ugo+rx">
			<include name="*"/>
			<exclude name="*.bat"/>
		</chmod>

		<!-- tom library -->
		<jar jarfile="${stable.lib}/mutraveler.jar">
			<fileset dir="${stable.build}" 
							 includes="jjtraveler/**/*.class"/>
		</jar>
		<jar jarfile="${stable.lib}/tom-library.jar">
			<fileset dir="${stable.build}" includes="tom/library/**/*.class"/>
		</jar>
		<jar jarfile="${stable.lib}/plugin-platform.jar">
			<fileset dir="${stable.build}" includes="tom/platform/**/*.class"/>
			<fileset dir="${stable.src}" includes="tom/platform/**/*.properties"/>
		</jar>
		<jar jarfile="${stable.lib}/jtom.jar">
			<fileset dir="${stable.build}" includes="jtom/**/*.class"/>
			<fileset dir="${stable.src}" includes="jtom/**/*.properties"/>
		</jar>

		<copy todir="${stable.lib}">
			<fileset dir="${stable.src}/jtom/adt" includes="*.jar"/>
			<fileset dir="${stable.src}/tom/library/adt" includes="*.jar"/>
			<fileset dir="${stable.src}/tom/platform/adt" includes="*.jar"/>
		</copy>

		<!-- tom share -->
		<copy todir="${stable.share}">
			<fileset dir="${stable.mapping}" includes="**/*.tom"/>
			<fileset dir="${stable.adt}" includes="*.tom">
				<exclude name="TomSignature.tom"/>
			</fileset>
		</copy>
		<copy todir="${stable.dist}/share">
			<fileset dir="${share}"> 
				<include name="man/**/*"/>
			</fileset>
		</copy>
		<mkdir dir="${stable.dist}/share/contrib"/>
		<copy todir="${stable.dist}/share/contrib">
			<fileset dir="${utils}">
				<include name="*.vim"/>
			</fileset>
		</copy>

		<!-- prepare tar file -->
		<tar tarfile="${dist}/jtom-${version}.tar.gz" compression="gzip">
			<tarfileset dir="${stable.dist}" prefix="jtom-${version}" mode="755">
				<include name="bin/*"/>
				<exclude name="bin/*.bat"/>
			</tarfileset>
			<tarfileset dir="${stable.dist}" prefix="jtom-${version}">
				<include name="bin/*.bat"/>
			</tarfileset>
			<tarfileset dir="${stable.dist}" prefix="jtom-${version}">
				<include name="**"/>
				<exclude name="bin/*"/>
			</tarfileset>
		</tar>
	</target>

	<target name="dist.src" 
					description="Prepare a distribution ready source package" 
					depends="clean.dist.src, src, prepare.dist.src">
		<tstamp/>
		<antcall target="dist.common">
			<param name="dest" value="${src.dist}"/>
		</antcall>
		<!-- "tom config file" -->
		<copy todir="${src.dist}" file="${src.configfile}"/>
		<!-- "tom binary" -->
		<copy todir="${src.bin}" file="${utils}/javac-tom"/>
		<copy todir="${src.bin}" file="${utils}/tom"/>
		<copy todir="${src.bin}" file="${utils}/tom.src"/>
		<copy todir="${src.dist}" file="${src.configfile}"/>
		<copy todir="${src.dist}" file="${stable.configfile}"/>
		<copy todir="${src.bin}">
			<fileset dir="${utils}">
				<include name="adt-to-tom.*"/>
			</fileset>
		</copy>
		<chmod dir="${src.bin}" perm="ugo+rx">
			<include name="*"/>
			<exclude name="*.bat"/>
		</chmod>

		<!-- tom library -->
		<jar jarfile="${src.lib}/TomSignature-${DSTAMP}.jar">
			<fileset dir="${src.build}" includes="jtom/adt/tomsignature/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/Set-${DSTAMP}.jar">
			<fileset dir="${src.build}" includes="tom/library/adt/set/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/TNode-${DSTAMP}.jar">
			<fileset dir="${src.build}" includes="tom/library/adt/tnode/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/PlatformOption-${DSTAMP}.jar">
			<fileset dir="${src.build}" includes="tom/platform/adt/platformoption/**/*.class"/>
		</jar>

		<jar jarfile="${src.lib}/mutraveler-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="jjtraveler/**/*.class"/>
		</jar>

		<jar jarfile="${src.lib}/tom-library-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="tom/library/**/*.class"
							 excludes="tom/library/**/adt/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/plugin-platform-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="tom/platform/**/*.class"
							 excludes="tom/platform/**/adt/**/*.class"/>
			<fileset dir="${src.src}" includes="tom/platform/**/*.properties"/>
		</jar>
		<jar jarfile="${src.lib}/jtom-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="jtom/**/*.class"
							 excludes="jtom/adt/**/*.class"/>
			<fileset dir="${src.src}" includes="jtom/**/*.properties"/>
		</jar>
		<!-- tom share -->
		<copy todir="${src.share}">
			<fileset dir="${src.mapping}" includes="**/*.tom"/>
			<fileset dir="${src.adt}" includes="*.tom">
				<exclude name="TomSignature.tom"/>
			</fileset>
		</copy>
		<copy todir="${src.dist}/share">
			<fileset dir="${share}"> 
				<include name="man/**/*"/>
			</fileset>
		</copy>
		<mkdir dir="${src.dist}/share/contrib"/>
		<copy todir="${src.dist}/share/contrib">
			<fileset dir="${utils}">
				<include name="*.vim"/>
			</fileset>
		</copy>
		<!-- prepare tar file -->
		<tar tarfile="${dist}/jtom-${DSTAMP}.tar.gz" compression="gzip">
			<tarfileset dir="${src.dist}" prefix="jtom-${version}" mode="755">
				<include name="bin/*"/>
				<exclude name="bin/*.bat"/>
				<exclude name="bin/tom.src"/>
			</tarfileset>
			<tarfileset dir="${src.dist}" prefix="jtom-${version}">
				<include name="bin/*.bat"/>
			</tarfileset>
			<tarfileset dir="${src.dist}" prefix="jtom-${version}">
				<include name="**"/>
				<exclude name="bin/*"/>
			</tarfileset>
		</tar>
	</target>

	<target name="dist.all" 
					description="Prepare stable and devel distributions" 
					depends="clean.dist, dist.stable, dist.src"/>

	<target name="clean.stable" description="Purges the generated stable files">
		<delete dir="${stable.build}"/>
	</target>
	
	<target name="clean.src" description="Purges the generated devel files" depends="clean.bootstrap">
		<delete dir="${src.gen}"/>
		<delete dir="${src.build}"/>
		<delete>
			<fileset dir="${src.mapping}">
				<include name="adt/*.tom"/>
			</fileset>
		</delete>
	</target>

	<target name="clean.bootstrap">
		<delete dir="${bootstrap.dir}"/>
	</target>

	<target name="clean.test" description="Cleans acceptance tests directory">
		<delete dir="${test.gen}"/>
		<delete dir="${test.build}"/>
	</target>

	<target name="clean" description="Cleans everything in the project"
					depends="clean.stable, clean.src, clean.test">
		<ant dir="${examples}" target="clean"/>
	</target> 

	<target name="clean.dist" description="Mr proper" depends="clean,
					clean.dist.src, clean.dist.stable">
		<delete dir="${dist}"/>
		<ant dir="${examples}" target="clean.dist"/>
	</target>

	<target name="clean.dist.src" description="Remove the src distribution">
		<delete dir="${src.dist}"/>
	</target>

	<target name="clean.dist.stable" description="Remove the stable distribution" depends="clean">
		<delete dir="${stable.dist}"/>
	</target>

	<target name="init.junit">
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>
	
	<target name="init.junit.stable">
		<taskdef name="tomjunitstable" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
			<classpath refid="tom.classpath"/>
		</taskdef>
	</target>
	
	<target name="test" description="Compile and run acceptance tests" depends="initsrc, prepare.test">
		<mkdir dir="${test.gen}"/>
		<mkdir dir="${test.build}"/>
		<tomsrc config="${src.configfile}"
						srcdir="${test}"
						destdir="${test.gen}" 
						options="-I ${src.mapping} -I ${src.adt}">
			<exclude name="cfib1.t"/>
			<exclude name="loulou.t"/>
			<exclude name="Record.t"/>
			<exclude name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<tomsrc config="${src.configfile}"
						srcdir="${test}"
						destdir="${test.gen}"
						options="-I ${src.mapping} -I ${src.adt} --lazyType">
			<include name="Record.t"/>
			<include name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<javac srcdir="${test.gen}" 
					 destdir="${test.build}" 
					 debug="${javacDebugInfo}" 
					 verbose="${javacVerbose}"
					 nowarn="${nowarnings}">
			<classpath refid="src.classpath"/>
			<exclude name="**/error/**"/>
		</javac>
	</target>

	<target name="test.stable" description="Compile and run acceptance tests with stable" depends="initTaskDef,prepare.test">
		<tom config="${stable.configfile}"
				 srcdir="${test}"
				 destdir="${test.gen}"
				 options="-I ${stable.mapping}">
			<exclude name="cfib1.t"/>
			<exclude name="loulou.t"/>
			<exclude name="Record.t"/>
			<exclude name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tom>
		<tom config="${stable.configfile}"
				 srcdir="${test}"
				 destdir="${test.gen}"
				 options="-I ${stable.mapping} --lazyType">
			<include name="Record.t"/>
			<include name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tom>
		<javac srcdir="${test.gen}" 
					 destdir="${test.build}" 
					 debug="${javacDebugInfo}"
					 verbose="${javacVerbose}"
					 nowarn="${nowarnings}">
			<classpath refid="tom.classpath"/>
			<exclude name="**/error/**"/>
		</javac>
	</target>

	<target name="junit.stable" description="Runs junit acceptance tests compiled with stable" 
					depends="clean.test, test.stable, init.junit.stable">
		<tomjunitstable printsummary="on"
										fork="false"
										haltonfailure="false"
										failureproperty="tests.failed"
										showoutput="true">
			<classpath>
				<path refid="tom.classpath"/>
				<pathelement location="${test.build}"/>
			</classpath>
			<batchtest>
				<fileset dir="${test.gen}">
					<include name="**/Test*.java"/>
					<!--<exclude name="**/error/**"/>-->
				</fileset>
			</batchtest>
		</tomjunitstable>

		<fail if="tests.failed">
			****************************************************
			****************************************************
			One or more tests failed. Check the output...
			****************************************************
			****************************************************
		</fail>
	</target>

	<target name="junit.src" depends="junit"/>
	<target name="junit" description="Runs junit acceptance tests" depends="clean.test, test, init.junit">
		<junit printsummary="on"
					 fork="true"
					 haltonfailure="false"
					 failureproperty="tests.failed"
					 showoutput="true">
			<classpath>
				<path refid="src.classpath"/>
				<pathelement location="${test.build}"/>
			</classpath>
			<batchtest>
				<fileset dir="${test.gen}">
					<include name="**/Test*.java"/>
					<!--<exclude name="**/error/**"/>-->
				</fileset>
			</batchtest>
		</junit>

		<fail if="tests.failed">
			****************************************************
			****************************************************
			One or more tests failed. Check the output...
			****************************************************
			****************************************************
		</fail>
	</target>

	<target name="all" description="cleans, build, test all" depends="clean, clean.dist">
		<antcall target="dist.stable"/>
		<antcall target="clean.test"/>
		<antcall target="junit.stable"/>

		<antcall target="dist.src"/>
		<antcall target="clean.test"/>
		<antcall target="junit.src"/>

		<echo>Test tom-stable in examples</echo>
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${stable.dist}"/>
			<property name="tomconfigfile" location="${stable.dist}/Tom.xml"/>
		</ant>

		<echo>Test tom-stable in examples with optimizer</echo>
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${stable.dist}"/>
			<property name="optimize" value="on"/>
			<property name="tomconfigfile" location="${stable.dist}/Tom.xml"/>
		</ant>

		<echo>Test tom-source in examples</echo>
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${src.dist}"/>
			<property name="tomconfigfile" location="${src.dist}/Tom.src.xml"/>
		</ant>

		<echo>Test tom-source in examples with optimizer</echo>
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${src.dist}"/>
			<property name="optimize" value="on"/>
			<property name="tomconfigfile" location="${src.dist}/Tom.src.xml"/>
		</ant>
	</target>

	<target name="examples.stable" 
					description="Build and test examples with jtom-stable" 
					depends="dist.stable">
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${stable.dist}"/>
			<property name="tomconfigfile" location="${stable.configfile}"/>
		</ant>
	</target>

	<target name="examples.src" 
					description="Build and test examples with jtom-source" 
					depends="dist.src">
		<ant dir="${examples}" target="clean"/>
		<ant dir="${examples}" target="junit">
			<property name="tom.home" location="${src.dist}"/>
			<property name="tomconfigfile" location="${src.configfile}"/>
			<property name="optimize" value="on"/>
		</ant>
	</target>

	<target name="fixcrlf">
		<fixcrlf srcdir="${basedir}"
						 eol="unix" 
						 eof="remove"
						 includes="**/build.xml"/>
		<fixcrlf srcdir="${basedir}"
						 eol="unix" 
						 eof="remove"
						 includes="**/*.properties"/>
		<fixcrlf srcdir="${src.src}"
						 tab="remove"
						 tablength="2"
						 eol="unix"
						 javafiles="yes"
						 includes="**/*.java"/>
		<fixcrlf srcdir="${src.src}"
						 tab="remove"
						 tablength="2"
						 eol="unix"
						 javafiles="yes"
						 includes="**/*.t"/>
	</target>

	<target name="bootstrap" description="Bootstrap source"
					depends="bootcheck" if="bootstrap.ok">
		<echo message="### BOOTSTRAP PERFORM SUCCESSFULLY!!! ###"/>
	</target>

	<target name="bootcheck" depends="performbootstrap">
		<mkdir dir="${src.src}/bootcheck"/>
		<concat destfile="${src.src}/bootcheck/version1">
			<fileset dir="${bootstrap.dir}/build">
				<include name="**/*.class"/>
				<exclude name="jtom/parser/*.class"/>
			</fileset>
			<!-- we don't want to check the parser generated files, never ever -->
			<fileset dir="${bootstrap.dir}/build">
				<include name="jtom/parser/TomLexer.class"/>
				<include name="jtom/parser/TomParser.class"/>
				<include name="jtom/parser/HostLexer.class"/>
				<include name="jtom/parser/HostParser.class"/>
				<include name="jtom/parser/BackQuoteLexer.class"/>
				<include name="jtom/parser/BackQuoteParser.class"/>
			</fileset>
		</concat>
		<concat destfile="${src.src}/bootcheck/version2">
			<fileset dir="${src.build}">
				<include name="**/*.class"/>
				<exclude name="jtom/parser/*.class"/>
			</fileset>
			<!-- we don't want to check the parser generated files, never ever -->
			<fileset dir="${src.build}">
				<include name="jtom/parser/TomLexer.class"/>
				<include name="jtom/parser/TomParser.class"/>
				<include name="jtom/parser/HostLexer.class"/>
				<include name="jtom/parser/HostParser.class"/>
				<include name="jtom/parser/BackQuoteLexer.class"/>
				<include name="jtom/parser/BackQuoteParser.class"/>
			</fileset>
		</concat>
		<condition property="bootstrap.ok" value="true">
			<filesmatch file1="${src.src}/bootcheck/version1" 
									file2="${src.src}/bootcheck/version2"/>
		</condition>
		<delete dir="${src.src}/bootcheck"/>
	</target>
	
	<target name="performbootstrap" depends="src">
		<echo> CALLING BOOTSTEP 1 ...</echo>
		<!-- compile src with tomsrc -->
		<mkdir dir="${bootstrap.dir}"/>
		<antcall target="bootstep">
			<param name="destination" value="${bootstrap.dir}"/>
		</antcall>
		<!-- copy destination result to src.build-->
		<delete dir="${src.build}"/>
		<mkdir dir="${src.build}"/>
		<move todir="${src.build}">
			<fileset dir="${bootstrap.dir}/build">
			<include name="**/*.class"/></fileset>
		</move>

		<!-- compile again src with tomsrc -->
		<echo> CALLING BOOTSTEP 2 ...</echo>
		<delete dir="${bootstrap.dir}"/>
		<mkdir dir="${bootstrap.dir}"/>
		<antcall target="bootstep">
			<param name="destination" value="${bootstrap.dir}"/>
		</antcall>
	</target>


	<!-- compile tom files in src.src with tom.src -->      
	<target name="bootstep" depends="initsrc" if="destination">

		<mkdir dir="${destination}/gen"/>
		<mkdir dir="${destination}/build"/>

		<!-- rebuild and copy adt -->
		<antcall target="buildadt"/>
		<copy todir="${destination}/gen">
			<fileset dir="${src.gen}">
				<include name="**/adt/**/*"/>
			</fileset>
		</copy>

		<!-- build tom -->

		<tomsrc config="${src.configfile}"
						srcdir="${src.src}" 
						destdir="${destination}/gen" 
						options="-I ${src.mapping}">
			<include name="tom/library/**/*.t"/> 
			<include name="tom/platform/**/*.t"/> 
			<include name="jtom/*.t"/> 
			<include name="**/Verifier.t"/>
		</tomsrc>


		<tomsrc config="${src.configfile}"
						srcdir="${src.src}" 
						destdir="${destination}/gen" 
						options="-I ${src.mapping} --noDeclaration">
			<include name="jtom/**/*.t"/> 
			<exclude name="jtom/*.t"/>
			<exclude name="**/Verifier.t"/>
			<exclude name="**/TomLanguage.g.t"/>
			<exclude name="**/HostLanguage.g.t"/>
			<exclude name="**/BackQuoteLanguage.g.t"/>
		</tomsrc>

		<tomsrc config="${src.configfile}"
						srcdir="${src.src}"
						outputfile="${destination}/gen/jtom/parser/TomLanguage.g"
						options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/TomLanguage.g.t"/>  
		</tomsrc>
		<tomsrc config="${src.configfile}"
						srcdir="${src.src}"
						outputfile="${destination}/gen/jtom/parser/HostLanguage.g"
						options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/HostLanguage.g.t"/>  
		</tomsrc>
		<tomsrc config="${src.configfile}"
						srcdir="${src.src}"
						outputfile="${destination}/gen/jtom/parser/BackQuoteLanguage.g"
						options="-I ${src.mapping} -I ${src.gen}/jtom/adt">
			<include name="**/BackQuoteLanguage.g.t"/>  
		</tomsrc>



		<!-- builds parser -->
		<mkdir dir="${destination}/gen/jtom/parser"/>
		
		<antlr target="${src.src}/jtom/parser/TomJavaParser.g"
					 outputdirectory="${destination}/gen/jtom/parser">
			<classpath refid="src.classpath"/>
		</antlr>
		<antlr target="${src.gen}/jtom/parser/TomLanguage.g"
					 outputdirectory="${destination}/gen/jtom/parser">
			<classpath refid="src.classpath"/>
		</antlr>
		<antlr target="${src.gen}/jtom/parser/HostLanguage.g"
					 outputdirectory="${destination}/gen/jtom/parser">
			<classpath refid="src.classpath"/>
		</antlr>
		<antlr target="${src.gen}/jtom/parser/BackQuoteLanguage.g"
					 outputdirectory="${destination}/gen/jtom/parser">
			<classpath refid="src.classpath"/>
		</antlr>

		<javac destdir="${destination}/build" 
					 debug="${javacDebugInfo}"
					 verbose="${javacVerbose}"
					 nowarn="${nowarnings}">
			<src path="${src.src}"/>
			<src path="${destination}/gen"/>
			<classpath refid="src.classpath"/>
			<include name="**/*.java"/>
			<!--
			<include name="tom/**/*.java"/>
			<include name="jtom/**/*.java"/>
			-->
		</javac>
	</target>

	<target name="bootinstall" 
					description="Install src tree into stable tree" 
					depends="bootcheck"
					if="${bootstrap.ok}">
		<copy todir="${stable.src}" overwrite="true">
			<fileset dir="${src.src}">
				<include name="**/*.java"/>
				<include name="**/*.properties"/>
				<exclude name="**/adt/**/*.java"/>
				<exclude name="**/bootstrap/**/*"/>
				<exclude name="**/gen/**/*"/>
			</fileset>
			<fileset dir="${src.gen}">
				<include name="**/*.java"/>
				<exclude name="**/adt/**/*.java"/>
			</fileset>
		</copy>
		<copy todir="${stable.mapping}" overwrite="true">
			<fileset dir="${src.mapping}" includes="**/*.tom"/>
		</copy>

		<mkdir dir="${stable.src}/jtom/adt"/>
		<mkdir dir="${stable.src}/tom/library/adt"/>
		<mkdir dir="${stable.src}/tom/platform/adt"/>

		<jar jarfile="${stable.src}/jtom/adt/TomSignature.jar">
			<fileset dir="${src.build}" includes="jtom/adt/tomsignature/**/*.class"/>
		</jar>
		<jar jarfile="${stable.src}/tom/library/adt/Set.jar">
			<fileset dir="${src.build}" includes="tom/library/adt/set/**/*.class"/>
		</jar>
		<jar jarfile="${stable.src}/tom/library/adt/TNode.jar">
			<fileset dir="${src.build}" includes="tom/library/adt/tnode/**/*.class"/>
		</jar>
		<jar jarfile="${stable.src}/tom/platform/adt/PlatformOption.jar">
			<fileset dir="${src.build}" includes="tom/platform/adt/platformoption/**/*.class"/>
		</jar>
		<antcall target="clean.bootstrap"/>

	</target>
	
	<target name="bundle.src" depends="dist.src">
		<mkdir dir="${bundle.dir}"/>
		<unjar src="${sharedobject.lib}" dest="${bundle.dir}"/>
		<!-- <unjar src="${jjtraveler.lib}" dest="${bundle.dir}"/> -->
		<unjar src="${aterm.lib}" dest="${bundle.dir}"/>
		<unjar src="${apigen.lib}" dest="${bundle.dir}"/>
		<unjar src="${vastoadt.lib}" dest="${bundle.dir}"/>
		<unjar src="${concurrent.lib}" dest="${bundle.dir}"/>
		<unjar src="${src.lib}/tom-library-${DSTAMP}.jar" dest="${bundle.dir}"/>
		<unjar src="${src.lib}/TomSignature-${DSTAMP}.jar" dest="${bundle.dir}"/>
		<unjar src="${src.lib}/plugin-platform-${DSTAMP}.jar" dest="${bundle.dir}"/>
		<unjar src="${src.lib}/jtom-${DSTAMP}.jar" dest="${bundle.dir}"/>
		
		<jar destfile="${aircubebundle}" basedir="${bundle.dir}"></jar>
		<delete dir="${bundle.dir}"/>
	</target>
	
	<target name="bundle.stable" depends="dist.stable">
		<mkdir dir="${bundle.dir}"/>
		<unjar src="${sharedobject.lib}" dest="${bundle.dir}"/>
		<!-- <unjar src="${jjtraveler.lib}" dest="${bundle.dir}"/> -->
		<unjar src="${aterm.lib}" dest="${bundle.dir}"/>
		<unjar src="${apigen.lib}" dest="${bundle.dir}"/>
		<unjar src="${vastoadt.lib}" dest="${bundle.dir}"/>
		<unjar src="${concurrent.lib}" dest="${bundle.dir}"/>
		<unjar src="${stable.lib}/tom-library.jar" dest="${bundle.dir}"/>
		<unjar src="${stable.lib}/TomSignature.jar" dest="${bundle.dir}"/>
		<unjar src="${stable.lib}/plugin-platform.jar" dest="${bundle.dir}"/>
		<unjar src="${stable.lib}/jtom.jar" dest="${bundle.dir}"/>
		
		<jar destfile="${aircubebundle}" basedir="${bundle.dir}"></jar>
		<delete dir="${bundle.dir}"/>
	</target>

	<!--
		<target name="tags">
		<exec>
		find /Volumes/Home/pem/workspace/jtom/src/jtom \( -name "*.t" -o
		-name "*.java" \) | xargs etags - -language=java
		</exec>
		</target>
	-->

</project>

