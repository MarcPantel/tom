<?xml version="1.0" encoding="UTF-8"?>
<project name="Ant for TOM" default="stable" basedir=".">
	<description>
		Build script using Ant offering checks, dists,
		installation, and so on.
		
		To use this build file, install ant,
		and just run ./build.sh in the current directory.
		
		You can modify default settings via
		ant -Ddist="/home/yourdirectory"
		for the various properties listed below.
	</description>
	
	<!-- set local properties for this build -->
	<property file="local.properties"/>
	<property name="java.class.path" value="" />
	<property name="build.sysclasspath" value="ignore" />

	<!-- current version of TOM -->
	<property name="version" value="2.0rc1"/>
	
	<!-- some used directory location -->
	<property name="test" location="test"/>
	<property name="utils" location="utils"/>
	<property name="lib" location="lib"/>
	<property name="concurrent.lib" value="${lib}/concurrent.jar"/>
	<property name="junit.lib" value="${lib}/junit.jar"/>

	<!-- for stable -->
	<property name="stable.src"   location="stable"/>
	<property name="stable.adt"   location="${stable.src}/adt"/>
	<property name="stable.mapping" location="${stable.src}/jtom/runtime/mapping"/>
	<property name="stable.build" location="${stable.src}/build"/>
	<property name="stable.dist"  location="${stable.src}/dist"/>
	
	<!-- for devel (src) -->
	<property name="src.src"      location="src"/>
	<property name="src.adt"      location="${src.src}/adt"/>
	<property name="src.mapping"  location="${src.src}/jtom/runtime/mapping"/>
	<property name="src.build"    location="${src.src}/build"/>  	
	<property name="src.dist"     location="${src.src}/dist"/>

	<!-- for dist -->
	<property name="stable.bin"   location="${stable.dist}/bin"/>
	<property name="stable.lib"   location="${stable.dist}/lib"/>
	<property name="stable.share" location="${stable.dist}/share/jtom"/>

	<property name="src.bin"      location="${src.dist}/bin"/>
	<property name="src.lib"      location="${src.dist}/lib"/>
	<property name="src.share"    location="${src.dist}/share/jtom"/>

	<!-- Property for Javac compilation
			 <property name="javacFailOnError" value="false"/>
			 <property name="javacDebugInfo" value="on"/>
			 <property name="javacSource" value="1.3"/>
			 <property name="javacTarget" value="1.2"/>
	-->
	<property name="javacVerbose" value="false"/>

	<path id="external.classpath">
		<pathelement location="${atermjavajar}"/>
		<pathelement location="${sharedobjectjar}"/>
		<pathelement location="${jjtravelerjar}"/>
		<pathelement location="${apigenjar}"/>
		<pathelement location="${vastoadtjar}"/>
	</path>

	<!-- Define classpath for building stable and source	-->
	<path id="stable.classpath">
		<path refid="external.classpath"/>
		<fileset dir="${stable.adt}"><!-- ADT jar files -->
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="src.classpath">
		<path refid="external.classpath"/>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${src.build}"/>
	</path>

	<path id="tom.classpath">
		<path refid="stable.classpath"/>
		<pathelement location="${stable.build}"/>
	</path>

	<path id="tomsrc.classpath">
		<path refid="src.classpath"/>
		<pathelement location="${src.build}"/>
	</path>

	<target name="preparesrc">
		<mkdir dir="${src.build}"/>
		<mkdir dir="${src.dist}"/>
	</target>
	
	<target name="preparestable">
		<mkdir dir="${stable.build}"/>
		<mkdir dir="${stable.dist}"/>
	</target>

	<target name="prepare.dist.stable">
		<mkdir dir="${stable.bin}"/>
		<mkdir dir="${stable.lib}"/>
		<mkdir dir="${stable.share}"/>
	</target>

	<target name="prepare.dist.src">
		<mkdir dir="${src.bin}"/>
		<mkdir dir="${src.lib}"/>
		<mkdir dir="${src.share}"/>
	</target>

	<!-- target debut to help finding properties problems -->
	<target name="debug"> 
		<echoproperties/>
	</target>

	<!-- builds and defines the custom tasks -->
	<!-- tasks for building src -->
	<target name="initTaskDef" depends="stable">
		<taskdef name="adt" classname="jtom.tools.ant.ApigenTask" classpathref="tom.classpath"/>
		<taskdef name="tom" classname="jtom.tools.ant.TomTask">
			<classpath refid="tom.classpath"/>
		</taskdef>
	</target>

	<!-- define task for running tom.src -->
	<target name="initsrc" depends="src">
		<taskdef name="tomsrc" classname="jtom.tools.ant.TomTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>

	<!-- compile tom files in src.src -->
	<target name="buildtom" depends="initTaskDef, buildadt">
		<tom srcdir="${src.src}" destdir="${src.src}" options="-I ${src.mapping} --noDeclaration">
			<exclude name="**/TomBase.t"/>
			<exclude name="**/TomBackQuoteParser.t"/>
			<exclude name="**/runtime/**/*.t"/>	
		</tom>
		<tom srcdir="${src.src}" destdir="${src.src}" options="-I ${src.mapping}">
			<include name="**/runtime/**/*.t"/>	
			<include name="**/TomBase.t"/>
			<include name="**/TomBackQuoteParser.t"/>	
		</tom>
	</target>

	<!-- builds the parser using javacc -->
	<target name="buildparser">
		<javacc 
		 target="${src.src}/jtom/parser/TomParser.jj"
		 javacchome="${javaccdir}" /> 
	</target>

	<target name="check.newer.adt">
		<condition property="newer.adt">
			<or>
				<not><available file="${src.adt}/TomSignature.tom"/></not>
				<not><available file="${src.adt}/TNode.tom"/></not>
				<not><available file="${src.adt}/Set.tom"/></not>
				<uptodate targetfile="${src.adt}/TomSignature.adt" 
									srcfile="${src.adt}/TomSignature.tom"/>
				<uptodate targetfile="${src.adt}/TNode.adt" 
									srcfile="${src.adt}/TNode.tom"/>
				<uptodate targetfile="${src.adt}/Set.adt" 
									srcfile="${src.adt}/Set.tom"/>
			</or>
		</condition>
	</target>
	
	<!-- compile adt's -->
	<target name="buildadt" depends="initTaskDef, preparesrc, check.newer.adt" if="newer.adt">
		<adt file="${src.adt}/TomSignature.adt" 
				 factory="TomSignature" 
				 package="jtom.adt" 
				 destdir="${src.src}"/>
		<adt file="${src.adt}/TNode.adt" 
				 factory="TNode" 
				 package="jtom.adt" 
				 destdir="${src.src}"/>
		<adt file="${src.adt}/Set.adt" 
				 factory="Set" 
				 package="jtom.adt" 
				 destdir="${src.src}"/>
    <move todir="${src.adt}">
      <fileset dir="${src.src}">
        <include name="*.tom"/>
      </fileset>
    </move>
	</target>

	<target name="src" description="compile the TOM development sources" depends="preparesrc">
		<antcall target="buildtom"/>
		<antcall target="buildparser"/>
		<!--<property name="unixpath" refid="src.classpath" />
		<echo>classpath = ${unixpath}</echo>-->
		<javac srcdir="${src.src}" destdir="${src.build}" verbose="${javacVerbose}">
			<classpath refid="src.classpath"/>
		</javac>
	</target>
	
	<target name="stable" description="compile the TOM stable sources" depends="preparestable">
		<!-- Compile the java code from ${stable} into ${stable} -->
		<javac srcdir="${stable.src}" destdir="${stable.build}" verbose="${javacVerbose}">
			<classpath refid="stable.classpath"/>
		</javac>
	</target>  

	<target name="dist.stable" 
					description="Prepare a distribution ready stable package" 
					depends="stable, prepare.dist.stable">
		<!-- "tom binary" -->
		<copy todir="${stable.bin}" file="${utils}/javac-tom"/>
		<copy todir="${stable.bin}" file="${utils}/tom.bat"/>
		<copy todir="${stable.bin}" file="${utils}/tom"/>
		<copy todir="${stable.bin}">
			<fileset dir="${utils}">
				<include name="adt-to-tom.*"/>
			</fileset>
		</copy>
		<chmod dir="${stable.bin}" perm="ug+x">
			<include name="*"/>
			<exclude name="*.bat"/>
		</chmod>

		<!-- tom library -->
		<copy todir="${stable.lib}">
			<fileset dir="${stable.src}/adt">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<jar jarfile="${stable.lib}/jtom-${version}.jar">
			<fileset dir="${stable.build}" includes="**/*.class"/>
		</jar>
		<!-- tom share -->
		<copy todir="${stable.share}">
			<fileset dir="${stable.mapping}" includes="**/*.tom"/>
			<fileset dir="${stable.adt}" includes="*.tom">
				<exclude name="TomSignature.tom"/>
			</fileset>
		</copy>
		<!-- external libs -->
		<copy todir="${stable.lib}" file="${atermjavajar}"/>
		<copy todir="${stable.lib}" file="${sharedobjectjar}"/>
		<copy todir="${stable.lib}" file="${jjtravelerjar}"/>
		<copy todir="${stable.lib}" file="${apigenjar}"/>
		<copy todir="${stable.lib}" file="${vastoadtjar}"/>
		<copy todir="${stable.lib}" file="${concurrent.lib}"/>
		<copy todir="${stable.lib}" file="${junit.lib}"/>
	</target>

	<target name="dist.src" 
					description="Prepare a distribution ready source package" 
					depends="src, prepare.dist.src">
		<tstamp/>
		<!-- "tom binary" -->
		<copy todir="${src.bin}" file="${utils}/javac-tom"/>
		<copy todir="${src.bin}" file="${utils}/tom.src"/>
		<copy todir="${src.bin}">
			<fileset dir="${utils}">
				<include name="adt-to-tom.*"/>
			</fileset>
		</copy>
		<chmod dir="${src.bin}" perm="ug+x">
			<include name="*"/>
			<exclude name="*.bat"/>
		</chmod>

		<!-- tom library -->
		<jar jarfile="${src.lib}/Set-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="jtom/adt/set/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/TNode-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="jtom/adt/tnode/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/TomSignature-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="jtom/adt/tomsignature/**/*.class"/>
		</jar>
		<jar jarfile="${src.lib}/jtom-${DSTAMP}.jar">
			<fileset dir="${src.build}" 
							 includes="**/*.class"
							 excludes="jtom/adt/**/*.class"/>
		</jar>
		<!-- tom share -->
		<copy todir="${src.share}">
			<fileset dir="${src.mapping}" includes="**/*.tom"/>
			<fileset dir="${src.adt}" includes="*.tom">
				<exclude name="TomSignature.tom"/>
			</fileset>
		</copy>
		<!-- external libs -->
		<copy todir="${src.lib}" file="${atermjavajar}"/>
		<copy todir="${src.lib}" file="${sharedobjectjar}"/>
		<copy todir="${src.lib}" file="${jjtravelerjar}"/>
		<copy todir="${src.lib}" file="${apigenjar}"/>
		<copy todir="${src.lib}" file="${vastoadtjar}"/>
		<copy todir="${src.lib}" file="${concurrent.lib}"/>
		<copy todir="${src.lib}" file="${junit.lib}"/>
	</target>

	<target name="dist.all" 
		      description="Prepare stable and devel distributions" 
		      depends="dist.stable, dist.src"/>

	<target name="clean.stable" description="Purges the generated stable files">
		<delete dir="${stable.build}"/>
	</target>
	
	<target name="clean.src" description="Purges the generated devel files">
		<delete dir="${src.build}"/>
		<delete dir="${src.adt}/jtom"/>
		<delete> <fileset dir="${src.adt}" includes="**/*.tom"/></delete>
		<!-- deletes java files generated by javacc -->
		<delete> 
			<fileset dir="${src.src}/jtom/parser">
				<include name="Token.java"/>
				<include name="ParseException.java"/>
				<include name="TokenMgrError.java"/>
				<include name="TomParser.java"/>
				<include name="TomParserConstants.java"/>
				<include name="TomParserTokenManager.java"/>
			</fileset>
		</delete>
		<!-- deletes java files generated by tom -->
		<delete>
			<fileset dir="${src.src}" includes="**/*.java">
				<present targetdir="${src.src}">
					<mapper type="glob" from="*.java" to="*.t"/>
				</present>
			</fileset>
		</delete>
	</target>

	<target name="clean.test" description="Cleans acceptance tests directory">
		<delete>
			<fileset dir="${test}" includes="*.class" />
		</delete>
		<delete>
			<fileset dir="${test}" includes="**/*.java">
				<present targetdir="${test}">
					<mapper type="glob" from="*.java" to="*.t"/>
				</present>
			</fileset>
		</delete>
	</target>

	<target name="clean" description="Cleans everything in the project" depends="clean.stable, clean.src, clean.test">
	</target>	

	<target name="clean.dist" description="Mr proper" depends="clean">
		<delete dir="${stable.dist}"/>
		<delete dir="${src.dist}"/>
	</target>

	<target name="initjunit">
		<taskdef name="tomjunit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>
	
	<target name="test" description="Compile and run acceptance tests" depends="initsrc">
		<tomsrc srcdir="${test}" destdir="${test}" options="-I ${src.mapping} -I ${src.adt}">
			<exclude name="cfib1.t"/>
			<exclude name="loulou.t"/>
			<exclude name="Record.t"/>
			<exclude name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<tomsrc srcdir="${test}" destdir="${test}" options="-I ${src.mapping} --lazyType -I ${src.adt}">
			<include name="Record.t"/>
			<include name="TestRecord.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<javac srcdir="${test}" destdir="${test}" verbose="${javacVerbose}">
			<classpath refid="src.classpath"/>
			<exclude name="**/error/**"/>
		</javac>
	</target>

	<target name="check" description="Runs junit acceptance tests" depends="test, initjunit">
		<tomjunit printsummary="on"
							fork="false"
							haltonfailure="false"
							failureproperty="tests.failed"
							showoutput="true">
			<classpath>
				<path refid="src.classpath"/>
				<pathelement location="${test}"/>
			</classpath>
			<batchtest>
				<fileset dir="${test}">
					<include name="**/Test*.java"/>
					<exclude name="**/error/**"/>
				</fileset>
			</batchtest>
		</tomjunit>

		<fail if="tests.failed">
****************************************************
****************************************************
  One or more tests failed. Check the output...
****************************************************
****************************************************
		</fail>
	</target>

	<target name="boostrap">
		<!-- Clean src--> 
		<antcall target="clean.src"/>
		<!-- Build ADT once--> 
		<antcall target="buildadt"/>
    <!-- 
			We will probably use the condition filesmatch instead of a diff : 
			http://ant.apache.org/manual/CoreTasks/conditions.html 
		-->
  </target>

</project>
