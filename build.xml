<?xml version="1.0" encoding="UTF-8"?>
<project name="Ant for TOM" default="stable" basedir=".">
  <description>
    Build script using Ant offering checks, dists,
    installation, and so on.

    To use this build file, install ant,
    and just run ./build.sh in the current directory.

    You can modify distribution default settings via
    ./build.sh -Ddist="/yourdirectory"
  </description>

  <!-- set local properties for this build -->
  <property file="local.properties"/>
  <property name="build.sysclasspath" value="ignore" />

  <!-- current version of TOM -->
  <property name="stable.version" value="2.4alpha"/>
  <tstamp/>
  <property name="src.version"    value="${DSTAMP}"/>

  <!-- some used directory location -->
  <property name="test"           location="test"/>
  <property name="examples"       location="examples"/>
  <property name="examples.gen"   location="${examples}/gen"/>
  <property name="examples.build" location="${examples}/build"/>
  <property name="applications"   location="applications"/>
  <property name="utils"          location="utils"/>
  <property name="share"          location="share"/>

  <!-- some used directory location for stable -->
  <property name="stable.src"     location="stable"/>
  <property name="stable.gen"     location="${stable.src}/gen"/>
  <property name="stable.adt"     location="${stable.src}/tom/engine/adt"/>
  <property name="stable.mapping" location="${stable.src}/tom/library/mapping"/>
  <property name="stable.build"   location="${stable.src}/build"/>
  <property name="stable.dist"    location="${stable.src}/dist"/>
  <property name="stable.doc"     location="${stable.src}/doc"/>
  <property name="stable.lib"     location="${stable.src}/lib"/>
  <property name="stable.config"  location="${stable.src}/config"/>

  <!--some used directory location  for devel -->
  <property name="src.src"        location="src"/>
  <property name="src.adt"        location="${src.src}/tom/engine/adt"/>
  <property name="src.mapping"    location="${src.src}/tom/library/mapping"/>
  <property name="src.gen"        location="${src.src}/gen"/>
  <property name="src.build"      location="${src.src}/build"/>
  <property name="src.dist"       location="${src.src}/dist"/>
  <property name="src.doc"        location="${src.src}/doc"/>
  <property name="src.lib"        location="${src.src}/lib"/>
  <property name="src.config"     location="${src.src}/config"/>

  <!-- for distribution: top, stable and src -->
  <property name="dist"              location="dist"/>
  <property name="stable.dist.bin"   location="${stable.dist}/bin"/>
  <property name="stable.dist.lib"   location="${stable.dist}/lib"/>
  <property name="stable.dist.share" location="${stable.dist}/share"/>

  <property name="src.dist.bin"      location="${src.dist}/bin"/>
  <property name="src.dist.lib"      location="${src.dist}/lib"/>
  <property name="src.dist.share"    location="${src.dist}/share"/>

  <!-- the configuration files -->
  <property name="stable.configfile"    location="${stable.config}/Tom.xml"/>
  <property name="src.configfile"       location="${src.config}/Tom.xml"/>
  <property name="stable.gomconfigfile" location="${stable.config}/Gom.xml"/>
  <property name="src.gomconfigfile"    location="${src.config}/Gom.xml"/>
  <property name="stable.vasconfigfile" location="${stable.config}/Vas.xml"/>
  <property name="src.vasconfigfile"    location="${src.config}/Vas.xml"/>

  <!-- Aircube bundle -->
  <property name="bundle.temp.dir"      value="bundle"/>
  <property name="aircubebundlesrc"     value="aircube-bundle-src.jar"/>
  <property name="aircubebundlestable"  value="aircube-bundle-stable.jar"/>

  <!-- for bootstrap -->
  <property name="bootstrap.dir"        location="${src.src}/bootstrap" />

  <property name="javacSource"    value="1.4"/>
  <property name="javacTarget"    value="1.4"/>
  <property name="javacDebugInfo" value="on"/>
  <property name="javacVerbose"   value="false"/>
  <property name="nowarnings"     value="false" />
  <property name="memoryInitSize" value="128m" />
  <property name="memoryMaxSize"  value="512m" />

  <!-- Define classpath for building stable and source  -->
  <path id="external.classpath">
  </path>

  <path id="stable.classpath">
    <path refid="external.classpath"/>
    <!-- ADT jar files from tom -->
    <fileset dir="${stable.src}">
      <include name="**/adt/*.jar"/>
    </fileset>
    <!-- and stable lib jar files -->
    <fileset dir="${stable.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="src.classpath">
    <path refid="external.classpath"/>
    <!-- Src lib jar files -->
    <fileset dir="${src.lib}">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${src.build}"/>
    <pathelement location="${src.src}"/>
  </path>

  <macrodef name="tomjavac">
    <attribute name="destdir"/>
    <attribute name="debug"   default="${javacDebugInfo}"/>
    <attribute name="verbose" default="${javacVerbose}"/>
    <attribute name="fork"    default="no"/>
    <attribute name="target"  default="${javacTarget}"/>
    <attribute name="source"  default="${javacSource}"/>
    <attribute name="nowarn"  default="${nowarnings}"/>
    <attribute name="memoryInitialSize"  default="${memoryInitSize}"/>
    <attribute name="memoryMaximumSize"  default="${memoryMaxSize}"/>
    <element name="srcelements" implicit="yes"/>
    <sequential>
      <javac destdir="@{destdir}"
             debug=  "@{debug}"
             verbose="@{verbose}"
             fork=   "@{fork}"
             target= "@{target}"
             source= "@{source}"
             memoryInitialSize= "@{memoryInitialSize}"
             memoryMaximumSize= "@{memoryMaximumSize}"
             nowarn= "@{nowarn}">
        <srcelements/>
      </javac>
    </sequential>
  </macrodef>

  <target name="prepare.src">
    <mkdir dir="${src.build}"/>
    <mkdir dir="${src.gen}"/>
  </target>

  <target name="prepare.stable">
    <mkdir dir="${stable.build}"/>
    <mkdir dir="${stable.gen}"/>
  </target>

  <target name="prepare.stable.dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${stable.dist}"/>
    <mkdir dir="${stable.dist.bin}"/>
    <mkdir dir="${stable.dist.lib}"/>
    <mkdir dir="${stable.dist.share}"/>
    <mkdir dir="${stable.dist.share}/contrib"/>
  </target>

  <target name="prepare.src.dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${src.dist}"/>
    <mkdir dir="${src.dist.bin}"/>
    <mkdir dir="${src.dist.lib}"/>
    <mkdir dir="${src.dist.share}"/>
    <mkdir dir="${src.dist.share}/contrib"/>
  </target>

  <!-- target debug to help finding properties problems -->
  <target name="debug">
    <echoproperties/>
  </target>

  <!-- builds and defines the custom tasks -->
  <!-- tasks for building src -->
  <target name="init.task.stable"> <!-- depends="stable.dist"-->
    <path id="tom.classpath">
      <fileset dir="${stable.dist.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <taskdef name="adt"
             classname="tom.engine.tools.ant.ApigenTask"
             classpathref="tom.classpath"/>
    <taskdef name="vas"
             classname="vas.ant.VasTask"
             classpathref="tom.classpath"/>
    <!-- taskdef name="pom"
             classname="tom.pom.tools.ant.PomTask"
             classpathref="tom.classpath"/ -->
    <taskdef name="gom"
             classname="tom.gom.tools.ant.GomTask"
             classpathref="tom.classpath"/>
    <taskdef name="tom"
             classname="tom.engine.tools.ant.TomTask"
             classpathref="tom.classpath"/>
  </target>

  <!-- define task for running tom.src -->
  <target name="init.task.src" depends="src">
    <path id="tomsrc.classpath">
      <fileset dir="${src.dist.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <taskdef name="pomsrc"
             classname="tom.pom.tools.ant.PomTask"
             classpathref="tomsrc.classpath"/>
    <taskdef name="gomsrc"
             classname="tom.gom.tools.ant.GomTask"
             classpathref="tomsrc.classpath"/>
    <taskdef name="tomsrc"
             classname="tom.engine.tools.ant.TomTask"
             classpathref="tomsrc.classpath"/>
    <taskdef name="vassrc"
             classname="vas.ant.VasTask"
             classpathref="tomsrc.classpath"/>
  </target>

  <!--
  make the tomcompile task call tom or tomsrc depending on withsource
  property
  -->
  <target name="-withstable" unless="withsource">
    <presetdef name="tomcompile">
      <tom config="${stable.configfile}"/>
    </presetdef>
    <presetdef name="gomcompile">
      <gom config="${stable.gomconfigfile}"/>
    </presetdef>
    <presetdef name="vascompile">
      <vas config="${stable.vasconfigfile}"/>
    </presetdef>
  </target>

  <target name="-withsrc" if="withsource">
    <presetdef name="tomcompile">
      <tomsrc config="${src.configfile}"/>
    </presetdef>
    <presetdef name="gomcompile">
      <gomsrc config="${src.gomconfigfile}"/>
    </presetdef>
    <presetdef name="vascompile">
      <vassrc config="${src.vasconfigfile}"/>
    </presetdef>
  </target>

  <target name="buildtom.common"
          if="gen.destination"
          depends="-withstable,-withsrc">
    <!--  compile in standard mode -->
    <tomcompile srcdir="${src.src}"
         destdir="${gen.destination}"
         options="-I ${src.mapping} --optimize">
      <include name="tom/engine/**/*.t"/> 
      <include name="tom/library/**/*.t"/> 
      <include name="tom/platform/**/*.t"/> 
      <include name="tom/gom/**/*.t"/>
      <include name="tom/pom/**/*.t"/>

      <exclude name="tom/engine/parser/*.g.t"/>
      <exclude name="tom/gom/**/GomParser.g.t"/>
    </tomcompile>

    <!-- Specific stuff for parser generation -->
    <tomcompile srcdir="${src.src}"
	    outputfile="${gen.destination}/tom/engine/parser/TomLanguage.g"
	    options="-I ${src.mapping} -I ${src.gen}/tom/engine/adt">
      <include name="**/TomLanguage.g.t"/>
    </tomcompile>
    <tomcompile srcdir="${src.src}"
	    outputfile="${gen.destination}/tom/engine/parser/HostLanguage.g"
	    options="-I ${src.mapping} -I ${src.gen}/tom/engine/adt">
      <include name="**/HostLanguage.g.t"/>
    </tomcompile>
    <tomcompile srcdir="${src.src}"
	    outputfile="${gen.destination}/tom/engine/parser/BackQuoteLanguage.g"
	    options="-I ${src.mapping} -I ${src.gen}/tom/engine/adt">
      <include name="**/BackQuoteLanguage.g.t"/>
    </tomcompile>

    <!-- gom parser -->
    <tomcompile srcdir="${src.src}"
	    outputfile="${gen.destination}/tom/gom/parser/GomParser.g"
	    options="-I ${src.mapping} -I ${gen.destination}">
      <include name="tom/gom/**/GomParser.g.t"/>
    </tomcompile>
  </target>

  <!-- compile tom files in src.src with tom.stable -->
  <target name="buildtom" depends="init.task.stable">
    <antcall target="buildadt">
      <param name="tom.home" value="${stable.dist}"/>
    </antcall>
    <antcall target="buildtom.common">
      <param name="gen.destination" value="${src.gen}"/>
      <param name="tom.home" value="${stable.dist}"/>
    </antcall>
  </target>

  <target name="buildparser">
    <antcall target="buildparser.common">
      <param name="gen.destination" value="${src.gen}"/>
      <param name="tom.home" value="${stable.dist}"/>
    </antcall>
  </target>
  <!-- builds the parser using antlr -->
  <target name="buildparser.common"
          if="gen.destination">
    <mkdir dir="${gen.destination}/tom/engine/parser"/>

    <antlr target="${src.src}/tom/engine/parser/TomJavaParser.g"
           outputdirectory="${gen.destination}/tom/engine/parser">
      <classpath refid="stable.classpath"/>
    </antlr>

    <antlr target="${gen.destination}/tom/engine/parser/TomLanguage.g"
           outputdirectory="${gen.destination}/tom/engine/parser">
      <classpath refid="stable.classpath"/>
    </antlr>
    <antlr target="${gen.destination}/tom/engine/parser/HostLanguage.g"
           outputdirectory="${gen.destination}/tom/engine/parser">
      <classpath refid="stable.classpath"/>
    </antlr>
    <antlr target="${gen.destination}/tom/engine/parser/BackQuoteLanguage.g"
           outputdirectory="${gen.destination}/tom/engine/parser">
      <classpath refid="stable.classpath"/>
    </antlr>

    <mkdir dir="${gen.destination}/tom/gom/parser"/>
    <antlr target="${gen.destination}/tom/gom/parser/GomParser.g"
           outputdirectory="${gen.destination}/tom/gom/parser">
      <classpath refid="stable.classpath"/>
    </antlr>
    <antlr target="${src.src}/tom/gom/parser/BlockParser.g"
           outputdirectory="${gen.destination}/tom/gom/parser">
      <classpath refid="stable.classpath"/>
    </antlr>
  </target>

  <target name="touchvas"
          unless="vascompile.required">
	  <touch file="${src.src}/tom/engine/adt/TomSignature.vas"/>
  </target>

  <!-- compile adt's -->
  <target name="buildadt" depends="-withstable,-withsrc">

    <vascompile srcdir="${src.src}"
                package="tom.library.adt"
                destdir="${src.gen}">
      <include name="tom/library/adt/*.vas"/>
    </vascompile>

    <vascompile srcdir="${src.src}"
                package="tom.platform.adt"
                destdir="${src.gen}">
      <include name="tom/platform/adt/*.vas"/>
    </vascompile>

    <uptodate property="vascompile.required"
	    targetfile="${src.gen}/tom/engine/adt/tomsignature/TomSignature.tom" >
	    <srcfiles dir= "${src.src}/tom/engine/adt" includes="*.vas"/>
    </uptodate>
    <antcall target="touchvas"/>

    <vascompile srcdir="${src.src}"
                package="tom.engine.adt"
                name="tomsignature"
                destdir="${src.gen}">
	 <include name="tom/engine/adt/TomSignature.vas"/>
    </vascompile>

    <vascompile srcdir="${src.src}"
                package="tom.engine.adt"
                destdir="${src.gen}">
	 <include name="tom/engine/adt/Il.vas"/>
    </vascompile>

    <vascompile srcdir="${src.src}"
                package="tom.engine.adt"
                destdir="${src.gen}">
	 <include name="tom/engine/adt/Zenon.vas"/>
    </vascompile>

<!-- how to build adt from adt instead of vas
    <adt srcdir="${src.src}"
         package="tom.engine.adt"
         name="tomsignature"
         destdir="${src.gen}">
	 <include name="tom/engine/adt/*.adt"/>
    </adt>
-->

    <copy todir="${src.mapping}/adt">
      <fileset dir="${src.gen}/tom/library/adt" includes="**/*.tom"/>
      <fileset dir="${src.gen}/tom/platform/adt" includes="**/*.tom"/>
      <fileset dir="${src.gen}/tom/engine/adt" includes="**/*.tom"/>
    </copy>

    <!-- adt for the verifier -->
    <vascompile srcdir="${src.src}"
	        package="tom.engine/verifier"
                destdir="${src.gen}">
	 <include name="tom/engine/verifier/*.vas"/>
    </vascompile>

    <!-- adt for gom -->
    <!--<vascompile srcdir="${src.src}"
	            package="tom.gom.adt"
	            destdir="${src.gen}">
	     <include name="tom/gom/adt/*.vas"/>
    </vascompile>-->
    <gomcompile srcdir="${src.src}"
                package="tom.gom.adt"
                destdir="${src.gen}">
     <include name="tom/gom/adt/*.gom"/>
    </gomcompile>
  </target>

  <target name="src" description="compile the TOM development sources" depends="prepare.src">
    <antcall target="buildtom"/>
    <antcall target="buildparser"/>
    <!--<property name="unixpath" refid="src.classpath" />
    <echo>classpath = ${unixpath}</echo>-->
    <copy file="${src.src}/tom/engine/Tom.java.in"
	  tofile="${src.gen}/tom/engine/Tom.java"/>
    <replace dir="${src.gen}" token="@TOM_VERSION@" value="${src.version} (src)">
	    <include name="tom/engine/Tom.java"/>
    </replace>
    <tomjavac destdir="${src.build}" fork="yes">
      <src path="${src.src}"/>
      <src path="${src.gen}"/>
      <classpath refid="src.classpath"/>
      <include name="tom/**/*.java"/>
    </tomjavac>
  </target>

  <target name="build.stable" description="compile the TOM stable sources"
          depends="prepare.stable">
    <copy file="${stable.src}/tom/engine/Tom.java.in"
	    tofile="${stable.gen}/tom/engine/Tom.java"/>
    <replace dir="${stable.gen}" token="@TOM_VERSION@" value="${stable.version}">
	    <include name="tom/engine/Tom.java"/>
    </replace>
    <!-- Compile the java code from ${stable} into ${build} -->
    <tomjavac destdir="${stable.build}" fork="yes">
      <src path="${stable.src}"/>
      <src path="${stable.gen}"/>
      <include name="tom/**/*.java"/>
      <classpath refid="stable.classpath"/>
    </tomjavac>
  </target>

  <target name="dist.examples">
    <ant dir="${examples}" target="dist.examples">
      <property name="version" value="${stable.version}"/>
       <property name="tom.home" value="${stable.dist}"/>
    </ant>
  </target>

  <!-- Prepare common part of distributions -->
  <target name="dist.common" if="dest">
    <!-- "tom README and INSTALL" -->
    <copy todir="${dest}" file="README"/>
    <copy todir="${dest}" file="${share}/INSTALL"/>
    <copy todir="${dest}" file="NEWS"/>
    <copy todir="${dest}" file="AUTHORS"/>
  </target>

  <target name="stable" depends="stable.dist"/>
  <target name="stable.dist"
          description="Prepare a distribution ready stable package"
          depends="clean.stable.dist, prepare.stable.dist, build.stable">
    <antcall target="dist.common">
      <param name="dest" value="${stable.dist}"/>
    </antcall>
    <!-- Tom config file -->
    <copy tofile="${stable.dist}/Tom.xml" file="${stable.configfile}"/>
    <copy tofile="${stable.dist}/Vas.xml" file="${stable.vasconfigfile}"/>
    <copy tofile="${stable.dist}/Gom.xml" file="${stable.gomconfigfile}"/>
    <!-- "tom binary" -->
    <copy todir="${stable.dist.bin}" file="${utils}/javac-tom"/>
    <copy todir="${stable.dist.bin}" file="${utils}/tom.bat"/>
    <copy todir="${stable.dist.bin}" file="${utils}/gom.bat"/>
    <copy todir="${stable.dist.bin}" file="${utils}/tlappend.bat"/>
    <copy tofile="${stable.dist.bin}/tom" file="${utils}/script.in"/>
    <copy tofile="${stable.dist.bin}/gom" file="${utils}/script.in"/>
    <replace file="${stable.dist.bin}/tom">
	    <replaceFilter token="@TOM_HOME@" value="TOM_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.engine.Tom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Tom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/tom"/>
    </replace>
    <replace file="${stable.dist.bin}/gom">
	    <replaceFilter token="@TOM_HOME@" value="TOM_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.gom.Gom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Gom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/gom"/>
    </replace>
    <chmod dir="${stable.dist.bin}" perm="ugo+rx">
      <include name="*"/>
      <exclude name="*.bat"/>
    </chmod>
    <copy todir="${stable.dist.lib}" file="${stable.lib}/tom-common.xml"/>

    <!-- some libraries -->
    <copy todir="${stable.dist.lib}">
      <fileset dir="${stable.lib}">
        <include name="*.jar"/>
        <exclude name="ant.jar"/>
      </fileset>
    </copy>

    <!-- tom library -->
    <jar jarfile="${stable.dist.lib}/mutraveler.jar"
         update="yes">
      <fileset dir="${stable.build}"
               includes="tom/library/strategy/mutraveler/**/*.class"/>
    </jar>
    <jar jarfile="${stable.dist.lib}/tom-library.jar"
         update="yes">
      <fileset dir="${stable.build}"
               includes="tom/library/**/*.class"
               excludes="tom/library/strategy/mutraveler/**/*.class"/>
    </jar>
    <jar jarfile="${stable.dist.lib}/plugin-platform.jar"
         update="yes">
      <fileset dir="${stable.build}" includes="tom/platform/**/*.class"/>
      <fileset dir="${stable.src}" includes="tom/platform/**/*.properties"/>
    </jar>
    <jar jarfile="${stable.dist.lib}/jtom.jar"
         update="yes">
	    <fileset dir="${stable.build}" includes="tom/engine/**/*.class"/>
	    <fileset dir="${stable.src}" includes="tom/engine/**/*.properties"/>
    </jar>
    <jar jarfile="${stable.dist.lib}/gom.jar"
         update="yes">
	    <fileset dir="${stable.build}" includes="tom/gom/**/*.class"/>
	    <fileset dir="${stable.src}" includes="tom/gom/**/*.properties"/>
    </jar>
    <jar jarfile="${stable.dist.lib}/pom.jar"
         update="yes">
	    <fileset dir="${stable.build}" includes="tom/pom/**/*.class"/>
	    <fileset dir="${stable.src}" includes="tom/pom/**/*.properties"/>
    </jar>

    <copy todir="${stable.dist.lib}">
      <fileset dir="${stable.src}/tom/engine/adt" includes="*.jar"/>
      <fileset dir="${stable.src}/tom/library/adt" includes="*.jar"/>
      <fileset dir="${stable.src}/tom/platform/adt" includes="*.jar"/>
      <fileset dir="${stable.src}/tom/gom/adt" includes="*.jar"/>
    </copy>

    <!-- tom share -->
    <copy todir="${stable.dist.share}/tom">
      <fileset dir="${stable.mapping}" includes="**/*.tom"/>
      <fileset dir="${stable.adt}" includes="**/*.tom">
        <exclude name="TomSignature.tom"/>
      </fileset>
    </copy>
    <copy todir="${stable.dist.share}">
      <fileset dir="${share}">
        <include name="man/**/*"/>
      </fileset>
    </copy>
    <copy todir="${stable.dist.share}/contrib">
      <fileset dir="${utils}/contrib">
        <include name="**/*"/>
        <exclude name="**/CVS/**/*"/>
      </fileset>
    </copy>

    <!-- prepare tar file -->
    <tar tarfile="${dist}/tom-${stable.version}.tar.gz" compression="gzip">
      <tarfileset dir="${stable.dist}" prefix="tom-${stable.version}" mode="755">
        <include name="bin/*"/>
        <exclude name="bin/*.bat"/>
      </tarfileset>
      <tarfileset dir="${stable.dist}" prefix="tom-${stable.version}" mode="644">
        <include name="bin/*.bat"/>
      </tarfileset>
      <tarfileset dir="${stable.dist}" prefix="tom-${stable.version}" mode="644">
        <include name="**"/>
        <exclude name="bin/*"/>
      </tarfileset>
    </tar>
  </target>

  <target name="src.dist"
          description="Prepare a distribution ready source package"
          depends="clean.src.dist, src, prepare.src.dist">
    <antcall target="dist.common">
      <param name="dest" value="${src.dist}"/>
    </antcall>
    <!-- "tom config file" -->
    <copy tofile="${src.dist}/Tom.xml" file="${src.configfile}"/>
    <copy tofile="${src.dist}/Vas.xml" file="${src.vasconfigfile}"/>
    <copy tofile="${src.dist}/Gom.xml" file="${src.gomconfigfile}"/>
    <!-- "tom binary" -->
    <copy todir="${src.dist.bin}" file="${utils}/javac-tom"/>
    <copy tofile="${src.dist.bin}/tom" file="${utils}/script.in"/>
    <copy tofile="${src.dist.bin}/tom.src" file="${utils}/script.in"/>
    <replace file="${src.dist.bin}/tom">
	    <replaceFilter token="@TOM_HOME@" value="TOM_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.engine.Tom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Tom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/tom"/>
    </replace>
    <replace file="${src.dist.bin}/tom.src">
	    <replaceFilter token="@TOM_HOME@" value="TOM_SRC_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.engine.Tom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Tom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/tom"/>
    </replace>
    <copy tofile="${src.dist.bin}/gom" file="${utils}/script.in"/>
    <copy tofile="${src.dist.bin}/gom.src" file="${utils}/script.in"/>
    <replace file="${src.dist.bin}/gom">
	    <replaceFilter token="@TOM_HOME@" value="TOM_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.gom.Gom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Gom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/gom"/>
    </replace>
    <replace file="${src.dist.bin}/gom.src">
	    <replaceFilter token="@TOM_HOME@" value="TOM_SRC_HOME"/>
	    <replaceFilter token="@MAIN_CLASS@" value="tom.gom.Gom"/>
	    <replaceFilter token="@CONFIG_FILE@" value="Gom.xml"/>
	    <replaceFilter token="@INCLUDES_DIR@" value="share/gom"/>
    </replace>
    <chmod dir="${src.dist.bin}" perm="ugo+rx">
      <include name="*"/>
      <exclude name="*.bat"/>
    </chmod>
    <copy todir="${src.dist.lib}" file="${src.lib}/tom-common.xml"/>

    <!-- some libraries -->
    <copy todir="${src.dist.lib}">
	    <!-- we also copy the junit jar which is not really needed
	    by tom, but is needed by the applications -->
      <fileset dir="${src.lib}">
        <include name="*.jar"/>
        <exclude name="ant.jar"/>
      </fileset>
    </copy>

    <!-- tom library -->
    <jar jarfile="${src.dist.lib}/TomSignature-${src.version}.jar">
	    <fileset dir="${src.build}" includes="tom/engine/adt/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/Set-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/set/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/TNode-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/tnode/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/PlatformOption-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/platform/adt/platformoption/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/MuTravelerADT-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/mutraveleradt/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/PlatformAlert-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/platform/adt/platformalert/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/mutraveler-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/library/strategy/mutraveler/**/*.class"/>
    </jar>

    <jar jarfile="${src.dist.lib}/tom-library-${src.version}.jar">
      <fileset dir="${src.build}"
               includes="tom/library/**/*.class"
               excludes="tom/library/**/adt/**/*.class"/>
    </jar>
    <jar jarfile="${src.dist.lib}/plugin-platform-${src.version}.jar">
      <fileset dir="${src.build}"
               includes="tom/platform/**/*.class"
               excludes="tom/platform/**/adt/**/*.class"/>
      <fileset dir="${src.src}" includes="tom/platform/**/*.properties"/>
    </jar>
    <jar jarfile="${src.dist.lib}/tom-${src.version}.jar">
      <fileset dir="${src.build}"
	      includes="tom/engine/**/*.class"
	      excludes="tom/engine/adt/**/*.class"/>
      <fileset dir="${src.src}" includes="tom/engine/**/*.properties"/>
    </jar>
    <!-- gom jar (follow tom's version)-->
    <jar jarfile="${src.dist.lib}/gom-${src.version}.jar">
      <fileset dir="${src.build}"
	      includes="tom/gom/**/*.class"
	      excludes="tom/gom/adt/**/*.class"/>
      <fileset dir="${src.src}" includes="gom/**/*.properties"/>
    </jar>
    <jar jarfile="${src.dist.lib}/pom.jar">
      <fileset dir="${src.build}"
        includes="tom/pom/**/*.class"/>
      <fileset dir="${src.src}" includes="pom/**/*.properties"/>
    </jar>
    <jar jarfile="${src.dist.lib}/GomADT-${src.version}.jar">
      <fileset dir="${src.build}" includes="tom/gom/adt/**/*.class"/>
    </jar>

    <!-- tom share -->
    <copy todir="${src.dist.share}/tom">
      <fileset dir="${src.mapping}" includes="**/*.tom"/>
      <fileset dir="${src.adt}" includes="**/*.tom">
        <exclude name="TomSignature.tom"/>
      </fileset>
    </copy>
    <copy todir="${src.dist.share}">
      <fileset dir="${share}">
        <include name="man/**/*"/>
      </fileset>
    </copy>
    <copy todir="${src.dist.share}/contrib">
      <fileset dir="${utils}/contrib">
        <include name="**/*"/>
        <exclude name="**/CVS/**/*"/>
      </fileset>
    </copy>

    <!-- prepare tar file -->
    <tar tarfile="${dist}/tom-${src.version}.tar.gz" compression="gzip">
      <tarfileset dir="${src.dist}" prefix="tom-${src.version}" mode="755">
        <include name="bin/*"/>
        <exclude name="bin/*.bat"/>
        <exclude name="bin/tom.src"/>
      </tarfileset>
      <tarfileset dir="${src.dist}" prefix="tom-${src.version}">
        <include name="bin/*.bat"/>
      </tarfileset>
      <tarfileset dir="${src.dist}" prefix="tom-${src.version}">
        <include name="**"/>
        <exclude name="bin/*"/>
      </tarfileset>
    </tar>
  </target>

  <target name="dist.all"
          description="Prepare stable and devel distributions"
          depends="clean.dist, stable.dist, src.dist, dist.examples"/>

  <target name="clean.stable" description="Purges the generated stable files">
    <delete dir="${stable.build}"/>
    <delete dir="${stable.gen}"/>
    <delete file="${stable.src}/tom/engine/Tom.java"/>
  </target>

  <target name="clean.src"
          description="Purges the generated devel files"
          depends="clean.bootstrap">
    <delete dir="${src.gen}"/>
    <delete dir="${src.build}"/>
    <delete>
      <fileset dir="${src.mapping}">
        <include name="adt/*.tom"/>
      </fileset>
    </delete>
  </target>

  <target name="clean.bootstrap">
    <delete dir="${bootstrap.dir}"/>
    <delete dir="${src.src}/bootcheck"/>
  </target>

  <target name="clean.test" description="Cleans acceptance tests directory">
     <ant dir="${test}" target="clean">
       <property name="tom.home" value="${stable.dist}"/>
       <property name="tom.common.path" location="${stable.lib}"/>
     </ant>
  </target>

  <target name="clean.all" description="Cleans everything (stable, src, test, doc, dist)"
          depends="clean, clean.dist">
  </target>

  <target name="clean" description="Cleans everything in the project"
          depends="clean.stable, clean.src, clean.test, clean.doc">
          <!--<ant dir="${examples}" target="clean"/>-->
  </target>

  <target name="clean.dist" description="Mr proper" depends="clean.examples, clean.src.dist, clean.stable.dist">
    <delete dir="${dist}"/>
  </target>

  <target name="clean.examples" description="Clean the examples">
		<!-- <ant dir="${examples}" target="clean.dist"/> -->
    <delete dir="${examples.gen}"/>
    <delete dir="${examples.build}"/>
  </target>

  <target name="clean.src.dist" description="Remove the src distribution">
    <delete dir="${src.dist}"/>
  </target>

  <target name="clean.stable.dist" description="Remove the stable distribution">
    <delete dir="${stable.dist}"/>
  </target>

  <target name="test" description="Compile and run acceptance tests"
          depends="src.dist">
     <ant dir="${test}" target="build">
       <property name="tom.home" value="${src.dist}"/>
     </ant>
  </target>

  <target name="test.stable" description="Compile and run acceptance tests with stable"
          depends="stable.dist">
     <ant dir="${test}" target="build">
       <property name="tom.home" value="${stable.dist}"/>
     </ant>
  </target>

  <target name="stable.junit"
          description="Runs junit acceptance tests compiled with stable"
          depends="clean.test, test.stable">
     <ant dir="${test}" target="junit">
       <property name="tom.home" value="${stable.dist}"/>
     </ant>
  </target>

  <target name="src.junit" depends="junit"/>
  <target name="junit" description="Runs junit acceptance tests"
          depends="clean.test, test">
     <ant dir="${test}" target="junit">
       <property name="tom.home" value="${src.dist}"/>
     </ant>
  </target>

  <target name="all" description="cleans, build, test all">
    <!--depends="stable.all, src.all">-->
    <exec dir="${basedir}"
	  failonerror="yes"
	  executable="ant">
      <arg line="stable.all"/>
    </exec>
    <exec dir="${basedir}"
	  failonerror="yes"
	  executable="ant">
      <arg line="src.all"/>
    </exec>
  </target>

  <target name="stable.all" description="cleans, build, test all" depends="clean.stable, clean.stable.dist">
    <antcall target="stable.dist"/>
    <antcall target="clean.test"/>
    <antcall target="stable.junit"/>

    <echo>Test tom-stable in examples</echo>
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
      <property name="optimize" value="off"/>
      <property name="optimize2" value="off"/>
    </ant>

    <echo>Test tom-stable in examples with optimizer</echo>
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
      <property name="optimize" value="on"/>
      <property name="optimize2" value="off"/>
    </ant>
  </target>

  <target name="src.all" description="cleans, build, test junit" depends="clean, clean.dist, stable.dist">
    <antcall target="src.dist"/>
    <antcall target="clean.test"/>
    <antcall target="src.junit"/>

    <echo>Test tom-source in examples</echo>
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${src.dist}"/>
      <property name="tom.common.path" location="${src.lib}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${src.dist}"/>
      <property name="tom.common.path" location="${src.lib}"/>
      <property name="optimize" value="off"/>
      <property name="optimize2" value="off"/>
    </ant>

    <echo>Test tom-source in examples with optimizer</echo>
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${src.dist}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${src.dist}"/>
      <property name="tom.common.path" location="${src.lib}"/>
      <property name="optimize" value="on"/>
      <property name="optimize2" value="off"/>
    </ant>
  </target>

  <target name="examples.stable"
          description="Build and test examples with jtom-stable"
          depends="stable.dist">
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${stable.dist}"/>
      <property name="tom.common.path" location="${stable.lib}"/>
    </ant>
  </target>

  <target name="examples"
          description="Build and test examples with jtom-source"
          depends="examples.src"/>

  <target name="examples.src"
          depends="src.dist">
    <ant dir="${examples}" target="clean">
      <property name="tom.home" location="${src.dist}"/>
    </ant>
    <ant dir="${examples}" target="junit">
      <property name="tom.home" location="${src.dist}"/>
      <property name="tom.common.path" location="${src.lib}"/>
      <property name="optimize" value="on"/>
    </ant>
  </target>

  <target name="applications.src"
          depends="src.dist">
    <ant dir="${applications}" target="clean">
      <property name="tom.home" location="${src.dist}"/>
    </ant>
    <ant dir="${applications}" target="all">
      <property name="tom.home" location="${src.dist}"/>
      <property name="optimize" value="on"/>
    </ant>
  </target>

  <target name="fixcrlf">
    <fixcrlf srcdir="${basedir}"
             eol="unix"
             eof="remove"
             includes="**/build.xml"/>
    <fixcrlf srcdir="${basedir}"
             eol="unix"
             eof="remove"
             includes="**/*.properties"/>
    <fixcrlf srcdir="${src.src}"
             tab="remove"
             tablength="2"
             eol="unix"
             javafiles="yes"
             includes="**/*.java"/>
    <fixcrlf srcdir="${src.src}"
             tab="remove"
             tablength="2"
             eol="unix"
             javafiles="yes"
             includes="**/*.t"/>
  </target>

  <target name="bootstrap" description="Bootstrap source"
          depends="bootcheck" if="bootstrap.ok">
    <echo message="### BOOTSTRAP PERFORM SUCCESSFULLY!!! ###"/>
  </target>

  <target name="bootcheck" depends="performbootstrap">
    <mkdir dir="${src.src}/bootcheck"/>
    <concat destfile="${src.src}/bootcheck/version1">
      <fileset dir="${bootstrap.dir}/build">
        <include name="**/*.class"/>
	<exclude name="tom/engine/parser/*.class"/>
	<exclude name="tom/gom/parser/*.class"/>
      </fileset>
      <!-- we don't want to check the parser generated files, never ever -->
      <fileset dir="${bootstrap.dir}/build">
        <include name="tom/engine/parser/TomLexer.class"/>
        <include name="tom/engine/parser/TomParser.class"/>
        <include name="tom/engine/parser/HostLexer.class"/>
        <include name="tom/engine/parser/HostParser.class"/>
        <include name="tom/engine/parser/BackQuoteLexer.class"/>
        <include name="tom/engine/parser/BackQuoteParser.class"/>
        <include name="tom/gom/parser/GomParserPlugin.class"/>
      </fileset>
    </concat>
    <concat destfile="${src.src}/bootcheck/version2">
      <fileset dir="${src.build}">
        <include name="**/*.class"/>
	<exclude name="tom/engine/parser/*.class"/>
	<exclude name="tom/engine/Tom.class"/>
	<exclude name="tom/gom/parser/*.class"/>
      </fileset>
      <!-- we don't want to check the parser generated files, never ever -->
      <fileset dir="${src.build}">
        <include name="tom/engine/parser/TomLexer.class"/>
        <include name="tom/engine/parser/TomParser.class"/>
        <include name="tom/engine/parser/HostLexer.class"/>
        <include name="tom/engine/parser/HostParser.class"/>
        <include name="tom/engine/parser/BackQuoteLexer.class"/>
        <include name="tom/engine/parser/BackQuoteParser.class"/>
        <include name="tom/gom/parser/GomParserPlugin.class"/>
      </fileset>
    </concat>
    <condition property="bootstrap.ok" value="true">
      <filesmatch file1="${src.src}/bootcheck/version1"
                  file2="${src.src}/bootcheck/version2"/>
    </condition>
    <!--<delete dir="${src.src}/bootcheck"/>-->
  </target>

  <target name="performbootstrap" depends="src">
    <echo> CALLING BOOTSTEP 1 ...</echo>
    <!-- compile src with tomsrc -->
    <mkdir dir="${bootstrap.dir}"/>
    <antcall target="bootstep">
      <param name="destination" value="${bootstrap.dir}"/>
    </antcall>
    <!-- copy destination result to src.build-->
    <delete dir="${src.build}"/>
    <mkdir dir="${src.build}"/>
    <move todir="${src.build}">
      <fileset dir="${bootstrap.dir}/build">
      <include name="**/*.class"/></fileset>
    </move>

    <!-- compile again src with tomsrc -->
    <echo> CALLING BOOTSTEP 2 ...</echo>
    <delete dir="${bootstrap.dir}"/>
    <mkdir dir="${bootstrap.dir}"/>
    <antcall target="bootstep">
      <param name="destination" value="${bootstrap.dir}"/>
    </antcall>
  </target>


  <!-- compile tom files in src.src with tom.src -->
  <target name="bootstep" depends="init.task.src,src.dist" if="destination">

    <mkdir dir="${destination}/gen"/>
    <mkdir dir="${destination}/build"/>
    <mkdir dir="${destination}/dist"/>

    <!-- rebuild and copy adt -->
    <antcall target="buildadt">
      <param name="withsource" value="yes"/>
      <param name="tom.home" value="${src.dist}"/>
    </antcall>
    <copy todir="${destination}/gen">
      <fileset dir="${src.gen}">
        <include name="**/adt/**/*"/>
      </fileset>
    </copy>

    <!-- build tom -->
    <antcall target="buildtom.common">
      <param name="gen.destination" value="${destination}/gen"/>
      <param name="withsource" value="yes"/>
      <param name="tom.home" value="${src.dist}"/>
    </antcall>

    <!-- builds parser -->
    <antcall target="buildparser.common">
      <param name="gen.destination" value="${destination}/gen"/>
      <param name="tom.home" value="${src.dist}"/>
    </antcall>

    <mkdir dir="${destination}/gen/tom/engine/parser"/>

    <tomjavac destdir="${destination}/build" fork="yes">
      <src path="${src.src}"/>
      <src path="${destination}/gen"/>
      <classpath refid="src.classpath"/>
      <include name="tom/**/*.java"/>
    </tomjavac>
  </target>

  <target name="bootinstall"
		description="Install src tree into stable tree"
		depends="bootstrap"
		if="bootstrap.ok">
    <copy todir="${stable.src}" overwrite="true">
      <fileset dir="${src.src}">
        <include name="**/*.java.in"/>
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
        <include name="lib/*.jar"/>
        <include name="lib/*.xml"/>
        <exclude name="**/Tom.java"/>
        <exclude name="**/adt/**/*.java"/>
        <exclude name="**/bootstrap/**/*"/>
        <exclude name="**/gen/**/*"/>
      </fileset>
      <fileset dir="${src.gen}">
        <include name="**/*.java"/>
        <exclude name="**/Tom.java"/>
        <exclude name="**/adt/**/*.java"/>
      </fileset>
    </copy>
    <copy todir="${stable.mapping}" overwrite="true">
      <fileset dir="${src.mapping}" includes="**/*.tom"/>
    </copy>
    <copy todir="${stable.config}" overwrite="true">
      <fileset dir="${src.config}" includes="*.xml"/>
    </copy>

    <mkdir dir="${stable.src}/tom/engine/adt"/>
    <mkdir dir="${stable.src}/tom/library/adt"/>
    <mkdir dir="${stable.src}/tom/platform/adt"/>
    <mkdir dir="${stable.src}/tom/gom/adt"/>

    <jar jarfile="${stable.src}/tom/engine/adt/TomSignature.jar">
      <fileset dir="${src.build}" includes="tom/engine/adt/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/library/adt/Set.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/set/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/library/adt/TNode.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/tnode/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/library/adt/MuTravelerADT.jar">
      <fileset dir="${src.build}" includes="tom/library/adt/mutraveleradt/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/platform/adt/PlatformOption.jar">
      <fileset dir="${src.build}" includes="tom/platform/adt/platformoption/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/platform/adt/PlatformAlert.jar">
      <fileset dir="${src.build}" includes="tom/platform/adt/platformalert/**/*.class"/>
    </jar>
    <jar jarfile="${stable.src}/tom/gom/adt/GomADT.jar">
      <fileset dir="${src.build}" includes="tom/gom/adt/**/*.class"/>
    </jar>
    <antcall target="clean.bootstrap"/>
  </target>

  <target name="bundle.src" depends="src.dist">
    <mkdir dir="${bundle.temp.dir}"/>
    <unjar dest="${bundle.temp.dir}">
      <fileset dir="${src.dist.lib}">
        <filename name="*.jar"/>
      </fileset>
    </unjar>
    <delete dir="${bundle.temp.dir}/META-INF"/>
    <jar destfile="${aircubebundlesrc}" basedir="${bundle.temp.dir}"></jar>
    <delete dir="${bundle.temp.dir}"/>
  </target>

  <target name="prepare.plugin.src"
          description="prepare the workspace to build tom eclipse plugin"
          depends="bundle.src"
          if="plugin.workspace.dir">
     <!-- copy bundle -->
     <copy file="${aircubebundlesrc}"
           tofile="${plugin.workspace.dir}/aircube-eclipse/aircube-bundle.jar"/>
     <!-- copy config file -->
     <copy file="${src.configfile}"
           todir="${plugin.workspace.dir}/jtom-eclipse"/>
     <!-- copy mappings -->
     <copy todir="${plugin.workspace.dir}/jtom-eclipse/include">
       <fileset dir="${src.dist.share}/tom/">
         <include name="**/*.tom"/>
       </fileset>
     </copy>
  </target>

  <target name="prepare.plugin.stable"
          depends="bundle.stable"
          if="plugin.workspace.dir">
     <!-- copy bundle -->
     <copy file="${aircubebundlestable}"
           tofile="${plugin.workspace.dir}/aircube-eclipse/aircube-bundle.jar"/>
     <!-- copy config file -->
     <copy file="${stable.configfile}"
           todir="${plugin.workspace.dir}/jtom-eclipse"/>
     <!-- copy mappings -->
     <copy todir="${plugin.workspace.dir}/jtom-eclipse/include">
       <fileset dir="${stable.dist.share}/tom/">
         <include name="**/*.tom"/>
       </fileset>
     </copy>
  </target>

  <target name="bundle.stable" depends="stable.dist">
    <mkdir dir="${bundle.temp.dir}"/>
    <unjar dest="${bundle.temp.dir}">
      <fileset dir="${stable.dist.lib}">
        <filename name="*.jar"/>
      </fileset>
    </unjar>
    <delete dir="${bundle.temp.dir}/META-INF"/>
    <jar destfile="${aircubebundlestable}" basedir="${bundle.temp.dir}"></jar>
    <delete dir="${bundle.temp.dir}"/>
  </target>

  <target name="doc.stable" description="Build javadoc for stable">
    <mkdir dir="${stable.doc}"/>
    <javadoc destdir="${stable.doc}"
             windowtitle="TOM documentation"
             breakiterator="yes">
      <classpath refid="stable.classpath"/>
      <fileset dir="${stable.src}">
        <include name="tom/**/*.java"/>
      </fileset>
    </javadoc>
  </target>

  <target name="doc.src"
          description="Build javadoc for src"
          depends="src">
    <mkdir dir="${src.doc}"/>
    <javadoc destdir="${src.doc}"
             windowtitle="TOM documentation"
             breakiterator="yes">
      <classpath refid="src.classpath"/>
      <fileset dir="${src.src}">
        <include name="tom/**/*.java"/>
      </fileset>
      <fileset dir="${src.gen}">
        <include name="tom/**/*.java"/>
        <exclude name="**/adt/**/*.java"/>
      </fileset>
    </javadoc>
  </target>

  <target name="clean.doc">
    <delete dir="stable.doc"/>
    <delete dir="src.doc"/>
  </target>

  <!-- <target name="tags">
    <exec>
    find /Volumes/Home/pem/workspace/jtom/src/tom \( -name "*.t" -o
    -name "*.java" \) | xargs etags - -language=java
    </exec>
    </target>
  -->

  <target name="source.distribution"
          description="Creates a  ready to distribute tom-sources.tgz ">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist}/checkout"/>
    <cvs cvsRoot=":pserver:anonymous@scm.gforge.inria.fr:/cvsroot/tom"
	 command="checkout -P jtom"
         dest="${dist}/checkout">
    </cvs>
    <tar tarfile="${dist}/tom-src-${stable.version}.tar.gz" compression="gzip">
      <tarfileset dir="${dist}/checkout/jtom" prefix="tom-src-${stable.version}" mode="755">
        <include name="**/*.sh"/>
        <include name="**/*-tom"/>
        <exclude name="applications/**"/>
      </tarfileset>
      <tarfileset dir="${dist}/checkout/jtom" prefix="tom-src-${stable.version}" mode="644">
        <include name="**/*"/>
        <exclude name="**/*.sh"/>
        <exclude name="**/*-tom"/>
        <exclude name="**/CVS/**"/>
        <exclude name="applications/**"/>
      </tarfileset>
    </tar>
    <delete dir="${dist}/checkout"/>
  </target>

</project>
