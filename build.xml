<?xml version="1.0" encoding="UTF-8"?>
<project name="Ant for TOM" default="buildstable" basedir=".">
	<description>
		Build script using Ant offering checks, dists,
		installation, and so on.
		it aims at offering the same functionality as the
		automake files included in the TOM source
		distribution.
		
		To use this build file, install ant,
		and just run ant in the current directory.
		
		You can modify certain default settings via
		ant -Ddist="/home/yourdirectory"
		for the various properties listed below.
		
		Author: Julien GUYON, LORIA
		Created: August 06, 2003.
	</description>
	
	<!-- set local properties for this build -->
	<property file="local.properties"/>

	<!-- current version of TOM -->
	<property name="version" value="2.0beta"/>
	
	<!-- some used directory location -->
	<property name="test" location="test"/>
	<property name="utils" location="utils"/>
	<property name="lib" location="lib"/>

	<!-- for stable -->
	<property name="stable.src" location="stable"/>
	<property name="stable.adt" location="stable/adt"/>
	<property name="stable.mapping" location="stable/jtom/runtime/mapping"/>
	<property name="stable.build" location="stable/build"/>
	
	<!-- for devel (src) -->
	<property name="src.src" location="src"/>
	<property name="src.adt" location="src/adt"/>
	<property name="src.mapping" location="src/jtom/runtime/mapping"/>
	<property name="src.build" location="src/build"/>  	

	<!-- Property for Javac compilation
			 <property name="javacFailOnError" value="false"/>
			 <property name="javacDebugInfo" value="on"/>
			 <property name="javacSource" value="1.3"/>
			 <property name="javacTarget" value="1.2"/>
	-->
	<property name="javacVerbose" value="false"/>

	<path id="external.classpath">
		<pathelement location="${atermjavajar}"/>
		<pathelement location="${sharedobjectjar}"/>
		<pathelement location="${jjtravelerjar}"/>
		<pathelement location="${apigenjar}"/>
	</path>

	<!-- Define classpath for building shable and source	-->
	<path id="stable.classpath">
		<path refid="external.classpath"/>
		<pathelement location="${utils}"/>
		<pathelement location="${stable.src}"/>
		<fileset dir="${stable.adt}"><!-- ADT jar files -->
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="src.classpath">
		<path refid="external.classpath"/>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${src.build}"/>
	</path>

	<path id="tom.classpath">
		<pathelement location="${utils}"/>
		<path refid="stable.classpath"/>
		<fileset dir="${stable.adt}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${stable.build}"/>
	</path>

	<path id="tomsrc.classpath">
		<pathelement location="${utils}"/>
		<path refid="src.classpath"/>
		<pathelement location="${src.build}"/>
	</path>

	<target name="preparesrc">
		<mkdir dir="${src.build}"/>
	</target>
	
	<target name="preparestable">
		<mkdir dir="${stable.build}"/>
	</target>

	<!-- builds and defines the custom tasks -->
	<!-- tasks for building src -->
	<target name="initTaskDef" depends="buildstable">
		<javac srcdir="${utils}" destdir="${utils}">
			<classpath refid="stable.classpath"/>
		</javac>
		<taskdef name="adt" classname="ApigenAntTask" classpathref="stable.classpath"/>
		<taskdef name="tom" classname="TomAntTask">
			<classpath refid="tom.classpath"/>
		</taskdef>
	</target>

	<!-- define task for running tom.src -->
	<target name="initsrc" depends="buildsrc">
		<taskdef name="tomsrc" classname="TomAntTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>

	<!-- compile tom files in src.src -->
	<target name="buildtom" depends="initTaskDef, buildadt">
		<tom srcdir="${src.src}" destdir="${src.src}" options="-I ${src.mapping} --noDeclaration">
			<exclude name="**/TomBase.t"/>
			<exclude name="**/TomBackQuoteParser.t"/>
			<exclude name="**/runtime/**/*.t"/>	
		</tom>
		<tom srcdir="${src.src}" destdir="${src.src}" options="-I ${src.mapping}">
			<include name="**/runtime/**/*.t"/>	
			<include name="**/TomBase.t"/>
			<include name="**/TomBackQuoteParser.t"/>	
		</tom>
	</target>

	<!-- builds the parser using javacc -->
	<target name="buildparser">
		<javacc 
		 target="${src.src}/jtom/parser/TomParser.jj"
		 javacchome="${javaccdir}" /> 
	</target>

	<target name="check.newer.adt">
		<condition property="newer.adt">
			<or>
				<not><available file="${src.adt}/jtom/adt/"/></not>
				<not><available file="${src.adt}/jtom/adt/"/></not>
				<not><available file="${src.adt}/jtom/adt/"/></not>
				<uptodate targetfile="${src.adt}/TomSignature.adt" srcfile="${src.adt}/jtom/adt/"/>
				<uptodate targetfile="${src.adt}/TNode.adt" srcfile="${src.adt}/jtom/adt/"/>
				<uptodate targetfile="${src.adt}/Set.adt" srcfile="${src.adt}/jtom/adt/"/>
			</or>
		</condition>
	</target>
	
	<!-- compile adt's -->
	<target name="buildadt" depends="initTaskDef, preparesrc, check.newer.adt" if="newer.adt">
		<adt file="${src.adt}/TomSignature.adt" 
				 factory="TomSignature" 
				 package="jtom.adt" 
				 destdir="${src.adt}"/>
		<adt file="${src.adt}/TNode.adt" 
				 factory="TNode" 
				 package="jtom.adt" 
				 destdir="${src.adt}"/>
		<adt file="${src.adt}/Set.adt" 
				 factory="Set" 
				 package="jtom.adt" 
				 destdir="${src.adt}"/>
	</target>

	<target name="buildsrc" description="compile the TOM development sources" depends="preparesrc">
		<antcall target="buildtom"/>
		<antcall target="buildparser"/>
		<!--<property name="unixpath" refid="src.classpath" />
		<echo>classpath = ${unixpath}</echo>-->
		<javac srcdir="${src.src}" destdir="${src.build}" verbose="${javacVerbose}">
			<classpath refid="src.classpath"/>
		</javac>
	</target>
	
	<target name="buildstable" description="compile the TOM stable sources" depends="preparestable">
		<tstamp/>
		<!--<pathconvert targetos="windows" property="windowspath" refid="stable.classpath"/>
				 <echo>classpath = ${windowspath}</echo>-->
		<!-- Compile the java code from ${stable} into ${stable} -->
		<javac srcdir="${stable.src}" destdir="${stable.build}" verbose="${javacVerbose}">
			<classpath refid="stable.classpath"/>
		</javac>
	</target>  

	<target name="cleanstable" description="Purges the generated stable files">
		<delete dir="${stable.build}"/>
	</target>
	
	<target name="cleansrc" description="Purges the generated devel files">
		<delete dir="${src.build}"/>
		<delete dir="${src.adt}/jtom"/>
		<delete> <fileset dir="${src.adt}" includes="**/*.tom"/></delete>
		<!-- deletes java files generated by javacc -->
		<delete> 
			<fileset dir="${src.src}/jtom/parser">
				<include name="Token.java"/>
				<include name="ParseException.java"/>
				<include name="TokenMgrError.java"/>
				<include name="TomParser.java"/>
				<include name="TomParserConstants.java"/>
				<include name="TomParserTokenManager.java"/>
			</fileset>
		</delete>
		<!-- deletes java files generated by tom -->
		<delete>
			<fileset dir="${src.src}" includes="**/*.java">
				<present targetdir="${src.src}">
					<mapper type="glob" from="*.java" to="*.t"/>
				</present>
			</fileset>
		</delete>
	</target>

	<target name="cleantest" description="Cleans acceptance tests directory">
		<delete>
			<fileset dir="${test}" includes="*.java, *.class" />
		</delete>
	</target>

	<target name="inittest">
		<!-- For this to work, you must add lib/junit.jar to your classpath--> 
		<taskdef name="myjunit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
			<classpath refid="tomsrc.classpath"/>
		</taskdef>
	</target>
	
	<target name="check" description="Compile and run acceptance tests" depends="initsrc, inittest">
		<tomsrc srcdir="${test}" destdir="${test}" options="-I ${src.mapping} -I ${src.adt}">
			<exclude name="cfib1.t"/>
			<exclude name="loulou.t"/>
			<exclude name="Record.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<tomsrc srcdir="${test}" destdir="${test}" options="-I ${src.mapping} --lazyType -I ${src.adt}">
			<include name="Record.t"/>
			<exclude name="**/error/**"/>
		</tomsrc>
		<javac srcdir="${test}" destdir="${test}" verbose="${javacVerbose}">
			<classpath refid="src.classpath"/>
			<exclude name="**/error/**"/>
		</javac>
		<myjunit printsummary="yes">
			<classpath>
				<path refid="src.classpath"/>
				<pathelement location="${test}"/>
			</classpath>
			<batchtest>
				<fileset dir="${test}">
					<include name="**/Test*.java"/>
					<exclude name="**/error/**"/>
				</fileset>
			</batchtest>
		</myjunit>
	</target>

</project>
