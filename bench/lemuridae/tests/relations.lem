termrule appl(t,nil()) -> t.
termrule appl(one(),cons(t,l)) -> t.
termrule appl(S(n),cons(t,l)) -> appl(n,l).
proprule in(l,inter(A,B)) -> in(l,A) /\ in(l,B).
proprule in(l,union(A,B)) -> in(l,A) \/ in(l,B).
proprule in(l,supset(A,B)) -> in(l,A) => in(l,B).
proprule in(l,emptyset()) -> \B.
proprule in(l,P(p)) -> exists n,(in(cons(n,l),p)).
proprule in(l,C(p)) -> forall n,(in(cons(n,l),p)).


rule reflexive(r) -> forall x,rel(r,x,x).
rule symmetric(r) -> forall x,(forall y,(rel(r,x,y) => rel(r,y,x))).
rule transitive(r) -> forall x,(forall y,(forall z,( rel(r,x,y) => rel(r,y,z) => rel(r,x,z) ))).
rule equivalence(r) -> reflexive(r) /\ symmetric(r) /\ transitive(r).


rule included(r1,r2) -> forall x,(forall y,( rel(r1,x,y) => rel(r2,x,y) )).
rule same(r1,r1) -> included(r1,r2) /\ included(r2,r1).



rule
closTrans(R,x,a) -> forall p,(forall x,(forall y,(rel(R,x,y) => in(cons(x,cons(y,nil())),p))) => (
                     forall x,(forall y,(forall z,(    closTrans(R,x,y) => in(cons(x,cons(y,nil())),p)
                                     => closTrans(R,y,z) => in(cons(y,cons(z,nil())),p)
                                     => in(cons(x,cons(z,nil())),p) )))
                    ) => in(cons(x,cons(a,nil())),p)).
tStep.
tTrans.

proprule in(l,fClosTrans(r,x,y)) -> closTrans(appl(r,l),appl(x,l),appl(y,l)).
proprule in(l,fRel(r,x,y))       -> rel(appl(r,l),appl(x,l),appl(y,l)).

proof test1: forall r,(forall a,(forall b,(   rel(r,a,b) => closTrans(r,a,b)  ))).
intros.
rule.
focus h1. rule. b0. a0.
axiom.
axiom.


proof test2: rel(r1(),a(),b()) => rel(r1(),b(),c()) => closTrans(r1(),a(),c()).
intros.
rule.
focus h2. rule. c(). b(). a().
focus h1. rule. b(). a().
axiom.
axiom.
focus h1. rule. c(). b().
axiom.
next.
axiom.
theorem test1.
focus h6. intro. r1(). 
focus h6. intro. b().
focus h6. intro. c().
intros.
next.
theorem test1.
focus h5. intro. r1(). 
focus h5. intro. a().
focus h5. intro. b().
intros.
focus h1.
rule. c(). b().
axiom.
axiom.



-- POTENTIELLEMENT FAUX A PARTIR D'ICI--




rule app(union(r1,r2),x,y) -> app(r1,x,y) \/ app(r2,x,y).
rule app(composition(r1,r2),x,y) -> exists z,(app(r1,x,z) /\ app(r2,z,y)).



rule app(reflClsr(r),x,y) -> eq(x,y) \/ app(r,x,y).
rule app(transClsr(r),x,y) -> app(r,x,y) \/ app(composition(r,transClsr(r)),x,y).
rule app(symmClsr(r),x,y) ->  app(r,x,y) \/ app(r,y,x).

rule app(reflTransClsr(r),x,y) -> app(union(reflClsr(r),transClsr(r)),x,y).
rule app(symmReflTransClsr(r),x,y) -> app(union(symmClsr(r),reflTransClsr(r)),x,y).



rule CR(r) -> forall x,(forall y,( app(symmReflTransClsr(r),x,y) =>  exists z,( app(reflTransClsr(r),x,z) /\ app(reflTransClsr(r),y,z) ) )).
commonReducedForm.


rule confluent(r) -> forall x,(forall u,(forall v,(  
                        ( app(reflTransClsr(r),x,u) /\ app(reflTransClsr(r),x,v) ) 
		         => exists z,( app(reflTransClsr(r),u,z) /\ app(reflTransClsr(r),v,z) )  ))).
commonReducedForm2.


proof confluentImpliesCR: forall r,(confluent(r) => CR(r)).
auto.
focus c1. rule. z.
focus c2. remove.
next.
focus c2. remove.
focus h1. rule.
focus h1. rule.
next. next.
focus h1. rule.
focus h1. rule.
focus h1. rule.
next.next.next.next.
rule.rule.
focus c2.remove.rule.



