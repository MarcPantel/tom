/*
 * Copyright (c) 2004-2015, Universite de Lorraine, Inria
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the Inria nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%include { int.tom }

/*
 * List = conc(int*)
 */

%typeterm List {
  implement { gomterm.list.List }
  is_sort(t) { t instanceof gomterm.list.List }
  equals(t1,t2) {t1.equals(t2)}
}

%op List Cons(arg1:int, arg2:List) {
  is_fsym(t) { (t!= null) && (t instanceof gomterm.list.Cons) }
  get_slot(arg1,t) { ((Cons)t).head }
  get_slot(arg2,t) { ((Cons)t).tail }
  make(t0, t1) { new gomterm.list.Cons(t0, t1) }
}

%op List Empty() {
  is_fsym(t) { (t!= null) && (t instanceof gomterm.list.Empty) }
  make() { new gomterm.list.Empty() }
}

%oplist List conc( int* ) {
  is_fsym(t)       { t instanceof gomterm.list.List }
  make_empty()     { new gomterm.list.Empty() }
  make_insert(e,l) { new gomterm.list.Cons(e, l) }
  get_head(l)      { ((gomterm.list.Cons)l).head }
  get_tail(l)      { ((gomterm.list.Cons)l).tail }
  is_empty(l)      { (l instanceof gomterm.list.Empty) }
}
