/*
 generated by Xtext
 */
package tom.mapping.dsl.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import tom.mapping.model.Accessor;
import tom.mapping.model.ClassOperator;
import tom.mapping.model.FeatureException;
import tom.mapping.model.FeatureParameter;
import tom.mapping.model.Import;
import tom.mapping.model.Mapping;
import tom.mapping.model.Operator;
import tom.mapping.model.Parameter;
import tom.mapping.model.SettedFeatureParameter;
import tom.mapping.model.Terminal;
import tom.mapping.model.UserOperator;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects. XXX: dirty implementation (due to bug with
 * google juice + existing metamodel) see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class TomMappingLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public TomMappingLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// String image(EObject o) {
	// if (isClass("Mapping", o))
	// return "mapping.gif";
	// else if (isClass("Import", o))
	// return "ecore.gif";
	// else if (isClass("Terminal", o))
	// return "class.gif";
	// else if (isClass("Operator", o))
	// return "op.gif";
	// else if (isClass("SettedFeatureParameter", o)) {
	// // System.out.println(feature("feature",o));
	// // return image((EObject)feature("feature",o));
	// return "feature.gif";
	// } else if (isClass("FeatureParameter", o)) {
	// // System.out.println(feature("feature",o));
	// // return image((EObject)feature("feature",o));
	// return "settedFeature.gif";
	// } else if (isClass("Accessor", o))
	// return "accessor.gif";
	// else if (isClass("Class", o))
	// return "eclass.gif";
	// else if (isClass("EAttribute", o))
	// return "default";
	// else if (isClass("EReference", o))
	// return "default";
	// else if (isClass("Exception", o))
	// return "exception.gif";
	// else if (isClass("EStructuraFeature", o))
	// return "default";
	// // System.out.println(o);
	// return "blank.gif";
	// }
	//
	// String text(EObject o) {
	// if (isClass("Mapping", o))
	// return feature("name", o).toString();
	// else if (isClass("Import", o))
	// return feature("importURI",o).toString();
	// else if (isClass("Terminal", o)) {
	// String s = feature("name", (EObject) feature("class", o))
	// .toString();
	//
	// if ((feature("many", o)).toString().equals("true")) {
	// s += "[]";
	// System.out.println(o);
	// }
	// return feature("name", o) + "::" + s;
	// } else if (isClass("ClassOperator", o)) {
	// String s;
	//
	// s = "[" + feature("name", (EObject) feature("class", o)).toString()
	// + "]";
	// // }
	// return feature("name", o) + s;
	// } else if (isClass("UserOperator", o)) {
	// String s;
	// // if(((List<?>)feature("parameters",o)).size()>0)
	// // s =
	// // " : "+((Mapping)ele.eContainer()).getTerminal(ele.getClass_(),
	// // false).getName();
	// // else{
	// s = "() : "+feature("name", (EObject) feature("type", o))
	// .toString();
	// // }
	// return feature("name", o) + s;
	// } else if (isClass("SettedFeatureParameter", o)) {
	// return (String) feature("name", (EObject) feature("feature", o))
	// .toString() + "=" + feature("java", o);
	// } else if (isClass("FeatureParameter", o)) {
	// String s = feature("name", (EObject) feature("feature", o))
	// .toString();
	// if (feature("many", (EObject) feature("feature", o)).toString()
	// .equals("true"))
	// s += "[]";
	// return s;
	// } else if (isClass("Exception", o)) {
	// return feature("name", (EObject) feature("feature", o)).toString();
	// }else if (isClass("Accessor", o)) {
	// return text((EObject)feature("parameter", o));
	// }
	// else if (isClass("Parameter", o)) {
	// return feature("name", o).toString();
	// }
	// System.out.println(o.toString());
	// return o.toString();
	// }
	//
	// private static Object feature(String f, EObject o) {
	// return o.eGet(o.eClass().getEStructuralFeature(f));
	// }
	//
	// private static boolean isClass(String c, EObject o) {
	// return o.eClass().getName().contains(c);
	// }

	/*
	 * //Labels and icons can be computed like this:
	 * 
	 * String text(MyModel ele) { return "my "+ele.getName(); }
	 */

	String image(Mapping ele) {
		return "mapping.gif";
	}

	String image(Import ele) {
		return "ecore.gif";
	}

	String image(Terminal ele) {
		return "class.gif";
	}

	String text(Terminal ele) {
		String s = ele.getClass_().getName();
		if (ele.isMany())
			s += "*";
		return ele.getName() + "::" + s;
	}

	String text(ClassOperator ele) {
		String s;
		if (ele.getParameters().size() > 0)
			s = " : "
					+ ((Mapping) ele.eContainer()).getTerminal(ele.getClass_(),
							false).getName();
		else {
			s = "[" + ele.getClass_().getName() + "]";
		}
		return ele.getName() + s;
	}

	String text(UserOperator ele) {
		String s = " (";
		for (int i = 0; i < ele.getParameters().size(); i++) {
			s += ele.getParameters().get(i).getType().getName();
			if (i < ele.getParameters().size() - 1) {
				s += ",";
			}
		}
		s += ") : ";
		s += ele.getType().getName();
		if (ele.getType().isMany())
			s += "*";
		return ele.getName() + s;
	}

	String text(SettedFeatureParameter sf){
		return sf.getFeature().getName()+"="+sf.toString();
	}
	String image(Operator ele) {
		return "op.gif";
	}

	String image(String ele) {
		return "op.gif";
	}

	String image(FeatureParameter ele) {
		return "feature.gif";
	}

	String image(SettedFeatureParameter ele) {
		return "settedFeature.gif";
	}

	String image(FeatureException ele) {
		return "exception.gif";
	}

	String image(Accessor ele) {
		return "param.gif";
	}

	String image(Parameter ele) {
		return "param.gif";
	}
	
	

}
