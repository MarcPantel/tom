/*
* generated by Xtext
*/
package tom.mapping.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import tom.mapping.dsl.services.TomMappingGrammarAccess;

public class TomMappingParser extends AbstractContentAssistParser {
	
	@Inject
	private TomMappingGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected tom.mapping.dsl.ui.contentassist.antlr.internal.InternalTomMappingParser createParser() {
		tom.mapping.dsl.ui.contentassist.antlr.internal.InternalTomMappingParser result = new tom.mapping.dsl.ui.contentassist.antlr.internal.InternalTomMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMappingAccess().getAlternatives_5_2(), "rule__Mapping__Alternatives_5_2");
					put(grammarAccess.getMappingAccess().getAlternatives_6(), "rule__Mapping__Alternatives_6");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getAliasNodeAccess().getAlternatives(), "rule__AliasNode__Alternatives");
					put(grammarAccess.getFeatureParameterAccess().getAlternatives(), "rule__FeatureParameter__Alternatives");
					put(grammarAccess.getSettedValueAccess().getAlternatives(), "rule__SettedValue__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getMappingAccess().getGroup_3(), "rule__Mapping__Group_3__0");
					put(grammarAccess.getMappingAccess().getGroup_4(), "rule__Mapping__Group_4__0");
					put(grammarAccess.getMappingAccess().getGroup_5(), "rule__Mapping__Group_5__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_0(), "rule__Mapping__Group_5_2_0__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_0_0(), "rule__Mapping__Group_5_2_0_0__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_0_0_3(), "rule__Mapping__Group_5_2_0_0_3__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_0_1(), "rule__Mapping__Group_5_2_0_1__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_0_1_3(), "rule__Mapping__Group_5_2_0_1_3__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_1(), "rule__Mapping__Group_5_2_1__0");
					put(grammarAccess.getMappingAccess().getGroup_5_2_1_1(), "rule__Mapping__Group_5_2_1_1__0");
					put(grammarAccess.getMappingAccess().getGroup_6_0(), "rule__Mapping__Group_6_0__0");
					put(grammarAccess.getMappingAccess().getGroup_6_0_3(), "rule__Mapping__Group_6_0_3__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_3(), "rule__Module__Group_3__0");
					put(grammarAccess.getModuleAccess().getGroup_3_3(), "rule__Module__Group_3_3__0");
					put(grammarAccess.getTerminalAccess().getGroup(), "rule__Terminal__Group__0");
					put(grammarAccess.getAliasOperatorAccess().getGroup(), "rule__AliasOperator__Group__0");
					put(grammarAccess.getAliasOperatorAccess().getGroup_6(), "rule__AliasOperator__Group_6__0");
					put(grammarAccess.getOperatorNodeAccess().getGroup(), "rule__OperatorNode__Group__0");
					put(grammarAccess.getOperatorNodeAccess().getGroup_3(), "rule__OperatorNode__Group_3__0");
					put(grammarAccess.getClassOperatorAccess().getGroup(), "rule__ClassOperator__Group__0");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getGroup(), "rule__ClassOperatorWithExceptions__Group__0");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getGroup_6(), "rule__ClassOperatorWithExceptions__Group_6__0");
					put(grammarAccess.getUserOperatorAccess().getGroup(), "rule__UserOperator__Group__0");
					put(grammarAccess.getUserOperatorAccess().getGroup_4(), "rule__UserOperator__Group_4__0");
					put(grammarAccess.getUserOperatorAccess().getGroup_10(), "rule__UserOperator__Group_10__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getAccessorAccess().getGroup(), "rule__Accessor__Group__0");
					put(grammarAccess.getFeatureExceptionAccess().getGroup(), "rule__FeatureException__Group__0");
					put(grammarAccess.getSettedFeatureParameterAccess().getGroup(), "rule__SettedFeatureParameter__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getMappingAccess().getNameAssignment_1(), "rule__Mapping__NameAssignment_1");
					put(grammarAccess.getMappingAccess().getPrefixAssignment_3_1(), "rule__Mapping__PrefixAssignment_3_1");
					put(grammarAccess.getMappingAccess().getImportsAssignment_4_1(), "rule__Mapping__ImportsAssignment_4_1");
					put(grammarAccess.getMappingAccess().getTerminalsAssignment_5_2_0_0_2(), "rule__Mapping__TerminalsAssignment_5_2_0_0_2");
					put(grammarAccess.getMappingAccess().getTerminalsAssignment_5_2_0_0_3_1(), "rule__Mapping__TerminalsAssignment_5_2_0_0_3_1");
					put(grammarAccess.getMappingAccess().getExternalTerminalsAssignment_5_2_0_1_2(), "rule__Mapping__ExternalTerminalsAssignment_5_2_0_1_2");
					put(grammarAccess.getMappingAccess().getExternalTerminalsAssignment_5_2_0_1_3_1(), "rule__Mapping__ExternalTerminalsAssignment_5_2_0_1_3_1");
					put(grammarAccess.getMappingAccess().getTerminalsAssignment_5_2_1_0(), "rule__Mapping__TerminalsAssignment_5_2_1_0");
					put(grammarAccess.getMappingAccess().getTerminalsAssignment_5_2_1_1_1(), "rule__Mapping__TerminalsAssignment_5_2_1_1_1");
					put(grammarAccess.getMappingAccess().getOperatorsAssignment_6_0_2(), "rule__Mapping__OperatorsAssignment_6_0_2");
					put(grammarAccess.getMappingAccess().getOperatorsAssignment_6_0_3_1(), "rule__Mapping__OperatorsAssignment_6_0_3_1");
					put(grammarAccess.getMappingAccess().getModulesAssignment_6_1(), "rule__Mapping__ModulesAssignment_6_1");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getOperatorsAssignment_3_2(), "rule__Module__OperatorsAssignment_3_2");
					put(grammarAccess.getModuleAccess().getOperatorsAssignment_3_3_1(), "rule__Module__OperatorsAssignment_3_3_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment(), "rule__Import__ImportURIAssignment");
					put(grammarAccess.getTerminalAccess().getNameAssignment_0(), "rule__Terminal__NameAssignment_0");
					put(grammarAccess.getTerminalAccess().getClassAssignment_2(), "rule__Terminal__ClassAssignment_2");
					put(grammarAccess.getTerminalAccess().getManyAssignment_3(), "rule__Terminal__ManyAssignment_3");
					put(grammarAccess.getAliasOperatorAccess().getNameAssignment_1(), "rule__AliasOperator__NameAssignment_1");
					put(grammarAccess.getAliasOperatorAccess().getOpAssignment_3(), "rule__AliasOperator__OpAssignment_3");
					put(grammarAccess.getAliasOperatorAccess().getNodesAssignment_5(), "rule__AliasOperator__NodesAssignment_5");
					put(grammarAccess.getAliasOperatorAccess().getNodesAssignment_6_1(), "rule__AliasOperator__NodesAssignment_6_1");
					put(grammarAccess.getFeatureNodeAccess().getFeatureAssignment(), "rule__FeatureNode__FeatureAssignment");
					put(grammarAccess.getOperatorNodeAccess().getOpAssignment_0(), "rule__OperatorNode__OpAssignment_0");
					put(grammarAccess.getOperatorNodeAccess().getNodesAssignment_2(), "rule__OperatorNode__NodesAssignment_2");
					put(grammarAccess.getOperatorNodeAccess().getNodesAssignment_3_1(), "rule__OperatorNode__NodesAssignment_3_1");
					put(grammarAccess.getClassOperatorAccess().getNameAssignment_1(), "rule__ClassOperator__NameAssignment_1");
					put(grammarAccess.getClassOperatorAccess().getClassAssignment_3(), "rule__ClassOperator__ClassAssignment_3");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getNameAssignment_1(), "rule__ClassOperatorWithExceptions__NameAssignment_1");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getClassAssignment_3(), "rule__ClassOperatorWithExceptions__ClassAssignment_3");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getParametersAssignment_5(), "rule__ClassOperatorWithExceptions__ParametersAssignment_5");
					put(grammarAccess.getClassOperatorWithExceptionsAccess().getParametersAssignment_6_1(), "rule__ClassOperatorWithExceptions__ParametersAssignment_6_1");
					put(grammarAccess.getUserOperatorAccess().getNameAssignment_1(), "rule__UserOperator__NameAssignment_1");
					put(grammarAccess.getUserOperatorAccess().getParametersAssignment_3(), "rule__UserOperator__ParametersAssignment_3");
					put(grammarAccess.getUserOperatorAccess().getParametersAssignment_4_1(), "rule__UserOperator__ParametersAssignment_4_1");
					put(grammarAccess.getUserOperatorAccess().getTypeAssignment_7(), "rule__UserOperator__TypeAssignment_7");
					put(grammarAccess.getUserOperatorAccess().getAccessorsAssignment_9(), "rule__UserOperator__AccessorsAssignment_9");
					put(grammarAccess.getUserOperatorAccess().getAccessorsAssignment_10_1(), "rule__UserOperator__AccessorsAssignment_10_1");
					put(grammarAccess.getUserOperatorAccess().getMakeAssignment_14(), "rule__UserOperator__MakeAssignment_14");
					put(grammarAccess.getUserOperatorAccess().getTestAssignment_18(), "rule__UserOperator__TestAssignment_18");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getAccessorAccess().getSlotAssignment_1(), "rule__Accessor__SlotAssignment_1");
					put(grammarAccess.getAccessorAccess().getJavaAssignment_3(), "rule__Accessor__JavaAssignment_3");
					put(grammarAccess.getFeatureExceptionAccess().getFeatureAssignment_1(), "rule__FeatureException__FeatureAssignment_1");
					put(grammarAccess.getFeatureParameterAccess().getFeatureAssignment_0(), "rule__FeatureParameter__FeatureAssignment_0");
					put(grammarAccess.getSettedFeatureParameterAccess().getFeatureAssignment_0(), "rule__SettedFeatureParameter__FeatureAssignment_0");
					put(grammarAccess.getSettedFeatureParameterAccess().getValueAssignment_2(), "rule__SettedFeatureParameter__ValueAssignment_2");
					put(grammarAccess.getJavaCodeValueAccess().getJavaAssignment(), "rule__JavaCodeValue__JavaAssignment");
					put(grammarAccess.getLiteralValueAccess().getLiteralAssignment(), "rule__LiteralValue__LiteralAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			tom.mapping.dsl.ui.contentassist.antlr.internal.InternalTomMappingParser typedParser = (tom.mapping.dsl.ui.contentassist.antlr.internal.InternalTomMappingParser) parser;
			typedParser.entryRuleMapping();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TomMappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TomMappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
