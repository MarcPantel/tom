package tom.mapping.dsl.generator;

import com.google.inject.Inject;
import java.util.ArrayList;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import tom.mapping.dsl.generator.ImportsCompiler;
import tom.mapping.dsl.generator.TomMappingExtensions;
import tom.mapping.dsl.introspector.ChildrenGetterSetter;
import tom.mapping.model.Mapping;

@SuppressWarnings("all")
public class IntrospectorCompiler {
  private TomMappingExtensions _tomMappingExtensions = new Function0<TomMappingExtensions>() {
    public TomMappingExtensions apply() {
      TomMappingExtensions _tomMappingExtensions = new TomMappingExtensions();
      return _tomMappingExtensions;
    }
  }.apply();
  
  @Inject
  private ImportsCompiler injim;
  
  @Inject
  private ChildrenGetterSetter injchi;
  
  private String prefix = "";
  
  public void compile(final Mapping map, final IFileSystemAccess fsa) {
    String _operator_plus = StringExtensions.operator_plus(this.prefix, "/");
    String _name = map.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    String _operator_plus_1 = StringExtensions.operator_plus(_operator_plus, _firstLower);
    String _operator_plus_2 = StringExtensions.operator_plus(_operator_plus_1, "/internal");
    String _name_1 = map.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    String _operator_plus_3 = StringExtensions.operator_plus(_operator_plus_2, _firstUpper);
    String _operator_plus_4 = StringExtensions.operator_plus(_operator_plus_3, "Instrospector.java");
    CharSequence _introspector = this.introspector(map);
    fsa.generateFile(_operator_plus_4, _introspector);
  }
  
  public CharSequence main(final Mapping map) {
    CharSequence _introspector = this.introspector(map);
    return _introspector;
  }
  
  public CharSequence introspector(final Mapping map) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePrefix = this._tomMappingExtensions.getPackagePrefix(this.prefix);
    _builder.append(_packagePrefix, "");
    String _name = map.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append(".internal;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/* PROTECTED REGION ID(\"introspector_imports\") ENABLED START */");
    _builder.newLine();
    _builder.append("// protected imports");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashSet");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.Set");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import tom.library.sl.Introspector;");
    _builder.newLine();
    this.injim.importsWithUtils(map);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/* PROTECTED REGION END */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* TOM introspector for ");
    String _name_1 = map.getName();
    _builder.append(_name_1, "");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append("* -- Autogenerated by TOM mapping EMF genrator --");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_2 = map.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper, "");
    _builder.append("Introspector implements Introspector {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _childAt = this.getChildAt(map);
    _builder.append(_childAt, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _childCount = this.getChildCount(map);
    _builder.append(_childCount, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _children = this.getChildren(map);
    _builder.append(_children, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setChildren = this.setChildren(map);
    _builder.append(_setChildren, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setChildAt = this.setChildAt(map);
    _builder.append(_setChildAt, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getChildAt(final Mapping map) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public Object getChildAt(Object o, int i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return getChildren(o)[i];}");
    return _builder;
  }
  
  public CharSequence getChildCount(final Mapping map) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int getChildCount(Object o) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return getChildren(o).length;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence setChildAt(final Mapping map) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public <T> T setChildAt(T o, int i, Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(\"Not implemented\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence getChildren(final Mapping map) {
    CharSequence _xblockexpression = null;
    {
      ArrayList<EPackage> _allPackages = this._tomMappingExtensions.getAllPackages(map);
      final ArrayList<EPackage> packages = _allPackages;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("@SuppressWarnings(\"uncheked\")");
      _builder.newLine();
      _builder.append("public Object[] getChildren(Object arg0) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<Object> l = new ArrayList<Object>();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(arg0 instanceof List) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Children of a list are its content");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(Object object : (List<Object> arg0) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("l.add(object);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return l.toArray();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return getter(arg0).children(arg0);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("@deprecated");
      _builder.newLine();
      _builder.append("private static IChildrenGetter old_getter(Object o) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("EObject eo = (EObject) o;");
      _builder.newLine();
      {
        for(final EPackage pack : packages) {
          _builder.append("\t");
          _builder.append("if(eo.eClass().eContainer() == ");
          String _name = pack.getName();
          String _firstUpper = StringExtensions.toFirstUpper(_name);
          _builder.append(_firstUpper, "	");
          _builder.append("Package.eINSTANCE) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("return ");
          String _childrenGetterName = this._tomMappingExtensions.getChildrenGetterName(pack);
          _builder.append(_childrenGetterName, "		");
          _builder.append(".INSTANCE;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("throw new RuntimeException(\"No children getter for \"+o.toString());");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static IChildrenGetter getter(Object o) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("EObject eo = (EObject) o;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("try{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return searchChildrenGetter(eo.eClass());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} catch (RuntimeException e) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("throw new RuntimeException(\"No children getter for \"+o.toString()+\":\"+o.getClass().getSimpleName());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static IChildrenGetter searchChildrenGetter(EClass eo) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(eo != null) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("EPackage eContainer = (EPackage)eo.eContainer();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      {
        for(final EPackage pack_1 : packages) {
          _builder.append(" {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if(eContainer == ");
          String _name_1 = pack_1.getName();
          String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
          _builder.append(_firstUpper_1, "			");
          _builder.append("Package.eINSTANCE) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("return ");
          String _childrenGetterName_1 = this._tomMappingExtensions.getChildrenGetterName(pack_1);
          _builder.append(_childrenGetterName_1, "				");
          _builder.append(".INSTANCE;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("IChildrenGetter res = null;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(EClass superClass : eo.getAllSuperTypes()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("res = searchChildrenGetter(superClass);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(res!=null) {return res;}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("throw new RuntimeException(\"No children getter for\"+eo.toString());");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static interface IChildreGetter {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Object[] children(Object i);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      {
        for(final EPackage pack_2 : packages) {
          _builder.append(" ");
          CharSequence _ter = this.injchi.getter(map, pack_2);
          _builder.append(_ter, "");
          _builder.append(" ");
        }
      }
      _builder.newLineIfNotEmpty();
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
  
  public CharSequence setChildren(final Mapping map) {
    CharSequence _xblockexpression = null;
    {
      ArrayList<EPackage> _allPackages = this._tomMappingExtensions.getAllPackages(map);
      final ArrayList<EPackage> packages = _allPackages;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("@SupressWarnings(\"uncheked\")");
      _builder.newLine();
      _builder.append("public <T> T setChildren(T arg0, Object[] arg1) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (arg0 instanceof List) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// If object is a list then content of the original list has to be replaced");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("List<Object> list = (List<Object>) arg0;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("list.clear();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(int i = 0; i < arg1.length; i++) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("list.add(arg1[i]);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return arg0;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return (T) setter(arg0).set(arg0, arg1);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static IChildrenSetter setter(Object o){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("EObject eo = (EObject) o;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return searchChildrenSetter(eo.eClass());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} catch (RuntimeException e) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("throw new RuntimeException(\"No children setter for\"+o.toString()+\":\"+o.getClass().getSimpleName());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static IChildrenSetter searchChildrenSetter(EClass eo) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(eo != null) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("EPackage eContainer = (EPackage)eo.eContainer();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      {
        for(final EPackage pack : packages) {
          _builder.append("\t\t");
          _builder.append("if(eContainer == ");
          String _name = pack.getName();
          String _firstUpper = StringExtensions.toFirstUpper(_name);
          _builder.append(_firstUpper, "		");
          _builder.append("Package.eINSTANCE) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("return ");
          String _childrenGetterName = this._tomMappingExtensions.getChildrenGetterName(pack);
          _builder.append(_childrenGetterName, "			");
          _builder.append(".INSTANCE;");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("IChildrenSetter res = null;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(EClass superClass : eo.getEAllSuperTypes()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("res = searchChildrenSetter(superClass);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(res != null) {return res;}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("throw new RuntimeException(\"No children setter for\"+eo.toString());");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private static interface IChildrenSetter {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Object set(Object i, Objet[] children);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      {
        for(final EPackage pack_1 : packages) {
          _builder.append(" ");
          CharSequence _setter = this.injchi.setter(map, pack_1);
          _builder.append(_setter, "");
          _builder.append(" ");
        }
      }
      _builder.newLineIfNotEmpty();
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
}
