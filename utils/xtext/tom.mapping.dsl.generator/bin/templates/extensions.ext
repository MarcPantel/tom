import tom::mapping::model;
import org::eclipse::emf::ecore;


List[EReference] getDefaultParameters(EClass c, Mapping mapping):	
	c.EAllReferences.select(e|isParameterFeature(e,mapping));

List[FeatureParameter] getCustomParameters(ClassOperator c):
	c.parameters.select(e|isExplicitParameter(e));
	
List[SettedFeatureParameter] getSettedCustomParameters(ClassOperator c):
	c.parameters.select(e|SettedFeatureParameter.isInstance(e));

private Boolean isParameterFeature(EStructuralFeature f,Mapping mapping):
	true;
	
private Boolean isParameterFeature(EReference f,Mapping mapping):
	 f.derived==false 
	&& f.volatile==false 
	&& (f.containment|| f.EOpposite==null)
	&& (mapping.getTerminal(f.EReferenceType,false)!=null || mapping.getTerminal(f.EReferenceType,true)!=null);
	

private Boolean isExplicitParameter(FeatureParameter pf):
	true; 

private Boolean isExplicitParameter(SettedFeatureParameter pf):
	false; 
	
private Boolean isExplicitParameter(FeatureException pf):
	false; 
	
	
private List[EPackage] getAllSubPackages(EPackage p):
	p.ESubpackages.collect(e|getAllSubPackages(e)).flatten().add(p);
	
List[EPackage] getAllPackages(Mapping m):
	m.metamodelPackages.collect(e|getAllSubPackages(e)).flatten().select(e|isSelected(e,m));
	
Boolean isSelected(EPackage p, Mapping m):
	p.EClassifiers.select(e|EClass.isInstance(e)).select(e|m.getTerminal((EClass)e,false)!=null).size >0; 
	
	
String packageToPath(String s):
	s!=null ? s.replaceAll("\\.", "/"):"";
	

List[EPackage] getAllRootPackages(Mapping mapping):
	mapping.metamodelPackages;
	
Boolean isPrimitive(String type):
	type.compareTo("int")==0 || type.compareTo("long")==0 || type.compareTo("float")==0|| type.compareTo("double")==0 || type.compareTo("boolean")==0 || type.compareTo("char")==0;