«IMPORT tom::mapping::model»
«IMPORT org::eclipse::emf::ecore»
«EXTENSION templates::extensions»
«EXTENSION templates::naming»

«DEFINE main FOR Mapping-»
«EXPAND introspector FOR this»
«ENDDEFINE»

«DEFINE introspector FOR Mapping-»
«FILE packageToPath(prefix)+"/"+this.name.toFirstLower()+"/internal/"+this.name.toFirstUpper()+"Introspector.java"-»
package «getPackagePrefix(prefix)»«this.name.toFirstLower()».internal;



«PROTECT CSTART "/*" CEND "*/" ID "introspector_imports" »
//protected imports
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;

import tom.library.sl.Introspector;
«EXPAND Imports::importsWithUtils FOR this»
«ENDPROTECT»

/**
 * TOM introspector for «name».
 *
 * --Auto-generated by TOM mapping EMF generator--
 * 
 */
public class «name.toFirstUpper()»Introspector implements Introspector {
	«EXPAND getChildAt FOR this»
	«EXPAND getChildCount FOR this»
	«EXPAND getChildren FOR this»
	«EXPAND setChildren FOR this»
	«EXPAND setChildAt FOR this»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE getChildAt FOR Mapping»
	public Object getChildAt(Object o, int i) {
		return getChildren(o)[i];
	}
«ENDDEFINE»

«DEFINE getChildCount FOR Mapping»
	public int getChildCount(Object o) {
		return getChildren(o).length;
	}
«ENDDEFINE»

«DEFINE setChildAt FOR Mapping»
	public <T> T setChildAt(T o, int i, Object obj) {
		throw new RuntimeException("Not implemented");
	}
«ENDDEFINE»

«DEFINE getChildren FOR Mapping»
	«LET getAllPackages() AS packages»
	
	@SuppressWarnings("unchecked")
	public Object[] getChildren(Object arg0) {
		List<Object> l = new ArrayList<Object>();
		if (arg0 instanceof List) {
			// Children of a list are its content
			for (Object object : (List<Object>) arg0) {
				l.add(object);
			}
			return l.toArray();
		}
		return getter(arg0).children(arg0);
	}
	
	
	@deprecated
	private static IChildrenGetter old_getter(Object o){
		EObject eo = (EObject) o;
		«FOREACH packages AS package »
		if (eo.eClass().eContainer() == «package.name.toFirstUpper()»Package.eINSTANCE) {
			return «getChildrenGetterName(package)».INSTANCE;
		}
		«ENDFOREACH»
		throw new RuntimeException("No children getter for "+o.toString());
	}

	private static IChildrenGetter getter(Object o){
		EObject eo = (EObject) o;
		try {
			return searchChildrenGetter(eo.eClass());
		} catch (RuntimeException e) {
			throw new RuntimeException("No children getter for "+o.toString()+":"+o.getClass().getSimpleName());
		}
	}
	
	private static IChildrenGetter searchChildrenGetter(EClass eo){
		if(eo!=null) {
			EPackage eContainer = (EPackage)eo.eContainer();

			«FOREACH packages AS package »
			if (eContainer == «package.name.toFirstUpper()»Package.eINSTANCE) {
				return «getChildrenGetterName(package)».INSTANCE;
			}
			«ENDFOREACH»

			IChildrenGetter res =null;
			for (EClass superClass : eo.getEAllSuperTypes()) {
				res = searchChildrenGetter(superClass);
				if(res!=null) return res;
			}
		}
		throw new RuntimeException("No children getter for "+eo.toString());
	}
	
	
	
	private static interface IChildrenGetter {
		public Object[] children(Object i);
	}
	
	«FOREACH packages AS package -»«EXPAND templates::introspector::ChildrenGetter::getter(this) FOR package-»«ENDFOREACH-»
	«ENDLET»
«ENDDEFINE»

«DEFINE setChildren FOR Mapping»
	«LET getAllPackages() AS packages»
	
	@SuppressWarnings("unchecked")
	public <T> T setChildren(T arg0, Object[] arg1) {
		if (arg0 instanceof List) {
			// If object is a list then content of the original list has to be
			// replaced
			List<Object> list = (List<Object>) arg0;
			list.clear();
			for (int i = 0; i < arg1.length; i++) {
				list.add(arg1[i]);
			}
			return arg0;
		} else
			return (T) setter(arg0).set(arg0, arg1);
	}
	
	
	
	
	private static IChildrenSetter setter(Object o){
		EObject eo = (EObject) o;
		try {
			return searchChildrenSetter(eo.eClass());
		} catch (RuntimeException e) {
			throw new RuntimeException("No children setter for "+o.toString()+":"+o.getClass().getSimpleName());
		}
	}
	
	private static IChildrenSetter searchChildrenSetter(EClass eo){
		if(eo!=null) {
			EPackage eContainer = (EPackage)eo.eContainer();

			«FOREACH packages AS package »
			if (eContainer == «package.name.toFirstUpper()»Package.eINSTANCE) {
				return «getChildrenGetterName(package)».INSTANCE;
			}
			«ENDFOREACH»

			IChildrenSetter res =null;
			for (EClass superClass : eo.getEAllSuperTypes()) {
				res = searchChildrenSetter(superClass);
				if(res!=null) return res;
			}
		}
		throw new RuntimeException("No children setter for "+eo.toString());
	}
	
	private static interface IChildrenSetter {
		public Object set(Object i, Object[] children);
	}
	«FOREACH packages AS package -»«EXPAND templates::introspector::ChildrenSetter::setter(this) FOR package-»«ENDFOREACH-»
	«ENDLET»
«ENDDEFINE»

