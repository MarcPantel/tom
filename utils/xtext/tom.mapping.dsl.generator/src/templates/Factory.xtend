package templates

class Factory {
	
//«DEFINE main FOR Mapping-»
//«EXPAND TomFactory::main FOR this»
//«FILE packageToPath(prefix)+"/"+this.name.toFirstLower()+"/"+factoryName()+".java"-»
//package «getPackagePrefix(prefix)»«this.name.toFirstLower()»;
//
//import java.util.List;
//
//«PROTECT CSTART "/*" CEND "*/" ID this.name+"_user_factory_imports" »
////protected imports, you should add here required imports 
////that won't be removed after regeneration of the mapping code
//«EXPAND Imports::imports FOR this»
//«ENDPROTECT»
//
///**
// * User factory for «name».
// *
// * -- Generated by TOM mapping EMF generator --
// * 
// */
//public class «factoryName()» {
//
//
//«PROTECT CSTART "/*" CEND "*/" ID this.name+"_user_factory_instances" »
//«LET operators.typeSelect(ClassOperator).collect(e| e.class_.EPackage) AS packageList»
//	
//	«FOREACH packageList.intersect(packageList) AS package-»
//	public static «package.name.toFirstUpper()»Factory «package.name»Factory = «package.name.toFirstUpper()»Factory.eINSTANCE;
//	«ENDFOREACH»
//
//«ENDLET»
//«LET allDefaultOperators.collect(e|e.EPackage) AS packageList»
//
//	«FOREACH packageList.reject(e|packageList.select(f|e.name==f.name && e!=f)) AS package-»
//	public static «package.name.toFirstUpper()»Factory «package.name»Factory = «package.name.toFirstUpper()»Factory.eINSTANCE;
//	«ENDFOREACH»
//«ENDLET»
//	«ENDPROTECT»
//
//	
//	//User operators «operators» 
//	«FOREACH modules AS module-»
//	/**
//		 Module «module.name»
//	**/ 
//	«FOREACH module.operators AS op-»
//		// Operator «op.name»
//		«EXPAND operator(this) FOR op-»
//	«ENDFOREACH»
//	«ENDFOREACH»
//
//	/*
//	 * Default TOM operators for «name» mapping. Each class that has a terminal
//	 * type has also a default factory function.
//	 */
//	«FOREACH allDefaultOperators AS op»«EXPAND javaFactoryCreateDefaultOperator(this,op.name) FOR op»«ENDFOREACH»
//	
//	«PROTECT CSTART "/*" CEND "*/" ID this.name+"_mapping_user_custom_methods"+name »
//	/*
//	 * Custom factory functions that won't be removed at regeneration of mapping code.
//	 */
//	«ENDPROTECT»
//}
//«ENDFILE»
//«ENDDEFINE»
//
//«DEFINE operator(Mapping mapping) FOR Operator»
//«ENDDEFINE»
//
//«DEFINE operator(Mapping mapping) FOR ClassOperator»
//«IF this.parameters.size>0»
//«LET getCustomParameters(this) AS parameters»
//«EXPAND javaFactoryCreateOperatorWithParameters(parameters) FOR this-»
//«ENDLET»
//«ELSE-»
//«EXPAND javaFactoryCreateDefaultOperator(mapping,this.name) FOR this.class_»
//«ENDIF»
//«ENDDEFINE»
//
//«DEFINE javaFactoryCreateOperatorWithParameters(List[FeatureParameter] parameters) FOR ClassOperator»
//public static «this.class_.name» «name.toFirstLower()»(«FOREACH parameters AS p SEPARATOR ","-»«EXPAND tom::Parameters::javaFeatureParameter FOR p-»«ENDFOREACH»){
//	«this.class_.name» o = «this.class_.EPackage.name»Factory.create«this.class_.name.toFirstUpper()»();
//	«FOREACH parameters AS p-»
//	«EXPAND structureFeatureSetter FOR p.feature-»
//	«ENDFOREACH-»
//	«FOREACH getSettedCustomParameters() AS p-»
//	o.set«p.feature.name.toFirstUpper()»(«EXPAND tom::Operators::settedValue(p.feature) FOR p.value»);
//	«ENDFOREACH-»
//
//	return o;
//}
//«ENDDEFINE»
//
//«DEFINE javaFactoryCreateDefaultOperator(Mapping mapping,String name) FOR EClass»
//«LET getDefaultParameters(this,mapping) AS parameters»
//«IF !this.abstract && !this.interface»
//public static «this.name» «name.toFirstLower()»(«EXPAND tom::Operators::javaClassAttributes(mapping) FOR this»«FOREACH parameters AS param SEPARATOR ","»«EXPAND tom::Parameters::defaultJavaFeatureParameter FOR param»«ENDFOREACH»){
//	«this.name» o = «EPackage.name»Factory.create«this.name.toFirstUpper()»();
//	«FOREACH EAllAttributes AS attribute-»
//	«EXPAND structureFeatureSetter FOR attribute-»
//	«ENDFOREACH-»
//	«FOREACH parameters AS param-»
//	«EXPAND structureFeatureSetter FOR param-»
//	«ENDFOREACH-»	
//	return o;
//}
//«ENDIF»
//«ENDLET»
//«ENDDEFINE»
//
//«DEFINE structureFeatureSetter FOR EStructuralFeature-»
//«IF many-»
//«IF !this.unsettable»
//	for(int i=0;i<_«name».size();++i){
//		o.get«name.toFirstUpper()»().add(_«name».get(i));
//	}
//«ENDIF»
//«ELSE-»
//«IF !this.unsettable»
//	o.set«name.toFirstUpper()»(_«name»);
//«ENDIF»
//«ENDIF-»
//«ENDDEFINE»
//

	
	
}