«IMPORT tom::mapping::model»
«IMPORT org::eclipse::emf::ecore»

«EXTENSION templates::extensions»

«EXTENSION templates::naming»


«DEFINE main FOR Mapping-»
«FILE packageToPath(prefix)+"/"+this.name.toFirstLower()+"/internal/"+tomFactoryName()+".java"-»
package «getPackagePrefix(prefix)»«this.name.toFirstLower()».internal;

«PROTECT CSTART "/*" CEND "*/" ID this.name+"_tom_factory_imports" »
//protected imports, you should add here required imports that won't be removed after regeneration of the mapping code
import java.util.List;
«EXPAND Imports::imports FOR this»
«ENDPROTECT»

/**
 * Factory used by TOM for «name» mapping. 
 * It shouldn't be visible outside of the plugin.
 *
 * --Generated by TOM mapping EMF generator--
 * 
 */
public class «tomFactoryName()» {

«PROTECT CSTART "/*" CEND "*/" ID this.name+"_tom_factory_instances" »

«LET operators.typeSelect(ClassOperator).collect(e| e.class_.EPackage) AS packageList»
	
	«FOREACH packageList.reject(e|packageList.select(f|e.name==f.name && e!=f)) AS package-»
	public static «package.name.toFirstUpper()»Factory «package.name»Factory = «package.name.toFirstUpper()»Factory.eINSTANCE;
	«ENDFOREACH»

«ENDLET»
«LET allDefaultOperators.collect(e|e.EPackage) AS packageList»
	«FOREACH packageList.reject(e|packageList.select(f|e.name==f.name && e!=f)) AS package-»
	public static «package.name.toFirstUpper()»Factory «package.name»Factory = «package.name.toFirstUpper()»Factory.eINSTANCE;
	«ENDFOREACH»
«ENDLET»

«ENDPROTECT»
	

	//User operators «operators» 
	«FOREACH modules AS module-»
	/**
		 Module «module.name»
	**/ 
	«FOREACH module.operators AS op-»
		// Operator «op.name»
		«EXPAND operator(this) FOR op-»
	«ENDFOREACH»
	«ENDFOREACH»

	/*
	 * Default TOM operators for «name» mapping. Each class that has a terminal
	 * type has also a default create function.
	 */
	«
	FOREACH allDefaultOperators AS op»«
		IF !op.instanceClassName.contains("java.util.Map$Entry")»«
			EXPAND javaFactoryCreateDefaultOperator(this,op.name) FOR op»«
		ENDIF»«
	ENDFOREACH
	»
	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE operator(Mapping mapping) FOR Operator»
	// «this.eClass().name»
«ENDDEFINE»

«DEFINE operator(Mapping mapping) FOR ClassOperator»
«IF this.parameters.size>0»
«LET getCustomParameters(this) AS parameters»
«EXPAND javaFactoryCreateOperatorWithParameters(parameters,mapping) FOR this-»
«ENDLET»
«ELSE-» 
«EXPAND javaFactoryCreateDefaultOperator(mapping,this.name) FOR this.class_»
«ENDIF»
«ENDDEFINE»

«DEFINE javaFactoryCreateOperatorWithParameters(List[FeatureParameter] parameters,Mapping mapping) FOR ClassOperator»
// CreateOperatorWithParameters «name»
public static «this.class_.name» create«name.toFirstUpper()»(«FOREACH parameters AS p SEPARATOR ","-»«EXPAND typeOfParameter(mapping) FOR p.feature» _«p.feature.name»«ENDFOREACH»){
	«this.class_.name» o = «this.class_.EPackage.name»Factory.create«this.class_.name.toFirstUpper()»();
	«FOREACH parameters AS p-»
	«EXPAND structureFeatureSetter FOR p.feature-»
	«ENDFOREACH-»
	«FOREACH getSettedCustomParameters() AS p-»
	o.set«p.feature.name.toFirstUpper()»(«EXPAND tom::Operators::settedValue(p.feature) FOR p.value»);
	«ENDFOREACH-»

	return o;
}
«ENDDEFINE»

«DEFINE javaFactoryCreateDefaultOperator(Mapping mapping,String name) FOR EClass»
«LET getDefaultParameters(this,mapping) AS parameters»
// CreateDefaultOperator «name»
public static «this.name» create«name.toFirstUpper()»(«EXPAND tom::Operators::javaClassAttributes(mapping) FOR this»«FOREACH parameters AS p SEPARATOR ","»«EXPAND typeOfParameter(mapping) FOR p» _«p.name»«ENDFOREACH»){
	«this.name» o = «EPackage.name»Factory.create«this.name.toFirstUpper()»();
	«FOREACH EAllAttributes AS attribute-»
	«EXPAND structureFeatureSetter FOR attribute-»
	«ENDFOREACH-»
	«FOREACH parameters AS param-»
	«EXPAND structureFeatureSetter FOR param-»
	«ENDFOREACH-»	
	return o;
}
«ENDLET»
«ENDDEFINE»

«DEFINE structureFeatureSetter FOR EStructuralFeature-»
«IF many-»
	for(int i=0;i<_«name».size();++i){
		o.get«name.toFirstUpper()»().add(«EXPAND featureAccess FOR this».get(i));
	}
«ELSE-»
	o.set«name.toFirstUpper()»(«EXPAND featureAccess FOR this»);
«ENDIF-»
«ENDDEFINE»
 


«DEFINE featureAccess FOR EStructuralFeature»«IF EType.instanceTypeName==null»(«EType.name»)«ENDIF»_«name»«ENDDEFINE»

«DEFINE typeOfParameter(Mapping mapping) FOR EStructuralFeature»«ENDDEFINE»
«DEFINE typeOfParameter(Mapping mapping) FOR EReference-»«EXPAND terminalTypeName(mapping,this.many) FOR this.EType»«ENDDEFINE»
«DEFINE typeOfParameter(Mapping mapping) FOR EEnum»«name»«ENDDEFINE»
«DEFINE typeOfParameter(Mapping mapping) FOR EAttribute-»«EXPAND templates::tom::Parameters::primitiveType FOR this.EAttributeType»«ENDDEFINE»


«DEFINE terminalTypeName(Mapping mapping,boolean many) FOR EClassifier»
«IF many»List<«ENDIF»«name»«IF many»>«ENDIF»
«ENDDEFINE»

«DEFINE terminalTypeName(Mapping mapping,boolean many) FOR EClass»
«IF many»List<«ENDIF»«mapping.getTerminal(this,false).class_.name»«IF many»>«ENDIF»
«ENDDEFINE»

«DEFINE javaClassAttributes(Mapping mapping) FOR EClass-»
«FOREACH this.EAllAttributes AS att SEPARATOR ","-»«EXPAND typeOfParameter(mapping) FOR att» _«att.name»«ENDFOREACH»«IF this.EAllAttributes.size>0 && getDefaultParameters(mapping).size>0-»,«ENDIF-»
«ENDDEFINE»


