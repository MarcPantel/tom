module workflow.TomMappingGenerator

import org.eclipse.emf.mwe.utils.*

var targetDir = "xtend-gen" // original value "src-gen"
var fileEncoding = "utf-8"
//var modelPath = "/home/steven/workspace-demo-alma/eu.alma.frontend.matlab/src-tom/" // A deco
var tomPath = "src" // original value "src-tom"

Workflow {


	bean = StandaloneSetup {
		registerGeneratedEPackage = "tom.mapping.model.ModelPackage"
	}
	
	component = org.eclipse.xtext.mwe.Reader {
		// lookup all resources on the classpath
		// useJavaClassPath = true

		// or define search scope explicitly
		//path = modelPath // A deco

		// this class will be generated by the xtext generator 
		register = tom.mapping.dsl.TomMappingStandaloneSetup {}
		load = {
			slot = "tmaps"
			type = "Mapping"
			
		}
	}
		
	component = org.eclipse.xpand2.Generator {
		expand = "templates::Factory::main FOREACH tmaps"
		prSrcPaths = targetDir
		prDefaultExcludes = true
		outlet = {
			path = targetDir
			postprocessor = org.eclipse.xpand2.output.JavaBeautifier {
			}
		}
		
		fileEncoding = fileEncoding
	}
	

	component = org.eclipse.xpand2.Generator {
		expand = "templates::TomTemplate::main FOREACH tmaps"
		prSrcPaths = tomPath
		prDefaultExcludes = true
		outlet = {
			path = tomPath
			postprocessor = org.eclipse.xpand2.output.JavaBeautifier {
			}
		}
		
		fileEncoding = fileEncoding
	}
	
	component = org.eclipse.xpand2.Generator {
		expand = "templates::Introspector::main FOREACH tmaps"
		prSrcPaths = targetDir
		prDefaultExcludes = true
		outlet = {
			path = targetDir
			postprocessor = org.eclipse.xpand2.output.JavaBeautifier {
			}
		}
		
		fileEncoding = fileEncoding
	}
	
	component = org.eclipse.xpand2.Generator {
		expand = "templates::MappingCustomAccessors::main FOREACH tmaps"
		outlet = {
			path = targetDir
			postprocessor = org.eclipse.xpand2.output.JavaBeautifier {}
		}
		
		fileEncoding = fileEncoding
	}
}

