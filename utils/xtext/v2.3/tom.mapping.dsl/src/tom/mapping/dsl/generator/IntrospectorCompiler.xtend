// Licence
package tom.mapping.dsl.generator

import com.google.inject.Inject
import org.eclipse.xtext.generator.IFileSystemAccess
import model.Mapping
import tom.mapping.dsl.generator.introspector.ChildrenGetterSetter

class IntrospectorCompiler {
	
	extension TomMappingExtensions = new TomMappingExtensions()
	
	@Inject ImportsCompiler injim
	@Inject ChildrenGetterSetter injchi
	String prefix = "tom"
	
	def compile(Mapping map, IFileSystemAccess fsa) {
		fsa.generateFile(prefix+"/"+map.name.toFirstLower()+"/internal"+map.name.toFirstUpper()+"Instrospector.java", map.main());
	}
	
	
	def main(Mapping map) {
		map.introspector()
	}
	
	
	def introspector(Mapping map) {
		'''
		package «getPackagePrefix(prefix)»«map.name.toFirstLower()».internal;
		
		/* PROTECTED REGION ID("introspector_imports") ENABLED START */
		// protected imports
		import java.util.ArrayList;
		import java.util.HashSet
		import java.util.List
		import java.util.Set
		
		import org.eclipse.emf.common.util.EList;
		import org.eclipse.emf.ecore.EObject;
		import org.eclipse.emf.ecore.EStructuralFeature;
		
		import tom.library.sl.Introspector;
		«injim.importsWithUtils(map)»
		
		/* PROTECTED REGION END */
		
		/**
		* TOM introspector for «map.name».
		* -- Autogenerated by TOM mapping EMF genrator --
		*/
		
		public class «map.name.toFirstUpper()»Introspector implements Introspector {
			«map.getChildAt()»
			«map.getChildCount()»
			«map.getChildren()»
			«map.setChildren()»
			«map.setChildAt()»
		}
		'''
	}
	
	
	def getChildAt(Mapping map) {
		'''public Object getChildAt(Object o, int i) {
			return getChildren(o)[i];}'''
		}

	
	def getChildCount(Mapping map) {
		'''public int getChildCount(Object o) {
			return getChildren(o).length;
		}'''
	}
	
	
	def setChildAt(Mapping map){
		'''public <T> T setChildAt(T o, int i, Object obj) {
			throw new RuntimeException("Not implemented");
		}'''
	}
	
	
	def getChildren(Mapping map) {
		val packages = map.getAllPackages();
		
		'''
		@SuppressWarnings("uncheked")
		public Object[] getChildren(Object arg0) {
			List<Object> l = new ArrayList<Object>();
			if(arg0 instanceof List) {
				// Children of a list are its content
				for(Object object : (List<Object> arg0) {
					l.add(object);
				}
				return l.toArray();
			}
			return getter(arg0).children(arg0);
		}
		
		@deprecated
		private static IChildrenGetter old_getter(Object o) {
			EObject eo = (EObject) o;
			«FOR pack: packages»
				if(eo.eClass().eContainer() == «pack.name.toFirstUpper()»Package.eINSTANCE) {
					return «pack.getChildrenGetterName()».INSTANCE;
				}
			«ENDFOR»
			throw new RuntimeException("No children getter for "+o.toString());
		}
		
		private static IChildrenGetter getter(Object o) {
			EObject eo = (EObject) o;
			try{
				return searchChildrenGetter(eo.eClass());
			} catch (RuntimeException e) {
				throw new RuntimeException("No children getter for "+o.toString()+":"+o.getClass().getSimpleName());
			}
		}
		
		private static IChildrenGetter searchChildrenGetter(EClass eo) {
			if(eo != null) {
				EPackage eContainer = (EPackage)eo.eContainer();
				
				«FOR pack: packages» {
					if(eContainer == «pack.name.toFirstUpper()»Package.eINSTANCE) {
						return «pack.getChildrenGetterName()».INSTANCE;
					}
				«ENDFOR»
				
				IChildrenGetter res = null;
				for(EClass superClass : eo.getAllSuperTypes()) {
					res = searchChildrenGetter(superClass);
					if(res!=null) {return res;}
				}
			}
			throw new RuntimeException("No children getter for"+eo.toString());
		}
		
		private static interface IChildreGetter {
			public Object[] children(Object i);
		}
		
		«FOR pack: packages» «injchi.getter(map,pack)» «ENDFOR»
		'''
	}
	
	
	def setChildren(Mapping map) {
		val packages = map.getAllPackages();
		
		'''
		@SupressWarnings("uncheked")
		public <T> T setChildren(T arg0, Object[] arg1) {
			if (arg0 instanceof List) {
				// If object is a list then content of the original list has to be replaced
				List<Object> list = (List<Object>) arg0;
				list.clear();
				for(int i = 0; i < arg1.length; i++) {
					list.add(arg1[i]);
				}
				return arg0;
			} else {
				return (T) setter(arg0).set(arg0, arg1);
			}
		}
		
		private static IChildrenSetter setter(Object o){
			EObject eo = (EObject) o;
			try {
				return searchChildrenSetter(eo.eClass());
			} catch (RuntimeException e) {
				throw new RuntimeException("No children setter for"+o.toString()+":"+o.getClass().getSimpleName());
			}
		}
		
		private static IChildrenSetter searchChildrenSetter(EClass eo) {
			if(eo != null) {
				EPackage eContainer = (EPackage)eo.eContainer();
				
				«FOR pack: packages»
					if(eContainer == «pack.name.toFirstUpper()»Package.eINSTANCE) {
						return «pack.getChildrenGetterName()».INSTANCE;
					}
				«ENDFOR»
				
				IChildrenSetter res = null;
				for(EClass superClass : eo.getEAllSuperTypes()) {
					res = searchChildrenSetter(superClass);
					if(res != null) {return res;}
				}
			}
			throw new RuntimeException("No children setter for"+eo.toString());
		}
		
		private static interface IChildrenSetter {
			public Object set(Object i, Objet[] children);
		}
		
		«FOR pack: packages» «injchi.setter(map, pack)» «ENDFOR»
		'''
	}
	
}