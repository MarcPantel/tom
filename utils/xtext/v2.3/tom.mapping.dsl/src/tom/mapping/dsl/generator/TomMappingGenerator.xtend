/*
 * generated by Xtext
 */
package tom.mapping.dsl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import model.Mapping
import tom.mapping.dsl.generator.tom.TomTemplateCompiler
import tom.mapping.dsl.generator.tom.TomFactoryCompiler
import tom.mapping.dsl.generator.java.CustomOperatorsCompiler

import static extension org.eclipse.xtext.xbase.lib.IteratorExtensions.*

class TomMappingGenerator implements IGenerator {
	
	@Inject FactoryCompiler facCompiler
	@Inject TomFactoryCompiler tomFacCompiler
	@Inject TomTemplateCompiler tempCompiler
	@Inject IntrospectorCompiler introCompiler
	@Inject CustomOperatorsCompiler copCompiler
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) { // Compilation of the components of the resource one by one
		val mapping = resource.contents.get(0) as Mapping
		
		//for (mapping : resource.getContents.filter(typeof(Mapping))) {
		
		tomFacCompiler.compile(mapping,fsa)
		facCompiler.compile(mapping,fsa)
		tempCompiler.compile(mapping,fsa)
		introCompiler.compile(mapping,fsa)
		copCompiler.compile(mapping,fsa)
		
		//}
		
		}

}
