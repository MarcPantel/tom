/*
* generated by Xtext
*/

package tom.mapping.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TomMappingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTomMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_4_1_0 = (RuleCall)cImportsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTerminalsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Group cGroup_5_2_0 = (Group)cAlternatives_5_2.eContents().get(0);
		private final Group cGroup_5_2_0_0 = (Group)cGroup_5_2_0.eContents().get(0);
		private final Keyword cDefineKeyword_5_2_0_0_0 = (Keyword)cGroup_5_2_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_2_0_0_1 = (Keyword)cGroup_5_2_0_0.eContents().get(1);
		private final Assignment cTerminalsAssignment_5_2_0_0_2 = (Assignment)cGroup_5_2_0_0.eContents().get(2);
		private final RuleCall cTerminalsTerminalParserRuleCall_5_2_0_0_2_0 = (RuleCall)cTerminalsAssignment_5_2_0_0_2.eContents().get(0);
		private final Group cGroup_5_2_0_0_3 = (Group)cGroup_5_2_0_0.eContents().get(3);
		private final Keyword cCommaKeyword_5_2_0_0_3_0 = (Keyword)cGroup_5_2_0_0_3.eContents().get(0);
		private final Assignment cTerminalsAssignment_5_2_0_0_3_1 = (Assignment)cGroup_5_2_0_0_3.eContents().get(1);
		private final RuleCall cTerminalsTerminalParserRuleCall_5_2_0_0_3_1_0 = (RuleCall)cTerminalsAssignment_5_2_0_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2_0_0_4 = (Keyword)cGroup_5_2_0_0.eContents().get(4);
		private final Group cGroup_5_2_0_1 = (Group)cGroup_5_2_0.eContents().get(1);
		private final Keyword cUseKeyword_5_2_0_1_0 = (Keyword)cGroup_5_2_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_2_0_1_1 = (Keyword)cGroup_5_2_0_1.eContents().get(1);
		private final Assignment cExternalTerminalsAssignment_5_2_0_1_2 = (Assignment)cGroup_5_2_0_1.eContents().get(2);
		private final CrossReference cExternalTerminalsTerminalCrossReference_5_2_0_1_2_0 = (CrossReference)cExternalTerminalsAssignment_5_2_0_1_2.eContents().get(0);
		private final RuleCall cExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_2_0_1 = (RuleCall)cExternalTerminalsTerminalCrossReference_5_2_0_1_2_0.eContents().get(1);
		private final Group cGroup_5_2_0_1_3 = (Group)cGroup_5_2_0_1.eContents().get(3);
		private final Keyword cCommaKeyword_5_2_0_1_3_0 = (Keyword)cGroup_5_2_0_1_3.eContents().get(0);
		private final Assignment cExternalTerminalsAssignment_5_2_0_1_3_1 = (Assignment)cGroup_5_2_0_1_3.eContents().get(1);
		private final CrossReference cExternalTerminalsTerminalCrossReference_5_2_0_1_3_1_0 = (CrossReference)cExternalTerminalsAssignment_5_2_0_1_3_1.eContents().get(0);
		private final RuleCall cExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_3_1_0_1 = (RuleCall)cExternalTerminalsTerminalCrossReference_5_2_0_1_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_2_0_1_4 = (Keyword)cGroup_5_2_0_1.eContents().get(4);
		private final Group cGroup_5_2_1 = (Group)cAlternatives_5_2.eContents().get(1);
		private final Assignment cTerminalsAssignment_5_2_1_0 = (Assignment)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cTerminalsTerminalParserRuleCall_5_2_1_0_0 = (RuleCall)cTerminalsAssignment_5_2_1_0.eContents().get(0);
		private final Group cGroup_5_2_1_1 = (Group)cGroup_5_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_2_1_1_0 = (Keyword)cGroup_5_2_1_1.eContents().get(0);
		private final Assignment cTerminalsAssignment_5_2_1_1_1 = (Assignment)cGroup_5_2_1_1.eContents().get(1);
		private final RuleCall cTerminalsTerminalParserRuleCall_5_2_1_1_1_0 = (RuleCall)cTerminalsAssignment_5_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cOperatorsKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cOperatorsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cOperatorsOperatorParserRuleCall_6_0_2_0 = (RuleCall)cOperatorsAssignment_6_0_2.eContents().get(0);
		private final Group cGroup_6_0_3 = (Group)cGroup_6_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_6_0_3_0 = (Keyword)cGroup_6_0_3.eContents().get(0);
		private final Assignment cOperatorsAssignment_6_0_3_1 = (Assignment)cGroup_6_0_3.eContents().get(1);
		private final RuleCall cOperatorsOperatorParserRuleCall_6_0_3_1_0 = (RuleCall)cOperatorsAssignment_6_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_0_4 = (Keyword)cGroup_6_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6_0_5 = (Keyword)cGroup_6_0.eContents().get(5);
		private final Assignment cModulesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_6_1_0 = (RuleCall)cModulesAssignment_6_1.eContents().get(0);
		
		//Mapping:
		//	"TomMapping" name=ID ";" ("prefix" prefix=STRING ";")? ("import" imports+=Import ";")* ("terminals" "{" (("define" "{"
		//	terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{" externalTerminals+=[Terminal] (","
		//	externalTerminals+=[Terminal])* "}")? | terminals+=Terminal ("," terminals+=Terminal)*) "}")? ("operators" "{"
		//	operators+=Operator (";" operators+=Operator)* ";" "}" | modules+=Module)*;
		public ParserRule getRule() { return rule; }

		//"TomMapping" name=ID ";" ("prefix" prefix=STRING ";")? ("import" imports+=Import ";")* ("terminals" "{" (("define" "{"
		//terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{" externalTerminals+=[Terminal] (","
		//externalTerminals+=[Terminal])* "}")? | terminals+=Terminal ("," terminals+=Terminal)*) "}")? ("operators" "{"
		//operators+=Operator (";" operators+=Operator)* ";" "}" | modules+=Module)*
		public Group getGroup() { return cGroup; }

		//"TomMapping"
		public Keyword getTomMappingKeyword_0() { return cTomMappingKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//("prefix" prefix=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"prefix"
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }

		//prefix=STRING
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }

		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_3_1_0() { return cPrefixSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("import" imports+=Import ";")*
		public Group getGroup_4() { return cGroup_4; }

		//"import"
		public Keyword getImportKeyword_4_0() { return cImportKeyword_4_0; }

		//imports+=Import
		public Assignment getImportsAssignment_4_1() { return cImportsAssignment_4_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_1_0() { return cImportsImportParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//("terminals" "{" (("define" "{" terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{"
		//externalTerminals+=[Terminal] ("," externalTerminals+=[Terminal])* "}")? | terminals+=Terminal (","
		//terminals+=Terminal)*) "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"terminals"
		public Keyword getTerminalsKeyword_5_0() { return cTerminalsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//("define" "{" terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{" externalTerminals+=[Terminal] (","
		//externalTerminals+=[Terminal])* "}")? | terminals+=Terminal ("," terminals+=Terminal)*
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }

		//("define" "{" terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{" externalTerminals+=[Terminal] (","
		//externalTerminals+=[Terminal])* "}")?
		public Group getGroup_5_2_0() { return cGroup_5_2_0; }

		//("define" "{" terminals+=Terminal ("," terminals+=Terminal)* "}")?
		public Group getGroup_5_2_0_0() { return cGroup_5_2_0_0; }

		//"define"
		public Keyword getDefineKeyword_5_2_0_0_0() { return cDefineKeyword_5_2_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_2_0_0_1() { return cLeftCurlyBracketKeyword_5_2_0_0_1; }

		//terminals+=Terminal
		public Assignment getTerminalsAssignment_5_2_0_0_2() { return cTerminalsAssignment_5_2_0_0_2; }

		//Terminal
		public RuleCall getTerminalsTerminalParserRuleCall_5_2_0_0_2_0() { return cTerminalsTerminalParserRuleCall_5_2_0_0_2_0; }

		//("," terminals+=Terminal)*
		public Group getGroup_5_2_0_0_3() { return cGroup_5_2_0_0_3; }

		//","
		public Keyword getCommaKeyword_5_2_0_0_3_0() { return cCommaKeyword_5_2_0_0_3_0; }

		//terminals+=Terminal
		public Assignment getTerminalsAssignment_5_2_0_0_3_1() { return cTerminalsAssignment_5_2_0_0_3_1; }

		//Terminal
		public RuleCall getTerminalsTerminalParserRuleCall_5_2_0_0_3_1_0() { return cTerminalsTerminalParserRuleCall_5_2_0_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2_0_0_4() { return cRightCurlyBracketKeyword_5_2_0_0_4; }

		//("use" "{" externalTerminals+=[Terminal] ("," externalTerminals+=[Terminal])* "}")?
		public Group getGroup_5_2_0_1() { return cGroup_5_2_0_1; }

		//"use"
		public Keyword getUseKeyword_5_2_0_1_0() { return cUseKeyword_5_2_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_2_0_1_1() { return cLeftCurlyBracketKeyword_5_2_0_1_1; }

		//externalTerminals+=[Terminal]
		public Assignment getExternalTerminalsAssignment_5_2_0_1_2() { return cExternalTerminalsAssignment_5_2_0_1_2; }

		//[Terminal]
		public CrossReference getExternalTerminalsTerminalCrossReference_5_2_0_1_2_0() { return cExternalTerminalsTerminalCrossReference_5_2_0_1_2_0; }

		//ID
		public RuleCall getExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_2_0_1() { return cExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_2_0_1; }

		//("," externalTerminals+=[Terminal])*
		public Group getGroup_5_2_0_1_3() { return cGroup_5_2_0_1_3; }

		//","
		public Keyword getCommaKeyword_5_2_0_1_3_0() { return cCommaKeyword_5_2_0_1_3_0; }

		//externalTerminals+=[Terminal]
		public Assignment getExternalTerminalsAssignment_5_2_0_1_3_1() { return cExternalTerminalsAssignment_5_2_0_1_3_1; }

		//[Terminal]
		public CrossReference getExternalTerminalsTerminalCrossReference_5_2_0_1_3_1_0() { return cExternalTerminalsTerminalCrossReference_5_2_0_1_3_1_0; }

		//ID
		public RuleCall getExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_3_1_0_1() { return cExternalTerminalsTerminalIDTerminalRuleCall_5_2_0_1_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2_0_1_4() { return cRightCurlyBracketKeyword_5_2_0_1_4; }

		//terminals+=Terminal ("," terminals+=Terminal)*
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }

		//terminals+=Terminal
		public Assignment getTerminalsAssignment_5_2_1_0() { return cTerminalsAssignment_5_2_1_0; }

		//Terminal
		public RuleCall getTerminalsTerminalParserRuleCall_5_2_1_0_0() { return cTerminalsTerminalParserRuleCall_5_2_1_0_0; }

		//("," terminals+=Terminal)*
		public Group getGroup_5_2_1_1() { return cGroup_5_2_1_1; }

		//","
		public Keyword getCommaKeyword_5_2_1_1_0() { return cCommaKeyword_5_2_1_1_0; }

		//terminals+=Terminal
		public Assignment getTerminalsAssignment_5_2_1_1_1() { return cTerminalsAssignment_5_2_1_1_1; }

		//Terminal
		public RuleCall getTerminalsTerminalParserRuleCall_5_2_1_1_1_0() { return cTerminalsTerminalParserRuleCall_5_2_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//("operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}" | modules+=Module)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"operators"
		public Keyword getOperatorsKeyword_6_0_0() { return cOperatorsKeyword_6_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_1() { return cLeftCurlyBracketKeyword_6_0_1; }

		//operators+=Operator
		public Assignment getOperatorsAssignment_6_0_2() { return cOperatorsAssignment_6_0_2; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_6_0_2_0() { return cOperatorsOperatorParserRuleCall_6_0_2_0; }

		//(";" operators+=Operator)*
		public Group getGroup_6_0_3() { return cGroup_6_0_3; }

		//";"
		public Keyword getSemicolonKeyword_6_0_3_0() { return cSemicolonKeyword_6_0_3_0; }

		//operators+=Operator
		public Assignment getOperatorsAssignment_6_0_3_1() { return cOperatorsAssignment_6_0_3_1; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_6_0_3_1_0() { return cOperatorsOperatorParserRuleCall_6_0_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_0_4() { return cSemicolonKeyword_6_0_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_5() { return cRightCurlyBracketKeyword_6_0_5; }

		//modules+=Module
		public Assignment getModulesAssignment_6_1() { return cModulesAssignment_6_1; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_6_1_0() { return cModulesModuleParserRuleCall_6_1_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperatorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOperatorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorsOperatorParserRuleCall_3_2_0 = (RuleCall)cOperatorsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cOperatorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cOperatorsOperatorParserRuleCall_3_3_1_0 = (RuleCall)cOperatorsAssignment_3_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Module:
		//	"module" name=ID "{" ("operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}")? "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID "{" ("operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}")? "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"operators"
		public Keyword getOperatorsKeyword_3_0() { return cOperatorsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//operators+=Operator
		public Assignment getOperatorsAssignment_3_2() { return cOperatorsAssignment_3_2; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_3_2_0() { return cOperatorsOperatorParserRuleCall_3_2_0; }

		//(";" operators+=Operator)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//";"
		public Keyword getSemicolonKeyword_3_3_0() { return cSemicolonKeyword_3_3_0; }

		//operators+=Operator
		public Assignment getOperatorsAssignment_3_3_1() { return cOperatorsAssignment_3_3_1; }

		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_3_3_1_0() { return cOperatorsOperatorParserRuleCall_3_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_5() { return cRightCurlyBracketKeyword_3_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassOperatorWithExceptionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUserOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAliasOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operator:
		//	ClassOperator | ClassOperatorWithExceptions | UserOperator | AliasOperator;
		public ParserRule getRule() { return rule; }

		//ClassOperator | ClassOperatorWithExceptions | UserOperator | AliasOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassOperator
		public RuleCall getClassOperatorParserRuleCall_0() { return cClassOperatorParserRuleCall_0; }

		//ClassOperatorWithExceptions
		public RuleCall getClassOperatorWithExceptionsParserRuleCall_1() { return cClassOperatorWithExceptionsParserRuleCall_1; }

		//UserOperator
		public RuleCall getUserOperatorParserRuleCall_2() { return cUserOperatorParserRuleCall_2; }

		//AliasOperator
		public RuleCall getAliasOperatorParserRuleCall_3() { return cAliasOperatorParserRuleCall_3; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Assignment cImportURIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_0 = (RuleCall)cImportURIAssignment.eContents().get(0);
		
		//Import:
		//	importURI=STRING;
		public ParserRule getRule() { return rule; }

		//importURI=STRING
		public Assignment getImportURIAssignment() { return cImportURIAssignment; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_0() { return cImportURISTRINGTerminalRuleCall_0; }
	}

	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Terminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cClassEClassCrossReference_2_0 = (CrossReference)cClassAssignment_2.eContents().get(0);
		private final RuleCall cClassEClassFQNParserRuleCall_2_0_1 = (RuleCall)cClassEClassCrossReference_2_0.eContents().get(1);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		
		//Terminal:
		//	name=ID ":" class=[ecore::EClass|FQN] many?="[]"?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" class=[ecore::EClass|FQN] many?="[]"?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//class=[ecore::EClass|FQN]
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }

		//[ecore::EClass|FQN]
		public CrossReference getClassEClassCrossReference_2_0() { return cClassEClassCrossReference_2_0; }

		//FQN
		public RuleCall getClassEClassFQNParserRuleCall_2_0_1() { return cClassEClassFQNParserRuleCall_2_0_1; }

		//many?="[]"?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
	}

	public class AliasOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOpOperatorCrossReference_3_0 = (CrossReference)cOpAssignment_3.eContents().get(0);
		private final RuleCall cOpOperatorIDTerminalRuleCall_3_0_1 = (RuleCall)cOpOperatorCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesAliasNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNodesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNodesAliasNodeParserRuleCall_6_1_0 = (RuleCall)cNodesAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AliasOperator:
		//	"alias" name=ID "::" op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")";
		public ParserRule getRule() { return rule; }

		//"alias" name=ID "::" op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")"
		public Group getGroup() { return cGroup; }

		//"alias"
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//op=[Operator]
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }

		//[Operator]
		public CrossReference getOpOperatorCrossReference_3_0() { return cOpOperatorCrossReference_3_0; }

		//ID
		public RuleCall getOpOperatorIDTerminalRuleCall_3_0_1() { return cOpOperatorIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//nodes+=AliasNode
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }

		//AliasNode
		public RuleCall getNodesAliasNodeParserRuleCall_5_0() { return cNodesAliasNodeParserRuleCall_5_0; }

		//("," nodes+=AliasNode)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//nodes+=AliasNode
		public Assignment getNodesAssignment_6_1() { return cNodesAssignment_6_1; }

		//AliasNode
		public RuleCall getNodesAliasNodeParserRuleCall_6_1_0() { return cNodesAliasNodeParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AliasNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperatorNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AliasNode:
		//	FeatureNode | OperatorNode;
		public ParserRule getRule() { return rule; }

		//FeatureNode | OperatorNode
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureNode
		public RuleCall getFeatureNodeParserRuleCall_0() { return cFeatureNodeParserRuleCall_0; }

		//OperatorNode
		public RuleCall getOperatorNodeParserRuleCall_1() { return cOperatorNodeParserRuleCall_1; }
	}

	public class FeatureNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureNode");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_0 = (RuleCall)cFeatureAssignment.eContents().get(0);
		
		//FeatureNode:
		//	feature=ID;
		public ParserRule getRule() { return rule; }

		//feature=ID
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_0() { return cFeatureIDTerminalRuleCall_0; }
	}

	public class OperatorNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOpOperatorCrossReference_0_0 = (CrossReference)cOpAssignment_0.eContents().get(0);
		private final RuleCall cOpOperatorIDTerminalRuleCall_0_0_1 = (RuleCall)cOpOperatorCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesAliasNodeParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNodesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNodesAliasNodeParserRuleCall_3_1_0 = (RuleCall)cNodesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperatorNode:
		//	op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")";
		public ParserRule getRule() { return rule; }

		//op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")"
		public Group getGroup() { return cGroup; }

		//op=[Operator]
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//[Operator]
		public CrossReference getOpOperatorCrossReference_0_0() { return cOpOperatorCrossReference_0_0; }

		//ID
		public RuleCall getOpOperatorIDTerminalRuleCall_0_0_1() { return cOpOperatorIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nodes+=AliasNode
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//AliasNode
		public RuleCall getNodesAliasNodeParserRuleCall_2_0() { return cNodesAliasNodeParserRuleCall_2_0; }

		//("," nodes+=AliasNode)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//nodes+=AliasNode
		public Assignment getNodesAssignment_3_1() { return cNodesAssignment_3_1; }

		//AliasNode
		public RuleCall getNodesAliasNodeParserRuleCall_3_1_0() { return cNodesAliasNodeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ClassOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassEClassCrossReference_3_0 = (CrossReference)cClassAssignment_3.eContents().get(0);
		private final RuleCall cClassEClassFQNParserRuleCall_3_0_1 = (RuleCall)cClassEClassCrossReference_3_0.eContents().get(1);
		
		//ClassOperator:
		//	"op" name=ID "::" class=[ecore::EClass|FQN];
		public ParserRule getRule() { return rule; }

		//"op" name=ID "::" class=[ecore::EClass|FQN]
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//class=[ecore::EClass|FQN]
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }

		//[ecore::EClass|FQN]
		public CrossReference getClassEClassCrossReference_3_0() { return cClassEClassCrossReference_3_0; }

		//FQN
		public RuleCall getClassEClassFQNParserRuleCall_3_0_1() { return cClassEClassFQNParserRuleCall_3_0_1; }
	}

	public class ClassOperatorWithExceptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOperatorWithExceptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassEClassCrossReference_3_0 = (CrossReference)cClassAssignment_3.eContents().get(0);
		private final RuleCall cClassEClassFQNParserRuleCall_3_0_1 = (RuleCall)cClassEClassCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersFeatureParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersFeatureParameterParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassOperatorWithExceptions returns ClassOperator:
		//	"op" name=ID "::" class=[ecore::EClass|FQN] "(" parameters+=FeatureParameter ("," parameters+=FeatureParameter)* ")";
		public ParserRule getRule() { return rule; }

		//"op" name=ID "::" class=[ecore::EClass|FQN] "(" parameters+=FeatureParameter ("," parameters+=FeatureParameter)* ")"
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//class=[ecore::EClass|FQN]
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }

		//[ecore::EClass|FQN]
		public CrossReference getClassEClassCrossReference_3_0() { return cClassEClassCrossReference_3_0; }

		//FQN
		public RuleCall getClassEClassFQNParserRuleCall_3_0_1() { return cClassEClassFQNParserRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//parameters+=FeatureParameter
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//FeatureParameter
		public RuleCall getParametersFeatureParameterParserRuleCall_5_0() { return cParametersFeatureParameterParserRuleCall_5_0; }

		//("," parameters+=FeatureParameter)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//parameters+=FeatureParameter
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }

		//FeatureParameter
		public RuleCall getParametersFeatureParameterParserRuleCall_6_1_0() { return cParametersFeatureParameterParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class UserOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeTerminalCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeTerminalIDTerminalRuleCall_7_0_1 = (RuleCall)cTypeTerminalCrossReference_7_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAccessorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAccessorsAccessorParserRuleCall_9_0 = (RuleCall)cAccessorsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAccessorsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAccessorsAccessorParserRuleCall_10_1_0 = (RuleCall)cAccessorsAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cMakeKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cMakeAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cMakeSTRINGTerminalRuleCall_14_0 = (RuleCall)cMakeAssignment_14.eContents().get(0);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cIs_fsymKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTestAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTestSTRINGTerminalRuleCall_18_0 = (RuleCall)cTestAssignment_18.eContents().get(0);
		private final Keyword cSemicolonKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//UserOperator:
		//	"op" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" "::" type=[Terminal] "{" accessors+=Accessor
		//	(";" accessors+=Accessor)* ";" "make" "=" make=STRING ";" "is_fsym" "=" test=STRING ";" "}";
		public ParserRule getRule() { return rule; }

		//"op" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" "::" type=[Terminal] "{" accessors+=Accessor
		//(";" accessors+=Accessor)* ";" "make" "=" make=STRING ";" "is_fsym" "=" test=STRING ";" "}"
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0() { return cParametersParameterParserRuleCall_3_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"::"
		public Keyword getColonColonKeyword_6() { return cColonColonKeyword_6; }

		//type=[Terminal]
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//[Terminal]
		public CrossReference getTypeTerminalCrossReference_7_0() { return cTypeTerminalCrossReference_7_0; }

		//ID
		public RuleCall getTypeTerminalIDTerminalRuleCall_7_0_1() { return cTypeTerminalIDTerminalRuleCall_7_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//accessors+=Accessor
		public Assignment getAccessorsAssignment_9() { return cAccessorsAssignment_9; }

		//Accessor
		public RuleCall getAccessorsAccessorParserRuleCall_9_0() { return cAccessorsAccessorParserRuleCall_9_0; }

		//(";" accessors+=Accessor)*
		public Group getGroup_10() { return cGroup_10; }

		//";"
		public Keyword getSemicolonKeyword_10_0() { return cSemicolonKeyword_10_0; }

		//accessors+=Accessor
		public Assignment getAccessorsAssignment_10_1() { return cAccessorsAssignment_10_1; }

		//Accessor
		public RuleCall getAccessorsAccessorParserRuleCall_10_1_0() { return cAccessorsAccessorParserRuleCall_10_1_0; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }

		//"make"
		public Keyword getMakeKeyword_12() { return cMakeKeyword_12; }

		//"="
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }

		//make=STRING
		public Assignment getMakeAssignment_14() { return cMakeAssignment_14; }

		//STRING
		public RuleCall getMakeSTRINGTerminalRuleCall_14_0() { return cMakeSTRINGTerminalRuleCall_14_0; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }

		//"is_fsym"
		public Keyword getIs_fsymKeyword_16() { return cIs_fsymKeyword_16; }

		//"="
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }

		//test=STRING
		public Assignment getTestAssignment_18() { return cTestAssignment_18; }

		//STRING
		public RuleCall getTestSTRINGTerminalRuleCall_18_0() { return cTestSTRINGTerminalRuleCall_18_0; }

		//";"
		public Keyword getSemicolonKeyword_19() { return cSemicolonKeyword_19; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTerminalCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTerminalIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTerminalCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=[Terminal] name=EString;
		public ParserRule getRule() { return rule; }

		//type=[Terminal] name=EString
		public Group getGroup() { return cGroup; }

		//type=[Terminal]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Terminal]
		public CrossReference getTypeTerminalCrossReference_0_0() { return cTypeTerminalCrossReference_0_0; }

		//ID
		public RuleCall getTypeTerminalIDTerminalRuleCall_0_0_1() { return cTypeTerminalIDTerminalRuleCall_0_0_1; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class AccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Accessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSlotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSlotParameterCrossReference_1_0 = (CrossReference)cSlotAssignment_1.eContents().get(0);
		private final RuleCall cSlotParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cSlotParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJavaSTRINGTerminalRuleCall_3_0 = (RuleCall)cJavaAssignment_3.eContents().get(0);
		
		//Accessor:
		//	"slot" slot=[Parameter] "=" java=STRING;
		public ParserRule getRule() { return rule; }

		//"slot" slot=[Parameter] "=" java=STRING
		public Group getGroup() { return cGroup; }

		//"slot"
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }

		//slot=[Parameter]
		public Assignment getSlotAssignment_1() { return cSlotAssignment_1; }

		//[Parameter]
		public CrossReference getSlotParameterCrossReference_1_0() { return cSlotParameterCrossReference_1_0; }

		//ID
		public RuleCall getSlotParameterIDTerminalRuleCall_1_0_1() { return cSlotParameterIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//java=STRING
		public Assignment getJavaAssignment_3() { return cJavaAssignment_3; }

		//STRING
		public RuleCall getJavaSTRINGTerminalRuleCall_3_0() { return cJavaSTRINGTerminalRuleCall_3_0; }
	}

	public class FeatureExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIgnoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_0.eContents().get(1);
		
		//FeatureException:
		//	"ignore" feature=[ecore::EStructuralFeature];
		public ParserRule getRule() { return rule; }

		//"ignore" feature=[ecore::EStructuralFeature]
		public Group getGroup() { return cGroup; }

		//"ignore"
		public Keyword getIgnoreKeyword_0() { return cIgnoreKeyword_0; }

		//feature=[ecore::EStructuralFeature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_0() { return cFeatureEStructuralFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_1_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class FeatureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final RuleCall cFeatureExceptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSettedFeatureParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeatureParameter:
		//	feature=[ecore::EStructuralFeature] | FeatureException | SettedFeatureParameter;
		public ParserRule getRule() { return rule; }

		//feature=[ecore::EStructuralFeature] | FeatureException | SettedFeatureParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//feature=[ecore::EStructuralFeature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[ecore::EStructuralFeature]
		public CrossReference getFeatureEStructuralFeatureCrossReference_0_0() { return cFeatureEStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//FeatureException
		public RuleCall getFeatureExceptionParserRuleCall_1() { return cFeatureExceptionParserRuleCall_1; }

		//SettedFeatureParameter
		public RuleCall getSettedFeatureParameterParserRuleCall_2() { return cSettedFeatureParameterParserRuleCall_2; }
	}

	public class SettedFeatureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SettedFeatureParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSettedValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SettedFeatureParameter:
		//	feature=[ecore::EStructuralFeature] "=" value=SettedValue;
		public ParserRule getRule() { return rule; }

		//feature=[ecore::EStructuralFeature] "=" value=SettedValue
		public Group getGroup() { return cGroup; }

		//feature=[ecore::EStructuralFeature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[ecore::EStructuralFeature]
		public CrossReference getFeatureEStructuralFeatureCrossReference_0_0() { return cFeatureEStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=SettedValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SettedValue
		public RuleCall getValueSettedValueParserRuleCall_2_0() { return cValueSettedValueParserRuleCall_2_0; }
	}

	public class SettedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SettedValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJavaCodeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SettedValue:
		//	JavaCodeValue | LiteralValue;
		public ParserRule getRule() { return rule; }

		//JavaCodeValue | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//JavaCodeValue
		public RuleCall getJavaCodeValueParserRuleCall_0() { return cJavaCodeValueParserRuleCall_0; }

		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}

	public class JavaCodeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaCodeValue");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaSTRINGTerminalRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//JavaCodeValue:
		//	java=STRING;
		public ParserRule getRule() { return rule; }

		//java=STRING
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//STRING
		public RuleCall getJavaSTRINGTerminalRuleCall_0() { return cJavaSTRINGTerminalRuleCall_0; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cLiteralEEnumLiteralCrossReference_0 = (CrossReference)cLiteralAssignment.eContents().get(0);
		private final RuleCall cLiteralEEnumLiteralFQNParserRuleCall_0_1 = (RuleCall)cLiteralEEnumLiteralCrossReference_0.eContents().get(1);
		
		//LiteralValue returns EnumLiteralValue:
		//	literal=[ecore::EEnumLiteral|FQN];
		public ParserRule getRule() { return rule; }

		//literal=[ecore::EEnumLiteral|FQN]
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//[ecore::EEnumLiteral|FQN]
		public CrossReference getLiteralEEnumLiteralCrossReference_0() { return cLiteralEEnumLiteralCrossReference_0; }

		//FQN
		public RuleCall getLiteralEEnumLiteralFQNParserRuleCall_0_1() { return cLiteralEEnumLiteralFQNParserRuleCall_0_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private MappingElements pMapping;
	private ModuleElements pModule;
	private OperatorElements pOperator;
	private ImportElements pImport;
	private TerminalElements pTerminal;
	private AliasOperatorElements pAliasOperator;
	private AliasNodeElements pAliasNode;
	private FeatureNodeElements pFeatureNode;
	private OperatorNodeElements pOperatorNode;
	private ClassOperatorElements pClassOperator;
	private ClassOperatorWithExceptionsElements pClassOperatorWithExceptions;
	private UserOperatorElements pUserOperator;
	private ParameterElements pParameter;
	private AccessorElements pAccessor;
	private FeatureExceptionElements pFeatureException;
	private FeatureParameterElements pFeatureParameter;
	private SettedFeatureParameterElements pSettedFeatureParameter;
	private SettedValueElements pSettedValue;
	private JavaCodeValueElements pJavaCodeValue;
	private LiteralValueElements pLiteralValue;
	private EStringElements pEString;
	private EBooleanElements pEBoolean;
	private EIntElements pEInt;
	private FQNElements pFQN;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TomMappingGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mapping:
	//	"TomMapping" name=ID ";" ("prefix" prefix=STRING ";")? ("import" imports+=Import ";")* ("terminals" "{" (("define" "{"
	//	terminals+=Terminal ("," terminals+=Terminal)* "}")? ("use" "{" externalTerminals+=[Terminal] (","
	//	externalTerminals+=[Terminal])* "}")? | terminals+=Terminal ("," terminals+=Terminal)*) "}")? ("operators" "{"
	//	operators+=Operator (";" operators+=Operator)* ";" "}" | modules+=Module)*;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//Module:
	//	"module" name=ID "{" ("operators" "{" operators+=Operator (";" operators+=Operator)* ";" "}")? "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Operator:
	//	ClassOperator | ClassOperatorWithExceptions | UserOperator | AliasOperator;
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Import:
	//	importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Terminal:
	//	name=ID ":" class=[ecore::EClass|FQN] many?="[]"?;
	public TerminalElements getTerminalAccess() {
		return (pTerminal != null) ? pTerminal : (pTerminal = new TerminalElements());
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}

	//AliasOperator:
	//	"alias" name=ID "::" op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")";
	public AliasOperatorElements getAliasOperatorAccess() {
		return (pAliasOperator != null) ? pAliasOperator : (pAliasOperator = new AliasOperatorElements());
	}
	
	public ParserRule getAliasOperatorRule() {
		return getAliasOperatorAccess().getRule();
	}

	//AliasNode:
	//	FeatureNode | OperatorNode;
	public AliasNodeElements getAliasNodeAccess() {
		return (pAliasNode != null) ? pAliasNode : (pAliasNode = new AliasNodeElements());
	}
	
	public ParserRule getAliasNodeRule() {
		return getAliasNodeAccess().getRule();
	}

	//FeatureNode:
	//	feature=ID;
	public FeatureNodeElements getFeatureNodeAccess() {
		return (pFeatureNode != null) ? pFeatureNode : (pFeatureNode = new FeatureNodeElements());
	}
	
	public ParserRule getFeatureNodeRule() {
		return getFeatureNodeAccess().getRule();
	}

	//OperatorNode:
	//	op=[Operator] "(" nodes+=AliasNode ("," nodes+=AliasNode)* ")";
	public OperatorNodeElements getOperatorNodeAccess() {
		return (pOperatorNode != null) ? pOperatorNode : (pOperatorNode = new OperatorNodeElements());
	}
	
	public ParserRule getOperatorNodeRule() {
		return getOperatorNodeAccess().getRule();
	}

	//ClassOperator:
	//	"op" name=ID "::" class=[ecore::EClass|FQN];
	public ClassOperatorElements getClassOperatorAccess() {
		return (pClassOperator != null) ? pClassOperator : (pClassOperator = new ClassOperatorElements());
	}
	
	public ParserRule getClassOperatorRule() {
		return getClassOperatorAccess().getRule();
	}

	//ClassOperatorWithExceptions returns ClassOperator:
	//	"op" name=ID "::" class=[ecore::EClass|FQN] "(" parameters+=FeatureParameter ("," parameters+=FeatureParameter)* ")";
	public ClassOperatorWithExceptionsElements getClassOperatorWithExceptionsAccess() {
		return (pClassOperatorWithExceptions != null) ? pClassOperatorWithExceptions : (pClassOperatorWithExceptions = new ClassOperatorWithExceptionsElements());
	}
	
	public ParserRule getClassOperatorWithExceptionsRule() {
		return getClassOperatorWithExceptionsAccess().getRule();
	}

	//UserOperator:
	//	"op" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" "::" type=[Terminal] "{" accessors+=Accessor
	//	(";" accessors+=Accessor)* ";" "make" "=" make=STRING ";" "is_fsym" "=" test=STRING ";" "}";
	public UserOperatorElements getUserOperatorAccess() {
		return (pUserOperator != null) ? pUserOperator : (pUserOperator = new UserOperatorElements());
	}
	
	public ParserRule getUserOperatorRule() {
		return getUserOperatorAccess().getRule();
	}

	//Parameter:
	//	type=[Terminal] name=EString;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Accessor:
	//	"slot" slot=[Parameter] "=" java=STRING;
	public AccessorElements getAccessorAccess() {
		return (pAccessor != null) ? pAccessor : (pAccessor = new AccessorElements());
	}
	
	public ParserRule getAccessorRule() {
		return getAccessorAccess().getRule();
	}

	//FeatureException:
	//	"ignore" feature=[ecore::EStructuralFeature];
	public FeatureExceptionElements getFeatureExceptionAccess() {
		return (pFeatureException != null) ? pFeatureException : (pFeatureException = new FeatureExceptionElements());
	}
	
	public ParserRule getFeatureExceptionRule() {
		return getFeatureExceptionAccess().getRule();
	}

	//FeatureParameter:
	//	feature=[ecore::EStructuralFeature] | FeatureException | SettedFeatureParameter;
	public FeatureParameterElements getFeatureParameterAccess() {
		return (pFeatureParameter != null) ? pFeatureParameter : (pFeatureParameter = new FeatureParameterElements());
	}
	
	public ParserRule getFeatureParameterRule() {
		return getFeatureParameterAccess().getRule();
	}

	//SettedFeatureParameter:
	//	feature=[ecore::EStructuralFeature] "=" value=SettedValue;
	public SettedFeatureParameterElements getSettedFeatureParameterAccess() {
		return (pSettedFeatureParameter != null) ? pSettedFeatureParameter : (pSettedFeatureParameter = new SettedFeatureParameterElements());
	}
	
	public ParserRule getSettedFeatureParameterRule() {
		return getSettedFeatureParameterAccess().getRule();
	}

	//SettedValue:
	//	JavaCodeValue | LiteralValue;
	public SettedValueElements getSettedValueAccess() {
		return (pSettedValue != null) ? pSettedValue : (pSettedValue = new SettedValueElements());
	}
	
	public ParserRule getSettedValueRule() {
		return getSettedValueAccess().getRule();
	}

	//JavaCodeValue:
	//	java=STRING;
	public JavaCodeValueElements getJavaCodeValueAccess() {
		return (pJavaCodeValue != null) ? pJavaCodeValue : (pJavaCodeValue = new JavaCodeValueElements());
	}
	
	public ParserRule getJavaCodeValueRule() {
		return getJavaCodeValueAccess().getRule();
	}

	//LiteralValue returns EnumLiteralValue:
	//	literal=[ecore::EEnumLiteral|FQN];
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//FQN returns ecore::EString:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
