grammar tom.mapping.dsl.TomMapping with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "tom.mapping.model" 

Mapping returns Mapping:
'TomMapping' name=ID ';'
('prefix' prefix=STRING ';')?

		('import' imports+=Import ';')*
		('terminals' '{' 
			(
				(
					('define' '{' terminals+=Terminal ( "," terminals+=Terminal)*  '}' )?
					('use' '{' externalTerminals+=[Terminal] ( "," externalTerminals+=[Terminal])* '}' )?
				) 
				|
				(
					terminals+=Terminal ( "," terminals+=Terminal)* 
				)
			)
		'}'
		)?
		
		(
			('operators' '{' operators+=Operator ( ";" operators+=Operator)* ';' '}')
			|
			( modules+=Module )
		)*
;  

Module returns Module:
	'module' name=ID '{'  
		('operators' '{' operators+=Operator ( ";" operators+=Operator)* ';' '}' )?
	'}'
; 

Operator returns Operator:
	ClassOperator | ClassOperatorWithExceptions| UserOperator | AliasOperator;

Import returns Import:
	importURI=STRING
;

Terminal returns Terminal:
	name=ID':'class=[ecore::EClass|FQN](many?='[]')?
;

AliasOperator :
	'alias' name=ID '::' op=[Operator] '('
		nodes+=AliasNode ( ',' nodes+=AliasNode)*
	')'
	
;

AliasNode : FeatureNode | OperatorNode ;

FeatureNode :
		feature=ID; 	

OperatorNode :
		op=[Operator] '('
		nodes+=AliasNode ( "," nodes+=AliasNode)*
	')'	
;


ClassOperator returns ClassOperator:
	'op' name=ID '::' class=[ecore::EClass|FQN]
;

ClassOperatorWithExceptions returns ClassOperator:
	'op' name=ID '::' class=[ecore::EClass|FQN] '('
		parameters+=FeatureParameter ( "," parameters+=FeatureParameter)*
	')'
;

UserOperator returns UserOperator:
	'op' name=ID '(' parameters+=Parameter ( "," parameters+=Parameter)* ')' '::' type=[Terminal] '{'
		accessors+=Accessor ( ";" accessors+=Accessor)* ';'
		'make''=' make=STRING ';'
		'is_fsym''=' test=STRING ';'
	'}'
;

Parameter returns Parameter:
	type=[Terminal] 
	name=EString
;

Accessor returns Accessor:
	'slot' slot=[Parameter]'='java=STRING
;

FeatureException returns FeatureException:
	'ignore' feature=[ecore::EStructuralFeature]
;

FeatureParameter returns FeatureParameter:
	feature=[ecore::EStructuralFeature] | FeatureException | SettedFeatureParameter 
;

SettedFeatureParameter returns SettedFeatureParameter:
	feature=[ecore::EStructuralFeature] '=' value=SettedValue
;

SettedValue returns SettedValue:
	JavaCodeValue | LiteralValue
;

JavaCodeValue returns JavaCodeValue: 
	java=STRING
;

LiteralValue returns EnumLiteralValue: 
	literal=[ecore::EEnumLiteral|FQN]
;

EString returns ecore::EString:
	STRING | ID; 


EBoolean returns ecore::EBoolean:
	'true' | 'false';



EInt returns ecore::EInt:
	'-'? INT;
	
FQN returns ecore::EString:
    ID ("." ID)*
;

