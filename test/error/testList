////////////////////
TYPETERM DECLARATION
////////////////////
Grammar:
	%typeterm typeName {
		implement	     { ... }
		get_fun_sym(var)     { ... }
		cmp_fun_sym(var,var) { ... }
		get_subterm(var,var) { ... }
		[equals(var,var)     { ... }]
	}
Test:
	JTypeTerm.t
	  line 66: Multiple definition of Symbol `type9`
	  line 55: Arguments must be linear in macro-function `equals`: Variable `t1` is repeated
	  line 45: Arguments must be linear in macro-function `cmp_fun_sym`: Variable `s1` is repeated
	  line 38: Repeated macro-function `get_fun_sym`
	  line 22: Missing macro-function(s) [ get_fun_sym,  cmp_fun_sym,  get_subterm ]
	  line 15: Missing macro-function(s) [ get_subterm ]
	  line 8: Missing macro-function(s) [ cmp_fun_sym ]
	  line 1: Missing macro-function(s) [ get_fun_sym ]	Missing functions : [get_fun_sym]
	  Tom SyntaxChecker:  Encountered 8 errors and 0 warnings.
Missing `equals` is OK

////////////////////
TYPEARRAY DECLARATION
////////////////////
Grammar:
	%typearray typeName {
		implement            { ... }
		get_fun_sym(var)     { ... }
		cmp_fun_sym(var,var) { ... }
		get_element(var,var) { ... }
		get_size(var)        { ... }
		[equals(var,var)     { ... }]
	}
Test:
	JTypeArray.t
	  line 77: Multiple definition of Symbol `type9`
	  line 66: Repeated macro-function `get_element`
	  line 54: Arguments must be linear in macro-function `equals`: Variable `l1` is repeated
	  line 44: Arguments must be linear in macro-function `cmp_fun_sym`: Variable `t1` is repeated
	  line 25: Missing macro-function(s) [ get_size ]
	  line 17: Missing macro-function(s) [ get_element ]
	  line 9: Missing macro-function(s) [ cmp_fun_sym ]
	  line 1: Missing macro-function(s) [ get_fun_sym ]
	  Tom SyntaxChecker:  Encountered 8 errors and 0 warnings.
Missing `equals` is OK

////////////////////
TYPELIST DECLARATION
////////////////////
Grammar:
	%typelist typeName {
		implement	     { ... }
		get_fun_sym(var)     { ... }
		cmp_fun_sym(var,var) { ... }
		get_head(var)    { ... }
		get_tail(var)    { ... }
		is_empty(var)    { ... }
	}
Test:
	JTypeList.t
	  line 95: Multiple definition of Symbol `type10`
	  line 81: Repeated macro-function `get_head`
	  line 69: Arguments must be linear in macro-function `equals`: Variable `l1` is repeated
	  line 58: Arguments must be linear in macro-function `cmp_fun_sym`: Variable `t1` is repeated
	  line 37: Missing macro-function(s) [ is_empty ]
	  line 28: Missing macro-function(s) [ get_tail ]
	  line 19: Missing macro-function(s) [ get_head ]
	  line 10: Missing macro-function(s) [ cmp_fun_sym ]
	  line 1: Missing macro-function(s) [ get_fun_sym ]
	  Tom SyntaxChecker:  Encountered 9 errors and 0 warnings.
Missing `equals` is OK

////////////////////
OPERATOR DECLARATION
////////////////////
Grammar:
	%op typeName opName [(slotName:type, type,... )] {
		fsym             { ... }
		[is_fsym(var)     { ... }
		 make(var, ...)   { ... }
		 get_slot(type,t) { ... }
		]
	}
Test:
     JOperator1.t
	line 68: Multiple definition of Symbol `op6`
	line 50: Bad number of arguments in make(...) macro-function: 1 arguments found but 2 expected in symbol definition
	line 44: Arguments must be linear in macro-function `make`: Variable `t1` is repeated
	line 38: Repeated macro-function `make`
	line 29: Slot 2 of symbol `op2bis` declaration has an unknown type: `wrongtype`
	line 24: Slot 1 of symbol `op2` declaration has an unknown type: `wrongtype`
	line 18: Symbol `op1` has an unknown return type: `wrongtype`
	Tom SyntaxChecker:  Encountered 6 errors and 0 warnings.
Operator defined before type8 declaration is OK

     JOperator2.t
       line 23: Warning: GetSlot declaration `get_slot(type,...)` is repeated. Consider only the first one!!
       line 14: Warning: Incompatible GetSlot declaration: `badslot` does not appears in symbol declaration
       line 10: Warning: GetSlot declaration `get_slot(slot2,...)` is missing. Generic getsubterm macro will be used!!
       Tom Parser:  Encountered 3 warnings.

     JOperator3.t
	line 10: Repeated slot `s0` in symbol declaration
	Tom Parser:  Encountered 1 errors and 0 warnings.
}

////////////////////
OPARRAY DECLARATION
////////////////////
Grammar {
	%oparray typeName opName(typeName*) {
		fsym                  { ... }
		make_empty(var)       { ... }
		make_append(var, var) { ... }
	}
}

Test {
     JOpArrayRef.t
     JOpArray1.t
	Operator 'concArray' has an unknown return type
	Slot position 1 of operator 'concArray' has an unknown type
	Missing functions : [make_empty]
	Missing functions : [make_append]
	Arguments must be linear in declaration 'make_append'
	Repeated macro-functions 'make_append'
}

////////////////////
OPLIST DECLARATION
////////////////////
Grammar {
	%oplist typeName opName(typeName*) {
		fsym                  { ... }
		make_empty(var)       { ... }
		make_insert(var, var) { ... }
	}
}

Test {
     JOpListRef.t
     JOpList1.t
	Operator 'concList' has an unknown return type
	Slot position 1 of operator 'concList' has an unknown type
	Missing functions : [make_empty]
	Missing functions : [make_insert]
	Arguments must be linear in declaration 'make_insert'
	Repeated macro-functions 'make_empty'
}


////////////////////
MATCH DECLARATION
////////////////////
Grammar {
	%match(typeName var, typeName var, ...) {
		term, term, ...-> { ... }
	}
}

Test {
     JMatchRef.t
     JMatch1.t
	Variable 't' has an unknown type 'type' (Bad type name in signature)
	Repeated variable name in Match signature
	Bad number of arguments: 2 argument(s) required but 1 found in %match structure
	Bad number of arguments: 2 argument(s) required but 3 found in %match structure
	Single list variable x* : Not allowed in %match structure
	Single list variable _* : Not allowed in %match structure
	For slot 2 :Type 'type1' required but Type 'type0' found

}

////////////////////
RULE DECLARATION
////////////////////
Grammar {
	%rule {
	  term -> term [where term := term] [if term == term]
	  ... 
	}
}

Test {
     JRuleRef.t
     JRule1.t
	 `_`: Impossible in rule left hand side
	  `X*`: Impossible in rule left hand side
	  `_*`: Impossible in rule left hand side
	  `XML Construct a`: Impossible in rule left hand side
	  `Disjunction`: Impossible in rule left hand side
	  `Disjunction`: Impossible in rule left hand side}
	  Rule head symbol `op2` has no `make` method: It is necessary to define one!!
	  Rule head symbol name `op1` expected, but `op2` found
	  Bad number of arguments for symbol `op1`: 2 argument(s) required but 0 found
	  The symbol `op3` has type `type2` but type `type1` was required
	  The symbol `op2` has type `type1` but type `type2` was required
	  `_`: Impossible in rule right hand side
	  `_*`: Impossible in rule right hand side
	  `X*`: Impossible in rule right hand side
	  `XML construct a`: Impossible in rule right hand side
	  `Disjunction`: Impossible in rule right hand side
	   `_`: Impossible in rule right hand side
	   Bad number of arguments for symbol `op1`: 2 argument(s) required but 1 found
	   Bad number of arguments for symbol `op1`: 2 argument(s) required but 1 found
	   `op1[...]`: Impossible in rule right hand side
	
////////////////////
RECORD DECLARATION
////////////////////
JRecord1.t
	Slot Name `badslot` is not correct for symbol `op`. Possible slot names are : [slot1, slot2]
	[] are not allowed on lists or arrays, see `concList1`
	Same slot names can not be used several times in symbol `op`: Repeated slot Name : `slot1`
	Unknown symbol opp

////////////////////
APPL DECLARATION
////////////////////
JAppl1.t
	Bad number of arguments for symbol `op2`: 2 argument(s) required but 1 found
	Bad number of arguments for symbol `op2`: 2 argument(s) required but 3 found
	Too many list symbols with returned type `type2`:  concList2 concList3
	OK: Only one list symbol with returned type `type1`
	Not able to found a list symbol of type: `type0
	The symbol op1 has type `type1` but type `type2` was required (x2)
	_* (&& X*) is not allowed in non list symbol
	OK: variable opVariable
	Unknown symbol opErro (line78)
	Unknown symbol opError2 "opError2()"
	Warning: Ambiguous symbol name. Is`op0` a variable or a constructor? Prefer `op0`() if it is a constructor
	The symbol op0 has type `type0` but type `type2` was required
	The symbol op0 has type `type0` but type `type2` was required
	The symbol op0 has type `type0` but type `type2` was required "nested Appl"

////////////////////
VARIABLE DECLARATION
////////////////////
JVariable1.t
	Variables are correctly extracted	
	Unknown variable(s) [a] used on right part of %rule
	Bad variable type for 'x': it has both type 'type2' and 'type1'
