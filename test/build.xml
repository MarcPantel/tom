<?xml version="1.0" encoding="UTF-8"?>
<project name="Tests for Tom" default="junit" basedir=".">
  <description>
    Build script for Tom unit tests
  </description>
  
  <property name="test.src"   location="."/>
  <property name="test.gen"   location="gen"/>
  <property name="test.build" location="build"/>
  <property name="test.report" location="report"/>

  <!-- <property name="optimize" value="off"/> -->
  <!-- <property name="verbose" value="on"/> -->

  <property name="javacSource"    value="1.5"/>
  <property name="javacTarget"    value="1.5"/>
  <property environment="env"/>
  <property name="tom.home"        value="${env.TOM_HOME}"/>
  <property name="tom.common.path" value="${tom.home}/lib"/>
  <import   file="${tom.common.path}/tom-common.xml"/>

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${tom.home}/lib/compiletime/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <target name="init" depends="tom.init">
    <fail unless="tom.home" message="Property tom.home has to be defined"/>
  </target>

  <target name="prepare">
    <mkdir dir="${test.gen}"/>
    <mkdir dir="${test.build}"/>
    <mkdir dir="${test.report}"/>
  </target>

<target name="build.nt" depends="init,prepare">
    <gom.preset srcdir="${test.src}"
                package="sl"
                termpointer="true"
                withCongruenceStrategies="true"
                destdir="${test.gen}">
         <include name="sl/testsl.gom"/>
         <exclude name="**/error/**"/>
      <exclude name="**/regress/**"/>
    </gom.preset>
    <gom.preset srcdir="${test.src}"
                destdir="${test.gen}">
         <include name="**/*.gom"/>
         <exclude name="sl/testsl.gom"/>
         <exclude name="**/error/**"/>
      <exclude name="**/regress/**"/>
    </gom.preset>
    <tom.preset srcdir="${test.src}"
                multithread="${multithread}"
                destdir="${test.gen}">
      <!-- Exclude tests written in C -->
      <exclude name="cfib1.t"/>
      <exclude name="loulou.t"/>
      
      <!-- Exclude tests called with a special option -->
      <exclude name="Record.t"/>
      <exclude name="TestRecord.t"/>
      <exclude name="TestOptimizer.t"/>
      <exclude name="sl/TestHandWrittenMapping.t"/>
      <exclude name="sl/IntrospectorBehaviour.t"/>

      <!-- Why to exclude these tests?? -->
      <exclude name="**/error/**"/>
      <exclude name="**/rule/**"/>
      <exclude name="**/regress/**"/>

      <!-- Exclude while PreGenerator is not fixed -->
      <exclude name="TestConstraintCombination.t"/>

    </tom.preset>
    <tom.preset srcdir="${test.src}"
                destdir="${test.gen}"
                options="--optimize">
    	<include name="TestOptimizer.t"/>
    </tom.preset>
   <tom.preset srcdir="${test.src}"
                destdir="${test.gen}"
                options="--genIntrospector">
      <include name="sl/TestHandWrittenMapping.t"/>
      <include name="sl/IntrospectorBehaviour.t"/>
    </tom.preset>
    <javac.preset destdir="${test.build}" fork="true">
      <src path="${test.src}"/>
      <src path="${test.gen}"/>
      <exclude name="**/error/**"/>
      <exclude name="**/rule/**"/>
      <exclude name="**/regress/**"/>
      <exclude name="gen/**"/>
    </javac.preset>
    <copy todir="${test.build}">
      <fileset dir="${test.src}">
        <include name="*/*.xml"/>
        <include name="*/*.dtd"/>
      </fileset>
    </copy>
  </target>

  <target name="build" depends="init,prepare">
    <gom.preset srcdir="${test.src}"
                package="sl"
                termpointer="true"
                withCongruenceStrategies="true"
                destdir="${test.gen}">
      <include name="sl/testsl.gom"/>
      <exclude name="**/error/**"/>
      <exclude name="**/regress/**"/>
    </gom.preset>
    <gom.preset srcdir="${test.src}"
                destdir="${test.gen}">
         <include name="**/*.gom"/>
         <exclude name="sl/testsl.gom"/>
         <exclude name="**/error/**"/>
      <exclude name="**/regress/**"/>
    </gom.preset>
    <tom.preset srcdir="${test.src}"
                multithread="${multithread}"
                destdir="${test.gen}">
                <!-- options="-i-newparser" -->
      <!-- Exclude tests written in C -->
      <exclude name="cfib1.t"/>
      <exclude name="loulou.t"/>
      
      <!-- Exclude tests called with a special option -->
      <exclude name="Record.t"/>
      <exclude name="TestRecord.t"/>
      <exclude name="TestOptimizer.t"/>
      <exclude name="sl/TestHandWrittenMapping.t"/>
      <exclude name="sl/IntrospectorBehaviour.t"/>

      <!-- Why to exclude these tests?? -->
      <exclude name="**/error/**"/>
      <exclude name="**/rule/**"/>
      <exclude name="**/regress/**"/>

      <!-- Exclude while PreGenerator is not fixed -->
      <exclude name="TestConstraintCombination.t"/>

    </tom.preset>

    <!-- 
         <tom.preset srcdir="${test.src}"
                multithread="${multithread}"
                destdir="${test.gen}"
                options="- -lazyType">
      <include name="Record.t"/>
      <include name="TestRecord.t"/>
      <exclude name="**/error/**"/>
      <exclude name="**/rule/**"/>
      <exclude name="**/regress/**"/>
    </tom.preset> 
    -->

    <tom.preset srcdir="${test.src}"
                destdir="${test.gen}"
                options="--optimize">
    	<include name="TestOptimizer.t"/>
    </tom.preset>
    <tom.preset srcdir="${test.src}"
      destdir="${test.gen}"
      options="--genIntrospector">
      <include name="sl/TestHandWrittenMapping.t"/>
      <include name="sl/IntrospectorBehaviour.t"/>
    </tom.preset>
    <javac.preset destdir="${test.build}" fork="true">
      <src path="${test.src}"/>
      <src path="${test.gen}"/>
      <exclude name="**/error/**"/>
      <exclude name="**/rule/**"/>
      <exclude name="**/regress/**"/>
      <exclude name="gen/**"/>
    </javac.preset>
    <copy todir="${test.build}">
      <fileset dir="${test.src}">
        <include name="*/*.xml"/>
        <include name="*/*.dtd"/>
      </fileset>
    </copy>
  </target>

  <target name="junit" description="Runs junit acceptance tests"
          depends="build">
    <tom.junit printsummary="on"
               fork="on"
               dir="${test.build}"
               haltonfailure="false"
               failureproperty="tests.failed"
               showoutput="true">
      <classpath>
        <path refid="tom.classpath"/>
        <pathelement location="${test.build}"/>
      </classpath>
      <batchtest todir="${test.report}">
        <fileset dir="${test.gen}">
          <include name="**/Test*.java"/>
        </fileset>
        <fileset dir="${test.src}">
          <include name="**/Test*.java"/>
          <exclude name="gen/**/*"/>
        </fileset>
      </batchtest>
      <formatter type="xml" if="test.xmlreport"/>
    </tom.junit>
    <fail if="tests.failed">
      ****************************************************
      ****************************************************
      One or more tests failed. Check the output...
      ****************************************************
      ****************************************************
    </fail>
  </target>

  <target name="junit.nt" description="Runs junit acceptance tests with new
    typer"
          depends="build.nt">
    <tom.junit printsummary="on"
               fork="on"
               dir="${test.build}"
               haltonfailure="false"
               failureproperty="tests.failed"
               showoutput="true">
      <classpath>
        <path refid="tom.classpath"/>
        <pathelement location="${test.build}"/>
      </classpath>
      <batchtest todir="${test.report}">
        <fileset dir="${test.gen}">
          <include name="**/Test*.java"/>
        </fileset>
        <fileset dir="${test.src}">
          <include name="**/Test*.java"/>
          <exclude name="gen/**/*"/>
        </fileset>
      </batchtest>
      <formatter type="xml" if="test.xmlreport"/>
    </tom.junit>
    <fail if="tests.failed">
      ****************************************************
      ****************************************************
      One or more tests failed. Check the output...
      ****************************************************
      ****************************************************
    </fail>
  </target>

  <target name="report" description="Create acceptance tests report"
          depends="junit">
      <junitreport todir="${test.report}">
        <fileset dir="${test.report}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${test.report}/html"/>
      </junitreport>
    </target>

    <target name="regress"
      description="Run regression tests">
      <path id="regresstests">
        <fileset dir="regress" casesensitive="yes">
          <include name="**/*.t"/>
          <exclude name="**/BadBackquote.t"/>
          <exclude name="**/TestNonLinearity.t"/>
          <exclude name="**/UndeclaredExplicityType.t"/>
        </fileset>
      </path>
      <pathconvert targetos="unix" 
        property="regresstests" 
        refid="regresstests">
        <map from="${test.src}/" to=""/>
      </pathconvert>
      <foreach target="regress.compile" param="foreach.file" list="${regresstests}" delimiter=":"/>

      <path id="regresstests.nt">
        <fileset dir="regress" casesensitive="yes">
          <include name="**/BadBackquote.t"/>
          <include name="**/TestNonLinearity.t"/>
          <include name="**/UndeclaredExplicityType.t"/>
        </fileset>
      </path>
      <pathconvert targetos="unix" 
        property="regresstests.nt" 
        refid="regresstests.nt">
        <map from="${test.src}/" to=""/>
      </pathconvert>
      <foreach target="regress.compile.nt" param="foreach.file" list="${regresstests.nt}" delimiter=":"/>
    </target>

    <target name="regress.compile" depends="init,prepare">
      <property name="tom.platform.error.formatter" value="tom.platform.RegressFormatter"/>
      <property name="tom.platform.error.logfile" value="${test.gen}/regress.log"/>
      <trycatch> 
        <try>
          <tom.preset 
            srcdir="${test.src}"
            destdir="${test.gen}">
            <include name="${foreach.file}"/>
          </tom.preset>
          <delete file="${test.gen}/regress.log"/>
        </try>
        <catch>
         <condition property="files.match">
            <filesmatch file1="${test.gen}/regress.log" file2="${foreach.file}.nrt"/>
          </condition>
          <fail unless="files.match">The non-regression ${foreach.file} fails: the error message does not correspond to ${foreach.file}.nrt</fail>
        </catch>
        <finally>
          <available file="${test.gen}/regress.log" property="hasCompilationError" />
          <fail message="The non-regression ${foreach.file} fails: there was no compilation error" unless="hasCompilationError" />
        </finally>
      </trycatch>
    </target>

    <target name="regress.compile.nt" depends="init,prepare">
      <property name="tom.platform.error.formatter" value="tom.platform.RegressFormatter"/>
      <property name="tom.platform.error.logfile" value="${test.gen}/regress.log"/>
      <trycatch> 
        <try>
          <tom.preset 
            srcdir="${test.src}"
            destdir="${test.gen}"
            options="--newtyper">
            <include name="${foreach.file}"/>
          </tom.preset>
          <delete file="${test.gen}/regress.log"/>
        </try>
        <catch>
         <condition property="files.match">
            <filesmatch file1="${test.gen}/regress.log" file2="${foreach.file}.nrt"/>
          </condition>
          <fail unless="files.match">The non-regression ${foreach.file} fails: the error message does not correspond to ${foreach.file}.nrt</fail>
        </catch>
        <finally>
          <available file="${test.gen}/regress.log" property="hasCompilationError" />
          <fail message="The non-regression ${foreach.file} fails: there was no compilation error" unless="hasCompilationError" />
        </finally>
      </trycatch>
    </target>

  <target name="clean">
    <delete dir="${test.gen}"/>
    <delete dir="${test.build}"/>
    <delete dir="${test.report}"/>
  </target>

</project>
