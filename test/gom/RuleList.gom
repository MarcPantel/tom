module gom.RuleList
abstract syntax
Term = a() | b() | c() | d()
     | f(x:Term)
     | g(l:List)

List = conc(Term*)

Bool = True()
     | False()
     | And(Bool*)

module RuleList:rules() {
  f(a()) -> f(b())
  conc(a()) -> conc(b())
  conc(x,a()) -> conc(x,b())
  //Warning for the following rule!!!
  //In the generated code C1 can be instanciated with the complete list,
  //and thus the construction can loop (only when the optimizer is desactivated in Gom)
  conc(C1*,f(b()),C2*) -> conc(C1*,f(c()),C2*)
  g(conc(C1*,f(c()),C2*)) -> g(conc(C1*,f(d()),C2*))
}
