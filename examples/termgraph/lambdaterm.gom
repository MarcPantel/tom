module lambdaterm
imports String
abstract syntax
LambdaTerm =
     | app(arg1:LambdaTerm,arg2:LambdaTerm)
     | abs(var:LambdaTerm,arg:LambdaTerm)
     | abs3(var:LambdaTerm,arg:LambdaTerm)
     | abs2(arg:LambdaTerm)
     | var(name:String)


abs:block() {
%include { mustrategy.tom }
 
%typeterm Position{
  implement {Position}
}

%strategy ToDeBruinj(var:LambdaTerm) extends Identity(){
  visit LambdaTerm{
    v@var[] -> {
      if(`v.equals(var)){
        return `posLambdaTerm(getPosition().depth()+1);
      }
    }
  }
}

}

abs:make(var,arg) {
  termgraph.lambdaterm.types.LambdaTerm newarg =(termgraph.lambdaterm.types.LambdaTerm)`TopDown(ToDeBruinj(var)).apply(arg);
  if(true){
  return `abs2(newarg); 
  }
}


