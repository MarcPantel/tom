module term
imports String int
abstract syntax
Term = a() | b() | c() | d()
     | f(arg1:Term)
     | g(arg1:Term, arg2:Term)
     | labTerm(label:String,term:Term)
     | refTerm(label:String)
     | posTerm(int*)
     | expTerm(term:Term)

expTerm:make(term){
  Term termWithPos = expand(term);
  //to avoid unaccessible real_make statement
  if(! termWithPos.equals(term)){
    return termWithPos;
  }
  if(termWithPos.equals(term)){
    return term;
  }
}

expTerm:import{
import termgraph.term.*;
import termgraph.term.types.*;
import tom.library.strategy.mutraveler.*;
import java.util.HashMap;
}

expTerm:block{
  %include{java/util/HashMap.tom}
  %include{java/mustrategy.tom}

  %strategy Collectlabels(tableMin:HashMap,tableRef:HashMap) extends `Identity() {
    visit Term{
     labTerm[label=label,term=term]-> {
        tableRef.put(`label,`term);
        if(!tableMin.containsKey(`label) || getPosition().compare(tableMin.get(`label))==-1){
          tableMin.put(`label,getPosition());
        }
      }
      refTerm[label=label] -> {
        if(!tableMin.containsKey(`label) || getPosition().compare(tableMin.get(`label))==-1){
          tableMin.put(`label,getPosition());
        }
      }
    }
  }

  %strategy Replacelabels(tableMin:HashMap,tableRef:HashMap) extends `Identity() {
    visit Term{

      refTerm[label=label] -> {
        if (!tableRef.containsKey(`label)) throw new RuntimeException("The label "+`label+" is not referenced");
        if(getPosition().equals(tableMin.get(`label))){
          return (Term) tableRef.get(`label);
        }
        else{ 
          RelativePosition pos = 
          RelativePosition.make(getPosition(),(Position) tableMin.get(`label));
          Term ref = `posTerm();
          int[] array = pos.toArray();
          for(int i=0;i<pos.depth();i++){
            ref = `posTerm(ref*,array[i]);
          }
          return ref; 
        }
      }
      labTerm[label=label] -> {
        if (!tableRef.containsKey(`label)) throw new RuntimeException("The label "+`label+" is not referenced");
        if(getPosition().equals(tableMin.get(`label))){
          return (Term) tableRef.get(`label);
        }
        else{ 
          RelativePosition pos = 
          RelativePosition.make(getPosition(),(Position) tableMin.get(`label));
          Term ref = `posTerm();
          int[] array = pos.toArray();
          for(int i=0;i<pos.depth();i++){
            ref = `posTerm(ref*,array[i]);
          }
          return ref; 
        }
      }
    }
  }

  public static Term expand(Term t){
    HashMap tableMin = new HashMap();
    HashMap tableRef = new HashMap();
    return (Term) `Sequence(RepeatId(TopDown(Collectlabels(tableMin,tableRef))),TopDown(Replacelabels(tableMin,tableRef))).apply(t);
  }
}

posTerm:interface{
  tom.library.strategy.mutraveler.MuReference
}
