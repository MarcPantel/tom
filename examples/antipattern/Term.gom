module Term    
imports String 
abstract syntax
Term = Variable(name:String)
     | Appl(name:String, args:TermList)
     | ApplCons(name:String, args:TermList, cons:ConstraintList)
     | Anti(pattern:Term)
     | TermDiff(term1:Term, term2:Term)
     | GenericGroundTerm()         

TermList = concTerm(Term*)

Constraint = True()
			| LessThan(objectToCompare:Term, objectToCompareTo:Term)
			| GreaterThan(objectToCompare:Term, objectToCompareTo:Term)
			| InList(objectToCompare:Term, list:TermList)	
			| Neg(c:Constraint)
			| Match(pattern:Term, subject:Term)
			| And(cl:ConstraintList)
			| Or(cl:ConstraintList)
			| SymbolOf(groundTerm:Term, symName:String)
			| Equal(term1:Term, term2:Term)
			
ConstraintList = concConstraint(Constraint*)
