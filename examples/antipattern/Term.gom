module Term    
imports String int
abstract syntax
Term = Variable(name:String)
     | Appl(name:String, args:TermList)
     | ApplCons(name:String, args:TermList, cons:ConstraintList)
     | Anti(pattern:Term)
     | TermDiff(term1:Term, term2:Term)
     | GenericGroundTerm(termName:String)         
     | Subterm(nr:int,groundTerm:Term)
 	 | SymbolOf(groundTerm:Term)
 	 | FalseTerm()

TermList = concTerm(Term*)

Constraint = True()
			| False()
			| LessThan(objectToCompare:Term, objectToCompareTo:Term)
			| GreaterThan(objectToCompare:Term, objectToCompareTo:Term)
			| InList(objectToCompare:Term, list:TermList)	
			| Neg(c:Constraint)
			| Match(pattern:Term, subject:Term)
			| And(cl:ConstraintList)
			| Or(cl:ConstraintList)
			| Equal(pattern:Term, genTerm:Term)
			| NEqual(pattern:Term, genTerm:Term)
			| Exists(var:Term,cons:Constraint)
			| ForAll(var:Term,cons:Constraint)
			
ConstraintList = concConstraint(Constraint*)