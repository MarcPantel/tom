/*
 * Copyright (c) 2004-2006, INRIA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the INRIA nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**********
 - ne pas matcher les afun mais directement des strings ? (sûrement non)

 cf code : 
  - comment gérer les exception ? (on peut pas pour l'instant)

************/

  %include { string.tom }
  %include { int.tom }
  %include { boolean.tom }


  %typeterm ATerm {
    implement { ATerm }
    equals(t1, t2) { t1 == t2}
  }
    
  %typeterm ATermList {
    implement { ATermList }
    equals(t1, t2) { t1 == t2}
  }
  
  %typeterm AFun {
    implement { AFun }
    equals(t1, t2) { t1 == t2 }
  }


    /* ------ operators ----------- */


   /** ATermPlaceholder **/

  %op ATerm ATermPlaceholder(type: ATerm ) {
    is_fsym(t) { t instanceof ATermPlaceholder }
    make(type) { aterm.pure.SingletonFactory.getInstance().makePlaceholder(type) }
    get_slot(type, t) { ((ATermPlaceholder)t).getPlaceholder() }
  }

    /** ATermList **/
  
  %oplist ATerm ATermList ( ATerm* ){
    is_fsym(t) { t instanceof ATermList }
    make_empty() { aterm.pure.SingletonFactory.getInstance().makeList() }
    make_insert(e,l) { ((ATermList)l).insert(e) }
    get_head(t) { ((ATermList)t).getFirst() }
    get_tail(t) { ((ATermList)t).getNext() }
    is_empty(t) { ((ATermList)t).isEmpty() }
  }
    
  %oplist ATermList concATerm (ATerm*){
    is_fsym(t) { t instanceof ATermList } 
    make_empty() { aterm.pure.SingletonFactory.getInstance().makeList() }
    make_insert(e,l) { l.insert(e) }
    get_head(t) { t.getFirst() }
    get_tail(t) { t.getNext() }
    is_empty(t) { t.isEmpty() } 
  }
  
    /** ATermInt  **/

    %op ATerm ATermInt(val: int) {
	is_fsym(t) { t instanceof ATermInt }
	make(i) { aterm.pure.SingletonFactory.getInstance().makeInt(i) }
	get_slot(val, t) { ((ATermInt)t).getInt() }
    }

    /** ATermFun **/

  %op AFun AFun(name: String, arity: int, quoted: boolean)  {
    is_fsym(t) { t instanceof AFun } 
    make(f,a,q) { aterm.pure.SingletonFactory.getInstance().makeAFun(f,a,q) }
    get_slot(name, t) { t.getName() }
    get_slot(arity, t) { t.getArity() }
    get_slot(quoted, t) { t.isQuoted() }
  }

    /** AtermAppl **/

  %op ATerm ATermAppl(fun: AFun, args: ATermList  ) {
    is_fsym(t) { t instanceof ATermAppl }
    make(f,args) { aterm.pure.SingletonFactory.getInstance().makeAppl(f,args) }
    get_slot(fun, t) { ((ATermAppl)t).getAFun() }
    get_slot(args, t) { ((ATermAppl)t).getArguments() }
  }


    %op ATerm ATermAppl_0(fun: AFun ) {
	is_fsym(t) { t instanceof ATermAppl && ((ATermAppl)t).getArity() == 0 }
	make(f) { aterm.pure.SingletonFactory.getInstance().makeAppl(f) }
	get_slot(fun, t) { ((ATermAppl)t).getAFun() }
    }

    %op ATerm ATermAppl_1(fun: AFun, arg1: ATerm) {
	is_fsym(t) { t instanceof ATermAppl && ((ATermAppl)t).getArity() == 1 }
	make(f,a1) { aterm.pure.SingletonFactory.getInstance().makeAppl(f,a1) }
	get_slot(fun, t) { ((ATermAppl)t).getAFun() }
	get_slot(arg1, t) { ((ATermAppl)t).getArgument(0) }
    }

    %op ATerm ATermAppl_2(fun: AFun, arg1: ATerm, arg2: ATerm) {
	is_fsym(t) { t instanceof ATermAppl && ((ATermAppl)t).getArity() == 2 }
	make(f,a1,a2) { aterm.pure.SingletonFactory.getInstance().makeAppl(f,a1,a2) }
	get_slot(fun, t) { ((ATermAppl)t).getAFun() }
	get_slot(arg1, t) { ((ATermAppl)t).getArgument(0) }
	get_slot(arg2, t) { ((ATermAppl)t).getArgument(1) }
    }

    %op ATerm ATermAppl_3(fun: AFun, arg1: ATerm, arg2: ATerm, arg3: ATerm) {
	is_fsym(t) { t instanceof ATermAppl && ((ATermAppl)t).getArity() == 3 }
	make(f,a1,a2,a3) { aterm.pure.SingletonFactory.getInstance().makeAppl(f,a1,a2,a3) }
	get_slot(fun, t) { ((ATermAppl)t).getAFun() }
	get_slot(arg1, t) { ((ATermAppl)t).getArgument(0) }
	get_slot(arg2, t) { ((ATermAppl)t).getArgument(1) }
	get_slot(arg3, t) { ((ATermAppl)t).getArgument(2) }
    }

