Tom is a language extension which adds pattern matching facilities to
C, Java or Caml. Therefore, Tom is a multi-purpose programming
language. 

Depending on your backgroung, Tom can be seen as:
 - a language to perform transformation of XML documents
 - a preprocessor which helps to describe a discrimitation tree over a
   complex data-structure
 - a tool to manipulate Abstract Syntax Trees
 - a backend for Rewrite Rule based languages
 - a first step toward a Rule based programming language

If you come from the 
 - algrebraic programming community
   => start with the 'apigen' and the 'poly/apigen' tutorials

 - XML community
   => start with the 'xml' tutorial

 - C or Java programming community
   => start with the 'int' and 'peano' tutorials
 

* apigen
  ======
  ApiGen is a system which take a many-sorted signature as input, and
  generates a concrete implementation for such an abstract data-type.
  In addition, ApiGen (adt-to-tom) automatically generates a mapping
  for Tom.
  This system is usefull to manipulate Abstract Syntax Trees since it
  offers an efficient implementation (based on ATerms). This
  implementation support maximal memory sharing, strong static typing
  as well as parsers and pretty-printers. 

  - 1_peano_c:    illustrate how to use Tom and ApiGen in order to
                  describe addition over Peano integers in C
  - 2_peano_java: same ideas in Java

* integer
  =======
  - 1_simple:   illustrate how to use builtin-integers in Java
                show how to describe addition over Peano integers in C,
                by defining a simple term data-structure and a Tom mapping 
  - 2_advanced: illustrate a tricky mapping between Peano and builtin integers
                show how to define a mapping for the C version of the ATerm Library

* list
  ====
  - 1_simple:   show how to define a mapping for the Java version of
                the ATerm Library
                This example introduces the notion of associative
                operator as well as list-matching

* peano
  =====
  - 1_simple:   based on Peano integers and the Java version of the
    ATerm Library, the examples introduce the backquote notation  
  - 2_advanced: introduce new mapping capabilities as well as bracket
    and alias notations

* poly
  ====
  - 1_simple:   show how to differentiate a polynom
  - 2_advanced: extended version with non-linearity, disjunction and
    generic traversal functions
  - 3_apigen:   same as before, but based on ApiGen.
    Also introduce the notion of rewrite rule system

* xml
  ===
  To be created

