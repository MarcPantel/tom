Tom is a language extension which adds pattern matching facilities to
C, Java or Caml. Therefore, Tom is a multi-purpose programming
language. 

Depending on your background, Tom can be seen as:
 - a language to perform transformation of XML documents
 - a preprocessor which helps to describe a discrimination tree over a
   complex data-structure
 - a tool to manipulate Abstract Syntax Trees
 - a backend for Rewrite Rule based languages
 - a first step toward a Rule based programming language

* How to start with Tom?
------------------------
If you come from the 
 - algebraic programming community
   => start with:
      - Vas
      - AddressBook
      - Peano
      - Poly
      - ApiReach

 - XML community
   => start with
      - Dom
      - Xml

 - Java programming community
   => start with:
      - Builtin
      - Peano
      - Expression (quite complex)

 - C programming community
   => start with:
      - IntegerC
      - Peano
 
* Note about ApiGen:
--------------------
  ApiGen is a system which take a many-sorted signature as input, and
  generates a concrete implementation for such an abstract data-type.
  In addition, ApiGen (adt-to-tom) automatically generates a mapping
  for Tom.
  This system is useful to manipulate Abstract Syntax Trees since it
  offers an efficient implementation (based on ATerms).
  The implementation supports maximal memory sharing, strong static
  typing as well as parsers and pretty-printers. 

* Included examples:
--------------------
* AddressBook
  Small implementation of a data-base
  Concepts: apigen, list-matching, vas

* ApiReach
  Compute reachable terms (wrt. a rewrite system)
  Concept: apigen, complex generic traversal

* BoulderDash
  Simulate how rocks go down in the boulder-dash game	
  Concept: apigen, virtual mapping 

* Builtin
  Show how to use builtin integer and string  
  Concept: list-matching, string-matching

* Caml
  Show how to use Tom with Caml  
  Concept: mapping, list-matching

* Dom
  XML manipulation based on DOM
  Concept: XML, list-matching, DOM

* Expression
  Simplification of algebraic expressions
  Concept: complex object mapping, lazy-type

* GTree
  Tiny example of tree manipulation
  Concept: apigen

* IntegerC
  Show how to use Tom with C
  Concept: mapping, complex mapping on builtin
  
* List
  Introduction to list-matching  
  Concept: list-matching, mapping to the ATerm library 

* Lsystems

* Nspk
  Verification of the Needham-Schroeder Public-Key protocol
  Concept: apigen, complex list-matching, exploration of a search space

* Peano
  Computation with Peano integers
  Concept: simple mapping, apigen, Tom notation 

* PNspk
  Parallel verification of the Needham-Schroeder Public-Key protocol
  Concept: apigen, parallel exploration of a search space, strategy library 

* PQueens
  Parallel version of the N-Queens problem
  Concept: strategy library, complex mapping

* Poly
  Compute the derivative of a polynom
  Concept: mapping, apigen, generic traversal, rewrite system  

* ProdRule
  Implementation of Fibonacci in a Production rule style
  Concept: Production rule, Rete

* RBTree
  Red-Black Tree algorithm
  Concept: apigen, disjunction of patterns

* Set
  Implementation of Set with maximal sharing
  Concept: apigen, ATerm with unique id

* Vas
  Introduction to the VAS abstract syntax
  Concept: vas

* Xml
  XML manipulation based on TNode
  Concept: XML, list-matching, TNode
  

