Tom is a language extension which adds pattern matching facilities to
C, Java or Caml. Therefore, Tom is a multi-purpose programming
language.

Depending on your background, Tom can be seen as:
 - a language to perform transformation of XML documents.
 - a preprocessor which helps to perform discrimination over a complex
   data-structure.
 - a tool to manipulate Abstract Syntax Trees.
 - a backend for Rewrite Rule based languages.
 - a powerful Rule based programming language.

* How to start with Tom?
------------------------
If you come from the
 - algebraic programming community
   => start with:
      - vas
      - addressbook
      - peano
      - poly
      - apireach
      - strategy

 - XML community
   => start with
      - dom
      - xml

 - Java programming community
   => start with:
      - builtin
      - peano
      - expression (quite complex)

 - C programming community
   => start with:
      - integerc
      - peano


* Running the examples:
------------------------
  Compilation:
    _To compile all examples, run the script 'build.sh' from directory 'examples',
    assuming Ant is installed. To compile a specific example, specify the example name.
    For instance, to compile example 'peano' only, run 'build.sh peano' (without
    the trailing backslash at the end of peano).

  Execution:
    _To run a specific example, go to directory examples/build/ and execute the java class
    of your choice using your Java Virtual Machine. For instance, to run 'PeanoSimple1',
    simply run 'java peano.PeanoSimple1'.

* Note about ApiGen/Vas/Gom:
------------------------
  Vas is build on top of apigen and both are deprecated. You may now use
  Gom for all your applications (see user manual).

  ApiGen is a system which takes a many-sorted signature as input, and
  generates a concrete implementation for such an abstract data-type.
  In addition, ApiGen/Vas/Gom automatically generate a mapping for Tom.
  This system is useful to manipulate Abstract Syntax Trees since it
  offers an efficient implementation (based on ATerms).
  The implementation supports maximal memory sharing, strong static
  typing as well as parsers and pretty-printers.


* Included examples:
--------------------
* addressbook
  Small implementation of a database
  Concepts: apigen, list-matching, vas

* analysis
  Flow analysis on a simple language
  Translation of temporal logic formulas into strategies
  Concepts: strategies

* antipattern
  Solving anti-pattern matching problems
  Concepts: anti-patterns, strategies, rule construct
  Files' description:
  Matching1
    - an algorithm for solving anti-pattern matching problems
  Matching2
    - same algorithm, but with the strategy Id instead of fail
  Matching3
    - modification of the algorithm to allow guards on rules
  Matching4
    - another algorithm, a more correct one
  Matching5
    - same algorithm as 4, but implemented using %rule
    - is is not working properly because of the problems with %rule
  Problems:
    - if the construct of terms is in a file, and the rules in another,
      tom won't apply the rules
    - you cannot control whether a rule should apply or not. For example
      if you need some rules to apply, and only after they have been applied,
      to run another rule.
    - when a strategy applies, the modified term will not fire the rules.

  MatchingDifferences
    - another algorithm for anti-pattern matching based on set differences, but
      it only responds `True or `False, without giving the substitution when it
      exists

* apireach
  Compute reachable terms (wrt. a rewrite system)
  Concepts: apigen, complex generic traversal

* applexml
  XML Transformation
  This examples contains an applet with is similar to the one in the Tom
  web site: the author page. It aims to show how to combine applet, xml and tom to
  complete web design technologies.
  Concepts: XML pattern matching

* boulderdash
  Simulate how rocks go down in the boulder-dash game
  Concepts: apigen, virtual mapping

* builtin
  Show how to use builtin integer and string
  Concepts: list-matching, string-matching

* caml
  Show how to use Tom with Caml
  Concepts: mapping, list-matching

* cell
  Cellular automata
  Concepts: pattern matching

* csmaca
  TODO
  Concepts: TODO

* dom
  XML manipulation based on DOM
  Concepts: XML, list-matching, DOM

* expression
  Simplification of algebraic expressions
  Concepts: complex object mapping, lazy-type

* ferus
  Show how to use apigen in a C environment

* gasel
  Look for a pattern in a graph
  Concepts: complex user-defined mapping

* gom
  gom usage demonstration
  Concepts: gom

* gomoku
  Tiny go-moku game
  Concepts: list-matching, vas

* gterm
  hand-written classes for gom
  Concepts: shared-objects

* integerc
  Show how to use Tom with C
  Concepts: mapping, complex mapping on builtin

* list
  Introduction to list-matching
  Concepts: list-matching, mapping to the ATerm library

* lsystems
  implementation of the Lindenmayer systems (plants simulation)

* master
  Various basic rewriting usage examples used in Master course
  Peano, Fibonacci, polynom derivation, pattern matching

* matching
  Another implementation of pattern matching in tom

* meta
  meta quote usage example
  Concepts: meta quote

* mgs
  dynamical systems simulations
  (collaboration with the MGS group)
  ArrayBeadSort, BeadSort and  BoulderDash

* nspk
  Verification of the Needham-Schroeder Public-Key protocol
  Concepts: apigen, complex list-matching, exploration of a search space

* p3p
  Implementation of a web policy, using XML
  Concepts: XML

* peano
  Computation with Peano integers
  Concepts: simple mapping, apigen, Tom notation

* pnspk
  Parallel verification of the Needham-Schroeder Public-Key protocol
  Concepts: apigen, parallel exploration of a search space, strategy library

* poly
  Compute the derivative of a polynom
  Concepts: mapping, apigen, generic traversal, rewrite system
  Examples:
    _Simple:   Show how to differentiate a polynom.
    _Advanced: Extended version with non-linearity and disjunction.
    _Apigen:   Same as before, but based on ApiGen.
               Also introduce the notion of rewrite rule system.

* pqueens
  Parallel version of the N-Queens problem
  Concepts: strategy library, complex mapping

* prodrule
  Implementation of Fibonacci in a Production rule style
  Concepts: Production rule, Rete

* propp
  Propositional prover
  Concepts: using ANTLR with tom

* rbtree
  Red-Black Tree algorithm
  Concepts: apigen, disjunction of patterns

* set
  Implementation of Set with maximal sharing
  Concepts: apigen, ATerm with unique id

* strategy
  Show how to use the MuTraveler strategy language
  Concepts: strategies

* strings
  Tiny example based on string matching
  Concepts: string matching

* structure
  Calculus of strutures
  Concepts: complex list-matching, exploration strategies

* ted
  Toolbox for live aterms manipulation/representation
  Concepts: mapping to pedefined java type

* tutorial
  Examples introduced in the tutorial
  Concepts: string matching, XML

* vas
  Introduction to the VAS abstract syntax
  Concepts: vas

* xml
  XML manipulation based on TNode
  Concepts: XML, list-matching, TNode

* xquery
  XQuery use cases

* zenon
  certification of tom's output using zenon and coq

