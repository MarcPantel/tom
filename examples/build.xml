<?xml version="1.0" encoding="UTF-8"?>
<project name="Ant for Tom-examples" default="examples" basedir=".">
  <description>
    This script prepare a bundle of Tom examples
  </description>

  <!-- set local properties for this build -->
  <property file="../local.properties"/>

  <!-- The current version of TOM, should be defined by -Dversion -->
  <property name="javacSource" value="1.4"/>
  <property name="javacTarget" value="1.4"/>
  <property name="nowarnings"  value="false"/>
  <property name="optimize"    value="on"/>
  <property name="optimize2"   value="on"/>
  <property name="verbose"     value="off"/>
  <property name="pretty"      value="off"/>
  <property name="visitable"   value="on"/>
  <property name="stamp"       value="off"/>
  <property name="mutraveler"  value="jjtraveler"/>

  <property environment="env"/>
  <property name="tom.home"       value="${env.TOM_HOME}"/>
  
  <!-- some used directory location -->
  <property name="examples.dir"   location="."/>
  <property name="examples.dist"  location="dist"/>

  <property name="examples.lib"   value="lib"/>

  <!-- where the examples a build: javac destDir -->
  <property name="examples.gen"   location="gen"/>
  <property name="examples.build" location="build"/>

  <property name="tomconfigfile"  location="${tom.home}/Tom.xml"/>
  <property name="vasconfigfile"  location="${tom.home}/Vas.xml"/>
  <property name="gomconfigfile"  location="${tom.home}/Gom.xml"/>

  <!-- Examples to build and distribute -->
  <property name="addressbook"    value="addressbook"/>
  <property name="adt"            value="adt"/>
  <property name="antipattern"    value="antipattern"/>
  <property name="apireach"       value="apireach"/>
  <property name="appletxml"      value="appletxml"/>
  <property name="boulderdash"    value="boulderdash"/>
  <property name="builtin"        value="builtin"/>
  <property name="caml"           value="caml"/>
  <property name="cell"           value="cell"/>
  <property name="cril"           value="cril"/>
  <property name="csmaca"         value="csmaca"/>
  <property name="dom"            value="dom"/>
  <property name="expression"     value="expression"/>
  <property name="ferus"          value="ferus"/>
  <property name="gom"            value="gom"/>
  <property name="gomoku"         value="gomoku"/>
  <property name="gterm"          value="gterm"/>
  <property name="gtree"          value="gtree"/>
  <property name="integerc"       value="integerc"/>
  <property name="list"           value="list"/>
  <property name="lsystem"        value="lsystems"/>
  <property name="matching"       value="matching"/>
  <property name="master"         value="master"/>
  <property name="mgs"            value="mgs"/>
  <property name="nspk"           value="nspk"/>
  <property name="p3p"            value="p3p"/>
  <property name="peano"          value="peano"/>
  <property name="pnspk"          value="pnspk"/>
  <property name="poly"           value="poly"/>
  <property name="pqueens"        value="pqueens"/>
  <property name="prodrule"       value="prodrule"/>
  <property name="propp"          value="propp"/>
  <property name="rbtree"         value="rbtree"/>
  <property name="set"            value="set"/>
  <property name="strategy"       value="strategy"/>
  <property name="strings"        value="strings"/>
  <property name="structure"      value="structure"/>
  <property name="ted"            value="ted"/>
  <property name="tutorial"       value="tutorial"/>
  <property name="vas"            value="vas"/>
  <property name="xml"            value="xml"/>
  <property name="xquery"         value="xquery"/>
  <property name="zenon"          value="zenon"/>
  <property name="analysis"       value="analysis"/>


  <target name="testdistexist">
    <available file="${tom.home}/lib" type="dir" property="distexist"/>
  </target>
  
  <target name="init" if="examples.build">
    <fail unless="env.TOM_HOME"
          message="TOM_HOME has to be defined in your environment, 
          to find the Tom classes"/>
    <mkdir dir="${examples.build}"/>
    <mkdir dir="${examples.gen}"/>
    <!-- Define classpath for building stable and source  -->
    <path id="tom.classpath">
      <fileset dir="${examples.dir}/${examples.lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${tom.home}/lib">
        <include name="*.jar"/>
      </fileset>

    </path>
    
    <!-- tasks for building -->
    <taskdef name="adt"
             classname="tom.engine.tools.ant.ApigenTask"
             classpathref="tom.classpath"/>
    <taskdef name="tom"
             classname="tom.engine.tools.ant.TomTask"
             classpathref="tom.classpath"/>
    <taskdef name="vas"
             classname="vas.ant.VasTask" 
             classpathref="tom.classpath"/>
    <taskdef name="tomantlr" 
             classname="org.apache.tools.ant.taskdefs.optional.ANTLR">
      <classpath refid="tom.classpath"/>
    </taskdef>

    <presetdef name="tom.preset">
      <tom config="${tomconfigfile}"
           srcdir="${examples.dir}" 
           destdir="${examples.gen}"         
           nowarn="${nowarnings}"
           optimize="${optimize}"
           optimize2="${optimize2}"
           verbose="${verbose}"
           pretty="${pretty}"
           options="-I ${tom.home}/share/jtom">
      </tom>
    </presetdef>

    <macrodef name="tomcompile">
      <attribute name="example"/>
      <sequential>
        <tom.preset>
          <include name="@{example}/**/*.t"/>
          <exclude name="@{example}/**/*.g.t"/>
        </tom.preset>
      </sequential>
    </macrodef>
    <macrodef name="adtcompile">
      <attribute name="example"/>
      <attribute name="factory"/>
      <sequential>
        <adt srcdir="${examples.dir}"
             name="@{factory}" 
             package="@{example}" 
             visitable="${visitable}"
             destdir="${examples.gen}">
          <include name="@{example}/**/*.adt"/>
        </adt>
      </sequential>
    </macrodef>
    <macrodef name="vascompile">
      <attribute name="example"/>
      <sequential>
        <vas config="${vasconfigfile}"
             srcdir="${examples.dir}"
             package="@{example}" 
             destdir="${examples.gen}">
          <include name="@{example}/**/*.vas"/>
        </vas>
      </sequential>
    </macrodef>
    <macrodef name="gomcompile">
      <attribute name="example"/>
      <sequential>
        <gom config="${gomconfigfile}"
             srcdir="${examples.dir}"
             package="@{example}" 
             destdir="${examples.gen}">
          <include name="@{example}/**/*.gom"/>
        </gom>
      </sequential>
    </macrodef>
    <macrodef name="javacompile">
      <attribute name="example"/>
      <sequential>
        <javac destdir="${examples.build}"
          target="${javacTarget}"
          source="${javacSource}"
          nowarn="${nowarnings}">
          <src path="${examples.dir}"/>
          <src path="${examples.gen}"/>
          <classpath refid="tom.classpath"/>
          <include name="@{example}/**/*.java"/>
        </javac>
      </sequential>
    </macrodef>
  </target>

  <target name="init.gom.task">
    <taskdef name="gom"
             classname="tom.gom.tools.ant.GomTask"
             classpathref="tom.classpath"/>
  </target>
  
  <target name="prepare.examples">
    <mkdir dir="${examples.dist}"/>
  </target>
  
  <!-- target debug to help finding properties problems -->
  <target name="debug"> 
    <echoproperties/>
  </target>
  
  <target name="clean.examples" description="Cleans examples directory">
    <delete dir="${examples.gen}"/>
    <delete dir="${examples.build}"/>
  </target>

  <target name="addressbook" depends="init, init.gom.task">
    <gomcompile example="${addressbook}"/>
    <tomcompile example="${addressbook}"/>
    <javacompile example="${addressbook}"/>
  </target>

  <target name="adt" depends="init">
    <vascompile example="${adt}"/>
    <tomcompile example="${adt}"/>
    <javacompile example="${adt}"/>
  </target>

  <target name="antipattern" depends="init"> 
    <vascompile example="${antipattern}"/>
    <tomcompile example="${antipattern}"/>
    <javacompile example="${antipattern}"/>
  	<copy todir="${examples.build}/${antipattern}">
      <fileset dir="${antipattern}">
        <include name="*.txt"/>
      </fileset>
    </copy>
  </target>

  <target name="apireach" depends="init, init.gom.task"> 
    <adtcompile example="${apireach}" factory="reach"/>
    <gomcompile example="${apireach}"/>
    <tomcompile example="${apireach}"/>
    <javacompile example="${apireach}"/>
  </target>

  <target name="appletxml" depends="init"> 
    <tomcompile example="${appletxml}"/>
    <javacompile example="${appletxml}"/>
    <!-- Create a jar for the applet -->
    <!-- ugly hacks to find the TNode and tom-library jars -->
    <path id="tnode.path">
      <fileset dir="${tom.home}/lib">
        <include name="TNode*.jar"/>
      </fileset>
    </path>
    <property name="tnode.jar" refid="tnode.path"/>
    <path id="tom-library.path"> <!-- ugly hack to find the TNode jar -->
      <fileset dir="${tom.home}/lib">
        <include name="tom-library*.jar"/>
      </fileset>
    </path>
    <property name="tom-library.jar" refid="tom-library.path"/>
    <jar jarfile="${examples.build}/${appletxml}/xmlconverter.jar">
      <fileset dir="${examples.build}">
        <include name="${appletxml}/**/*.class"/>
      </fileset>
      <zipfileset src="${tom.home}/lib/shared-objects.jar"/>
      <zipfileset src="${tom.home}/lib/aterm.jar" includes="aterm/**/*"/>
      <zipfileset src="${tom.home}/lib/jjtraveler.jar" includes="jjtraveler/Visit*"/>
      <zipfileset src="${tom-library.jar}" includes="tom/library/xml/*"/>
      <zipfileset src="${tnode.jar}"/>
    </jar>
  </target>

  <target name="boulderdash" depends="init">
    <adtcompile example="${boulderdash}"
                factory="boulder"/>
    <tomcompile example="${boulderdash}"/>
    <javacompile example="${boulderdash}"/>
    <!-- copy resources in build -->
    <copy todir="${examples.build}/${boulderdash}">
      <fileset dir="${examples.dir}/${boulderdash}">
        <include name="*.gif"/>
        <include name="*.html"/>
      </fileset>
    </copy>
    <!-- Create a jar for the applet -->
    <jar jarfile="${examples.build}/${boulderdash}/boulder.jar">
      <fileset dir="${examples.build}">
        <include name="${boulderdash}/**/*.class"/>
        <include name="${boulderdash}/**/*.gif"/>
      </fileset>
      <zipfileset src="${tom.home}/lib/shared-objects.jar"/>
      <zipfileset src="${tom.home}/lib/aterm.jar"/>
      <zipfileset src="${tom.home}/lib/jjtraveler.jar"/>
    </jar>
  </target>

  <target name="builtin" depends="init">
    <adtcompile example="${builtin}"
                factory="term"/>
    <tomcompile example="${builtin}"/>
    <javacompile example="${builtin}"/>
  </target>

  <target name="caml" depends="init">
    <mkdir dir="${examples.gen}/${caml}"/>
    <!-- build tom -->
    <tom.preset destdir="${examples.gen}/${caml}"
                options="--camlCode -I ${tom.home}/share/jtom">
      <include name="${caml}/**/*.t"/>
    </tom.preset>
    <copy todir="${examples.build}/${caml}">
      <fileset dir="${examples.gen}/${caml}">
        <include name="*.ml"/>
      </fileset>
    </copy>
    <!-- copy resources in build -->
    <copy todir="${examples.build}/${caml}">
      <fileset dir="${examples.dir}/${caml}">
        <include name="*.ml"/>
        <include name="Makefile"/>
        <include name="README"/>
      </fileset>
    </copy>
    <antcall target="caml.make"/>
  </target>

  <target name="caml.make" if="camlc.bin">
    <exec dir="${examples.build}/${caml}" 
          failonerror="yes"
          executable="make">
      <arg line=""/>
      <env key="CAMLC" value="${camlc.bin}"/>
    </exec>
  </target>

  <target name="cell" depends="init">
    <tomcompile example="${cell}"/>
    <javacompile example="${cell}"/>
    <!-- copy resources in build -->
    <copy todir="${examples.build}/${cell}">
      <fileset dir="${examples.dir}/${cell}">
        <include name="*.gif"/>
      </fileset>
    </copy>
  </target>

  <target name="cril" depends="init">
    <!-- build tom -->
    <tomcompile example="${cril}"/>
    <!-- builds the parser using javacc -->
    <mkdir dir="${example.gen}/cril/jtom/ddd/data/ddd"/>
    <javacc target="${examples.dir}/cril/jtom/ddd/data/ddd/parser.jj"
            outputdirectory="${example.gen}/cril/jtom/ddd/data/ddd"
            javacchome="${javaccdir}" />
    <mkdir dir="${example.gen}/cril/jtom/ddd/data/dbm"/>
    <javacc target="${examples.dir}/cril/jtom/ddd/data/dbm/parser.jj"
            outputdirectory="${example.gen}/cril/jtom/ddd/data/dbm"
            javacchome="${javaccdir}" />
    <!-- build java source -->
    <javacompile example="${cril}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${cril}">
      <fileset dir="${examples.dir}/${cril}">
        <include name="*.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="csmaca" depends="init">
    <tomcompile example="${csmaca}"/>
    <javacompile example="${csmaca}"/>
  </target>

  <target name="dom" depends="init">
    <tomcompile example="${dom}"/>
    <javacompile example="${dom}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${dom}">
      <fileset dir="${examples.dir}/${dom}">
        <include name="*.xml"/>
      </fileset>
    </copy>
  </target>
  
  <target name="expression" depends="init">
    <!-- build tom -->
    <tom.preset options="-I ${tom.home}/share/jtom --lazyType">
      <include name="${expression}/**/Record.t"/>
    </tom.preset>
    <tom.preset>
      <include name="${expression}/**/RecordStrict.t"/>
    </tom.preset>
    <javacompile example="${expression}"/>
  </target>

  <target name="ferus" depends="init">
    <mkdir dir="${examples.gen}/${ferus}"/>
    <adt srcdir="${examples.dir}"
      name="apisig" 
      cCode="yes" 
      destdir="${examples.gen}/${ferus}">
      <include name="${ferus}/**/*.adt"/>
    </adt>
    <tom.preset destdir="${examples.gen}/${ferus}"         
                stamp="off"
                options="--cCode -I ${tom.home}/share/jtom">
      <include name="${ferus}/**/*.t"/>
    </tom.preset>
    <copy todir="${examples.gen}/${ferus}">
      <fileset dir="${examples.dir}/${ferus}">
        <include name="Makefile"/>
      </fileset>
    </copy>
    <antcall target="ferus.make"/>
  </target>

  <target name="ferus.make" if="aterm.home">
    <exec dir="${examples.gen}/${ferus}" 
          failonerror="yes"
          executable="make">
      <arg line="ferus atermfib"/>
      <env key="ATERM_HOME" value="${aterm.home}"/>
      <env key="LDFLAGS" value="-L${aterm.home}/lib -lATerm"/>
      <env key="CFLAGS"  value="-I${aterm.home}/include -I."/>
    </exec>
  </target>

  <target name="gom" depends="init, init.gom.task">
    <gomcompile example="${gom}"/>
    <tomcompile example="${gom}"/>
    <javacompile example="${gom}"/>
  </target>

  <target name="gomoku" depends="init">
    <vascompile example="${gomoku}"/>
    <tomcompile example="${gomoku}"/>
    <javacompile example="${gomoku}"/>
  </target>

  <target name="gterm" depends="init">
    <tomcompile example="${gterm}"/>
    <javacompile example="${gterm}"/>
  </target>

  <target name="gtree" depends="init">
    <adtcompile example="${gtree}"
                factory="term"/>
    <tomcompile example="${gtree}"/>
    <javacompile example="${gtree}"/>
  </target>

  <target name="integerc" depends="init">
    <mkdir dir="${examples.gen}/${integerc}"/>
    <adt srcdir="${examples.dir}"
      name="Peano" 
      cCode="yes" 
      destdir="${examples.gen}/${integerc}">
      <include name="${integerc}/**/*.adt"/>
    </adt>
    <tom.preset destdir="${examples.gen}/${integerc}"         
                stamp="off" 
                options="--cCode -I ${tom.home}/share/jtom">
      <include name="${integerc}/**/*.t"/>
    </tom.preset>
    <copy todir="${examples.gen}/${integerc}">
      <fileset dir="${examples.dir}/${integerc}">
        <include name="Makefile"/>
      </fileset>
    </copy>
    <antcall target="integerc.make"/>
  </target>

  <target name="integerc.make" if="aterm.home">
    <exec dir="${examples.gen}/${integerc}" 
          failonerror="yes"
          executable="make">
      <arg line=""/>
      <env key="ATERM_HOME" value="${aterm.home}"/>
      <env key="LDFLAGS" value="-L${aterm.home}/lib -lATerm"/>
      <env key="CFLAGS"  value="-I${aterm.home}/include -I."/>
    </exec>
    <antcall target="integerc.make.cpl"/>
  </target>
  
  <target name="integerc.make.cpl" if="cpl.home">
    <exec dir="${examples.gen}/${integerc}" 
          failonerror="yes"
          executable="make">
      <env key="ATERM_HOME" value="${aterm.home}"/>
      <arg line="nqueens nqueens2"/>
      <env key="LDFLAGS" value="-L${aterm.home}/lib -L${cpl.home}/lib -lATerm -lchoice"/>
      <env key="CFLAGS"  value="-I${aterm.home}/include -I${cpl.home}/include -I."/>
    </exec>
  </target>

  <target name="list" depends="init">
    <tomcompile example="${list}"/>
    <javacompile example="${list}"/>
  </target>

  <target name="lsystem" depends="init">
    <tomcompile example="${lsystem}"/>
    <javacompile example="${lsystem}"/>
  </target>

  <target name="matching" depends="init"> 
    <vascompile example="${matching}"/>
    <tomcompile example="${matching}"/>
    <javacompile example="${matching}"/>
  	<copy todir="${examples.build}/${matching}">
      <fileset dir="${matching}">
        <include name="*.txt"/>
      </fileset>
    </copy>
  </target>

  <target name="master" depends="init"> 
    <vascompile example="${master}"/>
    <tomcompile example="${master}"/>
    <javacompile example="${master}"/>
  	<copy todir="${examples.build}/${master}">
      <fileset dir="${master}">
        <include name="*.txt"/>
      </fileset>
    </copy>
  </target>

  <target name="mgs" depends="init">
    <adtcompile example="${mgs}"
                factory="term"/>
    <tomcompile example="${mgs}"/>
    <javacompile example="${mgs}"/>
  </target>
  
  <target name="nspk" depends="init">
    <adtcompile example="${nspk}"
                factory="term"/>
    <tomcompile example="${nspk}"/>
    <javacompile example="${nspk}"/>
  </target>
  
  <target name="p3p" depends="init">
    <tomcompile example="${p3p}"/>
    <javacompile example="${p3p}"/>
    <copy todir="${examples.build}/${p3p}">
      <fileset dir="${examples.dir}/${p3p}">
        <include name="*.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="peano" depends="init">
    <adtcompile example="${peano}"
                factory="${peano}"/>
    <tomcompile example="${peano}"/>
    <javacompile example="${peano}"/>
  </target>

  <target name="pnspk" depends="init">
    <adtcompile example="${pnspk}"
                factory="term"/>
    <tomcompile example="${pnspk}"/>
    <javacompile example="${pnspk}"/>
  </target>
  
  <target name="poly" depends="init">
    <adtcompile example="${poly}"
                factory="expression"/>
    <tomcompile example="${poly}"/>
    <javacompile example="${poly}"/>
  </target>

  <target name="pqueens" depends="init">
    <tomcompile example="${pqueens}"/>
    <javacompile example="${pqueens}"/>
  </target>

  <target name="prodrule" depends="init">
    <tomcompile example="${prodrule}"/>
    <javacompile example="${prodrule}"/>
  </target>

  <target name="propp" depends="init">
    <adtcompile example="${propp}"
                factory="seq"/>
    <!-- build parser -->
    <mkdir dir="${examples.gen}/${propp}"/>
    <tomantlr target="${examples.dir}/${propp}/SeqParser.g"
              outputdirectory="${examples.gen}/${propp}">
      <classpath refid="tom.classpath"/>
    </tomantlr>
    <tomcompile example="${propp}"/>
    <javacompile example="${propp}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${propp}">
      <fileset dir="${examples.dir}/${propp}">
        <include name="examples"/>
        <include name="*.sty"/>
      </fileset>
    </copy>
  </target>

  <target name="rbtree" depends="init">
    <adtcompile example="${rbtree}"
                factory="tree"/>
    <tomcompile example="${rbtree}"/>
    <javacompile example="${rbtree}"/>
  </target>

  <target name="set" depends="init">
    <adtcompile example="${set}"
                factory="jgset"/>
    <tomcompile example="${set}"/>
    <javacompile example="${set}"/>
  </target>

  <target name="strategy" depends="init">
  <!-- copy resources in build -->
    <copy todir="${examples.build}/${strategy}">
      <fileset dir="${examples.dir}/${strategy}">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <adtcompile example="${strategy}"
                factory="term"/>
    <vascompile example="${strategy}"/>
    <tomcompile example="${strategy}"/>
    <javacompile example="${strategy}"/>
  </target>

  <target name="strings" depends="init">
    <tomcompile example="${strings}"/>
    <javacompile example="${strings}"/>
  </target>

  <target name="structure" depends="init,init.gom.task">
    <!-- build adt -->    
    <vascompile example="${structure}"/>
    <gomcompile example="${structure}"/>
    <!-- build tom -->
    <tom.preset>
      <!-- stamp not yet ready for apigen list -->
      <include name="${structure}/**/*.t"/>
      <exclude name="${structure}/**/StructParser.g.t"/>
      <exclude name="${structure}/**/StructuresParser.g.t"/>
      <!--      <exclude name="${structure}/**/StructureCDT.t"/> -->
    </tom.preset>
    <tom config="${tomconfigfile}"
	 outputfile="${examples.gen}/${structure}/StructParser.g"
	 srcdir="${examples.dir}" 
         nowarn="${nowarnings}"
         optimize="${optimize}"
         optimize2="${optimize2}"
         verbose="${verbose}"
	 pretty="${pretty}">
      <include name="${structure}/**/StructParser.g.t"/>
      </tom>
    <tom config="${tomconfigfile}"
	 outputfile="${examples.gen}/${structure}/StructuresParser.g"
	 srcdir="${examples.dir}" 
         nowarn="${nowarnings}"
         optimize="${optimize}"
         optimize2="${optimize2}"
         verbose="${verbose}"
	 pretty="${pretty}"
	 options="-I ${examples.gen}/${structure}">
      <include name="${structure}/**/StructuresParser.g.t"/>
      </tom>
    <!-- build parser -->
    <mkdir dir="${examples.gen}/${structure}"/>
    <tomantlr target="${examples.gen}/${structure}/StructParser.g"
              outputdirectory="${examples.gen}/${structure}">
      <classpath refid="tom.classpath"/>
    </tomantlr>
    <tomantlr target="${examples.gen}/${structure}/StructuresParser.g"
              outputdirectory="${examples.gen}/${structure}">
      <classpath refid="tom.classpath"/>
    </tomantlr>
    <!-- build java source -->
    <javacompile example="${structure}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${structure}">
      <fileset dir="${examples.dir}/${structure}">
        <include name="examples"/>
      </fileset>
    </copy>
  </target>

  <target name="ted" depends="init"> 
    <!-- <tomcompile example="${ted}"/> -->
    <tom.preset optimize2="no">
      <include name="${ted}/**/*.t"/>
      <exclude name="${ted}/**/*.g.t"/>
    </tom.preset>
    <javacompile example="${ted}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${ted}">
      <fileset dir="${examples.dir}/${ted}">
        <include name="*.ted"/>
        <include name="aterms"/>
      </fileset>
    </copy>
  </target>

  <target name="tutorial" depends="init">
    <tomcompile example="${tutorial}"/>
    <javacompile example="${tutorial}"/>
  </target>

  <target name="vas" depends="init">
    <!-- build tom -->
    <tom.preset config="${tomconfigfile}"
         srcdir="${examples.dir}" 
         destdir="${examples.gen}" 
         nowarn="${nowarnings}"
         optimize="${optimize}"
         optimize2="${optimize2}"
         stamp="off"
         options="-I ${tom.home}/share/jtom">
      <include name="${vas}/**/*.t"/>
    </tom.preset>
    <javacompile example="${vas}"/>
  </target>

  <target name="xml" depends="init">
    <tomcompile example="${xml}"/>
    <javacompile example="${xml}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${xml}">
      <fileset dir="${examples.dir}/${xml}">
        <include name="*.xml"/>
        <include name="*.html"/>
      </fileset>
    </copy>
  </target>

  <target name="xquery" depends="init">
    <tomcompile example="${xquery}"/>
    <javacompile example="${xquery}"/>
    <!-- copy resources -->
    <copy todir="${examples.build}/${xquery}">
      <fileset dir="${examples.dir}/${xquery}">
        <include name="*.xquery"/>
        <include name="*.html"/>
      </fileset>
    </copy>
  </target>

  <target name="zenon" depends="init">
    <tom.preset options="-I ${tom.home}/share/jtom --verify">
      <include name="${zenon}/**/*.t"/>
      <exclude name="${zenon}/**/*.g.t"/>
    </tom.preset>
    <javacompile example="${zenon}"/>
    <antcall target="zenon.make"/>
  </target>
  <target name="zenon.make" if="zvtov.bin">
    <apply dir="${examples.gen}/${zenon}" 
          dest="${examples.gen}/${zenon}"
          failonerror="yes"
	  executable="${zvtov.bin}">
      <srcfile/>
      <fileset dir="${examples.gen}">
        <include name="${zenon}/**/*.zv"/>
      </fileset>
      <mapper type="glob" from="*.zv" to="*.v"/>
    </apply>
  </target>


  <target name="analysis" depends="init,init.gom.task">
  <!-- copy resources in build -->
    <copy todir="${examples.build}/${analysis}">
      <fileset dir="${examples.dir}/${analysis}">
      </fileset>
    </copy>
    <gomcompile example="${analysis}"/>
    <tomcompile example="${analysis}"/>
    <javacompile example="${analysis}"/>
  </target>

  
  <target name="examples" 
          description="Builds the examples (at least some)"
	  depends="addressbook, adt, antipattern, apireach, appletxml,
	  boulderdash, builtin, caml, cell, dom, expression, ferus, gomoku,
	  gterm, gtree, integerc, list, matching, master, mgs, nspk, p3p,
	  peano, pnspk, poly, pqueens, prodrule, propp, rbtree, set, strategy,
	  strings, ted, tutorial, vas, xml, zenon">
  </target>

  <target name="dist.examples" 
          description="Prepare a distribution of examples" 
          depends="prepare.examples">
    <fail unless="version">
      ****************************************************
      ****************************************************
      You have to define the "version" property in order 
      to builld the examples distribution
      ****************************************************
      ****************************************************
    </fail>

    <tar tarfile="${examples.dist}/jtom-${version}-examples.tar.gz" 
         compression="gzip">
      <tarfileset dir="${examples.dir}" prefix="examples" mode="755">
        <include name="README"/>
        <include name="build.xml"/>
        <include name="build.sh"/>
        <include name="${examples.lib}/*.jar"/>

        <include name="${addressbook}/README"/>
        <include name="${addressbook}/*.t"/>
        <include name="${addressbook}/*.gom"/>

        <include name="${antipattern}/README"/>
        <include name="${antipattern}/*.t"/>
        <include name="${antipattern}/Matching.java"/>
        <include name="${antipattern}/*.vas"/>
        <include name="${antipattern}/atermmapping.tom"/>

        <include name="${apireach}/README"/>
        <include name="${apireach}/*.t"/>
        <include name="${apireach}/*.adt"/>
        <include name="${apireach}/*.gom"/>

        <include name="${appletxml}/README"/>
        <include name="${appletxml}/*.t"/>
        <include name="${appletxml}/*.java"/>

        <include name="${boulderdash}/README"/>
        <include name="${boulderdash}/*.t"/>
        <include name="${boulderdash}/*.adt"/>
        <include name="${boulderdash}/*.gif"/>
        <include name="${boulderdash}/*.html"/>
        <include name="${boulderdash}/*.java"/>

        <include name="${builtin}/README"/>
        <include name="${builtin}/*.t"/>
        <include name="${builtin}/*.adt"/>

        <include name="${caml}/README"/>
        <include name="${caml}/Makefile"/>
        <include name="${caml}/*.t"/>
        <include name="${caml}/peanotype.ml"/>
        <include name="${caml}/tomExtension.ml"/>
        <include name="${caml}/tomList.ml"/>

        <include name="${cell}/*.t"/>
        <include name="${cell}/*.java"/>
        <include name="${cell}/*.gif"/>

        <!-- not yet distribution ready
        <include name="${csmaca}/*.t"/>
        -->

        <include name="${dom}/README"/>
        <include name="${dom}/*.t"/>
        <include name="${dom}/*.adt"/>
        <include name="${dom}/*.xml"/>

        <include name="${expression}/README"/>
        <include name="${expression}/*.t"/>
        <include name="${expression}/*.java"/>

        <include name="${ferus}/*.t"/>
        <include name="${ferus}/Makefile"/>
        <include name="${ferus}/*.adt"/>
        <include name="${ferus}/*.vas"/>

        <include name="${gom}/*.t"/>
				<include name="${gom}/*.gom"/>

        <include name="${gomoku}/*.t"/>
        <include name="${gomoku}/*.vas"/>

        <include name="${gterm}/*.t"/>
        <include name="${gterm}/*.java"/>

        <include name="${gtree}/README"/>
        <include name="${gtree}/*.t"/>
        <include name="${gtree}/*.adt"/>

        <include name="${integerc}/README"/>
        <include name="${integerc}/*.t"/>
        <include name="${integerc}/Makefile"/>
        <include name="${integerc}/*.adt"/>

        <include name="${list}/README"/>
        <include name="${list}/*.t"/>
        <include name="${list}/*.adt"/>

        <include name="${master}/README"/>
        <include name="${master}/*.t"/>
				<include name="${master}/*.vas"/>

        <include name="${matching}/README"/>
        <include name="${matching}/*.t"/>
				<include name="${matching}/*.vas"/>
				
        <include name="${nspk}/README"/>
        <include name="${nspk}/*.t"/>
        <include name="${nspk}/*.adt"/>

        <include name="${p3p}/README"/>
        <include name="${p3p}/*.t"/>
        <include name="${p3p}/*.xml"/>

        <include name="${peano}/README"/>
        <include name="${peano}/*.adt"/>
        <include name="${peano}/*.vas"/>
        <include name="${peano}/*.t"/>

        <include name="${pnspk}/README"/>
        <include name="${pnspk}/*.t"/>
        <include name="${pnspk}/*.adt"/>

        <include name="${poly}/README"/>
        <include name="${poly}/*.t"/>
        <include name="${poly}/Poly.signature"/>
        <include name="${poly}/*.adt"/>
        <include name="${poly}/*.java"/>

        <include name="${pqueens}/README"/>
        <include name="${pqueens}/*.t"/>
        <include name="${pqueens}/*.tom"/>

        <include name="${prodrule}/README"/>
        <include name="${prodrule}/*.t"/>

        <include name="${propp}/README"/>
        <include name="${propp}/*.t"/>
        <include name="${propp}/*.adt"/>
        <include name="${propp}/*.g"/>
        <include name="${propp}/*.sty"/>
        <include name="${propp}/examples"/>

        <include name="${rbtree}/README"/>
        <include name="${rbtree}/*.t"/>
        <include name="${rbtree}/*.adt"/>
        
        <include name="${set}/README"/>
        <include name="${set}/*.t"/>
        <include name="${set}/*.adt"/>

        <include name="${strategy}/README"/>
        <include name="${strategy}/*.t"/>
        <include name="${strategy}/*.vas"/>

        <include name="${strings}/README"/>
        <include name="${strings}/*.t"/>

        <include name="${structure}/README"/>
        <include name="${structure}/*.t"/>
        <include name="${structure}/*.vas"/>
        <include name="${structure}/*.tom"/>

        <include name="${ted}/example.aterm"/>
        <include name="${ted}/aterms"/>
        <include name="${ted}/*.ted"/>
        <include name="${ted}/**/*.t"/>
        <include name="${ted}/**/*.tom"/>
        <include name="${ted}/**/*.java"/>

        <include name="${tutorial}/README"/>
        <include name="${tutorial}/*.t"/>
        <include name="${tutorial}/*.java"/>
        <include name="${tutorial}/*.xml"/>

        <include name="${vas}/README"/>
        <include name="${vas}/*.t"/>

        <include name="${xml}/README"/>
        <include name="${xml}/*.t"/>
        <include name="${xml}/*.adt"/>
        <include name="${xml}/*.xml"/>
        <include name="${xml}/*.html"/>

        <include name="${xquery}/README"/>
        <include name="${xquery}/*.t"/>
        <include name="${xquery}/*.xml"/>
        <include name="${xquery}/*.xquery"/>
        <include name="${xquery}/*.html"/>

        <include name="${analysis}/*.t"/>
        <include name="${analysis}/*.vas"/>


        <not>
          <present targetdir="${examples.dir}">
            <mapper type="glob" 
                    from="**/*.java" 
                    to="**/*.t"/>
          </present>
        </not>
      </tarfileset>
    </tar>
  </target>

  <target name="clean.dist" description="Mr proper" depends="clean">
    <delete dir="${examples.dist}"/>
  </target>

  <target name="clean" 
          description="Cleans everything in the project" 
          depends="clean.examples">
  </target> 

  <target name="initjunit">
    <taskdef name="tomjunit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
      <classpath refid="tom.classpath"/>
    </taskdef>
  </target>

  <target name="junit" description="Runs junit acceptance tests" depends="examples, initjunit">
    <tomjunit printsummary="yes"
              fork="true"
              haltonfailure="false"
              failureproperty="tests.failed"
              showoutput="true">
      <classpath>
        <path refid="tom.classpath"/>
        <pathelement location="${examples.build}"/>
      </classpath>
      <batchtest>
        <fileset dir="${examples.gen}">
          <include name="**/Test*.java"/>
        </fileset>
        <fileset dir="${examples.dir}">
          <include name="**/Test*.java"/>
          <exclude name="gen/**/*"/>
        </fileset>
      </batchtest>
    </tomjunit>
    <fail if="tests.failed">
      ****************************************************
      ****************************************************
      One or more tests failed. Check the output...
      ****************************************************
      ****************************************************
    </fail>
  </target>

  
</project>
