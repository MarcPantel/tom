type T 
type S 

logic f : T,T -> T
logic a : T
logic b : T
logic symb : T -> S
logic f_1 : T -> T
logic f_2 : T -> T
logic f_ : S
logic a_ : S
logic b_ : S

axiom symb_f : forall t:T. (symb(t) = f_) <-> exists x:T. exists y:T. (t = (f(x,y)))
axiom symb_a : forall t:T. (symb(t) = a_) <-> (t = a)
axiom symb_b : forall t:T. (symb(t) = b_) <-> (t = b)

axiom st1_f : forall x:T. forall y:T. (f_1(f(x,y)) = x)
axiom st2_f : forall x:T. forall y:T. (f_2(f(x,y)) = y)

logic eq: 'a,'a -> bool
axiom eq_def: forall x:'a. forall y:'a. (eq(x,y) = true <-> x=y) and (eq(x,y)=false <-> x<>y)

axiom neq_a_b : a<>b
axiom neq_f_a : forall x:T. forall y:T. f(x,y) <> a
axiom neq_f_b : forall x:T. forall y:T. f(x,y) <> b

type GS
logic gs: T->GS
logic var: T
logic isin: T,GS -> prop
logic neg: T->T

axiom gs_f: 
  forall t:T. forall x:T. forall y:T. 
    isin(t,gs(f(x,y))) 
    <-> (exists z:T. exists zz:T. t=f(z,zz) and isin(z,gs(x)) and isin(zz,gs(y)))

axiom gs_a:
  forall t:T. t=a <-> isin(t,gs(a))
 
axiom gs_b: 
  forall t:T. t=b <-> isin(t,gs(b))

axiom gs_var:
  forall t:T. 
  (t=a 
   or t=b  
   or (exists x:T.exists y:T. t=f(x,y) 
       and isin(x,gs(var)) and isin(y,gs(var)))
  ) <-> isin(t,gs(var))


axiom gs_not: forall t:T. forall x:T. isin(t,gs(neg(x))) <-> (not isin(t,gs(x)))

goal g1: isin(f(a,b),gs(neg(f(b,var))))

let match (t:T) (x: T ref) (y: T ref) =
{ isin(t,gs(var)) }
  if eq (symb t) f_ then
    (
      let st1 = (f_1 t) in
      let st2 = (f_2 t) in
	(
	  x := st1;
	  y := st2;
	  if not eq (symb st2) f_ then
	    true
	  else
	    false
	)
    )
  else
    false

{ result=true <-> (t = f(x,y) and isin(t,gs(f(var,neg(f(var,var))))) ) } 


(* pattern f(x,y@!f(_,_)) *)
  
    

