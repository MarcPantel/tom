type T 
type S 

logic f : T,T -> T
logic a : T
logic symb : T -> S
logic f_1 : T -> T
logic f_2 : T -> T
logic f_ : S
logic a_ : S

axiom symb_f : forall t:T. (symb(t) = f_) <-> exists x:T. exists y:T. (t = (f(x,y)))
axiom symb_a : forall t:T. (symb(t) = a_) <-> (t = a)

axiom st1_f : forall x:T. forall y:T. (f_1(f(x,y)) = x)
axiom st2_f : forall x:T. forall y:T. (f_2(f(x,y)) = y)

(* axiom diff_f_a : forall x:T. forall y:T. not (f(x,y) = a) *)

logic eq: 'a,'a -> bool
axiom eq_def: forall x:'a. forall y:'a. (eq(x,y) = true <-> x=y) and (eq(x,y)=false <-> x<>y)

let match (t:T) (x: T ref) =
  if eq (symb t) f_ then
    let st1 = (f_1 t) in
      ( if eq (symb st1) a_ then 
	  (
 	    x := f_2 t; 
	    true
	  )
	else
	  false 
      )
  else
    false

{ result=true <-> (t = f(a,x)) }

  
    
