
  %include{ int.tom }
  %include{ string.tom }
  %include{ aterm.tom }
  %include{ atermlist.tom }

  %oplist ATermList concATerm (ATerm*){
    is_fsym(t) { t instanceof ATermList } 
    make_empty() { aterm.pure.SingletonFactory.getInstance().makeList() }
    make_insert(e,l) { l.insert(e) }
    get_head(t) { t.getFirst() }
    get_tail(t) { t.getNext() }
    is_empty(t) { t.isEmpty() } 
  }
  
  %op ATerm NodeInfo(text:String,line:int,column:int) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("NodeInfo",2,false) }
    get_slot(text, t) { ((ATermAppl)((ATermAppl)t).getArgument(0)).getAFun().getName() }
    get_slot(line, t) { ((ATermInt)((ATermAppl)t).getArgument(1)).getInt() }
    get_slot(column, t) { ((ATermInt)((ATermAppl)t).getArgument(2)).getInt() }
    make(t,l,c) { SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("NodeInfo",3,false),SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun(t,0,true)),SingletonFactory.getInstance().makeInt(l),SingletonFactory.getInstance().makeInt(c)) }
  }
  
  
  %op ATerm ID(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("ID",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("ID",2,false),i,c) }
  }
  %op ATerm SEQ(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("SEQ",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("SEQ",2,false),i,c) }
  }
  %op ATerm OR(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("OR",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("OR",2,false),i,c) }
  }
  %op ATerm AND(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("AND",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("AND",2,false),i,c) }
  }
  %op ATerm RPAREN(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("RPAREN",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("RPAREN",2,false),i,c) }
  }
  %op ATerm LIST(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("LIST",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("LIST",2,false),i,c) }
  }
  %op ATerm WS(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("WS",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("WS",2,false),i,c) }
  }
  %op ATerm LPAREN(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("LPAREN",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("LPAREN",2,false),i,c) }
  }
  %op ATerm IMPL(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("IMPL",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("IMPL",2,false),i,c) }
  }
  %op ATerm NOT(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("NOT",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("NOT",2,false),i,c) }
  }
  %op ATerm END(info:ATerm,childs:ATermList) {
    is_fsym(t) { (t != null) && ((ATermAppl)t).getAFun() == SingletonFactory.getInstance().makeAFun("END",2,false) }
    get_slot(info, t) { ((ATermAppl)t).getArgument(0) }
    get_slot(childs, t) { (ATermList)((ATermAppl)t).getArgument(1) }
    make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun("END",2,false),i,c) }
  }