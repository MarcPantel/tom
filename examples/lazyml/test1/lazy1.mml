type List(a) = Nil() | Cons(a,List(a))

extern Bool @eqInt(Int,Int)
extern Int @plus(Int,Int)
extern Int @minus(Int,Int)

;

let pred n = @minus(n,1)
in let rec go n = Cons(n,go @plus(n,1))  
in let naturals = go 0
in let rec take n l =
  if @eqInt(n,0)
    then Nil()
    else  match l with
          | Cons(x,xs) -> Cons(x,take (pred n) xs)
          end
  end
in let rec foldR z f l =
  match l with
  | Nil() -> z
  | Cons(x,xs) -> f x (foldR z f xs)
  end
in let sum = foldR 0 (fun x y -> @plus(x,y))
in sum (take 1000 naturals)
