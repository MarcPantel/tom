type List(a) = Nil() | Cons(a,List(a))
type P3(a,b,c) = P3(a,b,c)

type Doc = DocNil()
         | DocCons(Doc,Doc)
         | DocText(String)
         | DocNest(Int,Doc)
         | DocBreak(String)
         | DocGroup(Doc)


type SDoc = SNil()
          | SText(String,SDoc)
          | SLine(Int,SDoc)

type Mode = Flat() | Break()

extern Bool @eqInt(Int,Int)
extern Bool @gt(Int,Int)
extern Bool @eqString(String,String)
extern Int @plus(Int,Int)
extern Int @minus(Int,Int)
extern Int @times(Int,Int)
extern String @append(String,String)
extern String @showInt(Int)
extern Bool @eqChar(Char,Char)
extern String @consString(Char,String)
extern Int @strLen(String)
extern String @showChar(Char)
extern List(Char) @convertString(String)
extern Int @valueOf(Char)
extern String @getInput()


type ModulePretty = ModulePretty(
  (* conc *) Doc -> Doc -> Doc,
  (* empty *) Doc,
  (* text *) String -> Doc,
  (* nest *) Int -> Doc -> Doc,
  (* brk *) Doc,
  (* breakWith *) String -> Doc,
  (* group *) Doc -> Doc,
  (* pretty *) Int -> Doc -> String
)

;

(* -- utils -- *)

let pred n = @minus(n,1)
in let ap x y = @append(x,y)
in let eqInt x y = @eqInt(x,y) 
in let not x = if x then False() else True() end
in let and x y = if x then y else False() end
in let or x y = if x then True() else y end
in let gt x y = @gt(x,y)
in let le x y = not (gt x y)
in let lt x y = and (le x y) (not (eqInt x y))
in let ge x y = or (gt x y) (eqInt x y)
in let strlen s = @strLen(s)

in let rec replicate i x =
  if eqInt 0 i 
    then Nil() 
    else Cons(x,replicate (pred i) x)
  end

in let rec toString l = 
  match l with
  | Nil () -> ""
  | Cons(x,xs) -> @consString(x,toString xs)
  end


(* -- striclty pretty -- *)

in let conc x y    = DocCons(x,y)
in let empty       = DocNil()
in let text s      = DocText(s)
in let nest i x    = DocNest(i,x)
in let brk         = DocBreak(" ")
in let breakWith s = DocBreak(s)
in let group d     = DocGroup(d)

in let rec sdocToString d =
  match d with
  | SNil()     -> ""
  | SText(s,d) -> ap s (sdocToString d)
  | SLine(i,d) -> let prefix = toString (replicate i ' ')
                  in ap "\n" (ap prefix (sdocToString d))
  end

in let rec fits w t =
  let aux =
    match t with 
    | Nil()                               -> True()
    | Cons(P3(i,m,DocNil()),z)            -> fits w z
    | Cons(P3(i,m,DocCons(x,y)),z)        -> fits w Cons(P3(i,m,x),Cons(P3(i,m,y),z))
    | Cons(P3(i,m,DocNest(j,x)),z)        -> fits w Cons(P3(@plus(i,j),m,x),z)
    | Cons(P3(i,m,DocText(s)),z)          -> fits (@minus(w,strlen s)) z
    | Cons(P3(i,Flat(), DocBreak(s)),z)   -> fits (@minus(w,strlen s)) z
    | Cons(P3(i,Break(),DocBreak(foo)),z) -> True()  (* absurd case *)
    | Cons(P3(i,m,DocGroup(x)),z)         -> fits w Cons(P3(i,Flat(),x),z)
    end
  in if lt w 0 then False() else aux end


in let rec format w k t =
  match t with 
  | Nil()                             -> SNil()
  | Cons(P3(i,Flat(), DocBreak(s)),z) -> SText(s,format w @plus(k,strlen s) z)
  | Cons(P3(i,Break(),DocBreak(s)),z) -> SLine(i,format w i z)
  | Cons(P3(i,m,DocNil()),z)          -> format w k z
  | Cons(P3(i,m,DocCons(x,y)),z)      -> format w k Cons(P3(i,m,x),Cons(P3(i,m,y),z))
  | Cons(P3(i,m,DocNest(j,x)),z)      -> format w k Cons(P3(@plus(i,j),m,x),z)
  | Cons(P3(i,m,DocText(s)),z)        -> SText(s,format w @plus(k,strlen s) z)
  | Cons(P3(i,m,DocGroup(x)),z)       -> if fits @minus(w,k) Cons(P3(i,Flat(),x),z)
                                           then format w k Cons(P3(i,Flat() ,x),z)
                                           else format w k Cons(P3(i,Break(),x),z)
                                         end
  end

in let pretty i d = sdocToString (format i 0 Cons(P3(0,Flat(),d),Nil()))

in let pretty w doc =
    let sdoc = format w 0 Cons(P3(0,Flat(),DocGroup(doc)),Nil()) 
    in sdocToString sdoc 

in ModulePretty(
  conc,
  empty,
  text,
  nest,
  brk,
  breakWith,
  group,
  pretty
)
