module Ast
imports String 
public

abstract syntax
Instruction = If(condition:Expression,succesInst:InstructionList,failureInst:InstructionList)
            | WhileDo(condition:Expression,doInst:InstructionList) 
            | Let(variable:Variable,term:Term,instr:InstructionList)
            | LetRef(variable:Variable,term:Term,instr:InstructionList)
            | LetAssign(variable:Variable,term:Term)
            | Nop()

InstructionList = concInstruction(Instruction*)

Expression = Negation(arg:Expression)
           | And(arg1:Expression,arg2:Expression)
           | Or(arg1:Expression,arg2:Expression)
           | True() 
           | False()
           | EqualTerm(kid1:Term,kid2:Term)
           
Variable = Name(string:String)

Term = a()
     | b() 
     | f(arg1: Term, arg2:Term)
     | g(arg:Term)
     | Var(v:Variable)


