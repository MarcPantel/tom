(* test alpha equivalence *)
fun x -> ((fun y -> fun x -> x y) x)
;

(* should be equivalent to the normal form of the previous one *)
fun x -> fun y -> (y x)
;

(* test let polymorphism : should be 'a -> 'b -> 'b *)
fun a -> fun b ->
let first = 
  fun x -> fun y -> x
in 
let toto = first a b b in
  first b a 
;

(* test constructors type inference *)
fun g ->
fun x -> 
let f = fun n -> g S(n) in
 f x
;

(* test match type inference *)
fun y ->
fun z ->
fun x ->
fun f -> 
match S(x) with
| S(a)   -> f a
| S(Z()) -> y
| Z() -> z
end
;

(* full test *)

let pred = fun n -> 
 match n with
 | Z() -> Z()
 | S(m) -> m
 end
in pred S(S(S(Z())))

