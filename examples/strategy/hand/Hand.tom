/*
 * Copyright (c) 2004-2006, INRIA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the INRIA nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%include { string.tom }

/*
 * Term = A()
 *      | B()
 *      | G(arg:Slot)
 *      | F(arg1:Term, arg2:Term)
 * Slot = Name(name:String)
 */

%typeterm Term {
  implement { strategy.hand.Term }
  is_sort(t) { t instanceof strategy.hand.Term }
  visitor_fwd { strategy.hand.BasicStrategy}
  equals(t1,t2) {t1.equals(t2)}
}

%typeterm Slot {
  implement { strategy.hand.Slot }
  is_sort(t) { t instanceof strategy.hand.Slot }
  visitor_fwd { strategy.hand.BasicStrategy}
  equals(t1,t2) {t1.equals(t2)}
}

%op Term F(arg1:Term, arg2:Term) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.F) }
  get_slot(arg1,t) { ((F) t).a }
  get_slot(arg2,t) { ((F) t).b }
  make(t0, t1) { new strategy.hand.F(t0, t1) }
}

%op Term A() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.A) }
  make() { new strategy.hand.A() }
}

%op Term B() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.B) }
  make() { new strategy.hand.B() }
}

%op Term C() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.C) }
  make() { new strategy.hand.C() }
}

%op Term G(arg:Slot) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.G) }
  get_slot(arg,t) { ((G) t).s }
  make(t0) { new strategy.hand.G(t0) }
}

%op Slot Name(name:String) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.Name) }
  get_slot(name,t) { ((Name) t).name }
  make(t0) { new strategy.hand.Name(t0) }
}
