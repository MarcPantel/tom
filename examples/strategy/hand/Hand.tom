%include { string.tom }

/*
 * Term = A()
 *      | B()
 *      | G(arg:Slot)
 *      | F(arg1:Term, arg2:Term)
 * Slot = Name(name:String)
 */

%typeterm Term {
  implement { strategy.hand.Term }
  visitor_fwd { strategy.hand.BasicStrategy}
  equals(t1,t2) {t1.equals(t2)}
}

%typeterm Slot {
  implement { strategy.hand.Slot }
  visitor_fwd { strategy.hand.BasicStrategy}
  equals(t1,t2) {t1.equals(t2)}
}

%op Term F(arg1:Term, arg2:Term) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.F) }
  get_slot(arg1,t) { ((F) t).a }
  get_slot(arg2,t) { ((F) t).b }
  make(t0, t1) { new strategy.hand.F(t0, t1) }
}

%op Term A() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.A) }
  make() { new strategy.hand.A() }
}

%op Term B() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.B) }
  make() { new strategy.hand.B() }
}

%op Term C() {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.C) }
  make() { new strategy.hand.C() }
}

%op Term G(arg:Slot) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.G) }
  get_slot(arg,t) { ((G) t).s }
  make(t0) { new strategy.hand.G(t0) }
}

%op Slot Name(name:String) {
  is_fsym(t) { (t!= null) && (t instanceof strategy.hand.Name) }
  get_slot(name,t) { ((Name) t).name }
  make(t0) { new strategy.hand.Name(t0) }
}
