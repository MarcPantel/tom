%include { int.tom }

/*
 * List = conc(int*)
 */

%typeterm List {
  implement { gombench.list.List }
  equals(t1,t2) {t1.equals(t2)}
}

%op List Cons(arg1:int, arg2:List) {
  is_fsym(t) { (t!= null) && (t instanceof gombench.list.Cons) }
  get_slot(arg1,t) { ((Cons)t).head }
  get_slot(arg2,t) { ((Cons)t).tail }
  make(t0, t1) { new gombench.list.Cons(t0, t1) }
}

%op List Empty() {
  is_fsym(t) { (t!= null) && (t instanceof gombench.list.Empty) }
  make() { new gombench.list.Empty() }
}

%oplist List conc( int* ) {
  is_fsym(t)       { t instanceof gombench.list.List }
  make_empty()     { new gombench.list.Empty() }
  make_insert(e,l) { new gombench.list.Cons(e, l) }
  get_head(l)      { ((gombench.list.Cons)l).head }
  get_tail(l)      { ((gombench.list.Cons)l).tail }
  is_empty(l)      { (l instanceof gombench.list.Empty) }
}
