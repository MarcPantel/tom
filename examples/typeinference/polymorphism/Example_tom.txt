
%typeterm B {
  implement { polyexample.example.types.B }
  is_sort(t) { ($t instanceof polyexample.example.types.B) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm A {
  implement { polyexample.example.types.A }
  is_sort(t) { ($t instanceof polyexample.example.types.A) }

  equals(t1,t2) { ($t1==$t2) }

}
%op B b1() {
  is_fsym(t) { ($t instanceof polyexample.example.types.b.b1) }
  make() { polyexample.example.types.b.b1.make() }
}

%op B b2() {
  is_fsym(t) { ($t instanceof polyexample.example.types.b.b2) }
  make() { polyexample.example.types.b.b2.make() }
}

%op A a() {
  is_fsym(t) { ($t instanceof polyexample.example.types.a.a) }
  make() { polyexample.example.types.a.a.make() }
}

/*
//TODO : create a polymorphic class to ExpC
//ExpC --> Exp[C]
%typeterm ExpC {
  implement { polyexample.example.types.Exp }
  is_sort(t) { (  $t.getClass() == this.getClass()) }

  equals(t1,t2) { ($t1==$t2) }

}

//ExpC --> Exp[C]
%op ExpC f(C n) {
  is_fsym(t) { ($t.getClass() == this.getClass().f) }
  get_slot(n, t) { $t.getn() }
  make(t0) { this.getClass().f.f.make($t0) }
}
*/
