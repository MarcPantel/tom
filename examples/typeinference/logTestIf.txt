Code before type inference = 
Tom(concCode(
      TargetLanguageToCode(TL("import testif.testif.types.*;\npublic class TestIf{\n  ",TextPosition(1,1),TextPosition(3,3))),
      TomInclude(concCode(TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("int"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t1"),Type("int",TLType(" int "))),BQVariable(concOption(OriginTracking(Name("t2"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t2"),Type("int",TLType(" int "))),Code(" {0}=={1} "),OriginTracking(Name("equals"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t"),Type("int",TLType(" int "))),Code(" true "),OriginTracking(Name("is_sort"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),OriginTracking(Name("int"),29,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),TargetLanguageToCode(TL("\n",TextPosition(33,1),TextPosition(34,1))))),DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t1"),Type("B",TLType(" testif.testif.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t2"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0} instanceof testif.testif.types.B) "),OriginTracking(Name("is_sort"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),OriginTracking(Name("B"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),TargetLanguageToCode(TL("\n\n",TextPosition(14,1),TextPosition(16,1))))),
      TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    TestIf test = new TestIf();\n    test.plus10(10);\n  }\n\n  public int plus10(int n) {\n    ",TextPosition(8,4),TextPosition(16,5))),
      InstructionToCode(
        Match(
          concConstraintInstruction(
            ConstraintInstruction(
              MatchConstraint(
                Variable(concOption(OriginTracking(Name("x"),17,"TestIf.t")),Name("x"),TypeVar("unknown type",0),concConstraint()),
                BQVariable(concOption(OriginTracking(Name("n"),17,"TestIf.t")),Name("n"),Type("int",TLType(" int ")))),
              RawAction(
                If(
                  TrueTL(),
                  AbstractBlock(
                    concInstruction(
                      CodeToInstruction(
                        TargetLanguageToCode(TL(" \n        //if (\140x>1) {  \n          return ",TextPosition(17,21),TextPosition(19,18)))),
                      BQTermToInstruction(
                        Composite(
                          CompositeBQTerm(
                            BQAppl(
                              concOption(OriginTracking(Name("plus10"),19,"TestIf.t"),ModuleName("default")),
                              Name("plus10"),
                              concBQTerm(
                                Composite(
                                  CompositeBQTerm(
                                    BQVariable(concOption(OriginTracking(Name("x"),19,"TestIf.t"),ModuleName("default")),Name("x"),TypeVar("unknown type",1))),
                                  CompositeTL(ITL("+")),
                                  CompositeTL(ITL(" ")),
                                  CompositeTL(ITL("10")))))))),
                      CodeToInstruction(TargetLanguageToCode(TL("; \n        //}\n      ",TextPosition(19,33),TextPosition(21,7)))))),
                  Nop())),
              concOption(OriginTracking(Name("Pattern"),17,"TestIf.t"),OriginalText(Name("n"))))),concOption(OriginTracking(Name("Match"),16,"TestIf.t"),ModuleName("default")))),
      TargetLanguageToCode(TL("\n    return -1;\n  }\n}\n",TextPosition(22,5),TextPosition(26,1)))))



Code after type inference = 
Tom(concCode(
      TargetLanguageToCode(TL("import testif.testif.types.*;\npublic class TestIf{\n  ",TextPosition(1,1),TextPosition(3,3))),
      TomInclude(concCode(TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("int"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t1"),Type("int",TLType(" int "))),BQVariable(concOption(OriginTracking(Name("t2"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t2"),Type("int",TLType(" int "))),Code(" {0}=={1} "),OriginTracking(Name("equals"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t"),Type("int",TLType(" int "))),Code(" true "),OriginTracking(Name("is_sort"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),OriginTracking(Name("int"),29,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),TargetLanguageToCode(TL("\n",TextPosition(33,1),TextPosition(34,1))))),DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t1"),Type("B",TLType(" testif.testif.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t2"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0} instanceof testif.testif.types.B) "),OriginTracking(Name("is_sort"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),OriginTracking(Name("B"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),TargetLanguageToCode(TL("\n\n",TextPosition(14,1),TextPosition(16,1))))),
      TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    TestIf test = new TestIf();\n    test.plus10(10);\n  }\n\n  public int plus10(int n) {\n    ",TextPosition(8,4),TextPosition(16,5))),
      InstructionToCode(
        Match(
          concConstraintInstruction(
            ConstraintInstruction(
              MatchConstraint(
                Variable(concOption(OriginTracking(Name("x"),17,"TestIf.t")),Name("x"),Type("int",TLType(" int ")),concConstraint()),
                BQVariable(concOption(OriginTracking(Name("n"),17,"TestIf.t")),Name("n"),Type("int",TLType(" int ")))),
              RawAction(
                If(
                  TrueTL(),
                  AbstractBlock(
                    concInstruction(
                      CodeToInstruction(
                        TargetLanguageToCode(TL(" \n        //if (\140x>1) {  \n          return ",TextPosition(17,21),TextPosition(19,18)))),
                      BQTermToInstruction(
                        Composite(
                          CompositeBQTerm(
                            FunctionCall(
                              Name("plus10"),
                              EmptyType(),
                              concBQTerm(
                                Composite(
                                  CompositeBQTerm(
                                    BQVariable(concOption(OriginTracking(Name("x"),19,"TestIf.t"),ModuleName("default")),Name("x"),Type("unknown type",EmptyTargetLanguageType()))),
                                  CompositeTL(ITL("+")),
                                  CompositeTL(ITL(" ")),
                                  CompositeTL(ITL("10")))))))),
                      CodeToInstruction(TargetLanguageToCode(TL("; \n        //}\n      ",TextPosition(19,33),TextPosition(21,7)))))),
                  Nop())),
                  concOption(OriginTracking(Name("Pattern"),17,"TestIf.t"),OriginalText(Name("n"))))),concOption(OriginTracking(Name("Match"),16,"TestIf.t"),ModuleName("default")))),
      TargetLanguageToCode(TL("\n    return -1;\n  }\n}\n",TextPosition(22,5),TextPosition(26,1)))))


---- ERROR (WITH "if") :
Code before type inference = 
Tom(concCode(
      TargetLanguageToCode(TL("import testif.testif.types.*;\npublic class TestIf{\n  ",TextPosition(1,1),TextPosition(3,3))),
      TomInclude(concCode(TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("int"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t1"),Type("int",TLType(" int "))),BQVariable(concOption(OriginTracking(Name("t2"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t2"),Type("int",TLType(" int "))),Code(" {0}=={1} "),OriginTracking(Name("equals"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t"),Type("int",TLType(" int "))),Code(" true "),OriginTracking(Name("is_sort"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),OriginTracking(Name("int"),29,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),TargetLanguageToCode(TL("\n",TextPosition(33,1),TextPosition(34,1))))),DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t1"),Type("B",TLType(" testif.testif.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t2"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0} instanceof testif.testif.types.B) "),OriginTracking(Name("is_sort"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),OriginTracking(Name("B"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),TargetLanguageToCode(TL("\n\n",TextPosition(14,1),TextPosition(16,1))))),
      TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    TestIf test = new TestIf();\n    test.plus10(10);\n  }\n\n  public int plus10(int n) {\n    ",TextPosition(8,4),TextPosition(16,5))),
      InstructionToCode(
        Match(
          concConstraintInstruction(
            ConstraintInstruction(
              MatchConstraint(
                Variable(concOption(OriginTracking(Name("x"),17,"TestIf.t")),Name("x"),TypeVar("unknown type",0),concConstraint()),
                BQVariable(concOption(OriginTracking(Name("n"),17,"TestIf.t")),Name("n"),Type("int",TLType(" int ")))),
              RawAction(
                If(
                  TrueTL(),
                  AbstractBlock(
                    concInstruction(
                      CodeToInstruction(
                        TargetLanguageToCode(TL(" \n        if (",TextPosition(17,21),TextPosition(18,13)))),
                      BQTermToInstruction(
                        BQVariable(concOption(OriginTracking(Name("x"),18,"TestIf.t"),ModuleName("default")),Name("x"),TypeVar("unknown type",1))),
                      CodeToInstruction(
                        TargetLanguageToCode(TL(">1) {  \n          return ",TextPosition(18,16),TextPosition(19,18)))),
                      BQTermToInstruction(
                        Composite(
                          CompositeBQTerm(
                            BQAppl(
                              concOption(OriginTracking(Name("plus10"),19,"TestIf.t"),ModuleName("default")),
                              Name("plus10"),
                              concBQTerm(
                                Composite(
                                  CompositeBQTerm(
                                    BQVariable(concOption(OriginTracking(Name("x"),19,"TestIf.t"),ModuleName("default")),Name("x"),TypeVar("unknown type",2))),
                                  CompositeTL(ITL("+")),
                                  CompositeTL(ITL(" ")),
                                  CompositeTL(ITL("10")))))))),
                      CodeToInstruction(TargetLanguageToCode(TL("; \n        }\n      ",TextPosition(19,33),TextPosition(21,7)))))),
                      Nop())),
                      concOption(OriginTracking(Name("Pattern"),17,"TestIf.t"),OriginalText(Name("n"))))),concOption(OriginTracking(Name("Match"),16,"TestIf.t"),ModuleName("default")))),
      TargetLanguageToCode(TL("\n    return -1;\n  }\n}\n",TextPosition(22,5),TextPosition(26,1)))))



Code after type inference = 
Tom(concCode(
      TargetLanguageToCode(TL("import testif.testif.types.*;\npublic class TestIf{\n  ",TextPosition(1,1),TextPosition(3,3))),
      TomInclude(concCode(TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("int"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t1"),Type("int",TLType(" int "))),BQVariable(concOption(OriginTracking(Name("t2"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t2"),Type("int",TLType(" int "))),Code(" {0}=={1} "),OriginTracking(Name("equals"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t"),Type("int",TLType(" int "))),Code(" true "),OriginTracking(Name("is_sort"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),OriginTracking(Name("int"),29,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),TargetLanguageToCode(TL("\n",TextPosition(33,1),TextPosition(34,1))))),DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t1"),Type("B",TLType(" testif.testif.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t2"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom")),Name("t"),Type("B",TLType(" testif.testif.types.B "))),Code(" ({0} instanceof testif.testif.types.B) "),OriginTracking(Name("is_sort"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),OriginTracking(Name("B"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/typeinference/testif/testif/TestIf.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),TargetLanguageToCode(TL("\n\n",TextPosition(14,1),TextPosition(16,1))))),
      TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    TestIf test = new TestIf();\n    test.plus10(10);\n  }\n\n  public int plus10(int n) {\n    ",TextPosition(8,4),TextPosition(16,5))),
      InstructionToCode(
        Match(
          concConstraintInstruction(
            ConstraintInstruction(
              MatchConstraint(
                Variable(concOption(OriginTracking(Name("x"),17,"TestIf.t")),Name("x"),EmptyType(),concConstraint()),
                BQVariable(concOption(OriginTracking(Name("n"),17,"TestIf.t")),Name("n"),Type("int",TLType(" int ")))),
              RawAction(
                If(
                  TrueTL(),
                  AbstractBlock(
                    concInstruction(
                      CodeToInstruction(
                        TargetLanguageToCode(TL(" \n        if (",TextPosition(17,21),TextPosition(18,13)))),
                      BQTermToInstruction(
                        BQVariable(concOption(OriginTracking(Name("x"),18,"TestIf.t"),ModuleName("default")),Name("x"),EmptyType())),
                      CodeToInstruction(
                        TargetLanguageToCode(TL(">1) {  \n          return ",TextPosition(18,16),TextPosition(19,18)))),
                      BQTermToInstruction(
                        Composite(
                          CompositeBQTerm(
                            FunctionCall(
                              Name("plus10"),
                              EmptyType(),
                              concBQTerm(
                                Composite(
                                  CompositeBQTerm(
                                    BQVariable(concOption(OriginTracking(Name("x"),19,"TestIf.t"),ModuleName("default")),Name("x"),EmptyType())),
                                  CompositeTL(ITL("+")),
                                  CompositeTL(ITL(" ")),
                                  CompositeTL(ITL("10")))))))),
                      CodeToInstruction(TargetLanguageToCode(TL("; \n        }\n      ",TextPosition(19,33),TextPosition(21,7)))))),
                  Nop())),
                  concOption(OriginTracking(Name("Pattern"),17,"TestIf.t"),OriginalText(Name("n"))))),concOption(OriginTracking(Name("Match"),16,"TestIf.t"),ModuleName("default")))),
      TargetLanguageToCode(TL("\n    return -1;\n  }\n}\n",TextPosition(22,5),TextPosition(26,1)))))
  
