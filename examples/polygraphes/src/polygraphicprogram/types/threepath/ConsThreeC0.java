/* Generated by TOM (version 20071002 (src)): Do not edit this file */

package polygraphicprogram.types.threepath;


public final class ConsThreeC0 extends polygraphicprogram.types.threepath.ThreeC0 implements tom.library.sl.Visitable  {

private ConsThreeC0() {}

private int hashCode;
private static ConsThreeC0 proto = new ConsThreeC0();
/* Generated by TOM (version 20071002 (src)): Do not edit this file */
/* Generated by TOM (version 20071002 (src)): Do not edit this file */
private static boolean tom_equal_term_char(char t1, char t2) { return (t1==t2) 
;
}
private static boolean tom_is_sort_char(char t) { return  true ;
}
private static boolean tom_equal_term_String(String t1, String t2) { return (t1.equals(t2)) 
;
}
private static boolean tom_is_sort_String(String t) { return  t instanceof String ;
}
private static boolean tom_equal_term_ThreePath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_ThreePath(Object t) { return  t instanceof polygraphicprogram.types.ThreePath ;
}
private static boolean tom_equal_term_CellType(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_CellType(Object t) { return  t instanceof polygraphicprogram.types.CellType ;
}
private static boolean tom_equal_term_TwoPath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_TwoPath(Object t) { return  t instanceof polygraphicprogram.types.TwoPath ;
}
private static boolean tom_equal_term_OnePath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_OnePath(Object t) { return  t instanceof polygraphicprogram.types.OnePath ;
}
private static boolean tom_is_fun_sym_ThreeId( polygraphicprogram.types.ThreePath  t) { return  (t instanceof polygraphicprogram.types.threepath.ThreeId) ;
}
private static  polygraphicprogram.types.TwoPath  tom_get_slot_ThreeId_twoPath( polygraphicprogram.types.ThreePath  t) { return  t.gettwoPath() ;
}
private static boolean tom_is_fun_sym_TwoId( polygraphicprogram.types.TwoPath  t) { return  (t instanceof polygraphicprogram.types.twopath.TwoId) ;
}
private static  polygraphicprogram.types.OnePath  tom_get_slot_TwoId_onePath( polygraphicprogram.types.TwoPath  t) { return  t.getonePath() ;
}
private static boolean tom_is_fun_sym_Id( polygraphicprogram.types.OnePath  t) { return  (t instanceof polygraphicprogram.types.onepath.Id) ;
}
private static boolean tom_is_fun_sym_ThreeC0( polygraphicprogram.types.ThreePath  t) { return  ((t instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (t instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) ;
}
private static  polygraphicprogram.types.ThreePath  tom_empty_list_ThreeC0() { return polygraphicprogram.types.threepath.EmptyThreeC0.make() 

; }private static  polygraphicprogram.types.ThreePath  tom_cons_list_ThreeC0( polygraphicprogram.types.ThreePath  e,  polygraphicprogram.types.ThreePath  l) { return  polygraphicprogram.types.threepath.ConsThreeC0.make(e,l) ; }private static  polygraphicprogram.types.ThreePath  tom_get_head_ThreeC0_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getHeadThreeC0() ;
}
private static  polygraphicprogram.types.ThreePath  tom_get_tail_ThreeC0_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getTailThreeC0() ;
}
private static boolean tom_is_empty_ThreeC0_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.isEmptyThreeC0() ;
}

  private static   polygraphicprogram.types.ThreePath  tom_append_list_ThreeC0( polygraphicprogram.types.ThreePath l1,  polygraphicprogram.types.ThreePath  l2) {
    if( l1.isEmptyThreeC0() ) {
      return l2;
    } else if( l2.isEmptyThreeC0() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? l1.getTailThreeC0() :tom_empty_list_ThreeC0()).isEmptyThreeC0() ) {
        return  polygraphicprogram.types.threepath.ConsThreeC0.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? l1.getHeadThreeC0() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.threepath.ConsThreeC0.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? l1.getHeadThreeC0() :l1),tom_append_list_ThreeC0((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? l1.getTailThreeC0() :tom_empty_list_ThreeC0()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC0.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.ThreePath  tom_get_slice_ThreeC0( polygraphicprogram.types.ThreePath  begin,  polygraphicprogram.types.ThreePath  end, polygraphicprogram.types.ThreePath  tail) {
    if(tom_equal_term_ThreePath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC0.make((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? begin.getHeadThreeC0() :begin),( polygraphicprogram.types.ThreePath )tom_get_slice_ThreeC0((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC0) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC0)) )? begin.getTailThreeC0() :tom_empty_list_ThreeC0()),end,tail)) ;
    }
  }
  private static boolean tom_is_fun_sym_ThreeC1( polygraphicprogram.types.ThreePath  t) { return  ((t instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (t instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) ;
}
private static  polygraphicprogram.types.ThreePath  tom_empty_list_ThreeC1() { return polygraphicprogram.types.threepath.EmptyThreeC1.make() 

; }private static  polygraphicprogram.types.ThreePath  tom_cons_list_ThreeC1( polygraphicprogram.types.ThreePath  e,  polygraphicprogram.types.ThreePath  l) { return  polygraphicprogram.types.threepath.ConsThreeC1.make(e,l) ; }private static  polygraphicprogram.types.ThreePath  tom_get_head_ThreeC1_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getHeadThreeC1() ;
}
private static  polygraphicprogram.types.ThreePath  tom_get_tail_ThreeC1_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getTailThreeC1() ;
}
private static boolean tom_is_empty_ThreeC1_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.isEmptyThreeC1() ;
}

  private static   polygraphicprogram.types.ThreePath  tom_append_list_ThreeC1( polygraphicprogram.types.ThreePath l1,  polygraphicprogram.types.ThreePath  l2) {
    if( l1.isEmptyThreeC1() ) {
      return l2;
    } else if( l2.isEmptyThreeC1() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? l1.getTailThreeC1() :tom_empty_list_ThreeC1()).isEmptyThreeC1() ) {
        return  polygraphicprogram.types.threepath.ConsThreeC1.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? l1.getHeadThreeC1() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.threepath.ConsThreeC1.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? l1.getHeadThreeC1() :l1),tom_append_list_ThreeC1((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? l1.getTailThreeC1() :tom_empty_list_ThreeC1()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC1.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.ThreePath  tom_get_slice_ThreeC1( polygraphicprogram.types.ThreePath  begin,  polygraphicprogram.types.ThreePath  end, polygraphicprogram.types.ThreePath  tail) {
    if(tom_equal_term_ThreePath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC1.make((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? begin.getHeadThreeC1() :begin),( polygraphicprogram.types.ThreePath )tom_get_slice_ThreeC1((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC1) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC1)) )? begin.getTailThreeC1() :tom_empty_list_ThreeC1()),end,tail)) ;
    }
  }
  private static boolean tom_is_fun_sym_ThreeC2( polygraphicprogram.types.ThreePath  t) { return  ((t instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (t instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) ;
}
private static  polygraphicprogram.types.ThreePath  tom_empty_list_ThreeC2() { return polygraphicprogram.types.threepath.EmptyThreeC2.make() 

; }private static  polygraphicprogram.types.ThreePath  tom_cons_list_ThreeC2( polygraphicprogram.types.ThreePath  e,  polygraphicprogram.types.ThreePath  l) { return  polygraphicprogram.types.threepath.ConsThreeC2.make(e,l) ; }private static  polygraphicprogram.types.ThreePath  tom_get_head_ThreeC2_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getHeadThreeC2() ;
}
private static  polygraphicprogram.types.ThreePath  tom_get_tail_ThreeC2_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.getTailThreeC2() ;
}
private static boolean tom_is_empty_ThreeC2_ThreePath( polygraphicprogram.types.ThreePath  l) { return  l.isEmptyThreeC2() ;
}

  private static   polygraphicprogram.types.ThreePath  tom_append_list_ThreeC2( polygraphicprogram.types.ThreePath l1,  polygraphicprogram.types.ThreePath  l2) {
    if( l1.isEmptyThreeC2() ) {
      return l2;
    } else if( l2.isEmptyThreeC2() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? l1.getTailThreeC2() :tom_empty_list_ThreeC2()).isEmptyThreeC2() ) {
        return  polygraphicprogram.types.threepath.ConsThreeC2.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? l1.getHeadThreeC2() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.threepath.ConsThreeC2.make((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? l1.getHeadThreeC2() :l1),tom_append_list_ThreeC2((( ((l1 instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (l1 instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? l1.getTailThreeC2() :tom_empty_list_ThreeC2()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC2.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.ThreePath  tom_get_slice_ThreeC2( polygraphicprogram.types.ThreePath  begin,  polygraphicprogram.types.ThreePath  end, polygraphicprogram.types.ThreePath  tail) {
    if(tom_equal_term_ThreePath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.threepath.ConsThreeC2.make((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? begin.getHeadThreeC2() :begin),( polygraphicprogram.types.ThreePath )tom_get_slice_ThreeC2((( ((begin instanceof polygraphicprogram.types.threepath.ConsThreeC2) || (begin instanceof polygraphicprogram.types.threepath.EmptyThreeC2)) )? begin.getTailThreeC2() :tom_empty_list_ThreeC2()),end,tail)) ;
    }
  }
  
private polygraphicprogram.types.ThreePath _HeadThreeC0;
private polygraphicprogram.types.ThreePath _TailThreeC0;

/* static constructor */

private static ConsThreeC0 realMake(polygraphicprogram.types.ThreePath _HeadThreeC0, polygraphicprogram.types.ThreePath _TailThreeC0) {
proto.initHashCode( _HeadThreeC0,  _TailThreeC0);
return (ConsThreeC0) factory.build(proto);
}

public static polygraphicprogram.types.ThreePath make(polygraphicprogram.types.ThreePath x, polygraphicprogram.types.ThreePath y) {
if (true) { {
if (tom_is_sort_ThreePath(x)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumberfreshSubject_1=(( polygraphicprogram.types.ThreePath )x);
if (tom_is_sort_ThreePath(y)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumberfreshSubject_2=(( polygraphicprogram.types.ThreePath )y);
if (tom_is_fun_sym_ThreeId(tomMatch81NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch81NameNumber_freshVar_0=tom_get_slot_ThreeId_twoPath(tomMatch81NameNumberfreshSubject_1);
if (tom_is_fun_sym_TwoId(tomMatch81NameNumber_freshVar_0)) {
{  polygraphicprogram.types.OnePath  tomMatch81NameNumber_freshVar_1=tom_get_slot_TwoId_onePath(tomMatch81NameNumber_freshVar_0);
if (tom_is_fun_sym_Id(tomMatch81NameNumber_freshVar_1)) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_2; 

}
}
}
}
}
}
if (tom_is_fun_sym_ThreeId(tomMatch81NameNumberfreshSubject_2)) {
{  polygraphicprogram.types.TwoPath  tomMatch81NameNumber_freshVar_2=tom_get_slot_ThreeId_twoPath(tomMatch81NameNumberfreshSubject_2);
if (tom_is_fun_sym_TwoId(tomMatch81NameNumber_freshVar_2)) {
{  polygraphicprogram.types.OnePath  tomMatch81NameNumber_freshVar_3=tom_get_slot_TwoId_onePath(tomMatch81NameNumber_freshVar_2);
if (tom_is_fun_sym_Id(tomMatch81NameNumber_freshVar_3)) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_1; 

}
}
}
}
}
}
if (tom_is_fun_sym_ThreeC0(tomMatch81NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_4=tomMatch81NameNumberfreshSubject_1;
if (!( ( tom_is_empty_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_4) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_4, tom_empty_list_ThreeC0()) ) )) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_5=((tom_is_fun_sym_ThreeC0(tomMatch81NameNumber_freshVar_4))?(tom_get_tail_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_4)):(tom_empty_list_ThreeC0()));
if (!( ( tom_is_empty_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_5) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_5, tom_empty_list_ThreeC0()) ) )) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_6=((tom_is_fun_sym_ThreeC0(tomMatch81NameNumber_freshVar_5))?(tom_get_tail_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_5)):(tom_empty_list_ThreeC0()));
if ( ( tom_is_empty_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_6) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_6, tom_empty_list_ThreeC0()) ) ) {
if ( true ) {
return 
tom_cons_list_ThreeC0(((tom_is_fun_sym_ThreeC0(tomMatch81NameNumber_freshVar_4))?(tom_get_head_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_4)):(tomMatch81NameNumber_freshVar_4)),tom_cons_list_ThreeC0(tom_cons_list_ThreeC0(((tom_is_fun_sym_ThreeC0(tomMatch81NameNumber_freshVar_5))?(tom_get_head_ThreeC0_ThreePath(tomMatch81NameNumber_freshVar_5)):(tomMatch81NameNumber_freshVar_5)),tom_cons_list_ThreeC0(tomMatch81NameNumberfreshSubject_2,tom_empty_list_ThreeC0())),tom_empty_list_ThreeC0())); 

}
}
}
}
}
}
}
}
if (tom_is_fun_sym_ThreeC1(tomMatch81NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_7=tomMatch81NameNumberfreshSubject_1;
if ( ( tom_is_empty_ThreeC1_ThreePath(tomMatch81NameNumber_freshVar_7) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_7, tom_empty_list_ThreeC1()) ) ) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_2; 

}
}
}
}
if (tom_is_fun_sym_ThreeC1(tomMatch81NameNumberfreshSubject_2)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_8=tomMatch81NameNumberfreshSubject_2;
if ( ( tom_is_empty_ThreeC1_ThreePath(tomMatch81NameNumber_freshVar_8) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_8, tom_empty_list_ThreeC1()) ) ) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_1; 

}
}
}
}
if (tom_is_fun_sym_ThreeC2(tomMatch81NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_9=tomMatch81NameNumberfreshSubject_1;
if ( ( tom_is_empty_ThreeC2_ThreePath(tomMatch81NameNumber_freshVar_9) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_9, tom_empty_list_ThreeC2()) ) ) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_2; 

}
}
}
}
if (tom_is_fun_sym_ThreeC2(tomMatch81NameNumberfreshSubject_2)) {
{  polygraphicprogram.types.ThreePath  tomMatch81NameNumber_freshVar_10=tomMatch81NameNumberfreshSubject_2;
if ( ( tom_is_empty_ThreeC2_ThreePath(tomMatch81NameNumber_freshVar_10) || tom_equal_term_ThreePath(tomMatch81NameNumber_freshVar_10, tom_empty_list_ThreeC2()) ) ) {
if ( true ) {
return 
tomMatch81NameNumberfreshSubject_1; 

}
}
}
}

}
}
}
}

}}
return realMake( x,  y);
}

private void init(polygraphicprogram.types.ThreePath _HeadThreeC0, polygraphicprogram.types.ThreePath _TailThreeC0, int hashCode) {
this._HeadThreeC0 = _HeadThreeC0;
this._TailThreeC0 = _TailThreeC0;

this.hashCode = hashCode;
}

private void initHashCode(polygraphicprogram.types.ThreePath _HeadThreeC0, polygraphicprogram.types.ThreePath _TailThreeC0) {
this._HeadThreeC0 = _HeadThreeC0;
this._TailThreeC0 = _TailThreeC0;

this.hashCode = hashFunction();
}

/* name and arity */
@Override
public String symbolName() {
return "ConsThreeC0";
}

private int getArity() {
return 2;
}

public shared.SharedObject duplicate() {
ConsThreeC0 clone = new ConsThreeC0();
clone.init( _HeadThreeC0,  _TailThreeC0, hashCode);
return clone;
}



/**
* This method implements a lexicographic order
*/
@Override
public int compareToLPO(Object o) {
/*
* We do not want to compare with any object, only members of the module
* In case of invalid argument, throw a ClassCastException, as the java api
* asks for it
*/
polygraphicprogram.PolygraphicProgramAbstractType ao = (polygraphicprogram.PolygraphicProgramAbstractType) o;
/* return 0 for equality */
if (ao == this)
return 0;
/* compare the symbols */
int symbCmp = this.symbolName().compareTo(ao.symbolName());
if (symbCmp != 0)
return symbCmp;
/* compare the childs */
ConsThreeC0 tco = (ConsThreeC0) ao;
int _HeadThreeC0Cmp = (this._HeadThreeC0).compareToLPO(tco._HeadThreeC0);
if(_HeadThreeC0Cmp != 0)
return _HeadThreeC0Cmp;

int _TailThreeC0Cmp = (this._TailThreeC0).compareToLPO(tco._TailThreeC0);
if(_TailThreeC0Cmp != 0)
return _TailThreeC0Cmp;

throw new RuntimeException("Unable to compare");
}

@Override
public int compareTo(Object o) {
/*
* We do not want to compare with any object, only members of the module
* In case of invalid argument, throw a ClassCastException, as the java api
* asks for it
*/
polygraphicprogram.PolygraphicProgramAbstractType ao = (polygraphicprogram.PolygraphicProgramAbstractType) o;
/* return 0 for equality */
if (ao == this)
return 0;
/* use the hash values to discriminate */

if(hashCode != ao.hashCode())
return (hashCode < ao.hashCode())?-1:1;

/* If not, compare the symbols : back to the normal order */
int symbCmp = this.symbolName().compareTo(ao.symbolName());
if (symbCmp != 0)
return symbCmp;
/* last resort: compare the childs */
ConsThreeC0 tco = (ConsThreeC0) ao;
int _HeadThreeC0Cmp = (this._HeadThreeC0).compareTo(tco._HeadThreeC0);
if(_HeadThreeC0Cmp != 0)
return _HeadThreeC0Cmp;

int _TailThreeC0Cmp = (this._TailThreeC0).compareTo(tco._TailThreeC0);
if(_TailThreeC0Cmp != 0)
return _TailThreeC0Cmp;

throw new RuntimeException("Unable to compare");
}

/* shared.SharedObject */
@Override
public final int hashCode() {
return hashCode;
}

public final boolean equivalent(shared.SharedObject obj) {
if(obj instanceof ConsThreeC0) {

ConsThreeC0 peer = (ConsThreeC0) obj;
return _HeadThreeC0==peer._HeadThreeC0 && _TailThreeC0==peer._TailThreeC0 && true;
}
return false;
}

/* ThreePath interface */
@Override
public boolean isConsThreeC0() {
return true;
}

@Override
public polygraphicprogram.types.ThreePath getHeadThreeC0() {
return _HeadThreeC0;
}

@Override
public polygraphicprogram.types.ThreePath setHeadThreeC0(polygraphicprogram.types.ThreePath set_arg) {
return make(set_arg, _TailThreeC0);
}
@Override
public polygraphicprogram.types.ThreePath getTailThreeC0() {
return _TailThreeC0;
}

@Override
public polygraphicprogram.types.ThreePath setTailThreeC0(polygraphicprogram.types.ThreePath set_arg) {
return make(_HeadThreeC0, set_arg);
}
/* AbstractType */
@Override
public aterm.ATerm toATerm() {
return atermFactory.makeAppl(
atermFactory.makeAFun(symbolName(),getArity(),false),
new aterm.ATerm[] {getHeadThreeC0().toATerm(), getTailThreeC0().toATerm()});
}

public static polygraphicprogram.types.ThreePath fromTerm(aterm.ATerm trm) {
if(trm instanceof aterm.ATermAppl) {
aterm.ATermAppl appl = (aterm.ATermAppl) trm;
if(proto.symbolName().equals(appl.getName())) {
return make(
polygraphicprogram.types.ThreePath.fromTerm(appl.getArgument(0)), polygraphicprogram.types.ThreePath.fromTerm(appl.getArgument(1))
);
}
}
return null;
}


/* Visitable */
public int getChildCount() {
return 2;
}

public tom.library.sl.Visitable getChildAt(int index) {
switch(index) {
case 0: return _HeadThreeC0;
case 1: return _TailThreeC0;

default: throw new IndexOutOfBoundsException();
}
}

public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable v) {
switch(index) {
case 0: return make((polygraphicprogram.types.ThreePath) v, _TailThreeC0);
case 1: return make(_HeadThreeC0, (polygraphicprogram.types.ThreePath) v);

default: throw new IndexOutOfBoundsException();
}
}

public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] childs) {
if (childs.length == 2) {
return make((polygraphicprogram.types.ThreePath) childs[0], (polygraphicprogram.types.ThreePath) childs[1]);
} else {
throw new IndexOutOfBoundsException();
}
}

public tom.library.sl.Visitable[] getChildren() {
return new tom.library.sl.Visitable[] {  _HeadThreeC0,  _TailThreeC0 };
}

/* internal use */
protected  int hashFunction() {
int a, b, c;
/* Set up the internal state */
a = 0x9e3779b9; /* the golden ratio; an arbitrary value */
b = (1033100864<<8);
c = getArity();
/* -------------------------------------- handle most of the key */
/* ------------------------------------ handle the last 11 bytes */
a += (_HeadThreeC0.hashCode() << 8);
a += (_TailThreeC0.hashCode());

a -= b; a -= c; a ^= (c >> 13);
b -= c; b -= a; b ^= (a << 8);
c -= a; c -= b; c ^= (b >> 13);
a -= b; a -= c; a ^= (c >> 12);
b -= c; b -= a; b ^= (a << 16);
c -= a; c -= b; c ^= (b >> 5);
a -= b; a -= c; a ^= (c >> 3);
b -= c; b -= a; b ^= (a << 10);
c -= a; c -= b; c ^= (b >> 15);
/* ------------------------------------------- report the result */
return c;
}

}
