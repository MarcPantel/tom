/* Generated by TOM (version 20071002 (src)): Do not edit this file */

package polygraphicprogram.types;        

//import polygraphicprogram.types.twopath.*;
//import polygraphicprogram.*;

public abstract class TwoPath extends polygraphicprogram.PolygraphicProgramAbstractType {

public OnePath source(){

if (tom_is_sort_TwoPath(this)) {
{  polygraphicprogram.types.TwoPath  tomMatch88NameNumberfreshSubject_1=(( polygraphicprogram.types.TwoPath )this);
if (tom_is_fun_sym_TwoId(tomMatch88NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.OnePath  tomMatch88NameNumber_freshVar_0=tom_get_slot_TwoId_onePath(tomMatch88NameNumberfreshSubject_1);
if ( true ) {
return 
tomMatch88NameNumber_freshVar_0; 

}
}
} else {
if (tom_is_fun_sym_TwoCell(tomMatch88NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.OnePath  tomMatch88NameNumber_freshVar_1=tom_get_slot_TwoCell_Source(tomMatch88NameNumberfreshSubject_1);
if ( true ) {
return 
tomMatch88NameNumber_freshVar_1; 

}
}
} else {
if (tom_is_fun_sym_TwoC0(tomMatch88NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch88NameNumber_freshVar_2=tomMatch88NameNumberfreshSubject_1;
if (!( ( tom_is_empty_TwoC0_TwoPath(tomMatch88NameNumber_freshVar_2) || tom_equal_term_TwoPath(tomMatch88NameNumber_freshVar_2, tom_empty_list_TwoC0()) ) )) {
{  polygraphicprogram.types.TwoPath  tomMatch88NameNumber_freshVar_3=((tom_is_fun_sym_TwoC0(tomMatch88NameNumber_freshVar_2))?(tom_get_tail_TwoC0_TwoPath(tomMatch88NameNumber_freshVar_2)):(tom_empty_list_TwoC0()));
if ( true ) {
return 
tom_cons_list_OneC0(((tom_is_fun_sym_TwoC0(tomMatch88NameNumber_freshVar_2))?(tom_get_head_TwoC0_TwoPath(tomMatch88NameNumber_freshVar_2)):(tomMatch88NameNumber_freshVar_2)).source(),tom_append_list_OneC0(tomMatch88NameNumber_freshVar_3.source(),tom_empty_list_OneC0())); 

}
}
}
}
}
if (tom_is_fun_sym_TwoC1(tomMatch88NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch88NameNumber_freshVar_6=tomMatch88NameNumberfreshSubject_1;
if (!( ( tom_is_empty_TwoC1_TwoPath(tomMatch88NameNumber_freshVar_6) || tom_equal_term_TwoPath(tomMatch88NameNumber_freshVar_6, tom_empty_list_TwoC1()) ) )) {
{  polygraphicprogram.types.TwoPath  tomMatch88NameNumber_freshVar_7=((tom_is_fun_sym_TwoC1(tomMatch88NameNumber_freshVar_6))?(tom_get_tail_TwoC1_TwoPath(tomMatch88NameNumber_freshVar_6)):(tom_empty_list_TwoC1()));
if ( true ) {
return 
((tom_is_fun_sym_TwoC1(tomMatch88NameNumber_freshVar_6))?(tom_get_head_TwoC1_TwoPath(tomMatch88NameNumber_freshVar_6)):(tomMatch88NameNumber_freshVar_6)).source(); 

}
}
}
}
}

}
}
}
}

//return `OneId();
throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
}

public OnePath target(){

if (tom_is_sort_TwoPath(this)) {
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumberfreshSubject_1=(( polygraphicprogram.types.TwoPath )this);
if (tom_is_fun_sym_TwoId(tomMatch89NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.OnePath  tomMatch89NameNumber_freshVar_0=tom_get_slot_TwoId_onePath(tomMatch89NameNumberfreshSubject_1);
if ( true ) {
return 
tomMatch89NameNumber_freshVar_0; 

}
}
} else {
if (tom_is_fun_sym_TwoCell(tomMatch89NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.OnePath  tomMatch89NameNumber_freshVar_1=tom_get_slot_TwoCell_Target(tomMatch89NameNumberfreshSubject_1);
if ( true ) {
return 
tomMatch89NameNumber_freshVar_1; 

}
}
} else {
if (tom_is_fun_sym_TwoC0(tomMatch89NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_freshVar_2=tomMatch89NameNumberfreshSubject_1;
if (!( ( tom_is_empty_TwoC0_TwoPath(tomMatch89NameNumber_freshVar_2) || tom_equal_term_TwoPath(tomMatch89NameNumber_freshVar_2, tom_empty_list_TwoC0()) ) )) {
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_freshVar_3=((tom_is_fun_sym_TwoC0(tomMatch89NameNumber_freshVar_2))?(tom_get_tail_TwoC0_TwoPath(tomMatch89NameNumber_freshVar_2)):(tom_empty_list_TwoC0()));
if ( true ) {
return 
tom_cons_list_OneC0(((tom_is_fun_sym_TwoC0(tomMatch89NameNumber_freshVar_2))?(tom_get_head_TwoC0_TwoPath(tomMatch89NameNumber_freshVar_2)):(tomMatch89NameNumber_freshVar_2)).target(),tom_append_list_OneC0(tomMatch89NameNumber_freshVar_3.target(),tom_empty_list_OneC0())); 

}
}
}
}
}
if (tom_is_fun_sym_TwoC1(tomMatch89NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_freshVar_6=tomMatch89NameNumberfreshSubject_1;
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_begin_8=tomMatch89NameNumber_freshVar_6;
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_end_9=tomMatch89NameNumber_freshVar_6;
do {
{
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_freshVar_7=tomMatch89NameNumber_end_9;
if (!( ( tom_is_empty_TwoC1_TwoPath(tomMatch89NameNumber_freshVar_7) || tom_equal_term_TwoPath(tomMatch89NameNumber_freshVar_7, tom_empty_list_TwoC1()) ) )) {
{  polygraphicprogram.types.TwoPath  tomMatch89NameNumber_freshVar_10=((tom_is_fun_sym_TwoC1(tomMatch89NameNumber_freshVar_7))?(tom_get_tail_TwoC1_TwoPath(tomMatch89NameNumber_freshVar_7)):(tom_empty_list_TwoC1()));
if ( ( tom_is_empty_TwoC1_TwoPath(tomMatch89NameNumber_freshVar_10) || tom_equal_term_TwoPath(tomMatch89NameNumber_freshVar_10, tom_empty_list_TwoC1()) ) ) {
if ( true ) {
return 
((tom_is_fun_sym_TwoC1(tomMatch89NameNumber_freshVar_7))?(tom_get_head_TwoC1_TwoPath(tomMatch89NameNumber_freshVar_7)):(tomMatch89NameNumber_freshVar_7)).target(); 

}
}
}
}
}
if ( ( tom_is_empty_TwoC1_TwoPath(tomMatch89NameNumber_end_9) || tom_equal_term_TwoPath(tomMatch89NameNumber_end_9, tom_empty_list_TwoC1()) ) ) {
tomMatch89NameNumber_end_9=tomMatch89NameNumber_begin_8;
} else {
tomMatch89NameNumber_end_9=((tom_is_fun_sym_TwoC1(tomMatch89NameNumber_end_9))?(tom_get_tail_TwoC1_TwoPath(tomMatch89NameNumber_end_9)):(tom_empty_list_TwoC1()));
}

}
} while(!(tom_equal_term_TwoPath(tomMatch89NameNumber_end_9, tomMatch89NameNumber_begin_8)));
}
}
}
}

}
}
}
}

//return `OneId();
throw new tom.engine.exception.TomRuntimeException("strange term: "+this);
}
public boolean defined(){

if (tom_is_sort_TwoPath(this)) {
{  polygraphicprogram.types.TwoPath  tomMatch90NameNumberfreshSubject_1=(( polygraphicprogram.types.TwoPath )this);
if (tom_is_fun_sym_TwoCell(tomMatch90NameNumberfreshSubject_1)) {
if ( true ) {
return true; 
}
} else {
if (tom_is_fun_sym_TwoC0(tomMatch90NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch90NameNumber_freshVar_0=tomMatch90NameNumberfreshSubject_1;
if ( true ) {
return true; 
}
}
}
if (tom_is_fun_sym_TwoC1(tomMatch90NameNumberfreshSubject_1)) {
{  polygraphicprogram.types.TwoPath  tomMatch90NameNumber_freshVar_2=tomMatch90NameNumberfreshSubject_1;
if (!( ( tom_is_empty_TwoC1_TwoPath(tomMatch90NameNumber_freshVar_2) || tom_equal_term_TwoPath(tomMatch90NameNumber_freshVar_2, tom_empty_list_TwoC1()) ) )) {
{  polygraphicprogram.types.TwoPath  tomMatch90NameNumber_freshVar_3=((tom_is_fun_sym_TwoC1(tomMatch90NameNumber_freshVar_2))?(tom_get_tail_TwoC1_TwoPath(tomMatch90NameNumber_freshVar_2)):(tom_empty_list_TwoC1()));
{  polygraphicprogram.types.TwoPath  tom_tail=tomMatch90NameNumber_freshVar_3;
if ( true ) {
return 
((tom_is_fun_sym_TwoC1(tomMatch90NameNumber_freshVar_2))?(tom_get_head_TwoC1_TwoPath(tomMatch90NameNumber_freshVar_2)):(tomMatch90NameNumber_freshVar_2)).target()==
tom_tail.source()&&
tom_tail.defined();

}
}
}
}
}
}

}
}
}

return false;
}

@Override
public polygraphicprogram.PolygraphicProgramAbstractType accept(polygraphicprogram.PolygraphicProgramVisitor v) throws tom.library.sl.VisitFailure {
return v.visit_TwoPath(this);
}

public boolean isTwoId() {
return false;
}


public boolean isTwoCell() {
return false;
}


public boolean isConsTwoC0() {
return false;
}


public boolean isEmptyTwoC0() {
return false;
}


public boolean isConsTwoC1() {
return false;
}


public boolean isEmptyTwoC1() {
return false;
}


public polygraphicprogram.types.TwoPath getTailTwoC1() {
throw new UnsupportedOperationException("This TwoPath has no TailTwoC1");
}

public TwoPath setTailTwoC1(polygraphicprogram.types.TwoPath _arg) {
throw new UnsupportedOperationException("This TwoPath has no TailTwoC1");
}


public polygraphicprogram.types.OnePath getonePath() {
throw new UnsupportedOperationException("This TwoPath has no onePath");
}

public TwoPath setonePath(polygraphicprogram.types.OnePath _arg) {
throw new UnsupportedOperationException("This TwoPath has no onePath");
}


public polygraphicprogram.types.TwoPath getTailTwoC0() {
throw new UnsupportedOperationException("This TwoPath has no TailTwoC0");
}

public TwoPath setTailTwoC0(polygraphicprogram.types.TwoPath _arg) {
throw new UnsupportedOperationException("This TwoPath has no TailTwoC0");
}


public polygraphicprogram.types.CellType getType() {
throw new UnsupportedOperationException("This TwoPath has no Type");
}

public TwoPath setType(polygraphicprogram.types.CellType _arg) {
throw new UnsupportedOperationException("This TwoPath has no Type");
}


public polygraphicprogram.types.TwoPath getHeadTwoC1() {
throw new UnsupportedOperationException("This TwoPath has no HeadTwoC1");
}

public TwoPath setHeadTwoC1(polygraphicprogram.types.TwoPath _arg) {
throw new UnsupportedOperationException("This TwoPath has no HeadTwoC1");
}


public polygraphicprogram.types.OnePath getSource() {
throw new UnsupportedOperationException("This TwoPath has no Source");
}

public TwoPath setSource(polygraphicprogram.types.OnePath _arg) {
throw new UnsupportedOperationException("This TwoPath has no Source");
}


public polygraphicprogram.types.OnePath getTarget() {
throw new UnsupportedOperationException("This TwoPath has no Target");
}

public TwoPath setTarget(polygraphicprogram.types.OnePath _arg) {
throw new UnsupportedOperationException("This TwoPath has no Target");
}


public polygraphicprogram.types.TwoPath getHeadTwoC0() {
throw new UnsupportedOperationException("This TwoPath has no HeadTwoC0");
}

public TwoPath setHeadTwoC0(polygraphicprogram.types.TwoPath _arg) {
throw new UnsupportedOperationException("This TwoPath has no HeadTwoC0");
}


public String getName() {
throw new UnsupportedOperationException("This TwoPath has no Name");
}

public TwoPath setName(String _arg) {
throw new UnsupportedOperationException("This TwoPath has no Name");
}


public static polygraphicprogram.types.TwoPath fromTerm(aterm.ATerm trm) {
polygraphicprogram.types.TwoPath tmp;

tmp = polygraphicprogram.types.twopath.TwoId.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.TwoCell.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.ConsTwoC0.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.EmptyTwoC0.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.ConsTwoC1.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.EmptyTwoC1.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.TwoC0.fromTerm(trm);
if (tmp != null) {
return tmp;
}

tmp = polygraphicprogram.types.twopath.TwoC1.fromTerm(trm);
if (tmp != null) {
return tmp;
}

throw new IllegalArgumentException("This is not a TwoPath " + trm);
}

public static polygraphicprogram.types.TwoPath fromString(String s) {
return fromTerm(atermFactory.parse(s));
}

public static polygraphicprogram.types.TwoPath fromStream(java.io.InputStream stream) throws java.io.IOException {
return fromTerm(atermFactory.readFromFile(stream));
}


public int length() {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

public polygraphicprogram.types.TwoPath reverse() {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

/**
* Collection
*/
/*
public boolean add(Object o) {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public boolean addAll(java.util.Collection c) {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public void clear() {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public boolean containsAll(java.util.Collection c) {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

public boolean contains(Object o) {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

public boolean equals(Object o) { return this == o; }

public int hashCode() { return hashCode(); }

public boolean isEmpty() { return false; }

public java.util.Iterator iterator() {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

public boolean remove(Object o) {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public boolean removeAll(java.util.Collection c) {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public boolean retainAll(java.util.Collection c) {
throw new UnsupportedOperationException("This object "+this.getClass().getName()+" is not mutable");
}

public int size() { return length(); }

public Object[] toArray() {
throw new IllegalArgumentException(
"This "+this.getClass().getName()+" is not a list");
}

public Object[] toArray(Object[] a) {
throw new UnsupportedOperationException("Not yet implemented");
}
*/

/* Generated by TOM (version 20071002 (src)): Do not edit this file */
/* Generated by TOM (version 20071002 (src)): Do not edit this file */
private static boolean tom_equal_term_char(char t1, char t2) { return (t1==t2) 
;
}
private static boolean tom_is_sort_char(char t) { return  true ;
}
private static boolean tom_equal_term_String(String t1, String t2) { return (t1.equals(t2)) 
;
}
private static boolean tom_is_sort_String(String t) { return  t instanceof String ;
}
private static boolean tom_equal_term_ThreePath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_ThreePath(Object t) { return  t instanceof polygraphicprogram.types.ThreePath ;
}
private static boolean tom_equal_term_CellType(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_CellType(Object t) { return  t instanceof polygraphicprogram.types.CellType ;
}
private static boolean tom_equal_term_TwoPath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_TwoPath(Object t) { return  t instanceof polygraphicprogram.types.TwoPath ;
}
private static boolean tom_equal_term_OnePath(Object t1, Object t2) { return t1.equals(t2) 
;
}
private static boolean tom_is_sort_OnePath(Object t) { return  t instanceof polygraphicprogram.types.OnePath ;
}
private static boolean tom_is_fun_sym_TwoId( polygraphicprogram.types.TwoPath  t) { return  (t instanceof polygraphicprogram.types.twopath.TwoId) ;
}
private static  polygraphicprogram.types.OnePath  tom_get_slot_TwoId_onePath( polygraphicprogram.types.TwoPath  t) { return  t.getonePath() ;
}
private static boolean tom_is_fun_sym_TwoCell( polygraphicprogram.types.TwoPath  t) { return  (t instanceof polygraphicprogram.types.twopath.TwoCell) ;
}
private static  String  tom_get_slot_TwoCell_Name( polygraphicprogram.types.TwoPath  t) { return  t.getName() ;
}
private static  polygraphicprogram.types.OnePath  tom_get_slot_TwoCell_Source( polygraphicprogram.types.TwoPath  t) { return  t.getSource() ;
}
private static  polygraphicprogram.types.OnePath  tom_get_slot_TwoCell_Target( polygraphicprogram.types.TwoPath  t) { return  t.getTarget() ;
}
private static  polygraphicprogram.types.CellType  tom_get_slot_TwoCell_Type( polygraphicprogram.types.TwoPath  t) { return  t.getType() ;
}
private static boolean tom_is_fun_sym_TwoC0( polygraphicprogram.types.TwoPath  t) { return  ((t instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (t instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) ;
}
private static  polygraphicprogram.types.TwoPath  tom_empty_list_TwoC0() { return polygraphicprogram.types.twopath.EmptyTwoC0.make() 

; }private static  polygraphicprogram.types.TwoPath  tom_cons_list_TwoC0( polygraphicprogram.types.TwoPath  e,  polygraphicprogram.types.TwoPath  l) { return  polygraphicprogram.types.twopath.ConsTwoC0.make(e,l) ; }private static  polygraphicprogram.types.TwoPath  tom_get_head_TwoC0_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.getHeadTwoC0() ;
}
private static  polygraphicprogram.types.TwoPath  tom_get_tail_TwoC0_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.getTailTwoC0() ;
}
private static boolean tom_is_empty_TwoC0_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.isEmptyTwoC0() ;
}

  private static   polygraphicprogram.types.TwoPath  tom_append_list_TwoC0( polygraphicprogram.types.TwoPath l1,  polygraphicprogram.types.TwoPath  l2) {
    if( l1.isEmptyTwoC0() ) {
      return l2;
    } else if( l2.isEmptyTwoC0() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? l1.getTailTwoC0() :tom_empty_list_TwoC0()).isEmptyTwoC0() ) {
        return  polygraphicprogram.types.twopath.ConsTwoC0.make((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? l1.getHeadTwoC0() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.twopath.ConsTwoC0.make((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? l1.getHeadTwoC0() :l1),tom_append_list_TwoC0((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? l1.getTailTwoC0() :tom_empty_list_TwoC0()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.twopath.ConsTwoC0.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.TwoPath  tom_get_slice_TwoC0( polygraphicprogram.types.TwoPath  begin,  polygraphicprogram.types.TwoPath  end, polygraphicprogram.types.TwoPath  tail) {
    if(tom_equal_term_TwoPath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.twopath.ConsTwoC0.make((( ((begin instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (begin instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? begin.getHeadTwoC0() :begin),( polygraphicprogram.types.TwoPath )tom_get_slice_TwoC0((( ((begin instanceof polygraphicprogram.types.twopath.ConsTwoC0) || (begin instanceof polygraphicprogram.types.twopath.EmptyTwoC0)) )? begin.getTailTwoC0() :tom_empty_list_TwoC0()),end,tail)) ;
    }
  }
  private static boolean tom_is_fun_sym_TwoC1( polygraphicprogram.types.TwoPath  t) { return  ((t instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (t instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) ;
}
private static  polygraphicprogram.types.TwoPath  tom_empty_list_TwoC1() { return polygraphicprogram.types.twopath.EmptyTwoC1.make() 

; }private static  polygraphicprogram.types.TwoPath  tom_cons_list_TwoC1( polygraphicprogram.types.TwoPath  e,  polygraphicprogram.types.TwoPath  l) { return  polygraphicprogram.types.twopath.ConsTwoC1.make(e,l) ; }private static  polygraphicprogram.types.TwoPath  tom_get_head_TwoC1_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.getHeadTwoC1() ;
}
private static  polygraphicprogram.types.TwoPath  tom_get_tail_TwoC1_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.getTailTwoC1() ;
}
private static boolean tom_is_empty_TwoC1_TwoPath( polygraphicprogram.types.TwoPath  l) { return  l.isEmptyTwoC1() ;
}

  private static   polygraphicprogram.types.TwoPath  tom_append_list_TwoC1( polygraphicprogram.types.TwoPath l1,  polygraphicprogram.types.TwoPath  l2) {
    if( l1.isEmptyTwoC1() ) {
      return l2;
    } else if( l2.isEmptyTwoC1() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? l1.getTailTwoC1() :tom_empty_list_TwoC1()).isEmptyTwoC1() ) {
        return  polygraphicprogram.types.twopath.ConsTwoC1.make((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? l1.getHeadTwoC1() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.twopath.ConsTwoC1.make((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? l1.getHeadTwoC1() :l1),tom_append_list_TwoC1((( ((l1 instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (l1 instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? l1.getTailTwoC1() :tom_empty_list_TwoC1()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.twopath.ConsTwoC1.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.TwoPath  tom_get_slice_TwoC1( polygraphicprogram.types.TwoPath  begin,  polygraphicprogram.types.TwoPath  end, polygraphicprogram.types.TwoPath  tail) {
    if(tom_equal_term_TwoPath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.twopath.ConsTwoC1.make((( ((begin instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (begin instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? begin.getHeadTwoC1() :begin),( polygraphicprogram.types.TwoPath )tom_get_slice_TwoC1((( ((begin instanceof polygraphicprogram.types.twopath.ConsTwoC1) || (begin instanceof polygraphicprogram.types.twopath.EmptyTwoC1)) )? begin.getTailTwoC1() :tom_empty_list_TwoC1()),end,tail)) ;
    }
  }
  private static boolean tom_is_fun_sym_OneC0( polygraphicprogram.types.OnePath  t) { return  ((t instanceof polygraphicprogram.types.onepath.ConsOneC0) || (t instanceof polygraphicprogram.types.onepath.EmptyOneC0)) ;
}
private static  polygraphicprogram.types.OnePath  tom_empty_list_OneC0() { return polygraphicprogram.types.onepath.EmptyOneC0.make() 

; }private static  polygraphicprogram.types.OnePath  tom_cons_list_OneC0( polygraphicprogram.types.OnePath  e,  polygraphicprogram.types.OnePath  l) { return  polygraphicprogram.types.onepath.ConsOneC0.make(e,l) ; }private static  polygraphicprogram.types.OnePath  tom_get_head_OneC0_OnePath( polygraphicprogram.types.OnePath  l) { return  l.getHeadOneC0() ;
}
private static  polygraphicprogram.types.OnePath  tom_get_tail_OneC0_OnePath( polygraphicprogram.types.OnePath  l) { return  l.getTailOneC0() ;
}
private static boolean tom_is_empty_OneC0_OnePath( polygraphicprogram.types.OnePath  l) { return  l.isEmptyOneC0() ;
}

  private static   polygraphicprogram.types.OnePath  tom_append_list_OneC0( polygraphicprogram.types.OnePath l1,  polygraphicprogram.types.OnePath  l2) {
    if( l1.isEmptyOneC0() ) {
      return l2;
    } else if( l2.isEmptyOneC0() ) {
      return l1;
    } else if( ((l1 instanceof polygraphicprogram.types.onepath.ConsOneC0) || (l1 instanceof polygraphicprogram.types.onepath.EmptyOneC0)) ) {
      if( (( ((l1 instanceof polygraphicprogram.types.onepath.ConsOneC0) || (l1 instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? l1.getTailOneC0() :tom_empty_list_OneC0()).isEmptyOneC0() ) {
        return  polygraphicprogram.types.onepath.ConsOneC0.make((( ((l1 instanceof polygraphicprogram.types.onepath.ConsOneC0) || (l1 instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? l1.getHeadOneC0() :l1),l2) ;
      } else {
        return  polygraphicprogram.types.onepath.ConsOneC0.make((( ((l1 instanceof polygraphicprogram.types.onepath.ConsOneC0) || (l1 instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? l1.getHeadOneC0() :l1),tom_append_list_OneC0((( ((l1 instanceof polygraphicprogram.types.onepath.ConsOneC0) || (l1 instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? l1.getTailOneC0() :tom_empty_list_OneC0()),l2)) ;
      }
    } else {
      return  polygraphicprogram.types.onepath.ConsOneC0.make(l1,l2) ;
    }
  }
  private static   polygraphicprogram.types.OnePath  tom_get_slice_OneC0( polygraphicprogram.types.OnePath  begin,  polygraphicprogram.types.OnePath  end, polygraphicprogram.types.OnePath  tail) {
    if(tom_equal_term_OnePath(begin,end)) {
      return tail;
    } else {
      return  polygraphicprogram.types.onepath.ConsOneC0.make((( ((begin instanceof polygraphicprogram.types.onepath.ConsOneC0) || (begin instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? begin.getHeadOneC0() :begin),( polygraphicprogram.types.OnePath )tom_get_slice_OneC0((( ((begin instanceof polygraphicprogram.types.onepath.ConsOneC0) || (begin instanceof polygraphicprogram.types.onepath.EmptyOneC0)) )? begin.getTailOneC0() :tom_empty_list_OneC0()),end,tail)) ;
    }
  }
  

}
