module Lambda
imports int String
abstract syntax

atom LVar 

LTerm = App(t1:LTerm,t2:LTerm)
      | Abs(a:<Lam>)
      | Let(b:<Letin>)
      | Var(x:LVar)
      | Constr(f:String, children:LTermList)
      | Case(subject:LTerm,rules:Rules)

Rules = RList(<Clause>*)
Clause binds LVar = Rule(p:Pattern, inner t:LTerm) 

Pattern binds LVar = PFun(f:String, children:PatternList)
		   | PVar(x:LVar)

LTermList binds LVar = LTList(LTerm*)
PatternList binds LVar = PList(Pattern*)

Lam binds LVar = Lam(x:LVar, inner t:LTerm)
Letin binds LVar = Letin(x:LVar, outer u:LTerm, inner t:LTerm)


