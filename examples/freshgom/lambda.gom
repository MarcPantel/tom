module Lambda
imports int String
abstract syntax

atom LVar 

LTerm = App(t1:LTerm,t2:LTerm)
      | Abs(a:<Lam>)
      | Let(b:<Letin>)
      | Var(x:LVar)
      | Constr(f:String, children:LTermList)
      | Case(subject:LTerm,rules:Rules)

Rules = EmptyRList()
      | ConsRList(c:<Clause>, cs:Rules)

Clause binds LVar = Rule(p:Pattern, inner t:LTerm) 

Pattern binds LVar = PFun(neutral f:String, children:PatternList)
		               | PVar(x:LVar)

LTermList = EmptyLTList() 
          | ConsLTList(t:LTerm,ts:LTermList)

PatternList binds LVar = EmptyPList()
                       | ConsPList(p:Pattern,ps:PatternList)

Lam binds LVar = lam(x:LVar, inner t:LTerm)
Letin binds LVar = letin(x:LVar, outer u:LTerm, inner t:LTerm)


