module SystemF
imports String int
abstract syntax

atom TermVar
atom TypeVar

LTerm = 
 | LVar(x:TermVar)
 | LAbs(lam:<TermTermAbs>)
 | LApp(u:LTerm,v:LTerm)
 | TAbs(Lam:<TypeTermAbs>)
 | TApp(t:LTerm,ty:Type)
 | Test(s:Foo) 

// Foo does not contains atom but is concerned by freshgom since it is 
// referenced by LTerm.
// Bar is not concerned by freshgom

TermTermAbs binds TermVar = TermTermAbs(x:TermVar, inner t:LTerm)
TypeTermAbs binds TypeVar = TypeTermAbs(T:TypeVar, inner t:LTerm)

Type =
 | TVar(T:TypeVar)
 | Forall(fa:<TypeTypeAbs>)
 | Arrow(A:Type,B:Type)

TypeTypeAbs binds TypeVar = TypeTypeAbs(A:TypeVar, inner B:Type)

Foo = foo(i:int)
Bar = bar(i:int)
