

%typeterm Process  {
  implement { simplepdl.Process }
  is_sort(t) { $t instanceof simplepdl.Process }
  equals(l1,l2) { $l1.equals($l2) }
}

%include { string.tom }

%typeterm ProcessElement  {
  implement { simplepdl.ProcessElement }
  is_sort(t) { $t instanceof simplepdl.ProcessElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ProcessElementEList {
  implement { org.eclipse.emf.common.util.EList<simplepdl.ProcessElement> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<simplepdl.ProcessElement>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<simplepdl.ProcessElement>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<simplepdl.ProcessElement>)$t).get(0) instanceof simplepdl.ProcessElement)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ProcessElementEList ProcessElementEList ( ProcessElement* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof simplepdl.ProcessElement)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<simplepdl.ProcessElement>($n) }
  make_append(e,l) { appendProcessElementEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendProcessElementEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm WorkDefinition  {
  implement { simplepdl.WorkDefinition }
  is_sort(t) { $t instanceof simplepdl.WorkDefinition }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm WorkSequence  {
  implement { simplepdl.WorkSequence }
  is_sort(t) { $t instanceof simplepdl.WorkSequence }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm WorkSequenceType  {
  implement { simplepdl.WorkSequenceType }
  is_sort(t) { $t instanceof simplepdl.WorkSequenceType }
  equals(l1,l2) { $l1.equals($l2) }
}

%op WorkSequenceType startToStart() {
  is_fsym(t) { t == simplepdl.WorkSequenceType.get("startToStart") }
  make() { (simplepdl.WorkSequenceType)simplepdl.SimplepdlFactory.eINSTANCE.createFromString( (EDataType)simplepdl.SimplepdlPackage.eINSTANCE.getWorkSequenceType(), "startToStart") }
}

%op WorkSequenceType finishToStart() {
  is_fsym(t) { t == simplepdl.WorkSequenceType.get("finishToStart") }
  make() { (simplepdl.WorkSequenceType)simplepdl.SimplepdlFactory.eINSTANCE.createFromString( (EDataType)simplepdl.SimplepdlPackage.eINSTANCE.getWorkSequenceType(), "finishToStart") }
}

%op WorkSequenceType startToFinish() {
  is_fsym(t) { t == simplepdl.WorkSequenceType.get("startToFinish") }
  make() { (simplepdl.WorkSequenceType)simplepdl.SimplepdlFactory.eINSTANCE.createFromString( (EDataType)simplepdl.SimplepdlPackage.eINSTANCE.getWorkSequenceType(), "startToFinish") }
}

%op WorkSequenceType finishToFinish() {
  is_fsym(t) { t == simplepdl.WorkSequenceType.get("finishToFinish") }
  make() { (simplepdl.WorkSequenceType)simplepdl.SimplepdlFactory.eINSTANCE.createFromString( (EDataType)simplepdl.SimplepdlPackage.eINSTANCE.getWorkSequenceType(), "finishToFinish") }
}

%op WorkSequence WorkSequence(parent : Process, linkType : WorkSequenceType, predecessor : WorkDefinition, successor : WorkDefinition) {
  is_fsym(t) { $t instanceof simplepdl.WorkSequence }
  get_slot(parent, t) { (simplepdl.Process)$t.eGet($t.eClass().getEStructuralFeature("parent")) }
  get_slot(linkType, t) { (simplepdl.WorkSequenceType)$t.eGet($t.eClass().getEStructuralFeature("linkType")) }
  get_slot(predecessor, t) { (simplepdl.WorkDefinition)$t.eGet($t.eClass().getEStructuralFeature("predecessor")) }
  get_slot(successor, t) { (simplepdl.WorkDefinition)$t.eGet($t.eClass().getEStructuralFeature("successor")) } 
  get_default(linkType) { `startToStart() }
  make(parent, linkType, predecessor, successor) { constructWorkSequence((simplepdl.WorkSequence)simplepdl.SimplepdlFactory.eINSTANCE.create((EClass)simplepdl.SimplepdlPackage.eINSTANCE.getEClassifier("WorkSequence")), new Object[]{ $parent, $linkType, $predecessor, $successor }) }
  implement() { simplepdl.impl.WorkSequenceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructWorkSequence(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm WorkSequenceEList {
  implement { org.eclipse.emf.common.util.EList<simplepdl.WorkSequence> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<simplepdl.WorkSequence>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<simplepdl.WorkSequence>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<simplepdl.WorkSequence>)$t).get(0) instanceof simplepdl.WorkSequence)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray WorkSequenceEList WorkSequenceEList ( WorkSequence* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof simplepdl.WorkSequence)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<simplepdl.WorkSequence>($n) }
  make_append(e,l) { appendWorkSequenceEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendWorkSequenceEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op WorkDefinition WorkDefinition(parent : Process, linksToPredecessors : WorkSequenceEList, linksToSuccessors : WorkSequenceEList, process : Process, name : String) {
  is_fsym(t) { $t instanceof simplepdl.WorkDefinition }
  get_slot(parent, t) { (simplepdl.Process)$t.eGet($t.eClass().getEStructuralFeature("parent")) }
  get_slot(linksToPredecessors, t) { (org.eclipse.emf.common.util.EList<simplepdl.WorkSequence>)$t.eGet($t.eClass().getEStructuralFeature("linksToPredecessors")) }
  get_slot(linksToSuccessors, t) { (org.eclipse.emf.common.util.EList<simplepdl.WorkSequence>)$t.eGet($t.eClass().getEStructuralFeature("linksToSuccessors")) }
  get_slot(process, t) { (simplepdl.Process)$t.eGet($t.eClass().getEStructuralFeature("process")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) } 
  make(parent, linksToPredecessors, linksToSuccessors, process, name) { constructWorkDefinition((simplepdl.WorkDefinition)simplepdl.SimplepdlFactory.eINSTANCE.create((EClass)simplepdl.SimplepdlPackage.eINSTANCE.getEClassifier("WorkDefinition")), new Object[]{ $parent, $linksToPredecessors, $linksToSuccessors, $process, $name }) }
  implement() { simplepdl.impl.WorkDefinitionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructWorkDefinition(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Process Process(name : String, processElements : ProcessElementEList, from : WorkDefinition) {
  is_fsym(t) { $t instanceof simplepdl.Process }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(processElements, t) { (org.eclipse.emf.common.util.EList<simplepdl.ProcessElement>)$t.eGet($t.eClass().getEStructuralFeature("processElements")) }
  get_slot(from, t) { (simplepdl.WorkDefinition)$t.eGet($t.eClass().getEStructuralFeature("from")) } 
  make(name, processElements, from) { constructProcess((simplepdl.Process)simplepdl.SimplepdlFactory.eINSTANCE.create((EClass)simplepdl.SimplepdlPackage.eINSTANCE.getEClassifier("Process")), new Object[]{ $name, $processElements, $from }) }
  implement() { simplepdl.impl.ProcessImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProcess(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Guidance  {
  implement { simplepdl.Guidance }
  is_sort(t) { $t instanceof simplepdl.Guidance }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Guidance Guidance(parent : Process, element : ProcessElementEList, text : String) {
  is_fsym(t) { $t instanceof simplepdl.Guidance }
  get_slot(parent, t) { (simplepdl.Process)$t.eGet($t.eClass().getEStructuralFeature("parent")) }
  get_slot(element, t) { (org.eclipse.emf.common.util.EList<simplepdl.ProcessElement>)$t.eGet($t.eClass().getEStructuralFeature("element")) }
  get_slot(text, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("text")) } 
  make(parent, element, text) { constructGuidance((simplepdl.Guidance)simplepdl.SimplepdlFactory.eINSTANCE.create((EClass)simplepdl.SimplepdlPackage.eINSTANCE.getEClassifier("Guidance")), new Object[]{ $parent, $element, $text }) }
  implement() { simplepdl.impl.GuidanceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructGuidance(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}