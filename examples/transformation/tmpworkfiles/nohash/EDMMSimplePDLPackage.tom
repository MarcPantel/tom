/*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2009-2011, INPL, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 *
 **/

%typeterm Event extends SPDLSimEvent {
  implement { SimplePDLSemantics.EDMMSimplePDL.Event }
  is_sort(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.Event }
  equals(l1,l2) { $l1.equals($l2) }
//  concrete_implementation { @ }
}

%include { boolean.tom }

%include { int.tom }

%typeterm WorkDefinitionEvent extends Event {
  implement { SimplePDLSemantics.EDMMSimplePDL.WorkDefinitionEvent }
  is_sort(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.WorkDefinitionEvent }
  equals(l1,l2) { $l1.equals($l2) }
//  concrete_implementation { @ }
}

%typeterm StartWD extends WorkDefinitionEvent {
  implement { SimplePDLSemantics.EDMMSimplePDL.StartWD }
  is_sort(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.StartWD }
  equals(l1,l2) { $l1.equals($l2) }
//  concrete_implementation { @ }
}

%op StartWD StartWD(internal : boolean, date : int, name : String, workdefinition : WorkDefinition) {
  is_fsym(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.StartWD }
  get_slot(internal, t)  { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("internal")) }
  get_slot(date, t)  { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("date")) }
  get_slot(name, t)  { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(workdefinition, t)  { (SimplePDLSemantics.DDMMSimplePDL.WorkDefinition)$t.eGet($t.eClass().getEStructuralFeature("workdefinition")) }
  make(internal, date, name, workdefinition) { constructStartWD((SimplePDLSemantics.EDMMSimplePDL.StartWD)SimplePDLSemantics.EDMMSimplePDL.EDMMSimplePDLFactory.eINSTANCE.create((EClass)SimplePDLSemantics.EDMMSimplePDL.EDMMSimplePDLPackage.eINSTANCE.getEClassifier("StartWD")), new Object[]{ $internal, $date, $name, $workdefinition }) }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStartWD(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm FinishWD extends WorkDefinitionEvent {
  implement { SimplePDLSemantics.EDMMSimplePDL.FinishWD }
  is_sort(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.FinishWD }
  equals(l1,l2) { $l1.equals($l2) }
//  concrete_implementation { @ }
}

%op FinishWD FinishWD(internal : boolean, date : int, name : String, workdefinition : WorkDefinition) {
  is_fsym(t) { $t instanceof SimplePDLSemantics.EDMMSimplePDL.FinishWD }
  get_slot(internal, t)  { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("internal")) }
  get_slot(date, t)  { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("date")) }
  get_slot(name, t)  { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(workdefinition, t)  { (SimplePDLSemantics.DDMMSimplePDL.WorkDefinition)$t.eGet($t.eClass().getEStructuralFeature("workdefinition")) }
  make(internal, date, name, workdefinition) { constructFinishWD((SimplePDLSemantics.EDMMSimplePDL.FinishWD)SimplePDLSemantics.EDMMSimplePDL.EDMMSimplePDLFactory.eINSTANCE.create((EClass)SimplePDLSemantics.EDMMSimplePDL.EDMMSimplePDLPackage.eINSTANCE.getEClassifier("FinishWD")), new Object[]{ $internal, $date, $name, $workdefinition }) }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructFinishWD(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}