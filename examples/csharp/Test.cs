/* Generated by TOM (version 20070807 (src)): Do not edit this file */using tom.library.sl;
using term.types;
using System;

public class Test {

  /* Generated by TOM (version 20070807 (src)): Do not edit this file */private static bool tom_equal_term_Term(Object t1, Object t2) { return  t1.Equals(t2) ;}private static bool tom_is_sort_Term(Object t) { return  t is term.types.Term ;}private static bool tom_is_fun_sym_f( term.types.Term  t) { return  t is term.types.term.f ;}private static  term.types.Term  tom_make_f( term.types.Term  t0,  term.types.Term  t1) { return  term.types.term.f.make(t0, t1) ; }private static  term.types.Term  tom_get_slot_f_t1( term.types.Term  t) { return  t.gett1() ;}private static  term.types.Term  tom_get_slot_f_t2( term.types.Term  t) { return  t.gett2() ;}private static bool tom_is_fun_sym_a( term.types.Term  t) { return  t is term.types.term.a ;}private static  term.types.Term  tom_make_a() { return  term.types.term.a.make() ; }private static  term.types.Term  tom_make_b() { return  term.types.term.b.make() ; }  /* Generated by TOM (version 20070807 (src)): Do not edit this file */private static bool tom_equal_term_Strategy(Object t1, Object t2) { return t1.Equals(t2);}private static bool tom_is_sort_Strategy(Object t) { return  t is tom.library.sl.Strategy ;}/* Generated by TOM (version 20070807 (src)): Do not edit this file *//* Generated by TOM (version 20070807 (src)): Do not edit this file */ /* Generated by TOM (version 20070807 (src)): Do not edit this file *//* Generated by TOM (version 20070807 (src)): Do not edit this file */ private static bool tom_equal_term_String(String t1, String t2) { return  (t1.Equals(t2)) ;}private static bool tom_is_sort_String(String t) { return  t is String ;}  private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static bool tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t is tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static bool tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 20070807 (src)): Do not edit this file */ /* Generated by TOM (version 20070807 (src)): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   class Replace :  term.termBasicStrategy  {public Replace() : base(tom_make_Identity()) {}override public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}override public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}override public int getChildCount() { return 1; }override public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return base.getChildAt(0);default: throw new IndexOutOfRangeException();}}override public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return base.setChildAt(0, child);default: throw new IndexOutOfRangeException();}}override public  term.types.Term  visit_Term( term.types.Term  tom__arg) {if (tom_is_sort_Term(tom__arg)) {{  term.types.Term  tomMatch1NameNumberfreshSubject_1=(( term.types.Term )tom__arg);if (tom_is_fun_sym_a(tomMatch1NameNumberfreshSubject_1)) {if ( true ) {




 return tom_make_b(); }}}}return base.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_Replace() { return new Replace(); }



	public static int Main (string[] args) {
		Term t = tom_make_f(tom_make_a(),tom_make_b());
		Console.WriteLine(t.toString());
    if (tom_is_sort_Term(t)) {{  term.types.Term  tomMatch2NameNumberfreshSubject_1=(( term.types.Term )t);if (tom_is_fun_sym_f(tomMatch2NameNumberfreshSubject_1)) {{  term.types.Term  tomMatch2NameNumber_freshVar_0=tom_get_slot_f_t1(tomMatch2NameNumberfreshSubject_1);{  term.types.Term  tomMatch2NameNumber_freshVar_1=tom_get_slot_f_t2(tomMatch2NameNumberfreshSubject_1);{  term.types.Term  tom_x=tomMatch2NameNumber_freshVar_0;{  term.types.Term  tom_y=tomMatch2NameNumber_freshVar_1;if ( true ) {
 Console.WriteLine("x = {0}, y = {1}",tom_x,tom_y); }}}}}}}}

    Console.WriteLine("After Replace: " + ((Term) tom_make_TopDown(tom_make_Replace()).visit(t)).toString());
		return 0;
	}
}



