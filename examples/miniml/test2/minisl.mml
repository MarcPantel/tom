(* list/exception monad *)

let ret = fun x -> SomeTL(ConsTList(x,EmptyTList())) in
let ret2 = fun x -> SomeTLL(ConsTLList(x,EmptyTLList())) in

let rec append = fun l1 -> fun l2 ->
  match l1 with
  | EmptyTList() -> l2
  | ConsTList(t,ts) -> ConsTList(t,append ts l2)
  end in

let rec append2 = fun l1 -> fun l2 ->
  match l1 with
  | EmptyTLList() -> l2
  | ConsTLList(t,ts) -> ConsTLList(t,append2 ts l2)
  end in

let rec concat = fun l ->
  match l with
  | EmptyTLList() -> EmptyTList()
  | ConsTLList(l,ls) -> append l (concat ls) 
  end in

let rec concat2 = fun l ->
  match l with
  | EmptyTLLList() -> EmptyTLList()
  | ConsTLLList(l,ls) -> append2 l (concat2 ls) 
  end in

let bind = fun x -> fun f ->
  match x with
  | NoneTL()  -> NoneTL()
  | SomeTL(l) -> 
      let rec map = fun f -> fun l ->
        match l with
        | EmptyTList() -> SomeTLL(EmptyTLList())
        | ConsTList(x,xs) -> 
            match f x with 
            | NoneTL() -> NoneTLL()
            | SomeTL(fx) ->
               match map f xs with
               | NoneTLL() -> NoneTLL()
               | SomeTLL(fxs) -> SomeTLL(ConsTLList(fx,fxs))
               end
            end
        end
      in match map f l with
         | NoneTLL() -> NoneTL()
         | SomeTLL(l1) -> SomeTL(concat l1)
         end
  end in

let bind2 = fun x -> fun f ->
  match x with
  | NoneTLL()  -> NoneTLL()
  | SomeTLL(l) -> 
      let rec map = fun f -> fun l ->
        match l with
        | EmptyTLList() -> SomeTLLL(EmptyTLLList())
        | ConsTLList(x,xs) -> 
            match f x with 
            | NoneTLL() -> NoneTLLL()
            | SomeTLL(fx) ->
               match map f xs with
               | NoneTLLL() -> NoneTLLL()
               | SomeTLLL(fxs) -> SomeTLLL(ConsTLLList(fx,fxs))
               end
            end
        end
      in match map f l with
         | NoneTLLL() -> NoneTLL()
         | SomeTLLL(l1) -> SomeTLL(concat2 l1)
         end
  end in

let bind3 = fun x -> fun f ->
  match x with
  | NoneTL()  -> NoneTLL()
  | SomeTL(l) -> 
      let rec map = fun f -> fun l ->
        match l with
        | EmptyTList() -> SomeTLLL(EmptyTLLList())
        | ConsTList(x,xs) -> 
            match f x with 
            | NoneTLL() -> NoneTLLL()
            | SomeTLL(fx) ->
               match map f xs with
               | NoneTLLL() -> NoneTLLL()
               | SomeTLLL(fxs) -> SomeTLLL(ConsTLLList(fx,fxs))
               end
            end
        end
      in match map f l with
         | NoneTLLL() -> NoneTLL()
         | SomeTLLL(l1) -> SomeTLL(concat2 l1)
         end
  end in

let bind4 = fun x -> fun f ->
  match x with
  | NoneTLL()  -> NoneTL()
  | SomeTLL(l) -> 
      let rec map = fun f -> fun l ->
        match l with
        | EmptyTLList() -> SomeTLL(EmptyTLList())
        | ConsTLList(x,xs) -> 
            match f x with 
            | NoneTL() -> NoneTLL()
            | SomeTL(fx) ->
               match map f xs with
               | NoneTLL() -> NoneTLL()
               | SomeTLL(fxs) -> SomeTLL(ConsTLList(fx,fxs))
               end
            end
        end
      in match map f l with
         | NoneTLL() -> NoneTL()
         | SomeTLL(l1) -> SomeTL(concat l1)
         end
  end in

let rec mapM = fun f -> fun l -> 
  match l with
  | EmptyTList() -> ret2 EmptyTList()
  | ConsTList(x,xs) -> (bind3 (f x) (fun fx -> bind2 (mapM f xs) (fun fxs -> ret2 ConsTList(fx,fxs))))
  end in

(* basic strategies *)

let id = ret in
let fail = fun x -> NoneTL() in
let seq = fun s1 -> fun s2 -> fun t -> bind (s1 t) s2 in
let choice = fun s1 -> fun s2 -> fun t -> 
  match s1 t with
  | NoneTL()  -> s2 t
  | SomeTL(l) -> SomeTL(l)
  end in
let all = fun s -> fun t -> 
  match t with
  | Fun(f,l) -> bind4 (mapM s l) (fun l1 -> ret Fun(f,l1))
  end in
let rec mu = fun f -> f (fun x -> mu f x) in

(* composed strategies *)

let trys = fun s -> choice s id in
let rec repeat = fun s -> mu (fun x -> choice (seq s x) id) in
let rec topdown = fun s -> mu (fun x -> seq s (all x)) in

(* example *)

let g = fun x -> fun y -> Fun(G(),ConsTList(x,ConsTList(y,EmptyTList()))) in
let f = fun x -> Fun(F(),ConsTList(x,EmptyTList())) in
let a = Fun(A(),EmptyTList()) in
let b = Fun(B(),EmptyTList()) in
let c = Fun(C(),EmptyTList()) in
let d = Fun(D(),EmptyTList()) in
let e = Fun(D(),EmptyTList()) in

(* encode le systeme non deterministe
    a -> b
    a -> c
    c -> d
    _ -> echec
*)
let rew = fun t ->
  match t with
  | Fun(A(),EmptyTList()) -> SomeTL(ConsTList(b,ConsTList(c,EmptyTList())))
  | Fun(C(),EmptyTList()) -> ret d 
  | otherwise             -> NoneTL()
  end in

let strat = topdown (repeat rew) in

strat (g (f a) (g a b))

