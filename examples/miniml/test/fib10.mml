let rec plus = 
fun n -> 
fun m -> 
 match n with
 | Z() -> m
 | S(p) -> S(plus p m)
 end
in let rec mult =
fun n -> 
fun m ->
 match n with
 | Z() -> Z()
 | S(p) -> plus m (mult p m)
 end
in let rec fib = 
fun n -> 
 match n with
 | Z() -> Z()
 | S(Z()) -> S(Z())
 | S(S(m)) -> (plus (fib m) (fib S(m)))
 end
in let two = S(S(Z())) 
in let five = S(S(S(S(S(Z())))))
in let ten = mult two five
in fib ten


