module Gom
imports String Code int
abstract syntax

Option = Origin(Line:int)
       | OptionList(Option*)

/* Output from the parser */
GomModule = GomModule(ModuleName:GomModuleName, SectionList:SectionList)
GomModuleList = ConcGomModule(GomModule*)
Section = Imports(ImportList:ImportList)
        | Public(GrammarList:GrammarList)
SectionList = ConcSection(Section*)
ImportedModule = Import(ModuleName:GomModuleName)
ImportList = ConcImportedModule(ImportedModule*)
Grammar = Grammar(ProductionList:ProductionList)
        | Sorts(TypeList:GomTypeList)
GrammarList = ConcGrammar(Grammar*)
Production = Production(Name:String, DomainList:FieldList,
                        Codomain:GomType, Option:Option)
           | Hook(NameType:IdKind, Name:String, HookType:HookKind,
                  Args:ArgList, StringCode:String,Option:Option)
           | SortType(Type:GomType,ProductionList:ProductionList)
ProductionList = ConcProduction(Production*)
HookKind = HookKind(kind:String)
IdKind = KindModule()
       | KindSort()
       | KindOperator()
Arg = Arg(Name:String)
ArgList = ConcArg(Arg*)
Field = StarredField(FieldType:GomType)
      | NamedField(Name:String,FieldType:GomType)
FieldList = ConcField(Field*)
GomModuleName = GomModuleName(Name:String)
GomType = GomType(Name:String)
GomTypeList = ConcGomType(GomType*)

Module = Module(MDecl:ModuleDecl,Sorts:SortList)
ModuleList = ConcModule(Module*)
ModuleDecl = ModuleDecl(ModuleName:GomModuleName,Pkg:String)
ModuleDeclList = ConcModuleDecl(ModuleDecl*)
SortDecl = SortDecl(Name:String,ModuleDecl:ModuleDecl)
         | BuiltinSortDecl(Name:String)
SortDeclList = ConcSortDecl(SortDecl*)
OperatorDecl = OperatorDecl(Name:String,Sort:SortDecl,
                            Prod:TypedProduction)
OperatorDeclList = ConcOperator(OperatorDecl*)
TypedProduction = Slots(Slots:SlotList)
                | Variadic(Sort:SortDecl)
Slot = Slot(Name:String,Sort:SortDecl)
SlotList = ConcSlot(Slot*)
Sort = Sort(Decl:SortDecl,OperatorDecls:OperatorDeclList)
SortList = ConcSort(Sort*)

Decl = CutModule(MDecl:ModuleDecl)
     | CutSort(Sort:SortDecl)
     | CutOperator(ODecl:OperatorDecl)
HookDecl = MakeHookDecl(Pointcut:Decl,SlotArgs:SlotList,Code:Code,HookType:HookKind)
         | BlockHookDecl(Pointcut:Decl,Code:Code)
         | InterfaceHookDecl(Pointcut:Decl,Code:Code)
         | ImportHookDecl(Pointcut:Decl,Code:Code)
         | MappingHookDecl(Pointcut:Decl,Code:Code)
HookDeclList = ConcHookDecl(HookDecl*)

/* Helper constructors */
Pair = ModHookPair(Modules:ModuleList,HookDecls:HookDeclList)
