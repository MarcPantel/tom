import sort.strategy.expr.*;
import sort.types.*;
import sort.types.expr.*;
import tom.library.sl.*;


public class Representation {
  private static boolean tom_equal_term_Strategy(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Strategy(Object t) {return  (t instanceof tom.library.sl.Strategy) ;} private static boolean tom_equal_term_Position(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Position(Object t) {return  (t instanceof tom.library.sl.Position) ;} private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return ( new tom.library.sl.Mu(var,v) );}private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return ( new tom.library.sl.MuVar(name) );}private static  tom.library.sl.Strategy  tom_make_Identity() { return ( new tom.library.sl.Identity() );}private static  tom.library.sl.Strategy  tom_make_One( tom.library.sl.Strategy  v) { return ( new tom.library.sl.One(v) );}private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return ( new tom.library.sl.All(v) );}private static  tom.library.sl.Strategy  tom_make_Fail() { return ( new tom.library.sl.Fail() );}private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.Sequence );}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.Sequence.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) );}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Sequence )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) ;       } else {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Sequence.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_Sequence())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Sequence.make(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):tom_empty_list_Sequence()),end,tail)) ;   }   private static boolean tom_is_fun_sym_Choice( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.Choice );}private static  tom.library.sl.Strategy  tom_empty_list_Choice() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_Choice( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.Choice.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.THEN) );}private static boolean tom_is_empty_Choice_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Choice )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) ;       } else {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Choice.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_Choice())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Choice.make(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):tom_empty_list_Choice()),end,tail)) ;   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.SequenceId );}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.SequenceId.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) );}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.SequenceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.SequenceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_SequenceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.SequenceId.make(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):tom_empty_list_SequenceId()),end,tail)) ;   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.ChoiceId );}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.ChoiceId.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) );}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.ChoiceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.ChoiceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_ChoiceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.ChoiceId.make(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):tom_empty_list_ChoiceId()),end,tail)) ;   }   private static  tom.library.sl.Strategy  tom_make_OneId( tom.library.sl.Strategy  v) { return ( new tom.library.sl.OneId(v) );}   private static  tom.library.sl.Strategy  tom_make_AllSeq( tom.library.sl.Strategy  s) { return ( new tom.library.sl.AllSeq(s) );}private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_cons_list_Sequence(tom_make_One(tom_make_Identity()),tom_empty_list_Sequence())),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_One(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_empty_list_Choice()))));} private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return ( tom_cons_list_Choice(s,tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice())) );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(tom_cons_list_Sequence(s,tom_cons_list_Sequence(tom_make_MuVar("_x"),tom_empty_list_Sequence())),tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(v,tom_cons_list_Choice(tom_make_One(tom_make_MuVar("_x")),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_OneId(tom_make_MuVar("_x")),tom_empty_list_ChoiceId()))) );}   private static boolean tom_equal_term_Expr(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Expr(Object t) {return  (t instanceof sort.types.Expr) ;}private static boolean tom_is_fun_sym_zero( sort.types.Expr  t) {return  (t instanceof sort.types.expr.zero) ;}private static  sort.types.Expr  tom_make_zero() { return  sort.types.expr.zero.make() ;}private static boolean tom_is_fun_sym_un( sort.types.Expr  t) {return  (t instanceof sort.types.expr.un) ;}private static boolean tom_is_fun_sym_plus( sort.types.Expr  t) {return  (t instanceof sort.types.expr.plus) ;}private static  sort.types.Expr  tom_make_plus( sort.types.Expr  t0,  sort.types.Expr  t1) { return  sort.types.expr.plus.make(t0, t1) ;}private static  sort.types.Expr  tom_get_slot_plus_a( sort.types.Expr  t) {return  t.geta() ;}private static  sort.types.Expr  tom_get_slot_plus_b( sort.types.Expr  t) {return  t.getb() ;}private static boolean tom_is_fun_sym_mult( sort.types.Expr  t) {return  (t instanceof sort.types.expr.mult) ;}private static  sort.types.Expr  tom_get_slot_mult_a( sort.types.Expr  t) {return  t.geta() ;}private static  sort.types.Expr  tom_get_slot_mult_b( sort.types.Expr  t) {return  t.getb() ;}private static  tom.library.sl.Strategy  tom_make_Is_zero() { return  new sort.strategy.expr.Is_zero();}private static  tom.library.sl.Strategy  tom_make_Is_un() { return  new sort.strategy.expr.Is_un();}private static  tom.library.sl.Strategy  tom_make_Is_plus() { return  new sort.strategy.expr.Is_plus();}private static  tom.library.sl.Strategy  tom_make_Is_mult() { return  new sort.strategy.expr.Is_mult();} 


  private static void represente_aux(Expr e, String way){
    {{if (tom_is_sort_Expr(((Object)e))) {if (tom_is_sort_Expr((( sort.types.Expr )((Object)e)))) {if (tom_is_fun_sym_zero((( sort.types.Expr )(( sort.types.Expr )((Object)e))))) {
System.out.println("\"" + way + "\"");}}}}{if (tom_is_sort_Expr(((Object)e))) {if (tom_is_sort_Expr((( sort.types.Expr )((Object)e)))) {if (tom_is_fun_sym_un((( sort.types.Expr )(( sort.types.Expr )((Object)e))))) {
System.out.println("\"" + way + "\"");}}}}{if (tom_is_sort_Expr(((Object)e))) {if (tom_is_sort_Expr((( sort.types.Expr )((Object)e)))) {if (tom_is_fun_sym_plus((( sort.types.Expr )(( sort.types.Expr )((Object)e))))) {

        System.out.println("\"" + way + "\"" + "->" + "\"" + way + 0 + "\"");
        System.out.println("\"" + way + "\"" + "->" + "\"" + way + 1 + "\"");
        represente_aux(tom_get_slot_plus_a((( sort.types.Expr )((Object)e))), way + 0);
        represente_aux(tom_get_slot_plus_b((( sort.types.Expr )((Object)e))), way + 1);
      }}}}{if (tom_is_sort_Expr(((Object)e))) {if (tom_is_sort_Expr((( sort.types.Expr )((Object)e)))) {if (tom_is_fun_sym_mult((( sort.types.Expr )(( sort.types.Expr )((Object)e))))) {

        System.out.println("\"" + way + "\"" + "->" + "\"" + way + 0 + "\"");
        System.out.println("\"" + way + "\"" + "->" + "\"" + way + 1 + "\"");
        represente_aux(tom_get_slot_mult_a((( sort.types.Expr )((Object)e))), way + 0);
        represente_aux(tom_get_slot_mult_b((( sort.types.Expr )((Object)e))), way + 1);
      }}}}}

  }

  public static void represente(Expr e){
    System.out.println("digraph mon_graphe {");
    represente_aux(e, "8");
    System.out.println("}");
  }

  public static void main(String[] args) {
    //Expr a = `plus(zero(),plus(plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(zero(),zero()),plus(zero(),zero())))))),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(plus(zero(),zero()),plus(zero(),zero())),plus(plus(zero(),zero()),plus(zero(),zero()))))))));
    
    Expr a = tom_make_plus(tom_make_plus(tom_make_plus(tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero()))))))),tom_make_plus(tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))))),tom_make_plus(tom_make_plus(tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero()))))))),tom_make_plus(tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_plus(tom_make_zero(),tom_make_zero())))))))));
    
   represente(a); 
  }
}
