grammar EmbeddedLanguage;

options {
  backtrack=true;
  output=AST;
  ASTLabelType=Tree;
  tokenVocab=TomLanguageTokens;
}

@header{
package proto;
}

@members{

}

@lexer::header{
  package proto;
}

@lexer::members{

}

matchConstruct :
  '(' matchArguments^ ')' '{' patternActionList^ '}'
  | '{' constraintActionList^ '}'
  ;

matchArguments :
  (tomVar^)+
  ;

tomVar :
  type=ID name=ID
  ;

patternActionList :
  (patternAction^)+
  ;

patternAction :
  tomVar '->' '{' /* here we call the host parser */ '}'
  ;


constraintActionList :
  
  ;

    SimpleBlockLexer lex = new SimpleBlockLexer(input);
    CommonTokenStream tokens = new CommonTokenStream(lex);
    SimpleBlockParser parser = new SimpleBlockParser(tokens);
    parser.block();



ID  : ('a'..'z'|'A'..'Z')+ ;

INT : ('0'..'9')+ ;

WS  : (' '|'\t'|'\n')+ { $channel=HIDDEN; }

SL_COMMENT:
  '//' (~('\n'|'\r'))* ('\n'|'\r'('\n')?)?
  { $channel=HIDDEN; }
  ;

ML_COMMENT:
  '/*' ( options {greedy=false;} : . )* '*/'
  { $channel=HIDDEN; }
  ;

