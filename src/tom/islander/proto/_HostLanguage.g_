grammar HostLanguage;

options {
  backtrack=true;
  output=AST;
  ASTLabelType=Tree;
  tokenVocab=HostLanguageTokens;
}

@header{
package proto;
}

@members{

}

@lexer::header{
  package proto;
}

@lexer::members{

}

// start
program :
  (
   hostConstruct^
  | tomConstruct^
  | backquoteConstruct^
  )*
  ;

//host
hostConstruct :

  ;

//Tom
tomConstruct :
  matchContruct^
  /* and few other : all '%something' */
  ;

matchConstruct :
  '%match' { result = tomParser.matchConstruct(); }
  ;

opConstruct :
  '%op' { result = tomParser.opConstruct(); }
  ;

//BackQuote
backquoteConstruct :
  '`(' /* here, the backquote parser should be called to parse the backquote part */
      { result = backquoteParser.backQuoteConstruct() } 
     ')'
  ;

//Lexer


// tokens to skip : whitespaces
WS  : (' '|'\t'|'\n')+ { $channel=HIDDEN; }

// tokens to skip : Single Line Comments
SLCOMMENT:
  '//' (~('\n'|'\r'))* ('\n'|'\r'('\n')?)?
  {$channel=HIDDEN;}
  ;

// tokens to skip : Multi Lines Comments
ML_COMMENT:
  '/*' ( options {greedy=false;} : . )* '*/'
  {$channel=HIDDEN;}
  ;


