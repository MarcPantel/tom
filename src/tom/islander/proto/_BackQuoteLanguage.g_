grammar BackQuoteLanguage;

options {
  backtrack=true;
  output=AST;
  ASTLabelType=Tree;
  tokenVocab=BackQuoteLanguageTokens;
}

@header{
package proto;
}

@lexer::header{
  package proto;
}

backQuoteConstruct :
  bqVar
  | bqVarStar
  | bqUnamedVar
  | bqUnamedVarStar
  | (bqVar '.')? method ('.' method)+ // x.get() ; get() ; x.get().get()
  ;

bqVar           : ID     ; // x
bqVarStar       : ID '*' ; // x*
bqUnamedVar     : '_'    ; // _
bqUnamedVarStar : '_*'   ; // _*

method : ID '(' ')' ; // get()



ID  : ('a'..'z'|'A'..'Z')+ ;

INT : ('0'..'9')+ ;

WS  : (' '|'\t'|'\n')+ { $channel=HIDDEN; }

SL_COMMENT:
  '//' (~('\n'|'\r'))* ('\n'|'\r'('\n')?)?
  { $channel=HIDDEN; }
  ;

ML_COMMENT:
  '/*' ( options {greedy=false;} : . )* '*/'
  { $channel=HIDDEN; }
  ;
