/*
 *
 * Copyright (c) 2000-2011, INPL, INRIA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the INRIA nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **/
%include { int.tom }
%include { string.tom }

%op Strategy Omega(position:int, s1:Strategy) {
  is_fsym(t) {$t=null or else $t.all in Omega'Class}
  make(pos,v) {OmegaStrategy.newOmega($pos,$v)}
  get_slot(position, t) {getPos(Omega($t))}
  get_slot(s1, t) {StrategyPtr( getChildAt(Visitable'Class($t), OmegaPackage.ARG) )}
}

/*
 * basic operators
 */

%op Strategy Identity() {
  is_fsym(t) {$t=null or else $t.all in Identity'Class}
  make() {IdentityStrategy.newIdentity}
}

%oplist Strategy Sequence(Strategy*) {
  is_fsym(t) {$t=null or else $t.all in Sequence'Class}
  make_empty() {null}
  /*make_insert(head,tail) {( ($tail==null)?$head:tom.library.sl.Sequence.make($head,$tail) )}*/
  make_insert(head,tail) { SequenceStrategy.make($head,$tail) }
  get_head(t) {StrategyPtr( getChildAt(VisitablePtr($t), SequenceStrategy.FIRST))}
  get_tail(t) {StrategyPtr( getChildAt(VisitablePtr($t), SequenceStrategy.SECOND))}
  is_empty(t) {$t = null}
}

