  %typeterm VisitableVisitor {
    implement { VisitableVisitor}
    get_fun_sym(t) {null}
    cmp_fun_sym(s1,s2) { false}
    get_subterm(t,n) {null}
    equals(t1,t2) {t1.equals(t2)}
  }

  %op VisitableVisitor Identity {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Identity) }
    make() { new tom.library.strategy.mutraveler.Identity() }
  }

  %op VisitableVisitor Fail {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Fail) }
    make() { new tom.library.strategy.mutraveler.Fail() }
  }

  %op VisitableVisitor Negation(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Not) }
    make(v) { new tom.library.strategy.mutraveler.Not((VisitableVisitor)v) }
  }

  %op VisitableVisitor Sequence(VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Sequence) }
    make(first,then) { new tom.library.strategy.mutraveler.Sequence((VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor Choice(VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Choice) }
    make(first,then) { new tom.library.strategy.mutraveler.Choice((VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor ChoiceOnId(VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.ChoiceOnId) }
    make(first,then) { new tom.library.strategy.mutraveler.ChoiceOnId((VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor All(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.All) }
    make(v) { new tom.library.strategy.mutraveler.All((VisitableVisitor)v) }
  }

  %op VisitableVisitor One(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.One) }
    make(v) { new tom.library.strategy.mutraveler.One((VisitableVisitor)v) }
  }

  %op VisitableVisitor Some(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Some) }
    make(v) { new tom.library.strategy.mutraveler.Some((VisitableVisitor)v) }
  }

  %op VisitableVisitor Select(VisitableVisitor, VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.IfThenElse) }
    make(condition,trueCase,falseCase) { new tom.library.strategy.mutraveler.IfThenElse((VisitableVisitor)condition,(VisitableVisitor)trueCase,(VisitableVisitor)falseCase) }
  }

  %op VisitableVisitor MuVar(String) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.MuVar) }
    make(name) { new tom.library.strategy.mutraveler.MuVar(name) }
  }

  %op VisitableVisitor mu(VisitableVisitor, VisitableVisitor) {
    fsym {}
    make(var,v) { tom.library.strategy.mutraveler.MuVar.mu(var,v) }
  }

  %op VisitableVisitor Pselect(int, int, VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Pselect) }
    make(p,q,first,then) { new tom.library.strategy.mutraveler.Pselect(p,q,(VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor Try(VisitableVisitor) {
    fsym {}
    make(v) { `Choice(v,Identity) }
  }

  %op VisitableVisitor BottomUp(VisitableVisitor) {
    fsym {}
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),v)) }
  }

  %op VisitableVisitor OnceBottomUp(VisitableVisitor) {
    fsym {}
    make(v) { `mu(MuVar("x"),Choice(One(MuVar("x")),v)) }
  }

  %op VisitableVisitor Innermost(VisitableVisitor) {
    fsym {}
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),Choice(Sequence(v,MuVar("x")),Identity))) }
  }

  %op VisitableVisitor InnermostId(VisitableVisitor) {
    fsym {}
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),ChoiceOnId(v,MuVar("x")))) }
  }

  %op VisitableVisitor Repeat(VisitableVisitor) {
    fsym {}
    make(v) { `mu(MuVar("x"),Choice(Sequence(v,MuVar("x")),Identity())) }
  }
