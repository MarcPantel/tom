/*
 * basic operators
 */

  %op Strategy Identity() {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Identity) }
    make() { new tom.library.strategy.mutraveler.Identity() }
  }

  %op Strategy Fail() {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Fail) }
    make() { new tom.library.strategy.mutraveler.Fail() }
  }

  %op Strategy Not(s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Not) }
    make(v) { new tom.library.strategy.mutraveler.Not(v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Not.ARG) }
  }

  %op Strategy Sequence(s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Sequence) }
    make(first,then) { new tom.library.strategy.mutraveler.Sequence(first,then) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN) }
  }

  %op Strategy Choice(s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Choice) }
    make(first,then) { new tom.library.strategy.mutraveler.Choice(first,then) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Choice.FIRST) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Choice.THEN) }
  }

  %op Strategy All(s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.All) }
    make(v) { new tom.library.strategy.mutraveler.All(v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.All.ARG) }
  }

  %op Strategy One(s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.One) }
    make(v) { new tom.library.strategy.mutraveler.One(v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.One.ARG) }
  }

  %op Strategy Some(s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Some) }
    make(v) { new tom.library.strategy.mutraveler.Some(v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.One.ARG) }
  }

  %op Strategy IfThenElse(s1:Strategy, s2:Strategy, s3:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.IfThenElse) }
    make(condition,trueCase,falseCase) { new tom.library.strategy.mutraveler.IfThenElse(condition,trueCase,falseCase) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.IfThenElse.CONDITION) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.IfThenElse.TRUE_CASE) }
    get_slot(s3, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.IfThenElse.FALSE_CASE) }
  }

  %op Strategy Mu(s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Mu) }
    make(var, v) { new tom.library.strategy.mutraveler.Mu(var, v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Mu.VAR) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Mu.V) }
  }

  %op Strategy MuVar(var:String) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.MuVar) }
    make(name) { new tom.library.strategy.mutraveler.MuVar(name) }
    get_slot(var, t) { ((tom.library.strategy.mutraveler.MuVar)t).getName() }
  }

  %op Strategy Omega(position:int, s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Omega) }
    make(pos,v) { new tom.library.strategy.mutraveler.Omega(pos,v) }
    get_slot(position, t) { ((tom.library.strategy.mutraveler.Omega)t).getPos() }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Omega.ARG) }
  }
/*
 * basic operators with Id considered as a failure
 */

  %op Strategy OneId(s1:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.OneId) }
    make(v) { new tom.library.strategy.mutraveler.OneId(v) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.OneId.ARG) }
  }

  %op Strategy SequenceId(s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.SequenceId) }
    make(first,then) { new tom.library.strategy.mutraveler.SequenceId(first,then) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.SequenceId.FIRST) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.SequenceId.THEN) }
  }

  %op Strategy ChoiceId(s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.ChoiceId) }
    make(first,then) { new tom.library.strategy.mutraveler.ChoiceId(first,then) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.ChoiceId.FIRST) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.ChoiceId.THEN) }
  }

/*
 * basic probabilistic operators
 */

  %op Strategy Pselect(p1:int, p2:int, s1:Strategy, s2:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Pselect) }
    make(p,q,first,then) { new tom.library.strategy.mutraveler.Pselect(p,q,first,then) }
    get_slot(p1, t) { t.getP() }
    get_slot(p2, t) { t.getQ() }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Pselect.FIRST) }
    get_slot(s2, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Pselect.THEN) }
  }

  %op Strategy OmegaU(s1:Strategy, defaultStrategy:Strategy) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.OmegaU) }
    make(v,d) { new tom.library.strategy.mutraveler.OmegaU(v,d) }
    get_slot(s1, t) { (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.OmegaU.ARG) }
    get_slot(defaultStrategy, t) { (jjtraveler.reflective.VisitableVisitor)t.getDefaultStrategy() }
  }

/*
 * strategies
 */

  %op Strategy Try(s1:Strategy) {
    make(v) { `Choice(v,Identity()) }
  }

  %op Strategy TopDown(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Sequence(v,All(MuVar("_x")))) }
  }
  
  %op Strategy TopDownCollect(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Try(Sequence(v,All(MuVar("_x"))))) }
  }

  %op Strategy BottomUp(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Sequence(All(MuVar("_x")),v)) }
  }

  %op Strategy OnceBottomUp(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Choice(One(MuVar("_x")),v)) }
  }

  %op Strategy OnceTopDown(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Choice(v,One(MuVar("_x")))) }
  }

  %op Strategy Innermost(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Sequence(All(MuVar("_x")),Try(Sequence(v,MuVar("_x"))))) }
  }

  %op Strategy Repeat(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Choice(Sequence(v,MuVar("_x")),Identity())) }
  }

/*
 * strategies with Id considered as failure
 */

  %op Strategy TryId(s1:Strategy) {
    make(v) { v }
  }

  %op Strategy RepeatId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),SequenceId(v,MuVar("_x"))) }
  }

  %op Strategy OnceBottomUpId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),ChoiceId(OneId(MuVar("_x")),v)) }
  }

  %op Strategy OnceTopDownId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),ChoiceId(v,OneId(MuVar("_x")))) }
  }

  %op Strategy InnermostId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Sequence(All(MuVar("_x")),SequenceId(v,MuVar("_x")))) }
  }

  %op Strategy OutermostId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),Sequence(SequenceId(v,MuVar("_x")),All(MuVar("_x")))) }
  }

  %op Strategy TopDownId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),SequenceId(v,All(MuVar("_x")))) }
  }
  
  %op Strategy BottomUpId(s1:Strategy) {
    make(v) { `mu(MuVar("_x"),SequenceId(All(MuVar("_x")),v)) }
  }
