/*
 *
 * Copyright (c) 2000-2013, Universite de Lorraine, Inria
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.  
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the Inria nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 **/

 /**
  * Jean-Christophe Bach  e-mail: jeanchristophe.bach@inria.fr
  * 
  * Tom mappings for UML2, matches the following library version:
  * org.eclipse.uml2.uml_3.2.100.v201108110105.jar
  *
  **/

%include { int.tom }
%include { boolean.tom }
%include { string.tom }
%include { emf/ecore.tom }

%typeterm Comment  {
  implement { org.eclipse.uml2.uml.Comment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Comment }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm CommentEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t).get(0) instanceof org.eclipse.uml2.uml.Comment)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray CommentEList CommentEList ( Comment* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Comment)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Comment>($n) }
  make_append(e,l) { appendCommentEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendCommentEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Element  {
  implement { org.eclipse.uml2.uml.Element }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Element }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ElementEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t).get(0) instanceof org.eclipse.uml2.uml.Element)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ElementEList ElementEList ( Element* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Element)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Element>($n) }
  make_append(e,l) { appendElementEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendElementEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Comment Comment(eAnnotations : EAnnotationEList, ownedComment : CommentEList, body : String, annotatedElement : ElementEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Comment }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(body, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(annotatedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("annotatedElement")) } 
  make(eAnnotations, ownedComment, body, annotatedElement) { constructComment((org.eclipse.uml2.uml.Comment)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Comment")), new Object[]{ $eAnnotations, $ownedComment, $body, $annotatedElement }) }
  implement() { org.eclipse.uml2.uml.impl.CommentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructComment(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Package  {
  implement { org.eclipse.uml2.uml.Package }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Package }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm VisibilityKind  {
  implement { org.eclipse.uml2.uml.VisibilityKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.VisibilityKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op VisibilityKind VisibilityKindpublic() {
  is_fsym(t) { t == org.eclipse.uml2.uml.VisibilityKind.get("public") }
  make() { (org.eclipse.uml2.uml.VisibilityKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getVisibilityKind(), "public") }
}

%op VisibilityKind VisibilityKindprivate() {
  is_fsym(t) { t == org.eclipse.uml2.uml.VisibilityKind.get("private") }
  make() { (org.eclipse.uml2.uml.VisibilityKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getVisibilityKind(), "private") }
}

%op VisibilityKind VisibilityKindprotected() {
  is_fsym(t) { t == org.eclipse.uml2.uml.VisibilityKind.get("protected") }
  make() { (org.eclipse.uml2.uml.VisibilityKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getVisibilityKind(), "protected") }
}

%op VisibilityKind VisibilityKindpackage() {
  is_fsym(t) { t == org.eclipse.uml2.uml.VisibilityKind.get("package") }
  make() { (org.eclipse.uml2.uml.VisibilityKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getVisibilityKind(), "package") }
}

%typeterm Dependency  {
  implement { org.eclipse.uml2.uml.Dependency }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Dependency }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm DependencyEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t).get(0) instanceof org.eclipse.uml2.uml.Dependency)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray DependencyEList DependencyEList ( Dependency* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Dependency)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Dependency>($n) }
  make_append(e,l) { appendDependencyEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendDependencyEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm StringExpression  {
  implement { org.eclipse.uml2.uml.StringExpression }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StringExpression }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TemplateParameter  {
  implement { org.eclipse.uml2.uml.TemplateParameter }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TemplateParameter }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TemplateSignature  {
  implement { org.eclipse.uml2.uml.TemplateSignature }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TemplateSignature }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TemplateParameterEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t).get(0) instanceof org.eclipse.uml2.uml.TemplateParameter)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TemplateParameterEList TemplateParameterEList ( TemplateParameter* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.TemplateParameter)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.TemplateParameter>($n) }
  make_append(e,l) { appendTemplateParameterEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTemplateParameterEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm TemplateableElement  {
  implement { org.eclipse.uml2.uml.TemplateableElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TemplateableElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TemplateBinding  {
  implement { org.eclipse.uml2.uml.TemplateBinding }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TemplateBinding }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TemplateParameterSubstitution  {
  implement { org.eclipse.uml2.uml.TemplateParameterSubstitution }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TemplateParameterSubstitution }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ParameterableElement  {
  implement { org.eclipse.uml2.uml.ParameterableElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ParameterableElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TemplateParameterSubstitution TemplateParameterSubstitution(eAnnotations : EAnnotationEList, ownedComment : CommentEList, formal : TemplateParameter, actual : ParameterableElement, ownedActual : ParameterableElement, templateBinding : TemplateBinding) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TemplateParameterSubstitution }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(formal, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("formal")) }
  get_slot(actual, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("actual")) }
  get_slot(ownedActual, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedActual")) }
  get_slot(templateBinding, t) { (org.eclipse.uml2.uml.TemplateBinding)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) } 
  make(eAnnotations, ownedComment, formal, actual, ownedActual, templateBinding) { constructTemplateParameterSubstitution((org.eclipse.uml2.uml.TemplateParameterSubstitution)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TemplateParameterSubstitution")), new Object[]{ $eAnnotations, $ownedComment, $formal, $actual, $ownedActual, $templateBinding }) }
  implement() { org.eclipse.uml2.uml.impl.TemplateParameterSubstitutionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTemplateParameterSubstitution(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TemplateParameterSubstitutionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameterSubstitution> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameterSubstitution>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameterSubstitution>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameterSubstitution>)$t).get(0) instanceof org.eclipse.uml2.uml.TemplateParameterSubstitution)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TemplateParameterSubstitutionEList TemplateParameterSubstitutionEList ( TemplateParameterSubstitution* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.TemplateParameterSubstitution)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.TemplateParameterSubstitution>($n) }
  make_append(e,l) { appendTemplateParameterSubstitutionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTemplateParameterSubstitutionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op TemplateBinding TemplateBinding(eAnnotations : EAnnotationEList, ownedComment : CommentEList, signature : TemplateSignature, parameterSubstitution : TemplateParameterSubstitutionEList, boundElement : TemplateableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TemplateBinding }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(signature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("signature")) }
  get_slot(parameterSubstitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameterSubstitution>)$t.eGet($t.eClass().getEStructuralFeature("parameterSubstitution")) }
  get_slot(boundElement, t) { (org.eclipse.uml2.uml.TemplateableElement)$t.eGet($t.eClass().getEStructuralFeature("boundElement")) } 
  make(eAnnotations, ownedComment, signature, parameterSubstitution, boundElement) { constructTemplateBinding((org.eclipse.uml2.uml.TemplateBinding)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TemplateBinding")), new Object[]{ $eAnnotations, $ownedComment, $signature, $parameterSubstitution, $boundElement }) }
  implement() { org.eclipse.uml2.uml.impl.TemplateBindingImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTemplateBinding(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TemplateBindingEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t).get(0) instanceof org.eclipse.uml2.uml.TemplateBinding)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TemplateBindingEList TemplateBindingEList ( TemplateBinding* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.TemplateBinding)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.TemplateBinding>($n) }
  make_append(e,l) { appendTemplateBindingEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTemplateBindingEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op TemplateSignature TemplateSignature(eAnnotations : EAnnotationEList, ownedComment : CommentEList, parameter : TemplateParameterEList, ownedParameter : TemplateParameterEList, template : TemplateableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TemplateSignature }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(parameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t.eGet($t.eClass().getEStructuralFeature("parameter")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(template, t) { (org.eclipse.uml2.uml.TemplateableElement)$t.eGet($t.eClass().getEStructuralFeature("template")) } 
  make(eAnnotations, ownedComment, parameter, ownedParameter, template) { constructTemplateSignature((org.eclipse.uml2.uml.TemplateSignature)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TemplateSignature")), new Object[]{ $eAnnotations, $ownedComment, $parameter, $ownedParameter, $template }) }
  implement() { org.eclipse.uml2.uml.impl.TemplateSignatureImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTemplateSignature(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op TemplateParameter TemplateParameter(eAnnotations : EAnnotationEList, ownedComment : CommentEList, signature : TemplateSignature, parameteredElement : ParameterableElement, ownedParameteredElement : ParameterableElement, _default : ParameterableElement, ownedDefault : ParameterableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TemplateParameter }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(signature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("signature")) }
  get_slot(parameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("parameteredElement")) }
  get_slot(ownedParameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedParameteredElement")) }
  get_slot(_default, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(ownedDefault, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedDefault")) } 
  make(eAnnotations, ownedComment, signature, parameteredElement, ownedParameteredElement, _default, ownedDefault) { constructTemplateParameter((org.eclipse.uml2.uml.TemplateParameter)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TemplateParameter")), new Object[]{ $eAnnotations, $ownedComment, $signature, $parameteredElement, $ownedParameteredElement, $_default, $ownedDefault }) }
  implement() { org.eclipse.uml2.uml.impl.TemplateParameterImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTemplateParameter(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Type  {
  implement { org.eclipse.uml2.uml.Type }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Type }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ValueSpecification  {
  implement { org.eclipse.uml2.uml.ValueSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ValueSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ValueSpecificationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t).get(0) instanceof org.eclipse.uml2.uml.ValueSpecification)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ValueSpecificationEList ValueSpecificationEList ( ValueSpecification* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ValueSpecification)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ValueSpecification>($n) }
  make_append(e,l) { appendValueSpecificationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendValueSpecificationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm StringExpressionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StringExpression> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StringExpression>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StringExpression>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StringExpression>)$t).get(0) instanceof org.eclipse.uml2.uml.StringExpression)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray StringExpressionEList StringExpressionEList ( StringExpression* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.StringExpression)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.StringExpression>($n) }
  make_append(e,l) { appendStringExpressionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendStringExpressionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op StringExpression StringExpression(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, symbol : String, operand : ValueSpecificationEList, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, subExpression : StringExpressionEList, owningExpression : StringExpression) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StringExpression }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(symbol, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("symbol")) }
  get_slot(operand, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t.eGet($t.eClass().getEStructuralFeature("operand")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(subExpression, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StringExpression>)$t.eGet($t.eClass().getEStructuralFeature("subExpression")) }
  get_slot(owningExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("owningExpression")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, symbol, operand, templateBinding, ownedTemplateSignature, subExpression, owningExpression) { constructStringExpression((org.eclipse.uml2.uml.StringExpression)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StringExpression")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $symbol, $operand, $templateBinding, $ownedTemplateSignature, $subExpression, $owningExpression }) }
  implement() { org.eclipse.uml2.uml.impl.StringExpressionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStringExpression(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm NamedElement  {
  implement { org.eclipse.uml2.uml.NamedElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.NamedElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm NamedElementEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t).get(0) instanceof org.eclipse.uml2.uml.NamedElement)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray NamedElementEList NamedElementEList ( NamedElement* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.NamedElement)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.NamedElement>($n) }
  make_append(e,l) { appendNamedElementEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendNamedElementEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Dependency Dependency(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Dependency }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client) { constructDependency((org.eclipse.uml2.uml.Dependency)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Dependency")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client }) }
  implement() { org.eclipse.uml2.uml.impl.DependencyImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDependency(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ElementImport  {
  implement { org.eclipse.uml2.uml.ElementImport }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ElementImport }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm PackageableElement  {
  implement { org.eclipse.uml2.uml.PackageableElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PackageableElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Namespace  {
  implement { org.eclipse.uml2.uml.Namespace }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Namespace }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ElementImportEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t).get(0) instanceof org.eclipse.uml2.uml.ElementImport)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ElementImportEList ElementImportEList ( ElementImport* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ElementImport)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ElementImport>($n) }
  make_append(e,l) { appendElementImportEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendElementImportEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm PackageImport  {
  implement { org.eclipse.uml2.uml.PackageImport }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PackageImport }
  equals(l1,l2) { $l1.equals($l2) }
}

%op PackageImport PackageImport(eAnnotations : EAnnotationEList, ownedComment : CommentEList, visibility : VisibilityKind, importedPackage : Package, importingNamespace : Namespace) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.PackageImport }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(importedPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("importedPackage")) }
  get_slot(importingNamespace, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("importingNamespace")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, visibility, importedPackage, importingNamespace) { constructPackageImport((org.eclipse.uml2.uml.PackageImport)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("PackageImport")), new Object[]{ $eAnnotations, $ownedComment, $visibility, $importedPackage, $importingNamespace }) }
  implement() { org.eclipse.uml2.uml.impl.PackageImportImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPackageImport(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm PackageImportEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t).get(0) instanceof org.eclipse.uml2.uml.PackageImport)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PackageImportEList PackageImportEList ( PackageImport* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.PackageImport)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.PackageImport>($n) }
  make_append(e,l) { appendPackageImportEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPackageImportEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Constraint  {
  implement { org.eclipse.uml2.uml.Constraint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Constraint }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Constraint Constraint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, constrainedElement : ElementEList, specification : ValueSpecification, context : Namespace) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Constraint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(constrainedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("constrainedElement")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(context, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("context")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, constrainedElement, specification, context) { constructConstraint((org.eclipse.uml2.uml.Constraint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Constraint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $constrainedElement, $specification, $context }) }
  implement() { org.eclipse.uml2.uml.impl.ConstraintImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConstraint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConstraintEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t).get(0) instanceof org.eclipse.uml2.uml.Constraint)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ConstraintEList ConstraintEList ( Constraint* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Constraint)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Constraint>($n) }
  make_append(e,l) { appendConstraintEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendConstraintEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ElementImport ElementImport(eAnnotations : EAnnotationEList, ownedComment : CommentEList, visibility : VisibilityKind, alias : String, importedElement : PackageableElement, importingNamespace : Namespace) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ElementImport }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(alias, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("alias")) }
  get_slot(importedElement, t) { (org.eclipse.uml2.uml.PackageableElement)$t.eGet($t.eClass().getEStructuralFeature("importedElement")) }
  get_slot(importingNamespace, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("importingNamespace")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, visibility, alias, importedElement, importingNamespace) { constructElementImport((org.eclipse.uml2.uml.ElementImport)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ElementImport")), new Object[]{ $eAnnotations, $ownedComment, $visibility, $alias, $importedElement, $importingNamespace }) }
  implement() { org.eclipse.uml2.uml.impl.ElementImportImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructElementImport(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TypeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t).get(0) instanceof org.eclipse.uml2.uml.Type)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TypeEList TypeEList ( Type* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Type)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Type>($n) }
  make_append(e,l) { appendTypeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTypeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm PackageMerge  {
  implement { org.eclipse.uml2.uml.PackageMerge }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PackageMerge }
  equals(l1,l2) { $l1.equals($l2) }
}

%op PackageMerge PackageMerge(eAnnotations : EAnnotationEList, ownedComment : CommentEList, mergedPackage : Package, receivingPackage : Package) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.PackageMerge }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(mergedPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("mergedPackage")) }
  get_slot(receivingPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("receivingPackage")) } 
  make(eAnnotations, ownedComment, mergedPackage, receivingPackage) { constructPackageMerge((org.eclipse.uml2.uml.PackageMerge)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("PackageMerge")), new Object[]{ $eAnnotations, $ownedComment, $mergedPackage, $receivingPackage }) }
  implement() { org.eclipse.uml2.uml.impl.PackageMergeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPackageMerge(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm PackageMergeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t).get(0) instanceof org.eclipse.uml2.uml.PackageMerge)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PackageMergeEList PackageMergeEList ( PackageMerge* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.PackageMerge)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.PackageMerge>($n) }
  make_append(e,l) { appendPackageMergeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPackageMergeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm PackageableElementEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t).get(0) instanceof org.eclipse.uml2.uml.PackageableElement)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PackageableElementEList PackageableElementEList ( PackageableElement* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.PackageableElement)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.PackageableElement>($n) }
  make_append(e,l) { appendPackageableElementEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPackageableElementEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm PackageEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t).get(0) instanceof org.eclipse.uml2.uml.Package)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PackageEList PackageEList ( Package* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Package)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Package>($n) }
  make_append(e,l) { appendPackageEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPackageEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ProfileApplication  {
  implement { org.eclipse.uml2.uml.ProfileApplication }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ProfileApplication }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Profile  {
  implement { org.eclipse.uml2.uml.Profile }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Profile }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ProfileApplicationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t).get(0) instanceof org.eclipse.uml2.uml.ProfileApplication)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ProfileApplicationEList ProfileApplicationEList ( ProfileApplication* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ProfileApplication)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ProfileApplication>($n) }
  make_append(e,l) { appendProfileApplicationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendProfileApplicationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Stereotype  {
  implement { org.eclipse.uml2.uml.Stereotype }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Stereotype }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Generalization  {
  implement { org.eclipse.uml2.uml.Generalization }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Generalization }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Classifier  {
  implement { org.eclipse.uml2.uml.Classifier }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Classifier }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm GeneralizationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t).get(0) instanceof org.eclipse.uml2.uml.Generalization)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray GeneralizationEList GeneralizationEList ( Generalization* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Generalization)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Generalization>($n) }
  make_append(e,l) { appendGeneralizationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendGeneralizationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm GeneralizationSet  {
  implement { org.eclipse.uml2.uml.GeneralizationSet }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.GeneralizationSet }
  equals(l1,l2) { $l1.equals($l2) }
}

%op GeneralizationSet GeneralizationSet(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, isCovering : boolean, isDisjoint : boolean, powertype : Classifier, generalization : GeneralizationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.GeneralizationSet }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(isCovering, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isCovering")) }
  get_slot(isDisjoint, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDisjoint")) }
  get_slot(powertype, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("powertype")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isCovering) { false }
  get_default(isDisjoint) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, isCovering, isDisjoint, powertype, generalization) { constructGeneralizationSet((org.eclipse.uml2.uml.GeneralizationSet)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("GeneralizationSet")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $isCovering, $isDisjoint, $powertype, $generalization }) }
  implement() { org.eclipse.uml2.uml.impl.GeneralizationSetImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructGeneralizationSet(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm GeneralizationSetEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t).get(0) instanceof org.eclipse.uml2.uml.GeneralizationSet)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray GeneralizationSetEList GeneralizationSetEList ( GeneralizationSet* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.GeneralizationSet)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.GeneralizationSet>($n) }
  make_append(e,l) { appendGeneralizationSetEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendGeneralizationSetEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ClassifierEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t).get(0) instanceof org.eclipse.uml2.uml.Classifier)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ClassifierEList ClassifierEList ( Classifier* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Classifier)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Classifier>($n) }
  make_append(e,l) { appendClassifierEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendClassifierEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Substitution  {
  implement { org.eclipse.uml2.uml.Substitution }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Substitution }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm OpaqueExpression  {
  implement { org.eclipse.uml2.uml.OpaqueExpression }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OpaqueExpression }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm StringEList {
  implement { org.eclipse.emf.common.util.EList<java.lang.Object> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).get(0) instanceof java.lang.String)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray StringEList StringEList ( String* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof java.lang.String)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<java.lang.Object>($n) }
  make_append(e,l) { appendStringEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendStringEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Behavior  {
  implement { org.eclipse.uml2.uml.Behavior }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Behavior }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm SubstitutionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t).get(0) instanceof org.eclipse.uml2.uml.Substitution)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray SubstitutionEList SubstitutionEList ( Substitution* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Substitution)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Substitution>($n) }
  make_append(e,l) { appendSubstitutionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendSubstitutionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm CollaborationUse  {
  implement { org.eclipse.uml2.uml.CollaborationUse }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CollaborationUse }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Collaboration  {
  implement { org.eclipse.uml2.uml.Collaboration }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Collaboration }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm CollaborationUseEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t).get(0) instanceof org.eclipse.uml2.uml.CollaborationUse)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray CollaborationUseEList CollaborationUseEList ( CollaborationUse* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.CollaborationUse)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.CollaborationUse>($n) }
  make_append(e,l) { appendCollaborationUseEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendCollaborationUseEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm UseCase  {
  implement { org.eclipse.uml2.uml.UseCase }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.UseCase }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm UseCaseEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t).get(0) instanceof org.eclipse.uml2.uml.UseCase)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray UseCaseEList UseCaseEList ( UseCase* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.UseCase)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.UseCase>($n) }
  make_append(e,l) { appendUseCaseEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendUseCaseEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm BehaviorEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t).get(0) instanceof org.eclipse.uml2.uml.Behavior)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray BehaviorEList BehaviorEList ( Behavior* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Behavior)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Behavior>($n) }
  make_append(e,l) { appendBehaviorEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendBehaviorEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm InterfaceRealization  {
  implement { org.eclipse.uml2.uml.InterfaceRealization }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InterfaceRealization }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Interface  {
  implement { org.eclipse.uml2.uml.Interface }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Interface }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Property  {
  implement { org.eclipse.uml2.uml.Property }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Property }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ConnectorEnd  {
  implement { org.eclipse.uml2.uml.ConnectorEnd }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConnectorEnd }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ConnectableElement  {
  implement { org.eclipse.uml2.uml.ConnectableElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConnectableElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ConnectorEndEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t).get(0) instanceof org.eclipse.uml2.uml.ConnectorEnd)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ConnectorEndEList ConnectorEndEList ( ConnectorEnd* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ConnectorEnd)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ConnectorEnd>($n) }
  make_append(e,l) { appendConnectorEndEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendConnectorEndEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ConnectorEnd ConnectorEnd(eAnnotations : EAnnotationEList, ownedComment : CommentEList, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, role : ConnectableElement, partWithPort : Property) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ConnectorEnd }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(role, t) { (org.eclipse.uml2.uml.ConnectableElement)$t.eGet($t.eClass().getEStructuralFeature("role")) }
  get_slot(partWithPort, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("partWithPort")) } 
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  make(eAnnotations, ownedComment, isOrdered, isUnique, upper, lower, upperValue, lowerValue, role, partWithPort) { constructConnectorEnd((org.eclipse.uml2.uml.ConnectorEnd)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ConnectorEnd")), new Object[]{ $eAnnotations, $ownedComment, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $role, $partWithPort }) }
  implement() { org.eclipse.uml2.uml.impl.ConnectorEndImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConnectorEnd(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Deployment  {
  implement { org.eclipse.uml2.uml.Deployment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Deployment }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm DeployedArtifact  {
  implement { org.eclipse.uml2.uml.DeployedArtifact }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DeployedArtifact }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm DeployedArtifactEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeployedArtifact> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeployedArtifact>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeployedArtifact>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeployedArtifact>)$t).get(0) instanceof org.eclipse.uml2.uml.DeployedArtifact)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray DeployedArtifactEList DeployedArtifactEList ( DeployedArtifact* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.DeployedArtifact)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.DeployedArtifact>($n) }
  make_append(e,l) { appendDeployedArtifactEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendDeployedArtifactEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm DeploymentSpecification  {
  implement { org.eclipse.uml2.uml.DeploymentSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DeploymentSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Artifact  {
  implement { org.eclipse.uml2.uml.Artifact }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Artifact }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ArtifactEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact>)$t).get(0) instanceof org.eclipse.uml2.uml.Artifact)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ArtifactEList ArtifactEList ( Artifact* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Artifact)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Artifact>($n) }
  make_append(e,l) { appendArtifactEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendArtifactEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Manifestation  {
  implement { org.eclipse.uml2.uml.Manifestation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Manifestation }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Manifestation Manifestation(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression, utilizedElement : PackageableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Manifestation }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) }
  get_slot(utilizedElement, t) { (org.eclipse.uml2.uml.PackageableElement)$t.eGet($t.eClass().getEStructuralFeature("utilizedElement")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping, utilizedElement) { constructManifestation((org.eclipse.uml2.uml.Manifestation)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Manifestation")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping, $utilizedElement }) }
  implement() { org.eclipse.uml2.uml.impl.ManifestationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructManifestation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ManifestationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation>)$t).get(0) instanceof org.eclipse.uml2.uml.Manifestation)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ManifestationEList ManifestationEList ( Manifestation* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Manifestation)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Manifestation>($n) }
  make_append(e,l) { appendManifestationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendManifestationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Operation  {
  implement { org.eclipse.uml2.uml.Operation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Operation }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Parameter  {
  implement { org.eclipse.uml2.uml.Parameter }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Parameter }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ParameterSet  {
  implement { org.eclipse.uml2.uml.ParameterSet }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ParameterSet }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ParameterEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t).get(0) instanceof org.eclipse.uml2.uml.Parameter)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ParameterEList ParameterEList ( Parameter* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Parameter)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Parameter>($n) }
  make_append(e,l) { appendParameterEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendParameterEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ParameterSet ParameterSet(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, parameter : ParameterEList, condition : ConstraintEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ParameterSet }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(parameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("parameter")) }
  get_slot(condition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("condition")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, parameter, condition) { constructParameterSet((org.eclipse.uml2.uml.ParameterSet)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ParameterSet")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $parameter, $condition }) }
  implement() { org.eclipse.uml2.uml.impl.ParameterSetImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructParameterSet(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ParameterSetEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t).get(0) instanceof org.eclipse.uml2.uml.ParameterSet)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ParameterSetEList ParameterSetEList ( ParameterSet* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ParameterSet)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ParameterSet>($n) }
  make_append(e,l) { appendParameterSetEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendParameterSetEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ParameterDirectionKind  {
  implement { org.eclipse.uml2.uml.ParameterDirectionKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ParameterDirectionKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ParameterDirectionKind ParameterDirectionKindin() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterDirectionKind.get("in") }
  make() { (org.eclipse.uml2.uml.ParameterDirectionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterDirectionKind(), "in") }
}

%op ParameterDirectionKind ParameterDirectionKindinout() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterDirectionKind.get("inout") }
  make() { (org.eclipse.uml2.uml.ParameterDirectionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterDirectionKind(), "inout") }
}

%op ParameterDirectionKind ParameterDirectionKindout() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterDirectionKind.get("out") }
  make() { (org.eclipse.uml2.uml.ParameterDirectionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterDirectionKind(), "out") }
}

%op ParameterDirectionKind ParameterDirectionKindreturn() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterDirectionKind.get("return") }
  make() { (org.eclipse.uml2.uml.ParameterDirectionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterDirectionKind(), "return") }
}

%typeterm ParameterEffectKind  {
  implement { org.eclipse.uml2.uml.ParameterEffectKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ParameterEffectKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ParameterEffectKind ParameterEffectKindcreate() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterEffectKind.get("create") }
  make() { (org.eclipse.uml2.uml.ParameterEffectKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterEffectKind(), "create") }
}

%op ParameterEffectKind ParameterEffectKindread() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterEffectKind.get("read") }
  make() { (org.eclipse.uml2.uml.ParameterEffectKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterEffectKind(), "read") }
}

%op ParameterEffectKind ParameterEffectKindupdate() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterEffectKind.get("update") }
  make() { (org.eclipse.uml2.uml.ParameterEffectKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterEffectKind(), "update") }
}

%op ParameterEffectKind ParameterEffectKinddelete() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ParameterEffectKind.get("delete") }
  make() { (org.eclipse.uml2.uml.ParameterEffectKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getParameterEffectKind(), "delete") }
}

%op Parameter Parameter(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, type : Type, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, end : ConnectorEndEList, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, parameterSet : ParameterSetEList, direction : ParameterDirectionKind, _default : String, defaultValue : ValueSpecification, isException : boolean, isStream : boolean, effect : ParameterEffectKind) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Parameter }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(parameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("parameterSet")) }
  get_slot(direction, t) { (org.eclipse.uml2.uml.ParameterDirectionKind)$t.eGet($t.eClass().getEStructuralFeature("direction")) }
  get_slot(_default, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(defaultValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("defaultValue")) }
  get_slot(isException, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isException")) }
  get_slot(isStream, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStream")) }
  get_slot(effect, t) { (org.eclipse.uml2.uml.ParameterEffectKind)$t.eGet($t.eClass().getEStructuralFeature("effect")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(direction) { `ParameterDirectionKindin() }
  get_default(isException) { false }
  get_default(isStream) { false }
  get_default(effect) { `ParameterEffectKindcreate() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, type, owningTemplateParameter, templateParameter, end, isOrdered, isUnique, upper, lower, upperValue, lowerValue, parameterSet, direction, _default, defaultValue, isException, isStream, effect) { constructParameter((org.eclipse.uml2.uml.Parameter)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Parameter")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $type, $owningTemplateParameter, $templateParameter, $end, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $parameterSet, $direction, $_default, $defaultValue, $isException, $isStream, $effect }) }
  implement() { org.eclipse.uml2.uml.impl.ParameterImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructParameter(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CallConcurrencyKind  {
  implement { org.eclipse.uml2.uml.CallConcurrencyKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CallConcurrencyKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CallConcurrencyKind CallConcurrencyKindsequential() {
  is_fsym(t) { t == org.eclipse.uml2.uml.CallConcurrencyKind.get("sequential") }
  make() { (org.eclipse.uml2.uml.CallConcurrencyKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getCallConcurrencyKind(), "sequential") }
}

%op CallConcurrencyKind CallConcurrencyKindguarded() {
  is_fsym(t) { t == org.eclipse.uml2.uml.CallConcurrencyKind.get("guarded") }
  make() { (org.eclipse.uml2.uml.CallConcurrencyKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getCallConcurrencyKind(), "guarded") }
}

%op CallConcurrencyKind CallConcurrencyKindconcurrent() {
  is_fsym(t) { t == org.eclipse.uml2.uml.CallConcurrencyKind.get("concurrent") }
  make() { (org.eclipse.uml2.uml.CallConcurrencyKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getCallConcurrencyKind(), "concurrent") }
}

%typeterm Class  {
  implement { org.eclipse.uml2.uml.Class }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Class }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm PropertyEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t).get(0) instanceof org.eclipse.uml2.uml.Property)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PropertyEList PropertyEList ( Property* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Property)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Property>($n) }
  make_append(e,l) { appendPropertyEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPropertyEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Connector  {
  implement { org.eclipse.uml2.uml.Connector }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Connector }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Association  {
  implement { org.eclipse.uml2.uml.Association }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Association }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Association Association(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedEnd : PropertyEList, memberEnd : PropertyEList, isDerived : boolean, navigableOwnedEnd : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Association }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedEnd")) }
  get_slot(memberEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("memberEnd")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(navigableOwnedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("navigableOwnedEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isDerived) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedEnd, memberEnd, isDerived, navigableOwnedEnd) { constructAssociation((org.eclipse.uml2.uml.Association)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Association")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedEnd, $memberEnd, $isDerived, $navigableOwnedEnd }) }
  implement() { org.eclipse.uml2.uml.impl.AssociationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAssociation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConnectorEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t).get(0) instanceof org.eclipse.uml2.uml.Connector)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ConnectorEList ConnectorEList ( Connector* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Connector)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Connector>($n) }
  make_append(e,l) { appendConnectorEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendConnectorEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ConnectorKind  {
  implement { org.eclipse.uml2.uml.ConnectorKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConnectorKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ConnectorKind ConnectorKindassembly() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ConnectorKind.get("assembly") }
  make() { (org.eclipse.uml2.uml.ConnectorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getConnectorKind(), "assembly") }
}

%op ConnectorKind ConnectorKinddelegation() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ConnectorKind.get("delegation") }
  make() { (org.eclipse.uml2.uml.ConnectorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getConnectorKind(), "delegation") }
}

%op Connector Connector(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, isStatic : boolean, type : Association, redefinedConnector : ConnectorEList, end : ConnectorEndEList, kind : ConnectorKind, contract : BehaviorEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Connector }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(redefinedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("redefinedConnector")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(kind, t) { (org.eclipse.uml2.uml.ConnectorKind)$t.eGet($t.eClass().getEStructuralFeature("kind")) }
  get_slot(contract, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("contract")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(kind) { `ConnectorKindassembly() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, isStatic, type, redefinedConnector, end, kind, contract) { constructConnector((org.eclipse.uml2.uml.Connector)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Connector")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $isStatic, $type, $redefinedConnector, $end, $kind, $contract }) }
  implement() { org.eclipse.uml2.uml.impl.ConnectorImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConnector(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Port  {
  implement { org.eclipse.uml2.uml.Port }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Port }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm DeploymentEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t).get(0) instanceof org.eclipse.uml2.uml.Deployment)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray DeploymentEList DeploymentEList ( Deployment* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Deployment)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Deployment>($n) }
  make_append(e,l) { appendDeploymentEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendDeploymentEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm DataType  {
  implement { org.eclipse.uml2.uml.DataType }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DataType }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm OperationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t).get(0) instanceof org.eclipse.uml2.uml.Operation)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray OperationEList OperationEList ( Operation* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Operation)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Operation>($n) }
  make_append(e,l) { appendOperationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendOperationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op DataType DataType(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedOperation : OperationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DataType }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedOperation) { constructDataType((org.eclipse.uml2.uml.DataType)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DataType")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedOperation }) }
  implement() { org.eclipse.uml2.uml.impl.DataTypeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDataType(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AggregationKind  {
  implement { org.eclipse.uml2.uml.AggregationKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AggregationKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AggregationKind AggregationKindnone() {
  is_fsym(t) { t == org.eclipse.uml2.uml.AggregationKind.get("none") }
  make() { (org.eclipse.uml2.uml.AggregationKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getAggregationKind(), "none") }
}

%op AggregationKind AggregationKindshared() {
  is_fsym(t) { t == org.eclipse.uml2.uml.AggregationKind.get("shared") }
  make() { (org.eclipse.uml2.uml.AggregationKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getAggregationKind(), "shared") }
}

%op AggregationKind AggregationKindcomposite() {
  is_fsym(t) { t == org.eclipse.uml2.uml.AggregationKind.get("composite") }
  make() { (org.eclipse.uml2.uml.AggregationKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getAggregationKind(), "composite") }
}

%typeterm PortEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t).get(0) instanceof org.eclipse.uml2.uml.Port)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PortEList PortEList ( Port* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Port)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Port>($n) }
  make_append(e,l) { appendPortEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPortEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ProtocolStateMachine  {
  implement { org.eclipse.uml2.uml.ProtocolStateMachine }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ProtocolStateMachine }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InterfaceRealizationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t).get(0) instanceof org.eclipse.uml2.uml.InterfaceRealization)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InterfaceRealizationEList InterfaceRealizationEList ( InterfaceRealization* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.InterfaceRealization)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.InterfaceRealization>($n) }
  make_append(e,l) { appendInterfaceRealizationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInterfaceRealizationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Trigger  {
  implement { org.eclipse.uml2.uml.Trigger }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Trigger }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Event  {
  implement { org.eclipse.uml2.uml.Event }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Event }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Trigger Trigger(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, event : Event, port : PortEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Trigger }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(event, t) { (org.eclipse.uml2.uml.Event)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(port, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("port")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, event, port) { constructTrigger((org.eclipse.uml2.uml.Trigger)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Trigger")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $event, $port }) }
  implement() { org.eclipse.uml2.uml.impl.TriggerImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTrigger(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TriggerEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t).get(0) instanceof org.eclipse.uml2.uml.Trigger)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TriggerEList TriggerEList ( Trigger* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Trigger)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Trigger>($n) }
  make_append(e,l) { appendTriggerEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTriggerEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ClassEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t).get(0) instanceof org.eclipse.uml2.uml.Class)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ClassEList ClassEList ( Class* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Class)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Class>($n) }
  make_append(e,l) { appendClassEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendClassEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Reception  {
  implement { org.eclipse.uml2.uml.Reception }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Reception }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Signal  {
  implement { org.eclipse.uml2.uml.Signal }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Signal }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Signal Signal(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Signal }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute) { constructSignal((org.eclipse.uml2.uml.Signal)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Signal")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute }) }
  implement() { org.eclipse.uml2.uml.impl.SignalImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSignal(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Reception Reception(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, isStatic : boolean, ownedParameter : ParameterEList, isAbstract : boolean, method : BehaviorEList, concurrency : CallConcurrencyKind, raisedException : TypeEList, ownedParameterSet : ParameterSetEList, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Reception }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(method, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("method")) }
  get_slot(concurrency, t) { (org.eclipse.uml2.uml.CallConcurrencyKind)$t.eGet($t.eClass().getEStructuralFeature("concurrency")) }
  get_slot(raisedException, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t.eGet($t.eClass().getEStructuralFeature("raisedException")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(isAbstract) { false }
  get_default(concurrency) { `CallConcurrencyKindsequential() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, isStatic, ownedParameter, isAbstract, method, concurrency, raisedException, ownedParameterSet, signal) { constructReception((org.eclipse.uml2.uml.Reception)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Reception")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $isStatic, $ownedParameter, $isAbstract, $method, $concurrency, $raisedException, $ownedParameterSet, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.ReceptionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReception(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReceptionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t).get(0) instanceof org.eclipse.uml2.uml.Reception)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ReceptionEList ReceptionEList ( Reception* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Reception)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Reception>($n) }
  make_append(e,l) { appendReceptionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendReceptionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm BehavioralFeature  {
  implement { org.eclipse.uml2.uml.BehavioralFeature }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.BehavioralFeature }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Region  {
  implement { org.eclipse.uml2.uml.Region }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Region }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Vertex  {
  implement { org.eclipse.uml2.uml.Vertex }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Vertex }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Transition  {
  implement { org.eclipse.uml2.uml.Transition }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Transition }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TransitionKind  {
  implement { org.eclipse.uml2.uml.TransitionKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TransitionKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TransitionKind TransitionKindinternal() {
  is_fsym(t) { t == org.eclipse.uml2.uml.TransitionKind.get("internal") }
  make() { (org.eclipse.uml2.uml.TransitionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getTransitionKind(), "internal") }
}

%op TransitionKind TransitionKindlocal() {
  is_fsym(t) { t == org.eclipse.uml2.uml.TransitionKind.get("local") }
  make() { (org.eclipse.uml2.uml.TransitionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getTransitionKind(), "local") }
}

%op TransitionKind TransitionKindexternal() {
  is_fsym(t) { t == org.eclipse.uml2.uml.TransitionKind.get("external") }
  make() { (org.eclipse.uml2.uml.TransitionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getTransitionKind(), "external") }
}

%op Transition Transition(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, kind : TransitionKind, container : Region, source : Vertex, target : Vertex, redefinedTransition : Transition, guard : Constraint, effect : Behavior, trigger : TriggerEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Transition }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(kind, t) { (org.eclipse.uml2.uml.TransitionKind)$t.eGet($t.eClass().getEStructuralFeature("kind")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(source, t) { (org.eclipse.uml2.uml.Vertex)$t.eGet($t.eClass().getEStructuralFeature("source")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.Vertex)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(redefinedTransition, t) { (org.eclipse.uml2.uml.Transition)$t.eGet($t.eClass().getEStructuralFeature("redefinedTransition")) }
  get_slot(guard, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("guard")) }
  get_slot(effect, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("effect")) }
  get_slot(trigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("trigger")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(kind) { `TransitionKindexternal() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, kind, container, source, target, redefinedTransition, guard, effect, trigger) { constructTransition((org.eclipse.uml2.uml.Transition)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Transition")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $kind, $container, $source, $target, $redefinedTransition, $guard, $effect, $trigger }) }
  implement() { org.eclipse.uml2.uml.impl.TransitionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTransition(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TransitionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t).get(0) instanceof org.eclipse.uml2.uml.Transition)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray TransitionEList TransitionEList ( Transition* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Transition)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Transition>($n) }
  make_append(e,l) { appendTransitionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendTransitionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm VertexEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Vertex> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Vertex>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Vertex>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Vertex>)$t).get(0) instanceof org.eclipse.uml2.uml.Vertex)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray VertexEList VertexEList ( Vertex* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Vertex)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Vertex>($n) }
  make_append(e,l) { appendVertexEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendVertexEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm State  {
  implement { org.eclipse.uml2.uml.State }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.State }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm StateMachine  {
  implement { org.eclipse.uml2.uml.StateMachine }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StateMachine }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm RegionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t).get(0) instanceof org.eclipse.uml2.uml.Region)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray RegionEList RegionEList ( Region* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Region)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Region>($n) }
  make_append(e,l) { appendRegionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendRegionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm StateEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t).get(0) instanceof org.eclipse.uml2.uml.State)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray StateEList StateEList ( State* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.State)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.State>($n) }
  make_append(e,l) { appendStateEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendStateEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Pseudostate  {
  implement { org.eclipse.uml2.uml.Pseudostate }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Pseudostate }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm PseudostateKind  {
  implement { org.eclipse.uml2.uml.PseudostateKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PseudostateKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op PseudostateKind PseudostateKindinitial() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("initial") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "initial") }
}

%op PseudostateKind PseudostateKinddeepHistory() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("deepHistory") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "deepHistory") }
}

%op PseudostateKind PseudostateKindshallowHistory() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("shallowHistory") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "shallowHistory") }
}

%op PseudostateKind PseudostateKindjoin() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("join") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "join") }
}

%op PseudostateKind PseudostateKindfork() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("fork") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "fork") }
}

%op PseudostateKind PseudostateKindjunction() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("junction") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "junction") }
}

%op PseudostateKind PseudostateKindchoice() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("choice") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "choice") }
}

%op PseudostateKind PseudostateKindentryPoint() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("entryPoint") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "entryPoint") }
}

%op PseudostateKind PseudostateKindexitPoint() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("exitPoint") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "exitPoint") }
}

%op PseudostateKind PseudostateKindterminate() {
  is_fsym(t) { t == org.eclipse.uml2.uml.PseudostateKind.get("terminate") }
  make() { (org.eclipse.uml2.uml.PseudostateKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getPseudostateKind(), "terminate") }
}

%op Pseudostate Pseudostate(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, outgoing : TransitionEList, incoming : TransitionEList, container : Region, kind : PseudostateKind, stateMachine : StateMachine, state : State) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Pseudostate }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(kind, t) { (org.eclipse.uml2.uml.PseudostateKind)$t.eGet($t.eClass().getEStructuralFeature("kind")) }
  get_slot(stateMachine, t) { (org.eclipse.uml2.uml.StateMachine)$t.eGet($t.eClass().getEStructuralFeature("stateMachine")) }
  get_slot(state, t) { (org.eclipse.uml2.uml.State)$t.eGet($t.eClass().getEStructuralFeature("state")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(kind) { `PseudostateKindinitial() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, outgoing, incoming, container, kind, stateMachine, state) { constructPseudostate((org.eclipse.uml2.uml.Pseudostate)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Pseudostate")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $outgoing, $incoming, $container, $kind, $stateMachine, $state }) }
  implement() { org.eclipse.uml2.uml.impl.PseudostateImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPseudostate(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm PseudostateEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t).get(0) instanceof org.eclipse.uml2.uml.Pseudostate)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray PseudostateEList PseudostateEList ( Pseudostate* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Pseudostate)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Pseudostate>($n) }
  make_append(e,l) { appendPseudostateEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendPseudostateEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm StateMachineEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine>)$t).get(0) instanceof org.eclipse.uml2.uml.StateMachine)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray StateMachineEList StateMachineEList ( StateMachine* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.StateMachine)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.StateMachine>($n) }
  make_append(e,l) { appendStateMachineEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendStateMachineEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op StateMachine StateMachine(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, region : RegionEList, submachineState : StateEList, connectionPoint : PseudostateEList, extendedStateMachine : StateMachineEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StateMachine }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(region, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t.eGet($t.eClass().getEStructuralFeature("region")) }
  get_slot(submachineState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("submachineState")) }
  get_slot(connectionPoint, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("connectionPoint")) }
  get_slot(extendedStateMachine, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine>)$t.eGet($t.eClass().getEStructuralFeature("extendedStateMachine")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, region, submachineState, connectionPoint, extendedStateMachine) { constructStateMachine((org.eclipse.uml2.uml.StateMachine)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StateMachine")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $region, $submachineState, $connectionPoint, $extendedStateMachine }) }
  implement() { org.eclipse.uml2.uml.impl.StateMachineImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStateMachine(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConnectionPointReference  {
  implement { org.eclipse.uml2.uml.ConnectionPointReference }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConnectionPointReference }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ConnectionPointReference ConnectionPointReference(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, outgoing : TransitionEList, incoming : TransitionEList, container : Region, entry : PseudostateEList, exit : PseudostateEList, state : State) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ConnectionPointReference }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(entry, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("entry")) }
  get_slot(exit, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("exit")) }
  get_slot(state, t) { (org.eclipse.uml2.uml.State)$t.eGet($t.eClass().getEStructuralFeature("state")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, outgoing, incoming, container, entry, exit, state) { constructConnectionPointReference((org.eclipse.uml2.uml.ConnectionPointReference)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ConnectionPointReference")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $outgoing, $incoming, $container, $entry, $exit, $state }) }
  implement() { org.eclipse.uml2.uml.impl.ConnectionPointReferenceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConnectionPointReference(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConnectionPointReferenceEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference>)$t).get(0) instanceof org.eclipse.uml2.uml.ConnectionPointReference)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ConnectionPointReferenceEList ConnectionPointReferenceEList ( ConnectionPointReference* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ConnectionPointReference)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ConnectionPointReference>($n) }
  make_append(e,l) { appendConnectionPointReferenceEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendConnectionPointReferenceEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op State State(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, outgoing : TransitionEList, incoming : TransitionEList, container : Region, submachine : StateMachine, connection : ConnectionPointReferenceEList, connectionPoint : PseudostateEList, redefinedState : State, stateInvariant : Constraint, entry : Behavior, exit : Behavior, doActivity : Behavior, deferrableTrigger : TriggerEList, region : RegionEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.State }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(submachine, t) { (org.eclipse.uml2.uml.StateMachine)$t.eGet($t.eClass().getEStructuralFeature("submachine")) }
  get_slot(connection, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference>)$t.eGet($t.eClass().getEStructuralFeature("connection")) }
  get_slot(connectionPoint, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("connectionPoint")) }
  get_slot(redefinedState, t) { (org.eclipse.uml2.uml.State)$t.eGet($t.eClass().getEStructuralFeature("redefinedState")) }
  get_slot(stateInvariant, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("stateInvariant")) }
  get_slot(entry, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("entry")) }
  get_slot(exit, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("exit")) }
  get_slot(doActivity, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("doActivity")) }
  get_slot(deferrableTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("deferrableTrigger")) }
  get_slot(region, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t.eGet($t.eClass().getEStructuralFeature("region")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, outgoing, incoming, container, submachine, connection, connectionPoint, redefinedState, stateInvariant, entry, exit, doActivity, deferrableTrigger, region) { constructState((org.eclipse.uml2.uml.State)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("State")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $outgoing, $incoming, $container, $submachine, $connection, $connectionPoint, $redefinedState, $stateInvariant, $entry, $exit, $doActivity, $deferrableTrigger, $region }) }
  implement() { org.eclipse.uml2.uml.impl.StateImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructState(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Region Region(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, subvertex : VertexEList, transition : TransitionEList, state : State, extendedRegion : Region, stateMachine : StateMachine) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Region }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(subvertex, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Vertex>)$t.eGet($t.eClass().getEStructuralFeature("subvertex")) }
  get_slot(transition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("transition")) }
  get_slot(state, t) { (org.eclipse.uml2.uml.State)$t.eGet($t.eClass().getEStructuralFeature("state")) }
  get_slot(extendedRegion, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("extendedRegion")) }
  get_slot(stateMachine, t) { (org.eclipse.uml2.uml.StateMachine)$t.eGet($t.eClass().getEStructuralFeature("stateMachine")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, subvertex, transition, state, extendedRegion, stateMachine) { constructRegion((org.eclipse.uml2.uml.Region)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Region")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $subvertex, $transition, $state, $extendedRegion, $stateMachine }) }
  implement() { org.eclipse.uml2.uml.impl.RegionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRegion(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ProtocolConformance  {
  implement { org.eclipse.uml2.uml.ProtocolConformance }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ProtocolConformance }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ProtocolConformance ProtocolConformance(eAnnotations : EAnnotationEList, ownedComment : CommentEList, generalMachine : ProtocolStateMachine, specificMachine : ProtocolStateMachine) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ProtocolConformance }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(generalMachine, t) { (org.eclipse.uml2.uml.ProtocolStateMachine)$t.eGet($t.eClass().getEStructuralFeature("generalMachine")) }
  get_slot(specificMachine, t) { (org.eclipse.uml2.uml.ProtocolStateMachine)$t.eGet($t.eClass().getEStructuralFeature("specificMachine")) } 
  make(eAnnotations, ownedComment, generalMachine, specificMachine) { constructProtocolConformance((org.eclipse.uml2.uml.ProtocolConformance)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ProtocolConformance")), new Object[]{ $eAnnotations, $ownedComment, $generalMachine, $specificMachine }) }
  implement() { org.eclipse.uml2.uml.impl.ProtocolConformanceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProtocolConformance(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ProtocolConformanceEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProtocolConformance> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProtocolConformance>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProtocolConformance>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProtocolConformance>)$t).get(0) instanceof org.eclipse.uml2.uml.ProtocolConformance)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ProtocolConformanceEList ProtocolConformanceEList ( ProtocolConformance* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ProtocolConformance)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ProtocolConformance>($n) }
  make_append(e,l) { appendProtocolConformanceEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendProtocolConformanceEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ProtocolStateMachine ProtocolStateMachine(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, region : RegionEList, submachineState : StateEList, connectionPoint : PseudostateEList, extendedStateMachine : StateMachineEList, conformance : ProtocolConformanceEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ProtocolStateMachine }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(region, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t.eGet($t.eClass().getEStructuralFeature("region")) }
  get_slot(submachineState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("submachineState")) }
  get_slot(connectionPoint, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("connectionPoint")) }
  get_slot(extendedStateMachine, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.StateMachine>)$t.eGet($t.eClass().getEStructuralFeature("extendedStateMachine")) }
  get_slot(conformance, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProtocolConformance>)$t.eGet($t.eClass().getEStructuralFeature("conformance")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, region, submachineState, connectionPoint, extendedStateMachine, conformance) { constructProtocolStateMachine((org.eclipse.uml2.uml.ProtocolStateMachine)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ProtocolStateMachine")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $region, $submachineState, $connectionPoint, $extendedStateMachine, $conformance }) }
  implement() { org.eclipse.uml2.uml.impl.ProtocolStateMachineImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProtocolStateMachine(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Port Port(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, isStatic : boolean, type : Type, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isReadOnly : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, end : ConnectorEndEList, deployment : DeploymentEList, datatype : DataType, isDerived : boolean, isDerivedUnion : boolean, _default : String, aggregation : AggregationKind, isComposite : boolean, redefinedProperty : PropertyEList, owningAssociation : Association, defaultValue : ValueSpecification, opposite : Property, subsettedProperty : PropertyEList, association : Association, qualifier : PropertyEList, associationEnd : Property, isBehavior : boolean, isService : boolean, redefinedPort : PortEList, protocol : ProtocolStateMachine) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Port }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isReadOnly, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReadOnly")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(datatype, t) { (org.eclipse.uml2.uml.DataType)$t.eGet($t.eClass().getEStructuralFeature("datatype")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(isDerivedUnion, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerivedUnion")) }
  get_slot(_default, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(aggregation, t) { (org.eclipse.uml2.uml.AggregationKind)$t.eGet($t.eClass().getEStructuralFeature("aggregation")) }
  get_slot(isComposite, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isComposite")) }
  get_slot(redefinedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("redefinedProperty")) }
  get_slot(owningAssociation, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("owningAssociation")) }
  get_slot(defaultValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("defaultValue")) }
  get_slot(opposite, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("opposite")) }
  get_slot(subsettedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("subsettedProperty")) }
  get_slot(association, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("association")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(associationEnd, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("associationEnd")) }
  get_slot(isBehavior, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isBehavior")) }
  get_slot(isService, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isService")) }
  get_slot(redefinedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("redefinedPort")) }
  get_slot(protocol, t) { (org.eclipse.uml2.uml.ProtocolStateMachine)$t.eGet($t.eClass().getEStructuralFeature("protocol")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isReadOnly) { false }
  get_default(isDerived) { false }
  get_default(isDerivedUnion) { false }
  get_default(aggregation) { `AggregationKindnone() }
  get_default(isComposite) { false }
  get_default(isBehavior) { false }
  get_default(isService) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, isStatic, type, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isReadOnly, owningTemplateParameter, templateParameter, end, deployment, datatype, isDerived, isDerivedUnion, _default, aggregation, isComposite, redefinedProperty, owningAssociation, defaultValue, opposite, subsettedProperty, association, qualifier, associationEnd, isBehavior, isService, redefinedPort, protocol) { constructPort((org.eclipse.uml2.uml.Port)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Port")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $isStatic, $type, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isReadOnly, $owningTemplateParameter, $templateParameter, $end, $deployment, $datatype, $isDerived, $isDerivedUnion, $_default, $aggregation, $isComposite, $redefinedProperty, $owningAssociation, $defaultValue, $opposite, $subsettedProperty, $association, $qualifier, $associationEnd, $isBehavior, $isService, $redefinedPort, $protocol }) }
  implement() { org.eclipse.uml2.uml.impl.PortImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPort(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Class Class(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Class }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception) { constructClass((org.eclipse.uml2.uml.Class)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Class")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception }) }
  implement() { org.eclipse.uml2.uml.impl.ClassImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClass(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Operation Operation(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, isStatic : boolean, ownedParameter : ParameterEList, isAbstract : boolean, method : BehaviorEList, concurrency : CallConcurrencyKind, raisedException : TypeEList, ownedParameterSet : ParameterSetEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, _interface : Interface, _class : Class, isQuery : boolean, isOrdered : boolean, isUnique : boolean, lower : int, upper : int, precondition : ConstraintEList, postcondition : ConstraintEList, redefinedOperation : OperationEList, datatype : DataType, bodyCondition : Constraint, type : Type) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Operation }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(method, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("method")) }
  get_slot(concurrency, t) { (org.eclipse.uml2.uml.CallConcurrencyKind)$t.eGet($t.eClass().getEStructuralFeature("concurrency")) }
  get_slot(raisedException, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t.eGet($t.eClass().getEStructuralFeature("raisedException")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(_interface, t) { (org.eclipse.uml2.uml.Interface)$t.eGet($t.eClass().getEStructuralFeature("interface")) }
  get_slot(_class, t) { (org.eclipse.uml2.uml.Class)$t.eGet($t.eClass().getEStructuralFeature("class")) }
  get_slot(isQuery, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isQuery")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(redefinedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("redefinedOperation")) }
  get_slot(datatype, t) { (org.eclipse.uml2.uml.DataType)$t.eGet($t.eClass().getEStructuralFeature("datatype")) }
  get_slot(bodyCondition, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("bodyCondition")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(isAbstract) { false }
  get_default(concurrency) { `CallConcurrencyKindsequential() }
  get_default(isQuery) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(lower) { 1 }
  get_default(upper) { 1 }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, isStatic, ownedParameter, isAbstract, method, concurrency, raisedException, ownedParameterSet, owningTemplateParameter, templateParameter, templateBinding, ownedTemplateSignature, _interface, _class, isQuery, isOrdered, isUnique, lower, upper, precondition, postcondition, redefinedOperation, datatype, bodyCondition, type) { constructOperation((org.eclipse.uml2.uml.Operation)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Operation")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $isStatic, $ownedParameter, $isAbstract, $method, $concurrency, $raisedException, $ownedParameterSet, $owningTemplateParameter, $templateParameter, $templateBinding, $ownedTemplateSignature, $_interface, $_class, $isQuery, $isOrdered, $isUnique, $lower, $upper, $precondition, $postcondition, $redefinedOperation, $datatype, $bodyCondition, $type }) }
  implement() { org.eclipse.uml2.uml.impl.OperationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOperation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Artifact Artifact(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, fileName : String, nestedArtifact : ArtifactEList, manifestation : ManifestationEList, ownedOperation : OperationEList, ownedAttribute : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Artifact }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(fileName, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("fileName")) }
  get_slot(nestedArtifact, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact>)$t.eGet($t.eClass().getEStructuralFeature("nestedArtifact")) }
  get_slot(manifestation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation>)$t.eGet($t.eClass().getEStructuralFeature("manifestation")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, fileName, nestedArtifact, manifestation, ownedOperation, ownedAttribute) { constructArtifact((org.eclipse.uml2.uml.Artifact)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Artifact")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $fileName, $nestedArtifact, $manifestation, $ownedOperation, $ownedAttribute }) }
  implement() { org.eclipse.uml2.uml.impl.ArtifactImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructArtifact(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op DeploymentSpecification DeploymentSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, fileName : String, nestedArtifact : ArtifactEList, manifestation : ManifestationEList, ownedOperation : OperationEList, ownedAttribute : PropertyEList, deploymentLocation : String, executionLocation : String, deployment : Deployment) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DeploymentSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(fileName, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("fileName")) }
  get_slot(nestedArtifact, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Artifact>)$t.eGet($t.eClass().getEStructuralFeature("nestedArtifact")) }
  get_slot(manifestation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Manifestation>)$t.eGet($t.eClass().getEStructuralFeature("manifestation")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(deploymentLocation, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("deploymentLocation")) }
  get_slot(executionLocation, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("executionLocation")) }
  get_slot(deployment, t) { (org.eclipse.uml2.uml.Deployment)$t.eGet($t.eClass().getEStructuralFeature("deployment")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, fileName, nestedArtifact, manifestation, ownedOperation, ownedAttribute, deploymentLocation, executionLocation, deployment) { constructDeploymentSpecification((org.eclipse.uml2.uml.DeploymentSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DeploymentSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $fileName, $nestedArtifact, $manifestation, $ownedOperation, $ownedAttribute, $deploymentLocation, $executionLocation, $deployment }) }
  implement() { org.eclipse.uml2.uml.impl.DeploymentSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDeploymentSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DeploymentSpecificationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeploymentSpecification> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeploymentSpecification>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeploymentSpecification>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeploymentSpecification>)$t).get(0) instanceof org.eclipse.uml2.uml.DeploymentSpecification)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray DeploymentSpecificationEList DeploymentSpecificationEList ( DeploymentSpecification* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.DeploymentSpecification)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.DeploymentSpecification>($n) }
  make_append(e,l) { appendDeploymentSpecificationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendDeploymentSpecificationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm DeploymentTarget  {
  implement { org.eclipse.uml2.uml.DeploymentTarget }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DeploymentTarget }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Deployment Deployment(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, deployedArtifact : DeployedArtifactEList, configuration : DeploymentSpecificationEList, location : DeploymentTarget) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Deployment }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(deployedArtifact, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeployedArtifact>)$t.eGet($t.eClass().getEStructuralFeature("deployedArtifact")) }
  get_slot(configuration, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.DeploymentSpecification>)$t.eGet($t.eClass().getEStructuralFeature("configuration")) }
  get_slot(location, t) { (org.eclipse.uml2.uml.DeploymentTarget)$t.eGet($t.eClass().getEStructuralFeature("location")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, deployedArtifact, configuration, location) { constructDeployment((org.eclipse.uml2.uml.Deployment)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Deployment")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $deployedArtifact, $configuration, $location }) }
  implement() { org.eclipse.uml2.uml.impl.DeploymentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDeployment(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Property Property(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, isStatic : boolean, type : Type, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isReadOnly : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, end : ConnectorEndEList, deployment : DeploymentEList, datatype : DataType, isDerived : boolean, isDerivedUnion : boolean, _default : String, aggregation : AggregationKind, isComposite : boolean, redefinedProperty : PropertyEList, owningAssociation : Association, defaultValue : ValueSpecification, opposite : Property, subsettedProperty : PropertyEList, association : Association, qualifier : PropertyEList, associationEnd : Property) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Property }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isReadOnly, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReadOnly")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(datatype, t) { (org.eclipse.uml2.uml.DataType)$t.eGet($t.eClass().getEStructuralFeature("datatype")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(isDerivedUnion, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerivedUnion")) }
  get_slot(_default, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(aggregation, t) { (org.eclipse.uml2.uml.AggregationKind)$t.eGet($t.eClass().getEStructuralFeature("aggregation")) }
  get_slot(isComposite, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isComposite")) }
  get_slot(redefinedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("redefinedProperty")) }
  get_slot(owningAssociation, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("owningAssociation")) }
  get_slot(defaultValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("defaultValue")) }
  get_slot(opposite, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("opposite")) }
  get_slot(subsettedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("subsettedProperty")) }
  get_slot(association, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("association")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(associationEnd, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("associationEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isReadOnly) { false }
  get_default(isDerived) { false }
  get_default(isDerivedUnion) { false }
  get_default(aggregation) { `AggregationKindnone() }
  get_default(isComposite) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, isStatic, type, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isReadOnly, owningTemplateParameter, templateParameter, end, deployment, datatype, isDerived, isDerivedUnion, _default, aggregation, isComposite, redefinedProperty, owningAssociation, defaultValue, opposite, subsettedProperty, association, qualifier, associationEnd) { constructProperty((org.eclipse.uml2.uml.Property)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Property")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $isStatic, $type, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isReadOnly, $owningTemplateParameter, $templateParameter, $end, $deployment, $datatype, $isDerived, $isDerivedUnion, $_default, $aggregation, $isComposite, $redefinedProperty, $owningAssociation, $defaultValue, $opposite, $subsettedProperty, $association, $qualifier, $associationEnd }) }
  implement() { org.eclipse.uml2.uml.impl.PropertyImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProperty(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InterfaceEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Interface> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Interface>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Interface>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Interface>)$t).get(0) instanceof org.eclipse.uml2.uml.Interface)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InterfaceEList InterfaceEList ( Interface* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Interface)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Interface>($n) }
  make_append(e,l) { appendInterfaceEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInterfaceEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Interface Interface(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedOperation : OperationEList, nestedClassifier : ClassifierEList, redefinedInterface : InterfaceEList, ownedReception : ReceptionEList, protocol : ProtocolStateMachine) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Interface }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(redefinedInterface, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Interface>)$t.eGet($t.eClass().getEStructuralFeature("redefinedInterface")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(protocol, t) { (org.eclipse.uml2.uml.ProtocolStateMachine)$t.eGet($t.eClass().getEStructuralFeature("protocol")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedOperation, nestedClassifier, redefinedInterface, ownedReception, protocol) { constructInterface((org.eclipse.uml2.uml.Interface)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Interface")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedOperation, $nestedClassifier, $redefinedInterface, $ownedReception, $protocol }) }
  implement() { org.eclipse.uml2.uml.impl.InterfaceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInterface(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm BehavioredClassifier  {
  implement { org.eclipse.uml2.uml.BehavioredClassifier }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.BehavioredClassifier }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InterfaceRealization InterfaceRealization(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression, contract : Interface, implementingClassifier : BehavioredClassifier) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InterfaceRealization }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) }
  get_slot(contract, t) { (org.eclipse.uml2.uml.Interface)$t.eGet($t.eClass().getEStructuralFeature("contract")) }
  get_slot(implementingClassifier, t) { (org.eclipse.uml2.uml.BehavioredClassifier)$t.eGet($t.eClass().getEStructuralFeature("implementingClassifier")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping, contract, implementingClassifier) { constructInterfaceRealization((org.eclipse.uml2.uml.InterfaceRealization)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InterfaceRealization")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping, $contract, $implementingClassifier }) }
  implement() { org.eclipse.uml2.uml.impl.InterfaceRealizationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInterfaceRealization(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Include  {
  implement { org.eclipse.uml2.uml.Include }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Include }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Include Include(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, addition : UseCase, includingCase : UseCase) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Include }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(addition, t) { (org.eclipse.uml2.uml.UseCase)$t.eGet($t.eClass().getEStructuralFeature("addition")) }
  get_slot(includingCase, t) { (org.eclipse.uml2.uml.UseCase)$t.eGet($t.eClass().getEStructuralFeature("includingCase")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, addition, includingCase) { constructInclude((org.eclipse.uml2.uml.Include)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Include")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $addition, $includingCase }) }
  implement() { org.eclipse.uml2.uml.impl.IncludeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInclude(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm IncludeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Include> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Include>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Include>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Include>)$t).get(0) instanceof org.eclipse.uml2.uml.Include)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray IncludeEList IncludeEList ( Include* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Include)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Include>($n) }
  make_append(e,l) { appendIncludeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendIncludeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm Extend  {
  implement { org.eclipse.uml2.uml.Extend }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Extend }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExtensionPoint  {
  implement { org.eclipse.uml2.uml.ExtensionPoint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExtensionPoint }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExtensionPoint ExtensionPoint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, useCase : UseCase) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExtensionPoint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(useCase, t) { (org.eclipse.uml2.uml.UseCase)$t.eGet($t.eClass().getEStructuralFeature("useCase")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, useCase) { constructExtensionPoint((org.eclipse.uml2.uml.ExtensionPoint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExtensionPoint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $useCase }) }
  implement() { org.eclipse.uml2.uml.impl.ExtensionPointImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExtensionPoint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExtensionPointEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint>)$t).get(0) instanceof org.eclipse.uml2.uml.ExtensionPoint)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ExtensionPointEList ExtensionPointEList ( ExtensionPoint* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ExtensionPoint)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ExtensionPoint>($n) }
  make_append(e,l) { appendExtensionPointEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendExtensionPointEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Extend Extend(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, extendedCase : UseCase, condition : Constraint, extensionLocation : ExtensionPointEList, extension : UseCase) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Extend }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(extendedCase, t) { (org.eclipse.uml2.uml.UseCase)$t.eGet($t.eClass().getEStructuralFeature("extendedCase")) }
  get_slot(condition, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("condition")) }
  get_slot(extensionLocation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint>)$t.eGet($t.eClass().getEStructuralFeature("extensionLocation")) }
  get_slot(extension, t) { (org.eclipse.uml2.uml.UseCase)$t.eGet($t.eClass().getEStructuralFeature("extension")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, extendedCase, condition, extensionLocation, extension) { constructExtend((org.eclipse.uml2.uml.Extend)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Extend")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $extendedCase, $condition, $extensionLocation, $extension }) }
  implement() { org.eclipse.uml2.uml.impl.ExtendImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExtend(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExtendEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Extend> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Extend>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Extend>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Extend>)$t).get(0) instanceof org.eclipse.uml2.uml.Extend)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ExtendEList ExtendEList ( Extend* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Extend)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Extend>($n) }
  make_append(e,l) { appendExtendEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendExtendEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op UseCase UseCase(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, include : IncludeEList, extend : ExtendEList, extensionPoint : ExtensionPointEList, subject : ClassifierEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.UseCase }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(include, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Include>)$t.eGet($t.eClass().getEStructuralFeature("include")) }
  get_slot(extend, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Extend>)$t.eGet($t.eClass().getEStructuralFeature("extend")) }
  get_slot(extensionPoint, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExtensionPoint>)$t.eGet($t.eClass().getEStructuralFeature("extensionPoint")) }
  get_slot(subject, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("subject")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, include, extend, extensionPoint, subject) { constructUseCase((org.eclipse.uml2.uml.UseCase)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("UseCase")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $include, $extend, $extensionPoint, $subject }) }
  implement() { org.eclipse.uml2.uml.impl.UseCaseImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructUseCase(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConnectableElementEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectableElement> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectableElement>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectableElement>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectableElement>)$t).get(0) instanceof org.eclipse.uml2.uml.ConnectableElement)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ConnectableElementEList ConnectableElementEList ( ConnectableElement* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ConnectableElement)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ConnectableElement>($n) }
  make_append(e,l) { appendConnectableElementEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendConnectableElementEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Collaboration Collaboration(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, collaborationRole : ConnectableElementEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Collaboration }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(collaborationRole, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectableElement>)$t.eGet($t.eClass().getEStructuralFeature("collaborationRole")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, ownedAttribute, ownedConnector, collaborationRole) { constructCollaboration((org.eclipse.uml2.uml.Collaboration)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Collaboration")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $ownedAttribute, $ownedConnector, $collaborationRole }) }
  implement() { org.eclipse.uml2.uml.impl.CollaborationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCollaboration(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op CollaborationUse CollaborationUse(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, type : Collaboration, roleBinding : DependencyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CollaborationUse }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Collaboration)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(roleBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("roleBinding")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, type, roleBinding) { constructCollaborationUse((org.eclipse.uml2.uml.CollaborationUse)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CollaborationUse")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $type, $roleBinding }) }
  implement() { org.eclipse.uml2.uml.impl.CollaborationUseImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCollaborationUse(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op OpaqueExpression OpaqueExpression(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, body : StringEList, language : StringEList, behavior : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OpaqueExpression }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(body, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(language, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("language")) }
  get_slot(behavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("behavior")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, body, language, behavior) { constructOpaqueExpression((org.eclipse.uml2.uml.OpaqueExpression)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OpaqueExpression")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $body, $language, $behavior }) }
  implement() { org.eclipse.uml2.uml.impl.OpaqueExpressionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOpaqueExpression(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Substitution Substitution(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression, contract : Classifier, substitutingClassifier : Classifier) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Substitution }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) }
  get_slot(contract, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("contract")) }
  get_slot(substitutingClassifier, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("substitutingClassifier")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping, contract, substitutingClassifier) { constructSubstitution((org.eclipse.uml2.uml.Substitution)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Substitution")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping, $contract, $substitutingClassifier }) }
  implement() { org.eclipse.uml2.uml.impl.SubstitutionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSubstitution(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Generalization Generalization(eAnnotations : EAnnotationEList, ownedComment : CommentEList, isSubstitutable : boolean, general : Classifier, generalizationSet : GeneralizationSetEList, specific : Classifier) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Generalization }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(isSubstitutable, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isSubstitutable")) }
  get_slot(general, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(generalizationSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("generalizationSet")) }
  get_slot(specific, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("specific")) } 
  get_default(isSubstitutable) { true }
  make(eAnnotations, ownedComment, isSubstitutable, general, generalizationSet, specific) { constructGeneralization((org.eclipse.uml2.uml.Generalization)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Generalization")), new Object[]{ $eAnnotations, $ownedComment, $isSubstitutable, $general, $generalizationSet, $specific }) }
  implement() { org.eclipse.uml2.uml.impl.GeneralizationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructGeneralization(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Image  {
  implement { org.eclipse.uml2.uml.Image }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Image }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Image Image(eAnnotations : EAnnotationEList, ownedComment : CommentEList, content : String, location : String, format : String) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Image }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(content, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("content")) }
  get_slot(location, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("location")) }
  get_slot(format, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("format")) } 
  make(eAnnotations, ownedComment, content, location, format) { constructImage((org.eclipse.uml2.uml.Image)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Image")), new Object[]{ $eAnnotations, $ownedComment, $content, $location, $format }) }
  implement() { org.eclipse.uml2.uml.impl.ImageImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructImage(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ImageEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Image> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Image>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Image>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Image>)$t).get(0) instanceof org.eclipse.uml2.uml.Image)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ImageEList ImageEList ( Image* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Image)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Image>($n) }
  make_append(e,l) { appendImageEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendImageEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Stereotype Stereotype(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, icon : ImageEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Stereotype }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(icon, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Image>)$t.eGet($t.eClass().getEStructuralFeature("icon")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, icon) { constructStereotype((org.eclipse.uml2.uml.Stereotype)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Stereotype")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $icon }) }
  implement() { org.eclipse.uml2.uml.impl.StereotypeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStereotype(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm StereotypeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Stereotype> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Stereotype>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Stereotype>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Stereotype>)$t).get(0) instanceof org.eclipse.uml2.uml.Stereotype)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray StereotypeEList StereotypeEList ( Stereotype* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Stereotype)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Stereotype>($n) }
  make_append(e,l) { appendStereotypeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendStereotypeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Profile Profile(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, ownedType : TypeEList, packageMerge : PackageMergeEList, packagedElement : PackageableElementEList, nestedPackage : PackageEList, nestingPackage : Package, profileApplication : ProfileApplicationEList, ownedStereotype : StereotypeEList, metaclassReference : ElementImportEList, metamodelReference : PackageImportEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Profile }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(ownedType, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t.eGet($t.eClass().getEStructuralFeature("ownedType")) }
  get_slot(packageMerge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t.eGet($t.eClass().getEStructuralFeature("packageMerge")) }
  get_slot(packagedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t.eGet($t.eClass().getEStructuralFeature("packagedElement")) }
  get_slot(nestedPackage, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t.eGet($t.eClass().getEStructuralFeature("nestedPackage")) }
  get_slot(nestingPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("nestingPackage")) }
  get_slot(profileApplication, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t.eGet($t.eClass().getEStructuralFeature("profileApplication")) }
  get_slot(ownedStereotype, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Stereotype>)$t.eGet($t.eClass().getEStructuralFeature("ownedStereotype")) }
  get_slot(metaclassReference, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("metaclassReference")) }
  get_slot(metamodelReference, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("metamodelReference")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, owningTemplateParameter, templateParameter, templateBinding, ownedTemplateSignature, ownedType, packageMerge, packagedElement, nestedPackage, nestingPackage, profileApplication, ownedStereotype, metaclassReference, metamodelReference) { constructProfile((org.eclipse.uml2.uml.Profile)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Profile")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $owningTemplateParameter, $templateParameter, $templateBinding, $ownedTemplateSignature, $ownedType, $packageMerge, $packagedElement, $nestedPackage, $nestingPackage, $profileApplication, $ownedStereotype, $metaclassReference, $metamodelReference }) }
  implement() { org.eclipse.uml2.uml.impl.ProfileImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProfile(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op ProfileApplication ProfileApplication(eAnnotations : EAnnotationEList, ownedComment : CommentEList, appliedProfile : Profile, isStrict : boolean, applyingPackage : Package) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ProfileApplication }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(appliedProfile, t) { (org.eclipse.uml2.uml.Profile)$t.eGet($t.eClass().getEStructuralFeature("appliedProfile")) }
  get_slot(isStrict, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStrict")) }
  get_slot(applyingPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("applyingPackage")) } 
  get_default(isStrict) { false }
  make(eAnnotations, ownedComment, appliedProfile, isStrict, applyingPackage) { constructProfileApplication((org.eclipse.uml2.uml.ProfileApplication)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ProfileApplication")), new Object[]{ $eAnnotations, $ownedComment, $appliedProfile, $isStrict, $applyingPackage }) }
  implement() { org.eclipse.uml2.uml.impl.ProfileApplicationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProfileApplication(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Package Package(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, ownedType : TypeEList, packageMerge : PackageMergeEList, packagedElement : PackageableElementEList, nestedPackage : PackageEList, nestingPackage : Package, profileApplication : ProfileApplicationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Package }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(ownedType, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t.eGet($t.eClass().getEStructuralFeature("ownedType")) }
  get_slot(packageMerge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t.eGet($t.eClass().getEStructuralFeature("packageMerge")) }
  get_slot(packagedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t.eGet($t.eClass().getEStructuralFeature("packagedElement")) }
  get_slot(nestedPackage, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t.eGet($t.eClass().getEStructuralFeature("nestedPackage")) }
  get_slot(nestingPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("nestingPackage")) }
  get_slot(profileApplication, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t.eGet($t.eClass().getEStructuralFeature("profileApplication")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, owningTemplateParameter, templateParameter, templateBinding, ownedTemplateSignature, ownedType, packageMerge, packagedElement, nestedPackage, nestingPackage, profileApplication) { constructPackage((org.eclipse.uml2.uml.Package)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Package")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $owningTemplateParameter, $templateParameter, $templateBinding, $ownedTemplateSignature, $ownedType, $packageMerge, $packagedElement, $nestedPackage, $nestingPackage, $profileApplication }) }
  implement() { org.eclipse.uml2.uml.impl.PackageImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPackage(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DirectedRelationship  {
  implement { org.eclipse.uml2.uml.DirectedRelationship }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DirectedRelationship }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Relationship  {
  implement { org.eclipse.uml2.uml.Relationship }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Relationship }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm TypedElement  {
  implement { org.eclipse.uml2.uml.TypedElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TypedElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm RedefinableElement  {
  implement { org.eclipse.uml2.uml.RedefinableElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.RedefinableElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Feature  {
  implement { org.eclipse.uml2.uml.Feature }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Feature }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Realization  {
  implement { org.eclipse.uml2.uml.Realization }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Realization }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Realization Realization(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Realization }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping) { constructRealization((org.eclipse.uml2.uml.Realization)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Realization")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping }) }
  implement() { org.eclipse.uml2.uml.impl.RealizationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRealization(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Abstraction  {
  implement { org.eclipse.uml2.uml.Abstraction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Abstraction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Abstraction Abstraction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Abstraction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping) { constructAbstraction((org.eclipse.uml2.uml.Abstraction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Abstraction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping }) }
  implement() { org.eclipse.uml2.uml.impl.AbstractionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAbstraction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MultiplicityElement  {
  implement { org.eclipse.uml2.uml.MultiplicityElement }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MultiplicityElement }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm EncapsulatedClassifier  {
  implement { org.eclipse.uml2.uml.EncapsulatedClassifier }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.EncapsulatedClassifier }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm StructuredClassifier  {
  implement { org.eclipse.uml2.uml.StructuredClassifier }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StructuredClassifier }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Extension  {
  implement { org.eclipse.uml2.uml.Extension }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Extension }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Extension Extension(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedEnd : PropertyEList, memberEnd : PropertyEList, isDerived : boolean, navigableOwnedEnd : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Extension }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedEnd")) }
  get_slot(memberEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("memberEnd")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(navigableOwnedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("navigableOwnedEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isDerived) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedEnd, memberEnd, isDerived, navigableOwnedEnd) { constructExtension((org.eclipse.uml2.uml.Extension)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Extension")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedEnd, $memberEnd, $isDerived, $navigableOwnedEnd }) }
  implement() { org.eclipse.uml2.uml.impl.ExtensionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExtension(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExtensionEnd  {
  implement { org.eclipse.uml2.uml.ExtensionEnd }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExtensionEnd }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExtensionEnd ExtensionEnd(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, isStatic : boolean, type : Type, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isReadOnly : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, end : ConnectorEndEList, deployment : DeploymentEList, datatype : DataType, isDerived : boolean, isDerivedUnion : boolean, _default : String, aggregation : AggregationKind, isComposite : boolean, redefinedProperty : PropertyEList, owningAssociation : Association, defaultValue : ValueSpecification, opposite : Property, subsettedProperty : PropertyEList, association : Association, qualifier : PropertyEList, associationEnd : Property) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExtensionEnd }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(isStatic, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isStatic")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isReadOnly, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReadOnly")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(datatype, t) { (org.eclipse.uml2.uml.DataType)$t.eGet($t.eClass().getEStructuralFeature("datatype")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(isDerivedUnion, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerivedUnion")) }
  get_slot(_default, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(aggregation, t) { (org.eclipse.uml2.uml.AggregationKind)$t.eGet($t.eClass().getEStructuralFeature("aggregation")) }
  get_slot(isComposite, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isComposite")) }
  get_slot(redefinedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("redefinedProperty")) }
  get_slot(owningAssociation, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("owningAssociation")) }
  get_slot(defaultValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("defaultValue")) }
  get_slot(opposite, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("opposite")) }
  get_slot(subsettedProperty, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("subsettedProperty")) }
  get_slot(association, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("association")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(associationEnd, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("associationEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isStatic) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isReadOnly) { false }
  get_default(isDerived) { false }
  get_default(isDerivedUnion) { false }
  get_default(aggregation) { `AggregationKindnone() }
  get_default(isComposite) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, isStatic, type, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isReadOnly, owningTemplateParameter, templateParameter, end, deployment, datatype, isDerived, isDerivedUnion, _default, aggregation, isComposite, redefinedProperty, owningAssociation, defaultValue, opposite, subsettedProperty, association, qualifier, associationEnd) { constructExtensionEnd((org.eclipse.uml2.uml.ExtensionEnd)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExtensionEnd")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $isStatic, $type, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isReadOnly, $owningTemplateParameter, $templateParameter, $end, $deployment, $datatype, $isDerived, $isDerivedUnion, $_default, $aggregation, $isComposite, $redefinedProperty, $owningAssociation, $defaultValue, $opposite, $subsettedProperty, $association, $qualifier, $associationEnd }) }
  implement() { org.eclipse.uml2.uml.impl.ExtensionEndImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExtensionEnd(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Model  {
  implement { org.eclipse.uml2.uml.Model }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Model }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Model Model(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, ownedType : TypeEList, packageMerge : PackageMergeEList, packagedElement : PackageableElementEList, nestedPackage : PackageEList, nestingPackage : Package, profileApplication : ProfileApplicationEList, viewpoint : String) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Model }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(ownedType, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Type>)$t.eGet($t.eClass().getEStructuralFeature("ownedType")) }
  get_slot(packageMerge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageMerge>)$t.eGet($t.eClass().getEStructuralFeature("packageMerge")) }
  get_slot(packagedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t.eGet($t.eClass().getEStructuralFeature("packagedElement")) }
  get_slot(nestedPackage, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Package>)$t.eGet($t.eClass().getEStructuralFeature("nestedPackage")) }
  get_slot(nestingPackage, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("nestingPackage")) }
  get_slot(profileApplication, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ProfileApplication>)$t.eGet($t.eClass().getEStructuralFeature("profileApplication")) }
  get_slot(viewpoint, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("viewpoint")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, owningTemplateParameter, templateParameter, templateBinding, ownedTemplateSignature, ownedType, packageMerge, packagedElement, nestedPackage, nestingPackage, profileApplication, viewpoint) { constructModel((org.eclipse.uml2.uml.Model)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Model")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $owningTemplateParameter, $templateParameter, $templateBinding, $ownedTemplateSignature, $ownedType, $packageMerge, $packagedElement, $nestedPackage, $nestingPackage, $profileApplication, $viewpoint }) }
  implement() { org.eclipse.uml2.uml.impl.ModelImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructModel(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm OperationTemplateParameter  {
  implement { org.eclipse.uml2.uml.OperationTemplateParameter }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OperationTemplateParameter }
  equals(l1,l2) { $l1.equals($l2) }
}

%op OperationTemplateParameter OperationTemplateParameter(eAnnotations : EAnnotationEList, ownedComment : CommentEList, signature : TemplateSignature, parameteredElement : ParameterableElement, ownedParameteredElement : ParameterableElement, _default : ParameterableElement, ownedDefault : ParameterableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OperationTemplateParameter }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(signature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("signature")) }
  get_slot(parameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("parameteredElement")) }
  get_slot(ownedParameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedParameteredElement")) }
  get_slot(_default, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(ownedDefault, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedDefault")) } 
  make(eAnnotations, ownedComment, signature, parameteredElement, ownedParameteredElement, _default, ownedDefault) { constructOperationTemplateParameter((org.eclipse.uml2.uml.OperationTemplateParameter)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OperationTemplateParameter")), new Object[]{ $eAnnotations, $ownedComment, $signature, $parameteredElement, $ownedParameteredElement, $_default, $ownedDefault }) }
  implement() { org.eclipse.uml2.uml.impl.OperationTemplateParameterImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOperationTemplateParameter(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm StructuralFeature  {
  implement { org.eclipse.uml2.uml.StructuralFeature }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StructuralFeature }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ConnectableElementTemplateParameter  {
  implement { org.eclipse.uml2.uml.ConnectableElementTemplateParameter }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConnectableElementTemplateParameter }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ConnectableElementTemplateParameter ConnectableElementTemplateParameter(eAnnotations : EAnnotationEList, ownedComment : CommentEList, signature : TemplateSignature, parameteredElement : ParameterableElement, ownedParameteredElement : ParameterableElement, _default : ParameterableElement, ownedDefault : ParameterableElement) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ConnectableElementTemplateParameter }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(signature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("signature")) }
  get_slot(parameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("parameteredElement")) }
  get_slot(ownedParameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedParameteredElement")) }
  get_slot(_default, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(ownedDefault, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedDefault")) } 
  make(eAnnotations, ownedComment, signature, parameteredElement, ownedParameteredElement, _default, ownedDefault) { constructConnectableElementTemplateParameter((org.eclipse.uml2.uml.ConnectableElementTemplateParameter)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ConnectableElementTemplateParameter")), new Object[]{ $eAnnotations, $ownedComment, $signature, $parameteredElement, $ownedParameteredElement, $_default, $ownedDefault }) }
  implement() { org.eclipse.uml2.uml.impl.ConnectableElementTemplateParameterImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConnectableElementTemplateParameter(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm RedefinableTemplateSignature  {
  implement { org.eclipse.uml2.uml.RedefinableTemplateSignature }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.RedefinableTemplateSignature }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm RedefinableTemplateSignatureEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.RedefinableTemplateSignature> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.RedefinableTemplateSignature>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.RedefinableTemplateSignature>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.RedefinableTemplateSignature>)$t).get(0) instanceof org.eclipse.uml2.uml.RedefinableTemplateSignature)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray RedefinableTemplateSignatureEList RedefinableTemplateSignatureEList ( RedefinableTemplateSignature* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.RedefinableTemplateSignature)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.RedefinableTemplateSignature>($n) }
  make_append(e,l) { appendRedefinableTemplateSignatureEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendRedefinableTemplateSignatureEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op RedefinableTemplateSignature RedefinableTemplateSignature(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, parameter : TemplateParameterEList, ownedParameter : TemplateParameterEList, template : TemplateableElement, extendedSignature : RedefinableTemplateSignatureEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.RedefinableTemplateSignature }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(parameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t.eGet($t.eClass().getEStructuralFeature("parameter")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateParameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(template, t) { (org.eclipse.uml2.uml.TemplateableElement)$t.eGet($t.eClass().getEStructuralFeature("template")) }
  get_slot(extendedSignature, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.RedefinableTemplateSignature>)$t.eGet($t.eClass().getEStructuralFeature("extendedSignature")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, parameter, ownedParameter, template, extendedSignature) { constructRedefinableTemplateSignature((org.eclipse.uml2.uml.RedefinableTemplateSignature)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("RedefinableTemplateSignature")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $parameter, $ownedParameter, $template, $extendedSignature }) }
  implement() { org.eclipse.uml2.uml.impl.RedefinableTemplateSignatureImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRedefinableTemplateSignature(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ClassifierTemplateParameter  {
  implement { org.eclipse.uml2.uml.ClassifierTemplateParameter }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ClassifierTemplateParameter }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ClassifierTemplateParameter ClassifierTemplateParameter(eAnnotations : EAnnotationEList, ownedComment : CommentEList, signature : TemplateSignature, parameteredElement : ParameterableElement, ownedParameteredElement : ParameterableElement, _default : ParameterableElement, ownedDefault : ParameterableElement, allowSubstitutable : boolean, constrainingClassifier : ClassifierEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ClassifierTemplateParameter }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(signature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("signature")) }
  get_slot(parameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("parameteredElement")) }
  get_slot(ownedParameteredElement, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedParameteredElement")) }
  get_slot(_default, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("default")) }
  get_slot(ownedDefault, t) { (org.eclipse.uml2.uml.ParameterableElement)$t.eGet($t.eClass().getEStructuralFeature("ownedDefault")) }
  get_slot(allowSubstitutable, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("allowSubstitutable")) }
  get_slot(constrainingClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("constrainingClassifier")) } 
  get_default(allowSubstitutable) { true }
  make(eAnnotations, ownedComment, signature, parameteredElement, ownedParameteredElement, _default, ownedDefault, allowSubstitutable, constrainingClassifier) { constructClassifierTemplateParameter((org.eclipse.uml2.uml.ClassifierTemplateParameter)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ClassifierTemplateParameter")), new Object[]{ $eAnnotations, $ownedComment, $signature, $parameteredElement, $ownedParameteredElement, $_default, $ownedDefault, $allowSubstitutable, $constrainingClassifier }) }
  implement() { org.eclipse.uml2.uml.impl.ClassifierTemplateParameterImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClassifierTemplateParameter(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Expression  {
  implement { org.eclipse.uml2.uml.Expression }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Expression }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Expression Expression(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, symbol : String, operand : ValueSpecificationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Expression }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(symbol, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("symbol")) }
  get_slot(operand, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t.eGet($t.eClass().getEStructuralFeature("operand")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, symbol, operand) { constructExpression((org.eclipse.uml2.uml.Expression)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Expression")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $symbol, $operand }) }
  implement() { org.eclipse.uml2.uml.impl.ExpressionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExpression(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Usage  {
  implement { org.eclipse.uml2.uml.Usage }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Usage }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Usage Usage(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Usage }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client) { constructUsage((org.eclipse.uml2.uml.Usage)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Usage")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client }) }
  implement() { org.eclipse.uml2.uml.impl.UsageImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructUsage(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Enumeration  {
  implement { org.eclipse.uml2.uml.Enumeration }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Enumeration }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm EnumerationLiteral  {
  implement { org.eclipse.uml2.uml.EnumerationLiteral }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.EnumerationLiteral }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Slot  {
  implement { org.eclipse.uml2.uml.Slot }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Slot }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InstanceSpecification  {
  implement { org.eclipse.uml2.uml.InstanceSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InstanceSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm SlotEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot>)$t).get(0) instanceof org.eclipse.uml2.uml.Slot)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray SlotEList SlotEList ( Slot* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Slot)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Slot>($n) }
  make_append(e,l) { appendSlotEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendSlotEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op InstanceSpecification InstanceSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, deployment : DeploymentEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, classifier : ClassifierEList, slot : SlotEList, specification : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InstanceSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(classifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("classifier")) }
  get_slot(slot, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot>)$t.eGet($t.eClass().getEStructuralFeature("slot")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, deployment, owningTemplateParameter, templateParameter, classifier, slot, specification) { constructInstanceSpecification((org.eclipse.uml2.uml.InstanceSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InstanceSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $deployment, $owningTemplateParameter, $templateParameter, $classifier, $slot, $specification }) }
  implement() { org.eclipse.uml2.uml.impl.InstanceSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInstanceSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Slot Slot(eAnnotations : EAnnotationEList, ownedComment : CommentEList, definingFeature : StructuralFeature, value : ValueSpecificationEList, owningInstance : InstanceSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Slot }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(definingFeature, t) { (org.eclipse.uml2.uml.StructuralFeature)$t.eGet($t.eClass().getEStructuralFeature("definingFeature")) }
  get_slot(value, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(owningInstance, t) { (org.eclipse.uml2.uml.InstanceSpecification)$t.eGet($t.eClass().getEStructuralFeature("owningInstance")) } 
  make(eAnnotations, ownedComment, definingFeature, value, owningInstance) { constructSlot((org.eclipse.uml2.uml.Slot)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Slot")), new Object[]{ $eAnnotations, $ownedComment, $definingFeature, $value, $owningInstance }) }
  implement() { org.eclipse.uml2.uml.impl.SlotImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSlot(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op EnumerationLiteral EnumerationLiteral(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, deployment : DeploymentEList, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, classifier : ClassifierEList, slot : SlotEList, specification : ValueSpecification, enumeration : Enumeration) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.EnumerationLiteral }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(classifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("classifier")) }
  get_slot(slot, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Slot>)$t.eGet($t.eClass().getEStructuralFeature("slot")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(enumeration, t) { (org.eclipse.uml2.uml.Enumeration)$t.eGet($t.eClass().getEStructuralFeature("enumeration")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, deployment, owningTemplateParameter, templateParameter, classifier, slot, specification, enumeration) { constructEnumerationLiteral((org.eclipse.uml2.uml.EnumerationLiteral)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("EnumerationLiteral")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $deployment, $owningTemplateParameter, $templateParameter, $classifier, $slot, $specification, $enumeration }) }
  implement() { org.eclipse.uml2.uml.impl.EnumerationLiteralImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructEnumerationLiteral(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm EnumerationLiteralEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.EnumerationLiteral> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.EnumerationLiteral>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.EnumerationLiteral>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.EnumerationLiteral>)$t).get(0) instanceof org.eclipse.uml2.uml.EnumerationLiteral)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray EnumerationLiteralEList EnumerationLiteralEList ( EnumerationLiteral* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.EnumerationLiteral)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.EnumerationLiteral>($n) }
  make_append(e,l) { appendEnumerationLiteralEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendEnumerationLiteralEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Enumeration Enumeration(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedOperation : OperationEList, ownedLiteral : EnumerationLiteralEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Enumeration }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(ownedLiteral, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.EnumerationLiteral>)$t.eGet($t.eClass().getEStructuralFeature("ownedLiteral")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedOperation, ownedLiteral) { constructEnumeration((org.eclipse.uml2.uml.Enumeration)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Enumeration")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedOperation, $ownedLiteral }) }
  implement() { org.eclipse.uml2.uml.impl.EnumerationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructEnumeration(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm PrimitiveType  {
  implement { org.eclipse.uml2.uml.PrimitiveType }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PrimitiveType }
  equals(l1,l2) { $l1.equals($l2) }
}

%op PrimitiveType PrimitiveType(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedOperation : OperationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.PrimitiveType }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedOperation) { constructPrimitiveType((org.eclipse.uml2.uml.PrimitiveType)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("PrimitiveType")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedOperation }) }
  implement() { org.eclipse.uml2.uml.impl.PrimitiveTypeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPrimitiveType(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LiteralSpecification  {
  implement { org.eclipse.uml2.uml.LiteralSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm LiteralInteger  {
  implement { org.eclipse.uml2.uml.LiteralInteger }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralInteger }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LiteralInteger LiteralInteger(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, value : int) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LiteralInteger }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(value, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(value) { 0 }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, value) { constructLiteralInteger((org.eclipse.uml2.uml.LiteralInteger)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LiteralInteger")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $value }) }
  implement() { org.eclipse.uml2.uml.impl.LiteralIntegerImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLiteralInteger(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LiteralString  {
  implement { org.eclipse.uml2.uml.LiteralString }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralString }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LiteralString LiteralString(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, value : String) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LiteralString }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(value, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, value) { constructLiteralString((org.eclipse.uml2.uml.LiteralString)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LiteralString")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $value }) }
  implement() { org.eclipse.uml2.uml.impl.LiteralStringImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLiteralString(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LiteralBoolean  {
  implement { org.eclipse.uml2.uml.LiteralBoolean }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralBoolean }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LiteralBoolean LiteralBoolean(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, value : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LiteralBoolean }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(value, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(value) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, value) { constructLiteralBoolean((org.eclipse.uml2.uml.LiteralBoolean)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LiteralBoolean")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $value }) }
  implement() { org.eclipse.uml2.uml.impl.LiteralBooleanImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLiteralBoolean(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LiteralNull  {
  implement { org.eclipse.uml2.uml.LiteralNull }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralNull }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LiteralNull LiteralNull(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LiteralNull }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type) { constructLiteralNull((org.eclipse.uml2.uml.LiteralNull)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LiteralNull")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type }) }
  implement() { org.eclipse.uml2.uml.impl.LiteralNullImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLiteralNull(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InstanceValue  {
  implement { org.eclipse.uml2.uml.InstanceValue }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InstanceValue }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InstanceValue InstanceValue(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, instance : InstanceSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InstanceValue }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(instance, t) { (org.eclipse.uml2.uml.InstanceSpecification)$t.eGet($t.eClass().getEStructuralFeature("instance")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, instance) { constructInstanceValue((org.eclipse.uml2.uml.InstanceValue)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InstanceValue")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $instance }) }
  implement() { org.eclipse.uml2.uml.impl.InstanceValueImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInstanceValue(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LiteralUnlimitedNatural  {
  implement { org.eclipse.uml2.uml.LiteralUnlimitedNatural }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LiteralUnlimitedNatural }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LiteralUnlimitedNatural LiteralUnlimitedNatural(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, value : int) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LiteralUnlimitedNatural }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(value, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(value) { 0 }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, value) { constructLiteralUnlimitedNatural((org.eclipse.uml2.uml.LiteralUnlimitedNatural)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LiteralUnlimitedNatural")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $value }) }
  implement() { org.eclipse.uml2.uml.impl.LiteralUnlimitedNaturalImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLiteralUnlimitedNatural(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm OpaqueBehavior  {
  implement { org.eclipse.uml2.uml.OpaqueBehavior }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OpaqueBehavior }
  equals(l1,l2) { $l1.equals($l2) }
}

%op OpaqueBehavior OpaqueBehavior(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, body : StringEList, language : StringEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OpaqueBehavior }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(body, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(language, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("language")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, body, language) { constructOpaqueBehavior((org.eclipse.uml2.uml.OpaqueBehavior)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OpaqueBehavior")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $body, $language }) }
  implement() { org.eclipse.uml2.uml.impl.OpaqueBehaviorImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOpaqueBehavior(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm FunctionBehavior  {
  implement { org.eclipse.uml2.uml.FunctionBehavior }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.FunctionBehavior }
  equals(l1,l2) { $l1.equals($l2) }
}

%op FunctionBehavior FunctionBehavior(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, body : StringEList, language : StringEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.FunctionBehavior }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(body, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(language, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("language")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, body, language) { constructFunctionBehavior((org.eclipse.uml2.uml.FunctionBehavior)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("FunctionBehavior")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $body, $language }) }
  implement() { org.eclipse.uml2.uml.impl.FunctionBehaviorImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructFunctionBehavior(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm OpaqueAction  {
  implement { org.eclipse.uml2.uml.OpaqueAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OpaqueAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm StructuredActivityNode  {
  implement { org.eclipse.uml2.uml.StructuredActivityNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StructuredActivityNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Activity  {
  implement { org.eclipse.uml2.uml.Activity }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Activity }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Variable  {
  implement { org.eclipse.uml2.uml.Variable }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Variable }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Variable Variable(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, type : Type, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, end : ConnectorEndEList, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, scope : StructuredActivityNode, activityScope : Activity) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Variable }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(end, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectorEnd>)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(scope, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("scope")) }
  get_slot(activityScope, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activityScope")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, type, owningTemplateParameter, templateParameter, end, isOrdered, isUnique, upper, lower, upperValue, lowerValue, scope, activityScope) { constructVariable((org.eclipse.uml2.uml.Variable)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Variable")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $type, $owningTemplateParameter, $templateParameter, $end, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $scope, $activityScope }) }
  implement() { org.eclipse.uml2.uml.impl.VariableImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructVariable(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm VariableEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t).get(0) instanceof org.eclipse.uml2.uml.Variable)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray VariableEList VariableEList ( Variable* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Variable)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Variable>($n) }
  make_append(e,l) { appendVariableEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendVariableEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ActivityNode  {
  implement { org.eclipse.uml2.uml.ActivityNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ActivityEdge  {
  implement { org.eclipse.uml2.uml.ActivityEdge }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityEdge }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ActivityEdgeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t).get(0) instanceof org.eclipse.uml2.uml.ActivityEdge)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ActivityEdgeEList ActivityEdgeEList ( ActivityEdge* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ActivityEdge)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ActivityEdge>($n) }
  make_append(e,l) { appendActivityEdgeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendActivityEdgeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ActivityPartition  {
  implement { org.eclipse.uml2.uml.ActivityPartition }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityPartition }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ActivityNodeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t).get(0) instanceof org.eclipse.uml2.uml.ActivityNode)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ActivityNodeEList ActivityNodeEList ( ActivityNode* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ActivityNode)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ActivityNode>($n) }
  make_append(e,l) { appendActivityNodeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendActivityNodeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ActivityPartitionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t).get(0) instanceof org.eclipse.uml2.uml.ActivityPartition)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ActivityPartitionEList ActivityPartitionEList ( ActivityPartition* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ActivityPartition)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ActivityPartition>($n) }
  make_append(e,l) { appendActivityPartitionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendActivityPartitionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ActivityPartition ActivityPartition(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, inActivity : Activity, isDimension : boolean, isExternal : boolean, node : ActivityNodeEList, subpartition : ActivityPartitionEList, superPartition : ActivityPartition, represents : Element, edge : ActivityEdgeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ActivityPartition }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(isDimension, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDimension")) }
  get_slot(isExternal, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isExternal")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(subpartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("subpartition")) }
  get_slot(superPartition, t) { (org.eclipse.uml2.uml.ActivityPartition)$t.eGet($t.eClass().getEStructuralFeature("superPartition")) }
  get_slot(represents, t) { (org.eclipse.uml2.uml.Element)$t.eGet($t.eClass().getEStructuralFeature("represents")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isDimension) { false }
  get_default(isExternal) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, inActivity, isDimension, isExternal, node, subpartition, superPartition, represents, edge) { constructActivityPartition((org.eclipse.uml2.uml.ActivityPartition)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ActivityPartition")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $inActivity, $isDimension, $isExternal, $node, $subpartition, $superPartition, $represents, $edge }) }
  implement() { org.eclipse.uml2.uml.impl.ActivityPartitionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActivityPartition(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InterruptibleActivityRegion  {
  implement { org.eclipse.uml2.uml.InterruptibleActivityRegion }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InterruptibleActivityRegion }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InterruptibleActivityRegion InterruptibleActivityRegion(eAnnotations : EAnnotationEList, ownedComment : CommentEList, inActivity : Activity, node : ActivityNodeEList, interruptingEdge : ActivityEdgeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InterruptibleActivityRegion }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(interruptingEdge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("interruptingEdge")) } 
  make(eAnnotations, ownedComment, inActivity, node, interruptingEdge) { constructInterruptibleActivityRegion((org.eclipse.uml2.uml.InterruptibleActivityRegion)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InterruptibleActivityRegion")), new Object[]{ $eAnnotations, $ownedComment, $inActivity, $node, $interruptingEdge }) }
  implement() { org.eclipse.uml2.uml.impl.InterruptibleActivityRegionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInterruptibleActivityRegion(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InterruptibleActivityRegionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t).get(0) instanceof org.eclipse.uml2.uml.InterruptibleActivityRegion)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InterruptibleActivityRegionEList InterruptibleActivityRegionEList ( InterruptibleActivityRegion* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.InterruptibleActivityRegion)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.InterruptibleActivityRegion>($n) }
  make_append(e,l) { appendInterruptibleActivityRegionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInterruptibleActivityRegionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ActivityGroup  {
  implement { org.eclipse.uml2.uml.ActivityGroup }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityGroup }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ActivityGroupEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityGroup> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityGroup>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityGroup>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityGroup>)$t).get(0) instanceof org.eclipse.uml2.uml.ActivityGroup)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ActivityGroupEList ActivityGroupEList ( ActivityGroup* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ActivityGroup)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ActivityGroup>($n) }
  make_append(e,l) { appendActivityGroupEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendActivityGroupEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Activity Activity(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, variable : VariableEList, node : ActivityNodeEList, isReadOnly : boolean, edge : ActivityEdgeEList, partition : ActivityPartitionEList, isSingleExecution : boolean, group : ActivityGroupEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Activity }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(isReadOnly, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReadOnly")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(partition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("partition")) }
  get_slot(isSingleExecution, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isSingleExecution")) }
  get_slot(group, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityGroup>)$t.eGet($t.eClass().getEStructuralFeature("group")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  get_default(isReadOnly) { false }
  get_default(isSingleExecution) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, variable, node, isReadOnly, edge, partition, isSingleExecution, group) { constructActivity((org.eclipse.uml2.uml.Activity)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Activity")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $variable, $node, $isReadOnly, $edge, $partition, $isSingleExecution, $group }) }
  implement() { org.eclipse.uml2.uml.impl.ActivityImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActivity(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExceptionHandler  {
  implement { org.eclipse.uml2.uml.ExceptionHandler }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExceptionHandler }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExecutableNode  {
  implement { org.eclipse.uml2.uml.ExecutableNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExecutableNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExceptionHandlerEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t).get(0) instanceof org.eclipse.uml2.uml.ExceptionHandler)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ExceptionHandlerEList ExceptionHandlerEList ( ExceptionHandler* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ExceptionHandler)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ExceptionHandler>($n) }
  make_append(e,l) { appendExceptionHandlerEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendExceptionHandlerEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ObjectNode  {
  implement { org.eclipse.uml2.uml.ObjectNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ObjectNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ObjectNodeOrderingKind  {
  implement { org.eclipse.uml2.uml.ObjectNodeOrderingKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ObjectNodeOrderingKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ObjectNodeOrderingKind ObjectNodeOrderingKindunordered() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ObjectNodeOrderingKind.get("unordered") }
  make() { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getObjectNodeOrderingKind(), "unordered") }
}

%op ObjectNodeOrderingKind ObjectNodeOrderingKindordered() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ObjectNodeOrderingKind.get("ordered") }
  make() { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getObjectNodeOrderingKind(), "ordered") }
}

%op ObjectNodeOrderingKind ObjectNodeOrderingKindLIFO() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ObjectNodeOrderingKind.get("LIFO") }
  make() { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getObjectNodeOrderingKind(), "LIFO") }
}

%op ObjectNodeOrderingKind ObjectNodeOrderingKindFIFO() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ObjectNodeOrderingKind.get("FIFO") }
  make() { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getObjectNodeOrderingKind(), "FIFO") }
}

%op ExceptionHandler ExceptionHandler(eAnnotations : EAnnotationEList, ownedComment : CommentEList, handlerBody : ExecutableNode, exceptionInput : ObjectNode, exceptionType : ClassifierEList, protectedNode : ExecutableNode) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExceptionHandler }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(handlerBody, t) { (org.eclipse.uml2.uml.ExecutableNode)$t.eGet($t.eClass().getEStructuralFeature("handlerBody")) }
  get_slot(exceptionInput, t) { (org.eclipse.uml2.uml.ObjectNode)$t.eGet($t.eClass().getEStructuralFeature("exceptionInput")) }
  get_slot(exceptionType, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("exceptionType")) }
  get_slot(protectedNode, t) { (org.eclipse.uml2.uml.ExecutableNode)$t.eGet($t.eClass().getEStructuralFeature("protectedNode")) } 
  make(eAnnotations, ownedComment, handlerBody, exceptionInput, exceptionType, protectedNode) { constructExceptionHandler((org.eclipse.uml2.uml.ExceptionHandler)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExceptionHandler")), new Object[]{ $eAnnotations, $ownedComment, $handlerBody, $exceptionInput, $exceptionType, $protectedNode }) }
  implement() { org.eclipse.uml2.uml.impl.ExceptionHandlerImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExceptionHandler(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op StructuredActivityNode StructuredActivityNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, inActivity : Activity, variable : VariableEList, edge : ActivityEdgeEList, mustIsolate : boolean, node : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StructuredActivityNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(mustIsolate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("mustIsolate")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(mustIsolate) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, elementImport, packageImport, ownedRule, inActivity, variable, edge, mustIsolate, node) { constructStructuredActivityNode((org.eclipse.uml2.uml.StructuredActivityNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StructuredActivityNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $elementImport, $packageImport, $ownedRule, $inActivity, $variable, $edge, $mustIsolate, $node }) }
  implement() { org.eclipse.uml2.uml.impl.StructuredActivityNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStructuredActivityNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InputPin  {
  implement { org.eclipse.uml2.uml.InputPin }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InputPin }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InputPin InputPin(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isControl : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InputPin }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isControl, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControl")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isControl) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isControl) { constructInputPin((org.eclipse.uml2.uml.InputPin)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InputPin")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isControl }) }
  implement() { org.eclipse.uml2.uml.impl.InputPinImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInputPin(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InputPinEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t).get(0) instanceof org.eclipse.uml2.uml.InputPin)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InputPinEList InputPinEList ( InputPin* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.InputPin)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.InputPin>($n) }
  make_append(e,l) { appendInputPinEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInputPinEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm OutputPin  {
  implement { org.eclipse.uml2.uml.OutputPin }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OutputPin }
  equals(l1,l2) { $l1.equals($l2) }
}

%op OutputPin OutputPin(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isControl : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OutputPin }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isControl, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControl")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isControl) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isControl) { constructOutputPin((org.eclipse.uml2.uml.OutputPin)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OutputPin")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isControl }) }
  implement() { org.eclipse.uml2.uml.impl.OutputPinImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOutputPin(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm OutputPinEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t).get(0) instanceof org.eclipse.uml2.uml.OutputPin)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray OutputPinEList OutputPinEList ( OutputPin* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.OutputPin)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.OutputPin>($n) }
  make_append(e,l) { appendOutputPinEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendOutputPinEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op OpaqueAction OpaqueAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, body : StringEList, language : StringEList, inputValue : InputPinEList, outputValue : OutputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OpaqueAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(body, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(language, t) { (org.eclipse.emf.common.util.EList<java.lang.String>)$t.eGet($t.eClass().getEStructuralFeature("language")) }
  get_slot(inputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("inputValue")) }
  get_slot(outputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("outputValue")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, body, language, inputValue, outputValue) { constructOpaqueAction((org.eclipse.uml2.uml.OpaqueAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OpaqueAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $body, $language, $inputValue, $outputValue }) }
  implement() { org.eclipse.uml2.uml.impl.OpaqueActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOpaqueAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Action  {
  implement { org.eclipse.uml2.uml.Action }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Action }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Pin  {
  implement { org.eclipse.uml2.uml.Pin }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Pin }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Pin Pin(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isControl : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Pin }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isControl, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControl")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isControl) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isControl) { constructPin((org.eclipse.uml2.uml.Pin)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Pin")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isControl }) }
  implement() { org.eclipse.uml2.uml.impl.PinImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPin(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CallAction  {
  implement { org.eclipse.uml2.uml.CallAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CallAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InvocationAction  {
  implement { org.eclipse.uml2.uml.InvocationAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InvocationAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm SendSignalAction  {
  implement { org.eclipse.uml2.uml.SendSignalAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SendSignalAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op SendSignalAction SendSignalAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, target : InputPin, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SendSignalAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, target, signal) { constructSendSignalAction((org.eclipse.uml2.uml.SendSignalAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SendSignalAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $target, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.SendSignalActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSendSignalAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CallOperationAction  {
  implement { org.eclipse.uml2.uml.CallOperationAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CallOperationAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CallOperationAction CallOperationAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, isSynchronous : boolean, result : OutputPinEList, operation : Operation, target : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CallOperationAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(isSynchronous, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isSynchronous")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(operation, t) { (org.eclipse.uml2.uml.Operation)$t.eGet($t.eClass().getEStructuralFeature("operation")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("target")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isSynchronous) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, isSynchronous, result, operation, target) { constructCallOperationAction((org.eclipse.uml2.uml.CallOperationAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CallOperationAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $isSynchronous, $result, $operation, $target }) }
  implement() { org.eclipse.uml2.uml.impl.CallOperationActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCallOperationAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CallBehaviorAction  {
  implement { org.eclipse.uml2.uml.CallBehaviorAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CallBehaviorAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CallBehaviorAction CallBehaviorAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, isSynchronous : boolean, result : OutputPinEList, behavior : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CallBehaviorAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(isSynchronous, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isSynchronous")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(behavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("behavior")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isSynchronous) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, isSynchronous, result, behavior) { constructCallBehaviorAction((org.eclipse.uml2.uml.CallBehaviorAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CallBehaviorAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $isSynchronous, $result, $behavior }) }
  implement() { org.eclipse.uml2.uml.impl.CallBehaviorActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCallBehaviorAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm SequenceNode  {
  implement { org.eclipse.uml2.uml.SequenceNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SequenceNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExecutableNodeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t).get(0) instanceof org.eclipse.uml2.uml.ExecutableNode)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ExecutableNodeEList ExecutableNodeEList ( ExecutableNode* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ExecutableNode)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ExecutableNode>($n) }
  make_append(e,l) { appendExecutableNodeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendExecutableNodeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op SequenceNode SequenceNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, inActivity : Activity, variable : VariableEList, edge : ActivityEdgeEList, mustIsolate : boolean, node : ActivityNodeEList, executableNode : ExecutableNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SequenceNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(mustIsolate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("mustIsolate")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(executableNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("executableNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(mustIsolate) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, elementImport, packageImport, ownedRule, inActivity, variable, edge, mustIsolate, node, executableNode) { constructSequenceNode((org.eclipse.uml2.uml.SequenceNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SequenceNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $elementImport, $packageImport, $ownedRule, $inActivity, $variable, $edge, $mustIsolate, $node, $executableNode }) }
  implement() { org.eclipse.uml2.uml.impl.SequenceNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSequenceNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ControlNode  {
  implement { org.eclipse.uml2.uml.ControlNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ControlNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ControlFlow  {
  implement { org.eclipse.uml2.uml.ControlFlow }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ControlFlow }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ControlFlow ControlFlow(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, source : ActivityNode, target : ActivityNode, redefinedEdge : ActivityEdgeEList, inPartition : ActivityPartitionEList, guard : ValueSpecification, weight : ValueSpecification, interrupts : InterruptibleActivityRegion, inStructuredNode : StructuredActivityNode, activity : Activity) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ControlFlow }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(source, t) { (org.eclipse.uml2.uml.ActivityNode)$t.eGet($t.eClass().getEStructuralFeature("source")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.ActivityNode)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(redefinedEdge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("redefinedEdge")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(guard, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("guard")) }
  get_slot(weight, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("weight")) }
  get_slot(interrupts, t) { (org.eclipse.uml2.uml.InterruptibleActivityRegion)$t.eGet($t.eClass().getEStructuralFeature("interrupts")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, source, target, redefinedEdge, inPartition, guard, weight, interrupts, inStructuredNode, activity) { constructControlFlow((org.eclipse.uml2.uml.ControlFlow)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ControlFlow")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $source, $target, $redefinedEdge, $inPartition, $guard, $weight, $interrupts, $inStructuredNode, $activity }) }
  implement() { org.eclipse.uml2.uml.impl.ControlFlowImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructControlFlow(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InitialNode  {
  implement { org.eclipse.uml2.uml.InitialNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InitialNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InitialNode InitialNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InitialNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode) { constructInitialNode((org.eclipse.uml2.uml.InitialNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InitialNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode }) }
  implement() { org.eclipse.uml2.uml.impl.InitialNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInitialNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ActivityParameterNode  {
  implement { org.eclipse.uml2.uml.ActivityParameterNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityParameterNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ActivityParameterNode ActivityParameterNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, parameter : Parameter) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ActivityParameterNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(parameter, t) { (org.eclipse.uml2.uml.Parameter)$t.eGet($t.eClass().getEStructuralFeature("parameter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, parameter) { constructActivityParameterNode((org.eclipse.uml2.uml.ActivityParameterNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ActivityParameterNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $parameter }) }
  implement() { org.eclipse.uml2.uml.impl.ActivityParameterNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActivityParameterNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ValuePin  {
  implement { org.eclipse.uml2.uml.ValuePin }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ValuePin }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ValuePin ValuePin(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isControl : boolean, value : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ValuePin }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isControl, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControl")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isControl) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isControl, value) { constructValuePin((org.eclipse.uml2.uml.ValuePin)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ValuePin")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isControl, $value }) }
  implement() { org.eclipse.uml2.uml.impl.ValuePinImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructValuePin(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Message  {
  implement { org.eclipse.uml2.uml.Message }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Message }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm MessageSort  {
  implement { org.eclipse.uml2.uml.MessageSort }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MessageSort }
  equals(l1,l2) { $l1.equals($l2) }
}

%op MessageSort MessageSortsynchCall() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("synchCall") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "synchCall") }
}

%op MessageSort MessageSortasynchCall() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("asynchCall") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "asynchCall") }
}

%op MessageSort MessageSortasynchSignal() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("asynchSignal") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "asynchSignal") }
}

%op MessageSort MessageSortcreateMessage() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("createMessage") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "createMessage") }
}

%op MessageSort MessageSortdeleteMessage() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("deleteMessage") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "deleteMessage") }
}

%op MessageSort MessageSortreply() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageSort.get("reply") }
  make() { (org.eclipse.uml2.uml.MessageSort)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageSort(), "reply") }
}

%typeterm MessageEnd  {
  implement { org.eclipse.uml2.uml.MessageEnd }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MessageEnd }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Interaction  {
  implement { org.eclipse.uml2.uml.Interaction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Interaction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Lifeline  {
  implement { org.eclipse.uml2.uml.Lifeline }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Lifeline }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm PartDecomposition  {
  implement { org.eclipse.uml2.uml.PartDecomposition }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.PartDecomposition }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm LifelineEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t).get(0) instanceof org.eclipse.uml2.uml.Lifeline)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray LifelineEList LifelineEList ( Lifeline* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Lifeline)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Lifeline>($n) }
  make_append(e,l) { appendLifelineEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendLifelineEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm GeneralOrdering  {
  implement { org.eclipse.uml2.uml.GeneralOrdering }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.GeneralOrdering }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm OccurrenceSpecification  {
  implement { org.eclipse.uml2.uml.OccurrenceSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.OccurrenceSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm GeneralOrderingEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t).get(0) instanceof org.eclipse.uml2.uml.GeneralOrdering)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray GeneralOrderingEList GeneralOrderingEList ( GeneralOrdering* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.GeneralOrdering)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.GeneralOrdering>($n) }
  make_append(e,l) { appendGeneralOrderingEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendGeneralOrderingEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm InteractionOperand  {
  implement { org.eclipse.uml2.uml.InteractionOperand }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InteractionOperand }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InteractionConstraint  {
  implement { org.eclipse.uml2.uml.InteractionConstraint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InteractionConstraint }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InteractionConstraint InteractionConstraint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, constrainedElement : ElementEList, specification : ValueSpecification, context : Namespace, minint : ValueSpecification, maxint : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InteractionConstraint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(constrainedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("constrainedElement")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(context, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("context")) }
  get_slot(minint, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("minint")) }
  get_slot(maxint, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("maxint")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, constrainedElement, specification, context, minint, maxint) { constructInteractionConstraint((org.eclipse.uml2.uml.InteractionConstraint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InteractionConstraint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $constrainedElement, $specification, $context, $minint, $maxint }) }
  implement() { org.eclipse.uml2.uml.impl.InteractionConstraintImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInteractionConstraint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InteractionFragment  {
  implement { org.eclipse.uml2.uml.InteractionFragment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InteractionFragment }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InteractionFragmentEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t).get(0) instanceof org.eclipse.uml2.uml.InteractionFragment)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InteractionFragmentEList InteractionFragmentEList ( InteractionFragment* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.InteractionFragment)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.InteractionFragment>($n) }
  make_append(e,l) { appendInteractionFragmentEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInteractionFragmentEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op InteractionOperand InteractionOperand(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, guard : InteractionConstraint, fragment : InteractionFragmentEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InteractionOperand }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(guard, t) { (org.eclipse.uml2.uml.InteractionConstraint)$t.eGet($t.eClass().getEStructuralFeature("guard")) }
  get_slot(fragment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t.eGet($t.eClass().getEStructuralFeature("fragment")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, covered, generalOrdering, enclosingInteraction, enclosingOperand, guard, fragment) { constructInteractionOperand((org.eclipse.uml2.uml.InteractionOperand)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InteractionOperand")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $guard, $fragment }) }
  implement() { org.eclipse.uml2.uml.impl.InteractionOperandImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInteractionOperand(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op OccurrenceSpecification OccurrenceSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, toBefore : GeneralOrderingEList, event : Event, toAfter : GeneralOrderingEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.OccurrenceSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(toBefore, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toBefore")) }
  get_slot(event, t) { (org.eclipse.uml2.uml.Event)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(toAfter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toAfter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, toBefore, event, toAfter) { constructOccurrenceSpecification((org.eclipse.uml2.uml.OccurrenceSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("OccurrenceSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $toBefore, $event, $toAfter }) }
  implement() { org.eclipse.uml2.uml.impl.OccurrenceSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructOccurrenceSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op GeneralOrdering GeneralOrdering(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, before : OccurrenceSpecification, after : OccurrenceSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.GeneralOrdering }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(before, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("before")) }
  get_slot(after, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("after")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, before, after) { constructGeneralOrdering((org.eclipse.uml2.uml.GeneralOrdering)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("GeneralOrdering")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $before, $after }) }
  implement() { org.eclipse.uml2.uml.impl.GeneralOrderingImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructGeneralOrdering(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Gate  {
  implement { org.eclipse.uml2.uml.Gate }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Gate }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Gate Gate(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, message : Message) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Gate }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(message, t) { (org.eclipse.uml2.uml.Message)$t.eGet($t.eClass().getEStructuralFeature("message")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, message) { constructGate((org.eclipse.uml2.uml.Gate)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Gate")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $message }) }
  implement() { org.eclipse.uml2.uml.impl.GateImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructGate(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm GateEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t).get(0) instanceof org.eclipse.uml2.uml.Gate)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray GateEList GateEList ( Gate* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Gate)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Gate>($n) }
  make_append(e,l) { appendGateEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendGateEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ActionEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t).get(0) instanceof org.eclipse.uml2.uml.Action)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ActionEList ActionEList ( Action* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Action)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Action>($n) }
  make_append(e,l) { appendActionEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendActionEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op PartDecomposition PartDecomposition(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, refersTo : Interaction, actualGate : GateEList, argument : ActionEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.PartDecomposition }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(refersTo, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("refersTo")) }
  get_slot(actualGate, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t.eGet($t.eClass().getEStructuralFeature("actualGate")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t.eGet($t.eClass().getEStructuralFeature("argument")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, refersTo, actualGate, argument) { constructPartDecomposition((org.eclipse.uml2.uml.PartDecomposition)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("PartDecomposition")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $refersTo, $actualGate, $argument }) }
  implement() { org.eclipse.uml2.uml.impl.PartDecompositionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructPartDecomposition(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Lifeline Lifeline(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, represents : ConnectableElement, interaction : Interaction, selector : ValueSpecification, decomposedAs : PartDecomposition, coveredBy : InteractionFragmentEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Lifeline }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(represents, t) { (org.eclipse.uml2.uml.ConnectableElement)$t.eGet($t.eClass().getEStructuralFeature("represents")) }
  get_slot(interaction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("interaction")) }
  get_slot(selector, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("selector")) }
  get_slot(decomposedAs, t) { (org.eclipse.uml2.uml.PartDecomposition)$t.eGet($t.eClass().getEStructuralFeature("decomposedAs")) }
  get_slot(coveredBy, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t.eGet($t.eClass().getEStructuralFeature("coveredBy")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, represents, interaction, selector, decomposedAs, coveredBy) { constructLifeline((org.eclipse.uml2.uml.Lifeline)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Lifeline")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $represents, $interaction, $selector, $decomposedAs, $coveredBy }) }
  implement() { org.eclipse.uml2.uml.impl.LifelineImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLifeline(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MessageEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message>)$t).get(0) instanceof org.eclipse.uml2.uml.Message)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray MessageEList MessageEList ( Message* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Message)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Message>($n) }
  make_append(e,l) { appendMessageEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendMessageEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Interaction Interaction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isReentrant : boolean, redefinedBehavior : BehaviorEList, ownedParameter : ParameterEList, precondition : ConstraintEList, postcondition : ConstraintEList, ownedParameterSet : ParameterSetEList, specification : BehavioralFeature, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, lifeline : LifelineEList, fragment : InteractionFragmentEList, action : ActionEList, formalGate : GateEList, message : MessageEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Interaction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isReentrant, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReentrant")) }
  get_slot(redefinedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("redefinedBehavior")) }
  get_slot(ownedParameter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Parameter>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameter")) }
  get_slot(precondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("precondition")) }
  get_slot(postcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("postcondition")) }
  get_slot(ownedParameterSet, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ParameterSet>)$t.eGet($t.eClass().getEStructuralFeature("ownedParameterSet")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.BehavioralFeature)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(lifeline, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("lifeline")) }
  get_slot(fragment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionFragment>)$t.eGet($t.eClass().getEStructuralFeature("fragment")) }
  get_slot(action, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t.eGet($t.eClass().getEStructuralFeature("action")) }
  get_slot(formalGate, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t.eGet($t.eClass().getEStructuralFeature("formalGate")) }
  get_slot(message, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message>)$t.eGet($t.eClass().getEStructuralFeature("message")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isReentrant) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isReentrant, redefinedBehavior, ownedParameter, precondition, postcondition, ownedParameterSet, specification, covered, generalOrdering, enclosingInteraction, enclosingOperand, lifeline, fragment, action, formalGate, message) { constructInteraction((org.eclipse.uml2.uml.Interaction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Interaction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isReentrant, $redefinedBehavior, $ownedParameter, $precondition, $postcondition, $ownedParameterSet, $specification, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $lifeline, $fragment, $action, $formalGate, $message }) }
  implement() { org.eclipse.uml2.uml.impl.InteractionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInteraction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op Message Message(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, messageSort : MessageSort, receiveEvent : MessageEnd, sendEvent : MessageEnd, connector : Connector, interaction : Interaction, argument : ValueSpecificationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Message }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(messageSort, t) { (org.eclipse.uml2.uml.MessageSort)$t.eGet($t.eClass().getEStructuralFeature("messageSort")) }
  get_slot(receiveEvent, t) { (org.eclipse.uml2.uml.MessageEnd)$t.eGet($t.eClass().getEStructuralFeature("receiveEvent")) }
  get_slot(sendEvent, t) { (org.eclipse.uml2.uml.MessageEnd)$t.eGet($t.eClass().getEStructuralFeature("sendEvent")) }
  get_slot(connector, t) { (org.eclipse.uml2.uml.Connector)$t.eGet($t.eClass().getEStructuralFeature("connector")) }
  get_slot(interaction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("interaction")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ValueSpecification>)$t.eGet($t.eClass().getEStructuralFeature("argument")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(messageSort) { `MessageSortsynchCall() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, messageSort, receiveEvent, sendEvent, connector, interaction, argument) { constructMessage((org.eclipse.uml2.uml.Message)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Message")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $messageSort, $receiveEvent, $sendEvent, $connector, $interaction, $argument }) }
  implement() { org.eclipse.uml2.uml.impl.MessageImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructMessage(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MessageKind  {
  implement { org.eclipse.uml2.uml.MessageKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MessageKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op MessageKind MessageKindcomplete() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageKind.get("complete") }
  make() { (org.eclipse.uml2.uml.MessageKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageKind(), "complete") }
}

%op MessageKind MessageKindlost() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageKind.get("lost") }
  make() { (org.eclipse.uml2.uml.MessageKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageKind(), "lost") }
}

%op MessageKind MessageKindfound() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageKind.get("found") }
  make() { (org.eclipse.uml2.uml.MessageKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageKind(), "found") }
}

%op MessageKind MessageKindunknown() {
  is_fsym(t) { t == org.eclipse.uml2.uml.MessageKind.get("unknown") }
  make() { (org.eclipse.uml2.uml.MessageKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getMessageKind(), "unknown") }
}

%typeterm InteractionUse  {
  implement { org.eclipse.uml2.uml.InteractionUse }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InteractionUse }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InteractionUse InteractionUse(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, refersTo : Interaction, actualGate : GateEList, argument : ActionEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InteractionUse }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(refersTo, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("refersTo")) }
  get_slot(actualGate, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t.eGet($t.eClass().getEStructuralFeature("actualGate")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Action>)$t.eGet($t.eClass().getEStructuralFeature("argument")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, refersTo, actualGate, argument) { constructInteractionUse((org.eclipse.uml2.uml.InteractionUse)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InteractionUse")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $refersTo, $actualGate, $argument }) }
  implement() { org.eclipse.uml2.uml.impl.InteractionUseImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInteractionUse(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExecutionSpecification  {
  implement { org.eclipse.uml2.uml.ExecutionSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExecutionSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm StateInvariant  {
  implement { org.eclipse.uml2.uml.StateInvariant }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StateInvariant }
  equals(l1,l2) { $l1.equals($l2) }
}

%op StateInvariant StateInvariant(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, invariant : Constraint) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StateInvariant }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(invariant, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("invariant")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, invariant) { constructStateInvariant((org.eclipse.uml2.uml.StateInvariant)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StateInvariant")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $invariant }) }
  implement() { org.eclipse.uml2.uml.impl.StateInvariantImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStateInvariant(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ActionExecutionSpecification  {
  implement { org.eclipse.uml2.uml.ActionExecutionSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActionExecutionSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ActionExecutionSpecification ActionExecutionSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, start : OccurrenceSpecification, finish : OccurrenceSpecification, action : Action) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ActionExecutionSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(start, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("start")) }
  get_slot(finish, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("finish")) }
  get_slot(action, t) { (org.eclipse.uml2.uml.Action)$t.eGet($t.eClass().getEStructuralFeature("action")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, start, finish, action) { constructActionExecutionSpecification((org.eclipse.uml2.uml.ActionExecutionSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ActionExecutionSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $start, $finish, $action }) }
  implement() { org.eclipse.uml2.uml.impl.ActionExecutionSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActionExecutionSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm BehaviorExecutionSpecification  {
  implement { org.eclipse.uml2.uml.BehaviorExecutionSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.BehaviorExecutionSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%op BehaviorExecutionSpecification BehaviorExecutionSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, start : OccurrenceSpecification, finish : OccurrenceSpecification, behavior : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.BehaviorExecutionSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(start, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("start")) }
  get_slot(finish, t) { (org.eclipse.uml2.uml.OccurrenceSpecification)$t.eGet($t.eClass().getEStructuralFeature("finish")) }
  get_slot(behavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("behavior")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, start, finish, behavior) { constructBehaviorExecutionSpecification((org.eclipse.uml2.uml.BehaviorExecutionSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("BehaviorExecutionSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $start, $finish, $behavior }) }
  implement() { org.eclipse.uml2.uml.impl.BehaviorExecutionSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructBehaviorExecutionSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExecutionEvent  {
  implement { org.eclipse.uml2.uml.ExecutionEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExecutionEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExecutionEvent ExecutionEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExecutionEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter) { constructExecutionEvent((org.eclipse.uml2.uml.ExecutionEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExecutionEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter }) }
  implement() { org.eclipse.uml2.uml.impl.ExecutionEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExecutionEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CreationEvent  {
  implement { org.eclipse.uml2.uml.CreationEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CreationEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CreationEvent CreationEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CreationEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter) { constructCreationEvent((org.eclipse.uml2.uml.CreationEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CreationEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter }) }
  implement() { org.eclipse.uml2.uml.impl.CreationEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCreationEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DestructionEvent  {
  implement { org.eclipse.uml2.uml.DestructionEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DestructionEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DestructionEvent DestructionEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DestructionEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter) { constructDestructionEvent((org.eclipse.uml2.uml.DestructionEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DestructionEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter }) }
  implement() { org.eclipse.uml2.uml.impl.DestructionEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDestructionEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm SendOperationEvent  {
  implement { org.eclipse.uml2.uml.SendOperationEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SendOperationEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op SendOperationEvent SendOperationEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, operation : Operation) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SendOperationEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(operation, t) { (org.eclipse.uml2.uml.Operation)$t.eGet($t.eClass().getEStructuralFeature("operation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, operation) { constructSendOperationEvent((org.eclipse.uml2.uml.SendOperationEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SendOperationEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $operation }) }
  implement() { org.eclipse.uml2.uml.impl.SendOperationEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSendOperationEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MessageEvent  {
  implement { org.eclipse.uml2.uml.MessageEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MessageEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm SendSignalEvent  {
  implement { org.eclipse.uml2.uml.SendSignalEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SendSignalEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op SendSignalEvent SendSignalEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SendSignalEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, signal) { constructSendSignalEvent((org.eclipse.uml2.uml.SendSignalEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SendSignalEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.SendSignalEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSendSignalEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MessageOccurrenceSpecification  {
  implement { org.eclipse.uml2.uml.MessageOccurrenceSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MessageOccurrenceSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%op MessageOccurrenceSpecification MessageOccurrenceSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, toBefore : GeneralOrderingEList, event : Event, toAfter : GeneralOrderingEList, message : Message) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.MessageOccurrenceSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(toBefore, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toBefore")) }
  get_slot(event, t) { (org.eclipse.uml2.uml.Event)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(toAfter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toAfter")) }
  get_slot(message, t) { (org.eclipse.uml2.uml.Message)$t.eGet($t.eClass().getEStructuralFeature("message")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, toBefore, event, toAfter, message) { constructMessageOccurrenceSpecification((org.eclipse.uml2.uml.MessageOccurrenceSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("MessageOccurrenceSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $toBefore, $event, $toAfter, $message }) }
  implement() { org.eclipse.uml2.uml.impl.MessageOccurrenceSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructMessageOccurrenceSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExecutionOccurrenceSpecification  {
  implement { org.eclipse.uml2.uml.ExecutionOccurrenceSpecification }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExecutionOccurrenceSpecification }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExecutionOccurrenceSpecification ExecutionOccurrenceSpecification(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, toBefore : GeneralOrderingEList, event : Event, toAfter : GeneralOrderingEList, execution : ExecutionSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExecutionOccurrenceSpecification }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(toBefore, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toBefore")) }
  get_slot(event, t) { (org.eclipse.uml2.uml.Event)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(toAfter, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("toAfter")) }
  get_slot(execution, t) { (org.eclipse.uml2.uml.ExecutionSpecification)$t.eGet($t.eClass().getEStructuralFeature("execution")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, toBefore, event, toAfter, execution) { constructExecutionOccurrenceSpecification((org.eclipse.uml2.uml.ExecutionOccurrenceSpecification)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExecutionOccurrenceSpecification")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $toBefore, $event, $toAfter, $execution }) }
  implement() { org.eclipse.uml2.uml.impl.ExecutionOccurrenceSpecificationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExecutionOccurrenceSpecification(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReceiveOperationEvent  {
  implement { org.eclipse.uml2.uml.ReceiveOperationEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReceiveOperationEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReceiveOperationEvent ReceiveOperationEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, operation : Operation) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReceiveOperationEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(operation, t) { (org.eclipse.uml2.uml.Operation)$t.eGet($t.eClass().getEStructuralFeature("operation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, operation) { constructReceiveOperationEvent((org.eclipse.uml2.uml.ReceiveOperationEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReceiveOperationEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $operation }) }
  implement() { org.eclipse.uml2.uml.impl.ReceiveOperationEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReceiveOperationEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReceiveSignalEvent  {
  implement { org.eclipse.uml2.uml.ReceiveSignalEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReceiveSignalEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReceiveSignalEvent ReceiveSignalEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReceiveSignalEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, signal) { constructReceiveSignalEvent((org.eclipse.uml2.uml.ReceiveSignalEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReceiveSignalEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.ReceiveSignalEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReceiveSignalEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Actor  {
  implement { org.eclipse.uml2.uml.Actor }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Actor }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Actor Actor(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Actor }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger) { constructActor((org.eclipse.uml2.uml.Actor)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Actor")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger }) }
  implement() { org.eclipse.uml2.uml.impl.ActorImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActor(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CallEvent  {
  implement { org.eclipse.uml2.uml.CallEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CallEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CallEvent CallEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, operation : Operation) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CallEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(operation, t) { (org.eclipse.uml2.uml.Operation)$t.eGet($t.eClass().getEStructuralFeature("operation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, operation) { constructCallEvent((org.eclipse.uml2.uml.CallEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CallEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $operation }) }
  implement() { org.eclipse.uml2.uml.impl.CallEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCallEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ChangeEvent  {
  implement { org.eclipse.uml2.uml.ChangeEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ChangeEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ChangeEvent ChangeEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, changeExpression : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ChangeEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(changeExpression, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("changeExpression")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, changeExpression) { constructChangeEvent((org.eclipse.uml2.uml.ChangeEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ChangeEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $changeExpression }) }
  implement() { org.eclipse.uml2.uml.impl.ChangeEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructChangeEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm SignalEvent  {
  implement { org.eclipse.uml2.uml.SignalEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SignalEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op SignalEvent SignalEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SignalEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, signal) { constructSignalEvent((org.eclipse.uml2.uml.SignalEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SignalEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.SignalEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSignalEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AnyReceiveEvent  {
  implement { org.eclipse.uml2.uml.AnyReceiveEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AnyReceiveEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AnyReceiveEvent AnyReceiveEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AnyReceiveEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter) { constructAnyReceiveEvent((org.eclipse.uml2.uml.AnyReceiveEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AnyReceiveEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter }) }
  implement() { org.eclipse.uml2.uml.impl.AnyReceiveEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAnyReceiveEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ForkNode  {
  implement { org.eclipse.uml2.uml.ForkNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ForkNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ForkNode ForkNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ForkNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode) { constructForkNode((org.eclipse.uml2.uml.ForkNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ForkNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode }) }
  implement() { org.eclipse.uml2.uml.impl.ForkNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructForkNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm FlowFinalNode  {
  implement { org.eclipse.uml2.uml.FlowFinalNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.FlowFinalNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op FlowFinalNode FlowFinalNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.FlowFinalNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode) { constructFlowFinalNode((org.eclipse.uml2.uml.FlowFinalNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("FlowFinalNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode }) }
  implement() { org.eclipse.uml2.uml.impl.FlowFinalNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructFlowFinalNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm FinalNode  {
  implement { org.eclipse.uml2.uml.FinalNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.FinalNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm CentralBufferNode  {
  implement { org.eclipse.uml2.uml.CentralBufferNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CentralBufferNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CentralBufferNode CentralBufferNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CentralBufferNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection) { constructCentralBufferNode((org.eclipse.uml2.uml.CentralBufferNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CentralBufferNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection }) }
  implement() { org.eclipse.uml2.uml.impl.CentralBufferNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCentralBufferNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm MergeNode  {
  implement { org.eclipse.uml2.uml.MergeNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.MergeNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op MergeNode MergeNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.MergeNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode) { constructMergeNode((org.eclipse.uml2.uml.MergeNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("MergeNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode }) }
  implement() { org.eclipse.uml2.uml.impl.MergeNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructMergeNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DecisionNode  {
  implement { org.eclipse.uml2.uml.DecisionNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DecisionNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ObjectFlow  {
  implement { org.eclipse.uml2.uml.ObjectFlow }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ObjectFlow }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ObjectFlow ObjectFlow(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, source : ActivityNode, target : ActivityNode, redefinedEdge : ActivityEdgeEList, inPartition : ActivityPartitionEList, guard : ValueSpecification, weight : ValueSpecification, interrupts : InterruptibleActivityRegion, inStructuredNode : StructuredActivityNode, activity : Activity, isMulticast : boolean, isMultireceive : boolean, transformation : Behavior, selection : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ObjectFlow }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(source, t) { (org.eclipse.uml2.uml.ActivityNode)$t.eGet($t.eClass().getEStructuralFeature("source")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.ActivityNode)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(redefinedEdge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("redefinedEdge")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(guard, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("guard")) }
  get_slot(weight, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("weight")) }
  get_slot(interrupts, t) { (org.eclipse.uml2.uml.InterruptibleActivityRegion)$t.eGet($t.eClass().getEStructuralFeature("interrupts")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(isMulticast, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isMulticast")) }
  get_slot(isMultireceive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isMultireceive")) }
  get_slot(transformation, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("transformation")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isMulticast) { false }
  get_default(isMultireceive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, source, target, redefinedEdge, inPartition, guard, weight, interrupts, inStructuredNode, activity, isMulticast, isMultireceive, transformation, selection) { constructObjectFlow((org.eclipse.uml2.uml.ObjectFlow)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ObjectFlow")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $source, $target, $redefinedEdge, $inPartition, $guard, $weight, $interrupts, $inStructuredNode, $activity, $isMulticast, $isMultireceive, $transformation, $selection }) }
  implement() { org.eclipse.uml2.uml.impl.ObjectFlowImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructObjectFlow(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op DecisionNode DecisionNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, decisionInput : Behavior, decisionInputFlow : ObjectFlow) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DecisionNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(decisionInput, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("decisionInput")) }
  get_slot(decisionInputFlow, t) { (org.eclipse.uml2.uml.ObjectFlow)$t.eGet($t.eClass().getEStructuralFeature("decisionInputFlow")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, decisionInput, decisionInputFlow) { constructDecisionNode((org.eclipse.uml2.uml.DecisionNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DecisionNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $decisionInput, $decisionInputFlow }) }
  implement() { org.eclipse.uml2.uml.impl.DecisionNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDecisionNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ActivityFinalNode  {
  implement { org.eclipse.uml2.uml.ActivityFinalNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActivityFinalNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ActivityFinalNode ActivityFinalNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ActivityFinalNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode) { constructActivityFinalNode((org.eclipse.uml2.uml.ActivityFinalNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ActivityFinalNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode }) }
  implement() { org.eclipse.uml2.uml.impl.ActivityFinalNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActivityFinalNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ComponentRealization  {
  implement { org.eclipse.uml2.uml.ComponentRealization }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ComponentRealization }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Component  {
  implement { org.eclipse.uml2.uml.Component }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Component }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ComponentRealizationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ComponentRealization> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ComponentRealization>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ComponentRealization>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ComponentRealization>)$t).get(0) instanceof org.eclipse.uml2.uml.ComponentRealization)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ComponentRealizationEList ComponentRealizationEList ( ComponentRealization* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ComponentRealization)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ComponentRealization>($n) }
  make_append(e,l) { appendComponentRealizationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendComponentRealizationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Component Component(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, isIndirectlyInstantiated : boolean, packagedElement : PackageableElementEList, realization : ComponentRealizationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Component }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(isIndirectlyInstantiated, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isIndirectlyInstantiated")) }
  get_slot(packagedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageableElement>)$t.eGet($t.eClass().getEStructuralFeature("packagedElement")) }
  get_slot(realization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ComponentRealization>)$t.eGet($t.eClass().getEStructuralFeature("realization")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isIndirectlyInstantiated) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, isIndirectlyInstantiated, packagedElement, realization) { constructComponent((org.eclipse.uml2.uml.Component)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Component")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $isIndirectlyInstantiated, $packagedElement, $realization }) }
  implement() { org.eclipse.uml2.uml.impl.ComponentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructComponent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op ComponentRealization ComponentRealization(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, supplier : NamedElementEList, client : NamedElementEList, mapping : OpaqueExpression, abstraction : Component, realizingClassifier : ClassifierEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ComponentRealization }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(supplier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("supplier")) }
  get_slot(client, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("client")) }
  get_slot(mapping, t) { (org.eclipse.uml2.uml.OpaqueExpression)$t.eGet($t.eClass().getEStructuralFeature("mapping")) }
  get_slot(abstraction, t) { (org.eclipse.uml2.uml.Component)$t.eGet($t.eClass().getEStructuralFeature("abstraction")) }
  get_slot(realizingClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("realizingClassifier")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, supplier, client, mapping, abstraction, realizingClassifier) { constructComponentRealization((org.eclipse.uml2.uml.ComponentRealization)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ComponentRealization")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $supplier, $client, $mapping, $abstraction, $realizingClassifier }) }
  implement() { org.eclipse.uml2.uml.impl.ComponentRealizationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructComponentRealization(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Node  {
  implement { org.eclipse.uml2.uml.Node }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Node }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm NodeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t).get(0) instanceof org.eclipse.uml2.uml.Node)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray NodeEList NodeEList ( Node* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Node)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Node>($n) }
  make_append(e,l) { appendNodeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendNodeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Node Node(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, deployment : DeploymentEList, nestedNode : NodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Node }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(nestedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t.eGet($t.eClass().getEStructuralFeature("nestedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, deployment, nestedNode) { constructNode((org.eclipse.uml2.uml.Node)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Node")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $deployment, $nestedNode }) }
  implement() { org.eclipse.uml2.uml.impl.NodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CommunicationPath  {
  implement { org.eclipse.uml2.uml.CommunicationPath }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CommunicationPath }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CommunicationPath CommunicationPath(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedEnd : PropertyEList, memberEnd : PropertyEList, isDerived : boolean, navigableOwnedEnd : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CommunicationPath }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedEnd")) }
  get_slot(memberEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("memberEnd")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(navigableOwnedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("navigableOwnedEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isDerived) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedEnd, memberEnd, isDerived, navigableOwnedEnd) { constructCommunicationPath((org.eclipse.uml2.uml.CommunicationPath)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CommunicationPath")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedEnd, $memberEnd, $isDerived, $navigableOwnedEnd }) }
  implement() { org.eclipse.uml2.uml.impl.CommunicationPathImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCommunicationPath(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Device  {
  implement { org.eclipse.uml2.uml.Device }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Device }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Device Device(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, deployment : DeploymentEList, nestedNode : NodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Device }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(nestedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t.eGet($t.eClass().getEStructuralFeature("nestedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, deployment, nestedNode) { constructDevice((org.eclipse.uml2.uml.Device)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Device")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $deployment, $nestedNode }) }
  implement() { org.eclipse.uml2.uml.impl.DeviceImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDevice(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExecutionEnvironment  {
  implement { org.eclipse.uml2.uml.ExecutionEnvironment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExecutionEnvironment }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExecutionEnvironment ExecutionEnvironment(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, deployment : DeploymentEList, nestedNode : NodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExecutionEnvironment }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(deployment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Deployment>)$t.eGet($t.eClass().getEStructuralFeature("deployment")) }
  get_slot(nestedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Node>)$t.eGet($t.eClass().getEStructuralFeature("nestedNode")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, deployment, nestedNode) { constructExecutionEnvironment((org.eclipse.uml2.uml.ExecutionEnvironment)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExecutionEnvironment")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $deployment, $nestedNode }) }
  implement() { org.eclipse.uml2.uml.impl.ExecutionEnvironmentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExecutionEnvironment(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CombinedFragment  {
  implement { org.eclipse.uml2.uml.CombinedFragment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CombinedFragment }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm InteractionOperatorKind  {
  implement { org.eclipse.uml2.uml.InteractionOperatorKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InteractionOperatorKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InteractionOperatorKind InteractionOperatorKindseq() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("seq") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "seq") }
}

%op InteractionOperatorKind InteractionOperatorKindalt() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("alt") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "alt") }
}

%op InteractionOperatorKind InteractionOperatorKindopt() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("opt") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "opt") }
}

%op InteractionOperatorKind InteractionOperatorKindbreak() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("break") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "break") }
}

%op InteractionOperatorKind InteractionOperatorKindpar() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("par") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "par") }
}

%op InteractionOperatorKind InteractionOperatorKindstrict() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("strict") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "strict") }
}

%op InteractionOperatorKind InteractionOperatorKindloop() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("loop") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "loop") }
}

%op InteractionOperatorKind InteractionOperatorKindcritical() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("critical") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "critical") }
}

%op InteractionOperatorKind InteractionOperatorKindneg() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("neg") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "neg") }
}

%op InteractionOperatorKind InteractionOperatorKindassert() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("assert") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "assert") }
}

%op InteractionOperatorKind InteractionOperatorKindignore() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("ignore") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "ignore") }
}

%op InteractionOperatorKind InteractionOperatorKindconsider() {
  is_fsym(t) { t == org.eclipse.uml2.uml.InteractionOperatorKind.get("consider") }
  make() { (org.eclipse.uml2.uml.InteractionOperatorKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getInteractionOperatorKind(), "consider") }
}

%typeterm InteractionOperandEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand>)$t).get(0) instanceof org.eclipse.uml2.uml.InteractionOperand)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray InteractionOperandEList InteractionOperandEList ( InteractionOperand* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.InteractionOperand)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.InteractionOperand>($n) }
  make_append(e,l) { appendInteractionOperandEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendInteractionOperandEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op CombinedFragment CombinedFragment(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, interactionOperator : InteractionOperatorKind, operand : InteractionOperandEList, cfragmentGate : GateEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CombinedFragment }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(interactionOperator, t) { (org.eclipse.uml2.uml.InteractionOperatorKind)$t.eGet($t.eClass().getEStructuralFeature("interactionOperator")) }
  get_slot(operand, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand>)$t.eGet($t.eClass().getEStructuralFeature("operand")) }
  get_slot(cfragmentGate, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t.eGet($t.eClass().getEStructuralFeature("cfragmentGate")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(interactionOperator) { `InteractionOperatorKindseq() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, interactionOperator, operand, cfragmentGate) { constructCombinedFragment((org.eclipse.uml2.uml.CombinedFragment)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CombinedFragment")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $interactionOperator, $operand, $cfragmentGate }) }
  implement() { org.eclipse.uml2.uml.impl.CombinedFragmentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCombinedFragment(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Continuation  {
  implement { org.eclipse.uml2.uml.Continuation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Continuation }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Continuation Continuation(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, setting : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Continuation }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(setting, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("setting")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(setting) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, setting) { constructContinuation((org.eclipse.uml2.uml.Continuation)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Continuation")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $setting }) }
  implement() { org.eclipse.uml2.uml.impl.ContinuationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructContinuation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConsiderIgnoreFragment  {
  implement { org.eclipse.uml2.uml.ConsiderIgnoreFragment }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConsiderIgnoreFragment }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ConsiderIgnoreFragment ConsiderIgnoreFragment(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, covered : LifelineEList, generalOrdering : GeneralOrderingEList, enclosingInteraction : Interaction, enclosingOperand : InteractionOperand, interactionOperator : InteractionOperatorKind, operand : InteractionOperandEList, cfragmentGate : GateEList, message : NamedElementEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ConsiderIgnoreFragment }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(covered, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Lifeline>)$t.eGet($t.eClass().getEStructuralFeature("covered")) }
  get_slot(generalOrdering, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralOrdering>)$t.eGet($t.eClass().getEStructuralFeature("generalOrdering")) }
  get_slot(enclosingInteraction, t) { (org.eclipse.uml2.uml.Interaction)$t.eGet($t.eClass().getEStructuralFeature("enclosingInteraction")) }
  get_slot(enclosingOperand, t) { (org.eclipse.uml2.uml.InteractionOperand)$t.eGet($t.eClass().getEStructuralFeature("enclosingOperand")) }
  get_slot(interactionOperator, t) { (org.eclipse.uml2.uml.InteractionOperatorKind)$t.eGet($t.eClass().getEStructuralFeature("interactionOperator")) }
  get_slot(operand, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InteractionOperand>)$t.eGet($t.eClass().getEStructuralFeature("operand")) }
  get_slot(cfragmentGate, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Gate>)$t.eGet($t.eClass().getEStructuralFeature("cfragmentGate")) }
  get_slot(message, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("message")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(interactionOperator) { `InteractionOperatorKindseq() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, covered, generalOrdering, enclosingInteraction, enclosingOperand, interactionOperator, operand, cfragmentGate, message) { constructConsiderIgnoreFragment((org.eclipse.uml2.uml.ConsiderIgnoreFragment)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ConsiderIgnoreFragment")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $covered, $generalOrdering, $enclosingInteraction, $enclosingOperand, $interactionOperator, $operand, $cfragmentGate, $message }) }
  implement() { org.eclipse.uml2.uml.impl.ConsiderIgnoreFragmentImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConsiderIgnoreFragment(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CreateObjectAction  {
  implement { org.eclipse.uml2.uml.CreateObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CreateObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CreateObjectAction CreateObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, classifier : Classifier, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CreateObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(classifier, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("classifier")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, classifier, result) { constructCreateObjectAction((org.eclipse.uml2.uml.CreateObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CreateObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $classifier, $result }) }
  implement() { org.eclipse.uml2.uml.impl.CreateObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCreateObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DestroyObjectAction  {
  implement { org.eclipse.uml2.uml.DestroyObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DestroyObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DestroyObjectAction DestroyObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, isDestroyLinks : boolean, isDestroyOwnedObjects : boolean, target : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DestroyObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(isDestroyLinks, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDestroyLinks")) }
  get_slot(isDestroyOwnedObjects, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDestroyOwnedObjects")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("target")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isDestroyLinks) { false }
  get_default(isDestroyOwnedObjects) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, isDestroyLinks, isDestroyOwnedObjects, target) { constructDestroyObjectAction((org.eclipse.uml2.uml.DestroyObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DestroyObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $isDestroyLinks, $isDestroyOwnedObjects, $target }) }
  implement() { org.eclipse.uml2.uml.impl.DestroyObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDestroyObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TestIdentityAction  {
  implement { org.eclipse.uml2.uml.TestIdentityAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TestIdentityAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TestIdentityAction TestIdentityAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, first : InputPin, second : InputPin, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TestIdentityAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(first, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("first")) }
  get_slot(second, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("second")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, first, second, result) { constructTestIdentityAction((org.eclipse.uml2.uml.TestIdentityAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TestIdentityAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $first, $second, $result }) }
  implement() { org.eclipse.uml2.uml.impl.TestIdentityActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTestIdentityAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReadSelfAction  {
  implement { org.eclipse.uml2.uml.ReadSelfAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadSelfAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadSelfAction ReadSelfAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadSelfAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, result) { constructReadSelfAction((org.eclipse.uml2.uml.ReadSelfAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadSelfAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ReadSelfActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadSelfAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm StructuralFeatureAction  {
  implement { org.eclipse.uml2.uml.StructuralFeatureAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StructuralFeatureAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ReadStructuralFeatureAction  {
  implement { org.eclipse.uml2.uml.ReadStructuralFeatureAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadStructuralFeatureAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadStructuralFeatureAction ReadStructuralFeatureAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, structuralFeature : StructuralFeature, object : InputPin, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadStructuralFeatureAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(structuralFeature, t) { (org.eclipse.uml2.uml.StructuralFeature)$t.eGet($t.eClass().getEStructuralFeature("structuralFeature")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, structuralFeature, object, result) { constructReadStructuralFeatureAction((org.eclipse.uml2.uml.ReadStructuralFeatureAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadStructuralFeatureAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $structuralFeature, $object, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ReadStructuralFeatureActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadStructuralFeatureAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm WriteStructuralFeatureAction  {
  implement { org.eclipse.uml2.uml.WriteStructuralFeatureAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.WriteStructuralFeatureAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ClearStructuralFeatureAction  {
  implement { org.eclipse.uml2.uml.ClearStructuralFeatureAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ClearStructuralFeatureAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ClearStructuralFeatureAction ClearStructuralFeatureAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, structuralFeature : StructuralFeature, object : InputPin, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ClearStructuralFeatureAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(structuralFeature, t) { (org.eclipse.uml2.uml.StructuralFeature)$t.eGet($t.eClass().getEStructuralFeature("structuralFeature")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, structuralFeature, object, result) { constructClearStructuralFeatureAction((org.eclipse.uml2.uml.ClearStructuralFeatureAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ClearStructuralFeatureAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $structuralFeature, $object, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ClearStructuralFeatureActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClearStructuralFeatureAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm RemoveStructuralFeatureValueAction  {
  implement { org.eclipse.uml2.uml.RemoveStructuralFeatureValueAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.RemoveStructuralFeatureValueAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op RemoveStructuralFeatureValueAction RemoveStructuralFeatureValueAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, structuralFeature : StructuralFeature, object : InputPin, value : InputPin, result : OutputPin, isRemoveDuplicates : boolean, removeAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.RemoveStructuralFeatureValueAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(structuralFeature, t) { (org.eclipse.uml2.uml.StructuralFeature)$t.eGet($t.eClass().getEStructuralFeature("structuralFeature")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(isRemoveDuplicates, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isRemoveDuplicates")) }
  get_slot(removeAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("removeAt")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isRemoveDuplicates) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, structuralFeature, object, value, result, isRemoveDuplicates, removeAt) { constructRemoveStructuralFeatureValueAction((org.eclipse.uml2.uml.RemoveStructuralFeatureValueAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("RemoveStructuralFeatureValueAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $structuralFeature, $object, $value, $result, $isRemoveDuplicates, $removeAt }) }
  implement() { org.eclipse.uml2.uml.impl.RemoveStructuralFeatureValueActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRemoveStructuralFeatureValueAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AddStructuralFeatureValueAction  {
  implement { org.eclipse.uml2.uml.AddStructuralFeatureValueAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AddStructuralFeatureValueAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AddStructuralFeatureValueAction AddStructuralFeatureValueAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, structuralFeature : StructuralFeature, object : InputPin, value : InputPin, result : OutputPin, isReplaceAll : boolean, insertAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AddStructuralFeatureValueAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(structuralFeature, t) { (org.eclipse.uml2.uml.StructuralFeature)$t.eGet($t.eClass().getEStructuralFeature("structuralFeature")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(isReplaceAll, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReplaceAll")) }
  get_slot(insertAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("insertAt")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isReplaceAll) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, structuralFeature, object, value, result, isReplaceAll, insertAt) { constructAddStructuralFeatureValueAction((org.eclipse.uml2.uml.AddStructuralFeatureValueAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AddStructuralFeatureValueAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $structuralFeature, $object, $value, $result, $isReplaceAll, $insertAt }) }
  implement() { org.eclipse.uml2.uml.impl.AddStructuralFeatureValueActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAddStructuralFeatureValueAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LinkAction  {
  implement { org.eclipse.uml2.uml.LinkAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LinkAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm LinkEndData  {
  implement { org.eclipse.uml2.uml.LinkEndData }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LinkEndData }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm QualifierValue  {
  implement { org.eclipse.uml2.uml.QualifierValue }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.QualifierValue }
  equals(l1,l2) { $l1.equals($l2) }
}

%op QualifierValue QualifierValue(eAnnotations : EAnnotationEList, ownedComment : CommentEList, qualifier : Property, value : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.QualifierValue }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(qualifier, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) } 
  make(eAnnotations, ownedComment, qualifier, value) { constructQualifierValue((org.eclipse.uml2.uml.QualifierValue)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("QualifierValue")), new Object[]{ $eAnnotations, $ownedComment, $qualifier, $value }) }
  implement() { org.eclipse.uml2.uml.impl.QualifierValueImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructQualifierValue(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm QualifierValueEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t).get(0) instanceof org.eclipse.uml2.uml.QualifierValue)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray QualifierValueEList QualifierValueEList ( QualifierValue* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.QualifierValue)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.QualifierValue>($n) }
  make_append(e,l) { appendQualifierValueEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendQualifierValueEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op LinkEndData LinkEndData(eAnnotations : EAnnotationEList, ownedComment : CommentEList, value : InputPin, end : Property, qualifier : QualifierValueEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LinkEndData }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(end, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) } 
  make(eAnnotations, ownedComment, value, end, qualifier) { constructLinkEndData((org.eclipse.uml2.uml.LinkEndData)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LinkEndData")), new Object[]{ $eAnnotations, $ownedComment, $value, $end, $qualifier }) }
  implement() { org.eclipse.uml2.uml.impl.LinkEndDataImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLinkEndData(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LinkEndDataEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t).get(0) instanceof org.eclipse.uml2.uml.LinkEndData)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray LinkEndDataEList LinkEndDataEList ( LinkEndData* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.LinkEndData)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.LinkEndData>($n) }
  make_append(e,l) { appendLinkEndDataEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendLinkEndDataEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%typeterm ReadLinkAction  {
  implement { org.eclipse.uml2.uml.ReadLinkAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadLinkAction ReadLinkAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, endData : LinkEndDataEList, inputValue : InputPinEList, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(endData, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t.eGet($t.eClass().getEStructuralFeature("endData")) }
  get_slot(inputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("inputValue")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, endData, inputValue, result) { constructReadLinkAction((org.eclipse.uml2.uml.ReadLinkAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadLinkAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $endData, $inputValue, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ReadLinkActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadLinkAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LinkEndCreationData  {
  implement { org.eclipse.uml2.uml.LinkEndCreationData }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LinkEndCreationData }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LinkEndCreationData LinkEndCreationData(eAnnotations : EAnnotationEList, ownedComment : CommentEList, value : InputPin, end : Property, qualifier : QualifierValueEList, isReplaceAll : boolean, insertAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LinkEndCreationData }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(end, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(isReplaceAll, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReplaceAll")) }
  get_slot(insertAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("insertAt")) } 
  get_default(isReplaceAll) { false }
  make(eAnnotations, ownedComment, value, end, qualifier, isReplaceAll, insertAt) { constructLinkEndCreationData((org.eclipse.uml2.uml.LinkEndCreationData)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LinkEndCreationData")), new Object[]{ $eAnnotations, $ownedComment, $value, $end, $qualifier, $isReplaceAll, $insertAt }) }
  implement() { org.eclipse.uml2.uml.impl.LinkEndCreationDataImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLinkEndCreationData(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CreateLinkAction  {
  implement { org.eclipse.uml2.uml.CreateLinkAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CreateLinkAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CreateLinkAction CreateLinkAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, endData : LinkEndDataEList, inputValue : InputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CreateLinkAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(endData, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t.eGet($t.eClass().getEStructuralFeature("endData")) }
  get_slot(inputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("inputValue")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, endData, inputValue) { constructCreateLinkAction((org.eclipse.uml2.uml.CreateLinkAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CreateLinkAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $endData, $inputValue }) }
  implement() { org.eclipse.uml2.uml.impl.CreateLinkActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCreateLinkAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm WriteLinkAction  {
  implement { org.eclipse.uml2.uml.WriteLinkAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.WriteLinkAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm DestroyLinkAction  {
  implement { org.eclipse.uml2.uml.DestroyLinkAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DestroyLinkAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DestroyLinkAction DestroyLinkAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, endData : LinkEndDataEList, inputValue : InputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DestroyLinkAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(endData, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t.eGet($t.eClass().getEStructuralFeature("endData")) }
  get_slot(inputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("inputValue")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, endData, inputValue) { constructDestroyLinkAction((org.eclipse.uml2.uml.DestroyLinkAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DestroyLinkAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $endData, $inputValue }) }
  implement() { org.eclipse.uml2.uml.impl.DestroyLinkActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDestroyLinkAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LinkEndDestructionData  {
  implement { org.eclipse.uml2.uml.LinkEndDestructionData }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LinkEndDestructionData }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LinkEndDestructionData LinkEndDestructionData(eAnnotations : EAnnotationEList, ownedComment : CommentEList, value : InputPin, end : Property, qualifier : QualifierValueEList, isDestroyDuplicates : boolean, destroyAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LinkEndDestructionData }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(end, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(qualifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.QualifierValue>)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) }
  get_slot(isDestroyDuplicates, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDestroyDuplicates")) }
  get_slot(destroyAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("destroyAt")) } 
  get_default(isDestroyDuplicates) { false }
  make(eAnnotations, ownedComment, value, end, qualifier, isDestroyDuplicates, destroyAt) { constructLinkEndDestructionData((org.eclipse.uml2.uml.LinkEndDestructionData)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LinkEndDestructionData")), new Object[]{ $eAnnotations, $ownedComment, $value, $end, $qualifier, $isDestroyDuplicates, $destroyAt }) }
  implement() { org.eclipse.uml2.uml.impl.LinkEndDestructionDataImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLinkEndDestructionData(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ClearAssociationAction  {
  implement { org.eclipse.uml2.uml.ClearAssociationAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ClearAssociationAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ClearAssociationAction ClearAssociationAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, object : InputPin, association : Association) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ClearAssociationAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(association, t) { (org.eclipse.uml2.uml.Association)$t.eGet($t.eClass().getEStructuralFeature("association")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, object, association) { constructClearAssociationAction((org.eclipse.uml2.uml.ClearAssociationAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ClearAssociationAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $object, $association }) }
  implement() { org.eclipse.uml2.uml.impl.ClearAssociationActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClearAssociationAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm BroadcastSignalAction  {
  implement { org.eclipse.uml2.uml.BroadcastSignalAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.BroadcastSignalAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op BroadcastSignalAction BroadcastSignalAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, signal : Signal) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.BroadcastSignalAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(signal, t) { (org.eclipse.uml2.uml.Signal)$t.eGet($t.eClass().getEStructuralFeature("signal")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, signal) { constructBroadcastSignalAction((org.eclipse.uml2.uml.BroadcastSignalAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("BroadcastSignalAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $signal }) }
  implement() { org.eclipse.uml2.uml.impl.BroadcastSignalActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructBroadcastSignalAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm SendObjectAction  {
  implement { org.eclipse.uml2.uml.SendObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.SendObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op SendObjectAction SendObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, target : InputPin, request : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.SendObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(request, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("request")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, target, request) { constructSendObjectAction((org.eclipse.uml2.uml.SendObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("SendObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $target, $request }) }
  implement() { org.eclipse.uml2.uml.impl.SendObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructSendObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ValueSpecificationAction  {
  implement { org.eclipse.uml2.uml.ValueSpecificationAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ValueSpecificationAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ValueSpecificationAction ValueSpecificationAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, value : ValueSpecification, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ValueSpecificationAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, value, result) { constructValueSpecificationAction((org.eclipse.uml2.uml.ValueSpecificationAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ValueSpecificationAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $value, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ValueSpecificationActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructValueSpecificationAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TimeExpression  {
  implement { org.eclipse.uml2.uml.TimeExpression }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TimeExpression }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Observation  {
  implement { org.eclipse.uml2.uml.Observation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Observation }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ObservationEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation>)$t).get(0) instanceof org.eclipse.uml2.uml.Observation)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ObservationEList ObservationEList ( Observation* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Observation)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Observation>($n) }
  make_append(e,l) { appendObservationEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendObservationEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op TimeExpression TimeExpression(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, expr : ValueSpecification, observation : ObservationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TimeExpression }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(expr, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("expr")) }
  get_slot(observation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation>)$t.eGet($t.eClass().getEStructuralFeature("observation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, expr, observation) { constructTimeExpression((org.eclipse.uml2.uml.TimeExpression)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TimeExpression")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $expr, $observation }) }
  implement() { org.eclipse.uml2.uml.impl.TimeExpressionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTimeExpression(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Duration  {
  implement { org.eclipse.uml2.uml.Duration }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Duration }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Duration Duration(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, expr : ValueSpecification, observation : ObservationEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Duration }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(expr, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("expr")) }
  get_slot(observation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Observation>)$t.eGet($t.eClass().getEStructuralFeature("observation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, expr, observation) { constructDuration((org.eclipse.uml2.uml.Duration)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Duration")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $expr, $observation }) }
  implement() { org.eclipse.uml2.uml.impl.DurationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDuration(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DurationInterval  {
  implement { org.eclipse.uml2.uml.DurationInterval }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DurationInterval }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DurationInterval DurationInterval(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, min : ValueSpecification, max : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DurationInterval }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(min, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("min")) }
  get_slot(max, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("max")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, min, max) { constructDurationInterval((org.eclipse.uml2.uml.DurationInterval)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DurationInterval")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $min, $max }) }
  implement() { org.eclipse.uml2.uml.impl.DurationIntervalImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDurationInterval(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm Interval  {
  implement { org.eclipse.uml2.uml.Interval }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Interval }
  equals(l1,l2) { $l1.equals($l2) }
}

%op Interval Interval(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, min : ValueSpecification, max : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Interval }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(min, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("min")) }
  get_slot(max, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("max")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, min, max) { constructInterval((org.eclipse.uml2.uml.Interval)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Interval")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $min, $max }) }
  implement() { org.eclipse.uml2.uml.impl.IntervalImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInterval(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TimeConstraint  {
  implement { org.eclipse.uml2.uml.TimeConstraint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TimeConstraint }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TimeConstraint TimeConstraint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, constrainedElement : ElementEList, specification : ValueSpecification, context : Namespace, firstEvent : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TimeConstraint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(constrainedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("constrainedElement")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(context, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("context")) }
  get_slot(firstEvent, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("firstEvent")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(firstEvent) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, constrainedElement, specification, context, firstEvent) { constructTimeConstraint((org.eclipse.uml2.uml.TimeConstraint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TimeConstraint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $constrainedElement, $specification, $context, $firstEvent }) }
  implement() { org.eclipse.uml2.uml.impl.TimeConstraintImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTimeConstraint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm IntervalConstraint  {
  implement { org.eclipse.uml2.uml.IntervalConstraint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.IntervalConstraint }
  equals(l1,l2) { $l1.equals($l2) }
}

%op IntervalConstraint IntervalConstraint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, constrainedElement : ElementEList, specification : ValueSpecification, context : Namespace) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.IntervalConstraint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(constrainedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("constrainedElement")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(context, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("context")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, constrainedElement, specification, context) { constructIntervalConstraint((org.eclipse.uml2.uml.IntervalConstraint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("IntervalConstraint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $constrainedElement, $specification, $context }) }
  implement() { org.eclipse.uml2.uml.impl.IntervalConstraintImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructIntervalConstraint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TimeInterval  {
  implement { org.eclipse.uml2.uml.TimeInterval }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TimeInterval }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TimeInterval TimeInterval(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, type : Type, min : ValueSpecification, max : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TimeInterval }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(min, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("min")) }
  get_slot(max, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("max")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, type, min, max) { constructTimeInterval((org.eclipse.uml2.uml.TimeInterval)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TimeInterval")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $type, $min, $max }) }
  implement() { org.eclipse.uml2.uml.impl.TimeIntervalImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTimeInterval(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DurationConstraint  {
  implement { org.eclipse.uml2.uml.DurationConstraint }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DurationConstraint }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm booleanEList {
  implement { org.eclipse.emf.common.util.EList<java.lang.Object> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<java.lang.Object>)$t).get(0) instanceof boolean)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray booleanEList booleanEList ( boolean* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof boolean)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<java.lang.Object>($n) }
  make_append(e,l) { appendbooleanEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendbooleanEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op DurationConstraint DurationConstraint(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, constrainedElement : ElementEList, specification : ValueSpecification, context : Namespace, firstEvent : booleanEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DurationConstraint }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(constrainedElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Element>)$t.eGet($t.eClass().getEStructuralFeature("constrainedElement")) }
  get_slot(specification, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("specification")) }
  get_slot(context, t) { (org.eclipse.uml2.uml.Namespace)$t.eGet($t.eClass().getEStructuralFeature("context")) }
  get_slot(firstEvent, t) { (org.eclipse.emf.common.util.EList<java.lang.Boolean>)$t.eGet($t.eClass().getEStructuralFeature("firstEvent")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(firstEvent) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, constrainedElement, specification, context, firstEvent) { constructDurationConstraint((org.eclipse.uml2.uml.DurationConstraint)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DurationConstraint")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $constrainedElement, $specification, $context, $firstEvent }) }
  implement() { org.eclipse.uml2.uml.impl.DurationConstraintImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDurationConstraint(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TimeObservation  {
  implement { org.eclipse.uml2.uml.TimeObservation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TimeObservation }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TimeObservation TimeObservation(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, event : NamedElement, firstEvent : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TimeObservation }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(event, t) { (org.eclipse.uml2.uml.NamedElement)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(firstEvent, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("firstEvent")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(firstEvent) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, event, firstEvent) { constructTimeObservation((org.eclipse.uml2.uml.TimeObservation)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TimeObservation")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $event, $firstEvent }) }
  implement() { org.eclipse.uml2.uml.impl.TimeObservationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTimeObservation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DurationObservation  {
  implement { org.eclipse.uml2.uml.DurationObservation }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DurationObservation }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DurationObservation DurationObservation(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, event : NamedElementEList, firstEvent : booleanEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DurationObservation }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(event, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("event")) }
  get_slot(firstEvent, t) { (org.eclipse.emf.common.util.EList<java.lang.Boolean>)$t.eGet($t.eClass().getEStructuralFeature("firstEvent")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(firstEvent) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, event, firstEvent) { constructDurationObservation((org.eclipse.uml2.uml.DurationObservation)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DurationObservation")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $event, $firstEvent }) }
  implement() { org.eclipse.uml2.uml.impl.DurationObservationImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDurationObservation(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm FinalState  {
  implement { org.eclipse.uml2.uml.FinalState }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.FinalState }
  equals(l1,l2) { $l1.equals($l2) }
}

%op FinalState FinalState(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, outgoing : TransitionEList, incoming : TransitionEList, container : Region, submachine : StateMachine, connection : ConnectionPointReferenceEList, connectionPoint : PseudostateEList, redefinedState : State, stateInvariant : Constraint, entry : Behavior, exit : Behavior, doActivity : Behavior, deferrableTrigger : TriggerEList, region : RegionEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.FinalState }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Transition>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(submachine, t) { (org.eclipse.uml2.uml.StateMachine)$t.eGet($t.eClass().getEStructuralFeature("submachine")) }
  get_slot(connection, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ConnectionPointReference>)$t.eGet($t.eClass().getEStructuralFeature("connection")) }
  get_slot(connectionPoint, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Pseudostate>)$t.eGet($t.eClass().getEStructuralFeature("connectionPoint")) }
  get_slot(redefinedState, t) { (org.eclipse.uml2.uml.State)$t.eGet($t.eClass().getEStructuralFeature("redefinedState")) }
  get_slot(stateInvariant, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("stateInvariant")) }
  get_slot(entry, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("entry")) }
  get_slot(exit, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("exit")) }
  get_slot(doActivity, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("doActivity")) }
  get_slot(deferrableTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("deferrableTrigger")) }
  get_slot(region, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Region>)$t.eGet($t.eClass().getEStructuralFeature("region")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, outgoing, incoming, container, submachine, connection, connectionPoint, redefinedState, stateInvariant, entry, exit, doActivity, deferrableTrigger, region) { constructFinalState((org.eclipse.uml2.uml.FinalState)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("FinalState")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $outgoing, $incoming, $container, $submachine, $connection, $connectionPoint, $redefinedState, $stateInvariant, $entry, $exit, $doActivity, $deferrableTrigger, $region }) }
  implement() { org.eclipse.uml2.uml.impl.FinalStateImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructFinalState(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm TimeEvent  {
  implement { org.eclipse.uml2.uml.TimeEvent }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.TimeEvent }
  equals(l1,l2) { $l1.equals($l2) }
}

%op TimeEvent TimeEvent(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, isRelative : boolean, when : TimeExpression) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.TimeEvent }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(isRelative, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isRelative")) }
  get_slot(when, t) { (org.eclipse.uml2.uml.TimeExpression)$t.eGet($t.eClass().getEStructuralFeature("when")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isRelative) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, isRelative, when) { constructTimeEvent((org.eclipse.uml2.uml.TimeEvent)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("TimeEvent")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $isRelative, $when }) }
  implement() { org.eclipse.uml2.uml.impl.TimeEventImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructTimeEvent(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm VariableAction  {
  implement { org.eclipse.uml2.uml.VariableAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.VariableAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ReadVariableAction  {
  implement { org.eclipse.uml2.uml.ReadVariableAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadVariableAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadVariableAction ReadVariableAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, variable : Variable, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadVariableAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(variable, t) { (org.eclipse.uml2.uml.Variable)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, variable, result) { constructReadVariableAction((org.eclipse.uml2.uml.ReadVariableAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadVariableAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $variable, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ReadVariableActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadVariableAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm WriteVariableAction  {
  implement { org.eclipse.uml2.uml.WriteVariableAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.WriteVariableAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ClearVariableAction  {
  implement { org.eclipse.uml2.uml.ClearVariableAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ClearVariableAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ClearVariableAction ClearVariableAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, variable : Variable) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ClearVariableAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(variable, t) { (org.eclipse.uml2.uml.Variable)$t.eGet($t.eClass().getEStructuralFeature("variable")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, variable) { constructClearVariableAction((org.eclipse.uml2.uml.ClearVariableAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ClearVariableAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $variable }) }
  implement() { org.eclipse.uml2.uml.impl.ClearVariableActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClearVariableAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AddVariableValueAction  {
  implement { org.eclipse.uml2.uml.AddVariableValueAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AddVariableValueAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AddVariableValueAction AddVariableValueAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, variable : Variable, value : InputPin, isReplaceAll : boolean, insertAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AddVariableValueAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(variable, t) { (org.eclipse.uml2.uml.Variable)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(isReplaceAll, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReplaceAll")) }
  get_slot(insertAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("insertAt")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isReplaceAll) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, variable, value, isReplaceAll, insertAt) { constructAddVariableValueAction((org.eclipse.uml2.uml.AddVariableValueAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AddVariableValueAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $variable, $value, $isReplaceAll, $insertAt }) }
  implement() { org.eclipse.uml2.uml.impl.AddVariableValueActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAddVariableValueAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm RemoveVariableValueAction  {
  implement { org.eclipse.uml2.uml.RemoveVariableValueAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.RemoveVariableValueAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op RemoveVariableValueAction RemoveVariableValueAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, variable : Variable, value : InputPin, isRemoveDuplicates : boolean, removeAt : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.RemoveVariableValueAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(variable, t) { (org.eclipse.uml2.uml.Variable)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(value, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("value")) }
  get_slot(isRemoveDuplicates, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isRemoveDuplicates")) }
  get_slot(removeAt, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("removeAt")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isRemoveDuplicates) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, variable, value, isRemoveDuplicates, removeAt) { constructRemoveVariableValueAction((org.eclipse.uml2.uml.RemoveVariableValueAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("RemoveVariableValueAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $variable, $value, $isRemoveDuplicates, $removeAt }) }
  implement() { org.eclipse.uml2.uml.impl.RemoveVariableValueActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRemoveVariableValueAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm RaiseExceptionAction  {
  implement { org.eclipse.uml2.uml.RaiseExceptionAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.RaiseExceptionAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op RaiseExceptionAction RaiseExceptionAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, exception : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.RaiseExceptionAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(exception, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("exception")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, exception) { constructRaiseExceptionAction((org.eclipse.uml2.uml.RaiseExceptionAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("RaiseExceptionAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $exception }) }
  implement() { org.eclipse.uml2.uml.impl.RaiseExceptionActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructRaiseExceptionAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ActionInputPin  {
  implement { org.eclipse.uml2.uml.ActionInputPin }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ActionInputPin }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ActionInputPin ActionInputPin(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, isOrdered : boolean, isUnique : boolean, upper : int, lower : int, upperValue : ValueSpecification, lowerValue : ValueSpecification, isControl : boolean, fromAction : Action) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ActionInputPin }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) }
  get_slot(isUnique, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnique")) }
  get_slot(upper, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("upper")) }
  get_slot(lower, t) { (java.lang.Integer)$t.eGet($t.eClass().getEStructuralFeature("lower")) }
  get_slot(upperValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperValue")) }
  get_slot(lowerValue, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("lowerValue")) }
  get_slot(isControl, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControl")) }
  get_slot(fromAction, t) { (org.eclipse.uml2.uml.Action)$t.eGet($t.eClass().getEStructuralFeature("fromAction")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  get_default(isOrdered) { false }
  get_default(isUnique) { true }
  get_default(upper) { 1 }
  get_default(lower) { 1 }
  get_default(isControl) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, isOrdered, isUnique, upper, lower, upperValue, lowerValue, isControl, fromAction) { constructActionInputPin((org.eclipse.uml2.uml.ActionInputPin)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ActionInputPin")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $isOrdered, $isUnique, $upper, $lower, $upperValue, $lowerValue, $isControl, $fromAction }) }
  implement() { org.eclipse.uml2.uml.impl.ActionInputPinImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructActionInputPin(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InformationItem  {
  implement { org.eclipse.uml2.uml.InformationItem }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InformationItem }
  equals(l1,l2) { $l1.equals($l2) }
}

%op InformationItem InformationItem(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, represented : ClassifierEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InformationItem }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(represented, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("represented")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, represented) { constructInformationItem((org.eclipse.uml2.uml.InformationItem)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InformationItem")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $represented }) }
  implement() { org.eclipse.uml2.uml.impl.InformationItemImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInformationItem(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm InformationFlow  {
  implement { org.eclipse.uml2.uml.InformationFlow }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.InformationFlow }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm RelationshipEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Relationship> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Relationship>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Relationship>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Relationship>)$t).get(0) instanceof org.eclipse.uml2.uml.Relationship)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray RelationshipEList RelationshipEList ( Relationship* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Relationship)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Relationship>($n) }
  make_append(e,l) { appendRelationshipEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendRelationshipEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op InformationFlow InformationFlow(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, realization : RelationshipEList, conveyed : ClassifierEList, informationSource : NamedElementEList, informationTarget : NamedElementEList, realizingActivityEdge : ActivityEdgeEList, realizingConnector : ConnectorEList, realizingMessage : MessageEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.InformationFlow }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(realization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Relationship>)$t.eGet($t.eClass().getEStructuralFeature("realization")) }
  get_slot(conveyed, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("conveyed")) }
  get_slot(informationSource, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("informationSource")) }
  get_slot(informationTarget, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.NamedElement>)$t.eGet($t.eClass().getEStructuralFeature("informationTarget")) }
  get_slot(realizingActivityEdge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("realizingActivityEdge")) }
  get_slot(realizingConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("realizingConnector")) }
  get_slot(realizingMessage, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Message>)$t.eGet($t.eClass().getEStructuralFeature("realizingMessage")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, owningTemplateParameter, templateParameter, realization, conveyed, informationSource, informationTarget, realizingActivityEdge, realizingConnector, realizingMessage) { constructInformationFlow((org.eclipse.uml2.uml.InformationFlow)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("InformationFlow")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $owningTemplateParameter, $templateParameter, $realization, $conveyed, $informationSource, $informationTarget, $realizingActivityEdge, $realizingConnector, $realizingMessage }) }
  implement() { org.eclipse.uml2.uml.impl.InformationFlowImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructInformationFlow(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReadExtentAction  {
  implement { org.eclipse.uml2.uml.ReadExtentAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadExtentAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadExtentAction ReadExtentAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, result : OutputPin, classifier : Classifier) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadExtentAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(classifier, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("classifier")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, result, classifier) { constructReadExtentAction((org.eclipse.uml2.uml.ReadExtentAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadExtentAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $result, $classifier }) }
  implement() { org.eclipse.uml2.uml.impl.ReadExtentActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadExtentAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReclassifyObjectAction  {
  implement { org.eclipse.uml2.uml.ReclassifyObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReclassifyObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReclassifyObjectAction ReclassifyObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, isReplaceAll : boolean, oldClassifier : ClassifierEList, newClassifier : ClassifierEList, object : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReclassifyObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(isReplaceAll, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isReplaceAll")) }
  get_slot(oldClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("oldClassifier")) }
  get_slot(newClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("newClassifier")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isReplaceAll) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, isReplaceAll, oldClassifier, newClassifier, object) { constructReclassifyObjectAction((org.eclipse.uml2.uml.ReclassifyObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReclassifyObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $isReplaceAll, $oldClassifier, $newClassifier, $object }) }
  implement() { org.eclipse.uml2.uml.impl.ReclassifyObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReclassifyObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReadIsClassifiedObjectAction  {
  implement { org.eclipse.uml2.uml.ReadIsClassifiedObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadIsClassifiedObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadIsClassifiedObjectAction ReadIsClassifiedObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, isDirect : boolean, classifier : Classifier, result : OutputPin, object : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadIsClassifiedObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(isDirect, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDirect")) }
  get_slot(classifier, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("classifier")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isDirect) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, isDirect, classifier, result, object) { constructReadIsClassifiedObjectAction((org.eclipse.uml2.uml.ReadIsClassifiedObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadIsClassifiedObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $isDirect, $classifier, $result, $object }) }
  implement() { org.eclipse.uml2.uml.impl.ReadIsClassifiedObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadIsClassifiedObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm StartClassifierBehaviorAction  {
  implement { org.eclipse.uml2.uml.StartClassifierBehaviorAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StartClassifierBehaviorAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op StartClassifierBehaviorAction StartClassifierBehaviorAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, object : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StartClassifierBehaviorAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, object) { constructStartClassifierBehaviorAction((org.eclipse.uml2.uml.StartClassifierBehaviorAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StartClassifierBehaviorAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $object }) }
  implement() { org.eclipse.uml2.uml.impl.StartClassifierBehaviorActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStartClassifierBehaviorAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReadLinkObjectEndAction  {
  implement { org.eclipse.uml2.uml.ReadLinkObjectEndAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkObjectEndAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadLinkObjectEndAction ReadLinkObjectEndAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, object : InputPin, end : Property, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkObjectEndAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(end, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("end")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, object, end, result) { constructReadLinkObjectEndAction((org.eclipse.uml2.uml.ReadLinkObjectEndAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadLinkObjectEndAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $object, $end, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ReadLinkObjectEndActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadLinkObjectEndAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReadLinkObjectEndQualifierAction  {
  implement { org.eclipse.uml2.uml.ReadLinkObjectEndQualifierAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkObjectEndQualifierAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReadLinkObjectEndQualifierAction ReadLinkObjectEndQualifierAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, object : InputPin, result : OutputPin, qualifier : Property) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReadLinkObjectEndQualifierAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(qualifier, t) { (org.eclipse.uml2.uml.Property)$t.eGet($t.eClass().getEStructuralFeature("qualifier")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, object, result, qualifier) { constructReadLinkObjectEndQualifierAction((org.eclipse.uml2.uml.ReadLinkObjectEndQualifierAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReadLinkObjectEndQualifierAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $object, $result, $qualifier }) }
  implement() { org.eclipse.uml2.uml.impl.ReadLinkObjectEndQualifierActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReadLinkObjectEndQualifierAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm CreateLinkObjectAction  {
  implement { org.eclipse.uml2.uml.CreateLinkObjectAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.CreateLinkObjectAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op CreateLinkObjectAction CreateLinkObjectAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, endData : LinkEndDataEList, inputValue : InputPinEList, result : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.CreateLinkObjectAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(endData, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.LinkEndData>)$t.eGet($t.eClass().getEStructuralFeature("endData")) }
  get_slot(inputValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("inputValue")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, endData, inputValue, result) { constructCreateLinkObjectAction((org.eclipse.uml2.uml.CreateLinkObjectAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("CreateLinkObjectAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $endData, $inputValue, $result }) }
  implement() { org.eclipse.uml2.uml.impl.CreateLinkObjectActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructCreateLinkObjectAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AcceptEventAction  {
  implement { org.eclipse.uml2.uml.AcceptEventAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AcceptEventAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AcceptEventAction AcceptEventAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, isUnmarshall : boolean, result : OutputPinEList, trigger : TriggerEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AcceptEventAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(isUnmarshall, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnmarshall")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(trigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("trigger")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isUnmarshall) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, isUnmarshall, result, trigger) { constructAcceptEventAction((org.eclipse.uml2.uml.AcceptEventAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AcceptEventAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $isUnmarshall, $result, $trigger }) }
  implement() { org.eclipse.uml2.uml.impl.AcceptEventActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAcceptEventAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AcceptCallAction  {
  implement { org.eclipse.uml2.uml.AcceptCallAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AcceptCallAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AcceptCallAction AcceptCallAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, isUnmarshall : boolean, result : OutputPinEList, trigger : TriggerEList, returnInformation : OutputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AcceptCallAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(isUnmarshall, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isUnmarshall")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(trigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("trigger")) }
  get_slot(returnInformation, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("returnInformation")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isUnmarshall) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, isUnmarshall, result, trigger, returnInformation) { constructAcceptCallAction((org.eclipse.uml2.uml.AcceptCallAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AcceptCallAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $isUnmarshall, $result, $trigger, $returnInformation }) }
  implement() { org.eclipse.uml2.uml.impl.AcceptCallActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAcceptCallAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReplyAction  {
  implement { org.eclipse.uml2.uml.ReplyAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReplyAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReplyAction ReplyAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, replyToCall : Trigger, returnInformation : InputPin, replyValue : InputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReplyAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(replyToCall, t) { (org.eclipse.uml2.uml.Trigger)$t.eGet($t.eClass().getEStructuralFeature("replyToCall")) }
  get_slot(returnInformation, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("returnInformation")) }
  get_slot(replyValue, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("replyValue")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, replyToCall, returnInformation, replyValue) { constructReplyAction((org.eclipse.uml2.uml.ReplyAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReplyAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $replyToCall, $returnInformation, $replyValue }) }
  implement() { org.eclipse.uml2.uml.impl.ReplyActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReplyAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm UnmarshallAction  {
  implement { org.eclipse.uml2.uml.UnmarshallAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.UnmarshallAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op UnmarshallAction UnmarshallAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, result : OutputPinEList, unmarshallType : Classifier, object : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.UnmarshallAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(unmarshallType, t) { (org.eclipse.uml2.uml.Classifier)$t.eGet($t.eClass().getEStructuralFeature("unmarshallType")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, result, unmarshallType, object) { constructUnmarshallAction((org.eclipse.uml2.uml.UnmarshallAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("UnmarshallAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $result, $unmarshallType, $object }) }
  implement() { org.eclipse.uml2.uml.impl.UnmarshallActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructUnmarshallAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ReduceAction  {
  implement { org.eclipse.uml2.uml.ReduceAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ReduceAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ReduceAction ReduceAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, reducer : Behavior, result : OutputPin, collection : InputPin, isOrdered : boolean) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ReduceAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(reducer, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("reducer")) }
  get_slot(result, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(collection, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("collection")) }
  get_slot(isOrdered, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isOrdered")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isOrdered) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, reducer, result, collection, isOrdered) { constructReduceAction((org.eclipse.uml2.uml.ReduceAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ReduceAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $reducer, $result, $collection, $isOrdered }) }
  implement() { org.eclipse.uml2.uml.impl.ReduceActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructReduceAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm StartObjectBehaviorAction  {
  implement { org.eclipse.uml2.uml.StartObjectBehaviorAction }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.StartObjectBehaviorAction }
  equals(l1,l2) { $l1.equals($l2) }
}

%op StartObjectBehaviorAction StartObjectBehaviorAction(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, argument : InputPinEList, onPort : Port, isSynchronous : boolean, result : OutputPinEList, object : InputPin) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.StartObjectBehaviorAction }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(argument, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("argument")) }
  get_slot(onPort, t) { (org.eclipse.uml2.uml.Port)$t.eGet($t.eClass().getEStructuralFeature("onPort")) }
  get_slot(isSynchronous, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isSynchronous")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(object, t) { (org.eclipse.uml2.uml.InputPin)$t.eGet($t.eClass().getEStructuralFeature("object")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isSynchronous) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, argument, onPort, isSynchronous, result, object) { constructStartObjectBehaviorAction((org.eclipse.uml2.uml.StartObjectBehaviorAction)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("StartObjectBehaviorAction")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $argument, $onPort, $isSynchronous, $result, $object }) }
  implement() { org.eclipse.uml2.uml.impl.StartObjectBehaviorActionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructStartObjectBehaviorAction(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm JoinNode  {
  implement { org.eclipse.uml2.uml.JoinNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.JoinNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op JoinNode JoinNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, isCombineDuplicate : boolean, joinSpec : ValueSpecification) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.JoinNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(isCombineDuplicate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isCombineDuplicate")) }
  get_slot(joinSpec, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("joinSpec")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isCombineDuplicate) { true }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, isCombineDuplicate, joinSpec) { constructJoinNode((org.eclipse.uml2.uml.JoinNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("JoinNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $isCombineDuplicate, $joinSpec }) }
  implement() { org.eclipse.uml2.uml.impl.JoinNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructJoinNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm DataStoreNode  {
  implement { org.eclipse.uml2.uml.DataStoreNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.DataStoreNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op DataStoreNode DataStoreNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.DataStoreNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection) { constructDataStoreNode((org.eclipse.uml2.uml.DataStoreNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("DataStoreNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection }) }
  implement() { org.eclipse.uml2.uml.impl.DataStoreNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructDataStoreNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ConditionalNode  {
  implement { org.eclipse.uml2.uml.ConditionalNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ConditionalNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm Clause  {
  implement { org.eclipse.uml2.uml.Clause }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.Clause }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ClauseEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t).get(0) instanceof org.eclipse.uml2.uml.Clause)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ClauseEList ClauseEList ( Clause* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.Clause)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.Clause>($n) }
  make_append(e,l) { appendClauseEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendClauseEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op Clause Clause(eAnnotations : EAnnotationEList, ownedComment : CommentEList, test : ExecutableNodeEList, body : ExecutableNodeEList, predecessorClause : ClauseEList, successorClause : ClauseEList, decider : OutputPin, bodyOutput : OutputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.Clause }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(test, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("test")) }
  get_slot(body, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("body")) }
  get_slot(predecessorClause, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t.eGet($t.eClass().getEStructuralFeature("predecessorClause")) }
  get_slot(successorClause, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t.eGet($t.eClass().getEStructuralFeature("successorClause")) }
  get_slot(decider, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("decider")) }
  get_slot(bodyOutput, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("bodyOutput")) } 
  make(eAnnotations, ownedComment, test, body, predecessorClause, successorClause, decider, bodyOutput) { constructClause((org.eclipse.uml2.uml.Clause)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("Clause")), new Object[]{ $eAnnotations, $ownedComment, $test, $body, $predecessorClause, $successorClause, $decider, $bodyOutput }) }
  implement() { org.eclipse.uml2.uml.impl.ClauseImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructClause(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op ConditionalNode ConditionalNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, inActivity : Activity, variable : VariableEList, edge : ActivityEdgeEList, mustIsolate : boolean, node : ActivityNodeEList, isDeterminate : boolean, isAssured : boolean, clause : ClauseEList, result : OutputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ConditionalNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(mustIsolate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("mustIsolate")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(isDeterminate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDeterminate")) }
  get_slot(isAssured, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAssured")) }
  get_slot(clause, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Clause>)$t.eGet($t.eClass().getEStructuralFeature("clause")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(mustIsolate) { false }
  get_default(isDeterminate) { false }
  get_default(isAssured) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, elementImport, packageImport, ownedRule, inActivity, variable, edge, mustIsolate, node, isDeterminate, isAssured, clause, result) { constructConditionalNode((org.eclipse.uml2.uml.ConditionalNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ConditionalNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $elementImport, $packageImport, $ownedRule, $inActivity, $variable, $edge, $mustIsolate, $node, $isDeterminate, $isAssured, $clause, $result }) }
  implement() { org.eclipse.uml2.uml.impl.ConditionalNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructConditionalNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm LoopNode  {
  implement { org.eclipse.uml2.uml.LoopNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.LoopNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%op LoopNode LoopNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, inActivity : Activity, variable : VariableEList, edge : ActivityEdgeEList, mustIsolate : boolean, node : ActivityNodeEList, isTestedFirst : boolean, bodyPart : ExecutableNodeEList, setupPart : ExecutableNodeEList, decider : OutputPin, test : ExecutableNodeEList, result : OutputPinEList, loopVariable : OutputPinEList, bodyOutput : OutputPinEList, loopVariableInput : InputPinEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.LoopNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(mustIsolate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("mustIsolate")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(isTestedFirst, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isTestedFirst")) }
  get_slot(bodyPart, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("bodyPart")) }
  get_slot(setupPart, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("setupPart")) }
  get_slot(decider, t) { (org.eclipse.uml2.uml.OutputPin)$t.eGet($t.eClass().getEStructuralFeature("decider")) }
  get_slot(test, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExecutableNode>)$t.eGet($t.eClass().getEStructuralFeature("test")) }
  get_slot(result, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("result")) }
  get_slot(loopVariable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("loopVariable")) }
  get_slot(bodyOutput, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.OutputPin>)$t.eGet($t.eClass().getEStructuralFeature("bodyOutput")) }
  get_slot(loopVariableInput, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InputPin>)$t.eGet($t.eClass().getEStructuralFeature("loopVariableInput")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(mustIsolate) { false }
  get_default(isTestedFirst) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, elementImport, packageImport, ownedRule, inActivity, variable, edge, mustIsolate, node, isTestedFirst, bodyPart, setupPart, decider, test, result, loopVariable, bodyOutput, loopVariableInput) { constructLoopNode((org.eclipse.uml2.uml.LoopNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("LoopNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $elementImport, $packageImport, $ownedRule, $inActivity, $variable, $edge, $mustIsolate, $node, $isTestedFirst, $bodyPart, $setupPart, $decider, $test, $result, $loopVariable, $bodyOutput, $loopVariableInput }) }
  implement() { org.eclipse.uml2.uml.impl.LoopNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructLoopNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ExpansionNode  {
  implement { org.eclipse.uml2.uml.ExpansionNode }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExpansionNode }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExpansionRegion  {
  implement { org.eclipse.uml2.uml.ExpansionRegion }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExpansionRegion }
  equals(l1,l2) { $l1.equals($l2) }
}

%typeterm ExpansionKind  {
  implement { org.eclipse.uml2.uml.ExpansionKind }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ExpansionKind }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ExpansionKind ExpansionKindparallel() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ExpansionKind.get("parallel") }
  make() { (org.eclipse.uml2.uml.ExpansionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getExpansionKind(), "parallel") }
}

%op ExpansionKind ExpansionKinditerative() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ExpansionKind.get("iterative") }
  make() { (org.eclipse.uml2.uml.ExpansionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getExpansionKind(), "iterative") }
}

%op ExpansionKind ExpansionKindstream() {
  is_fsym(t) { t == org.eclipse.uml2.uml.ExpansionKind.get("stream") }
  make() { (org.eclipse.uml2.uml.ExpansionKind)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.createFromString((EDataType)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getExpansionKind(), "stream") }
}

%typeterm ExpansionNodeEList {
  implement { org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode> }
  is_sort(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode>)$t).size() == 0 || (((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode>)$t).size()>0 && ((org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode>)$t).get(0) instanceof org.eclipse.uml2.uml.ExpansionNode)) }
  equals(l1,l2) { $l1.equals($l2) }
}

%oparray ExpansionNodeEList ExpansionNodeEList ( ExpansionNode* ) {
  is_fsym(t) { $t instanceof org.eclipse.emf.common.util.EList<?> && ($t.size() == 0 || ($t.size()>0 && $t.get(0) instanceof org.eclipse.uml2.uml.ExpansionNode)) }
  make_empty(n) { new org.eclipse.emf.common.util.BasicEList<org.eclipse.uml2.uml.ExpansionNode>($n) }
  make_append(e,l) { appendExpansionNodeEList($e,$l) }
  get_element(l,n) { $l.get($n) }
  get_size(l)      { $l.size() }
}

private static <O> org.eclipse.emf.common.util.EList<O> appendExpansionNodeEList(O e,org.eclipse.emf.common.util.EList<O> l) {
  l.add(e);
  return l;
}

%op ExpansionRegion ExpansionRegion(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, handler : ExceptionHandlerEList, localPrecondition : ConstraintEList, localPostcondition : ConstraintEList, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, inActivity : Activity, variable : VariableEList, edge : ActivityEdgeEList, mustIsolate : boolean, node : ActivityNodeEList, mode : ExpansionKind, inputElement : ExpansionNodeEList, outputElement : ExpansionNodeEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExpansionRegion }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(handler, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExceptionHandler>)$t.eGet($t.eClass().getEStructuralFeature("handler")) }
  get_slot(localPrecondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPrecondition")) }
  get_slot(localPostcondition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("localPostcondition")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(inActivity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("inActivity")) }
  get_slot(variable, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Variable>)$t.eGet($t.eClass().getEStructuralFeature("variable")) }
  get_slot(edge, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("edge")) }
  get_slot(mustIsolate, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("mustIsolate")) }
  get_slot(node, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("node")) }
  get_slot(mode, t) { (org.eclipse.uml2.uml.ExpansionKind)$t.eGet($t.eClass().getEStructuralFeature("mode")) }
  get_slot(inputElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode>)$t.eGet($t.eClass().getEStructuralFeature("inputElement")) }
  get_slot(outputElement, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ExpansionNode>)$t.eGet($t.eClass().getEStructuralFeature("outputElement")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(mustIsolate) { false }
  get_default(mode) { `ExpansionKinditerative() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, handler, localPrecondition, localPostcondition, elementImport, packageImport, ownedRule, inActivity, variable, edge, mustIsolate, node, mode, inputElement, outputElement) { constructExpansionRegion((org.eclipse.uml2.uml.ExpansionRegion)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExpansionRegion")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $handler, $localPrecondition, $localPostcondition, $elementImport, $packageImport, $ownedRule, $inActivity, $variable, $edge, $mustIsolate, $node, $mode, $inputElement, $outputElement }) }
  implement() { org.eclipse.uml2.uml.impl.ExpansionRegionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExpansionRegion(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%op ExpansionNode ExpansionNode(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, isLeaf : boolean, inStructuredNode : StructuredActivityNode, activity : Activity, outgoing : ActivityEdgeEList, incoming : ActivityEdgeEList, inPartition : ActivityPartitionEList, inInterruptibleRegion : InterruptibleActivityRegionEList, redefinedNode : ActivityNodeEList, type : Type, ordering : ObjectNodeOrderingKind, isControlType : boolean, upperBound : ValueSpecification, inState : StateEList, selection : Behavior, regionAsOutput : ExpansionRegion, regionAsInput : ExpansionRegion) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ExpansionNode }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(inStructuredNode, t) { (org.eclipse.uml2.uml.StructuredActivityNode)$t.eGet($t.eClass().getEStructuralFeature("inStructuredNode")) }
  get_slot(activity, t) { (org.eclipse.uml2.uml.Activity)$t.eGet($t.eClass().getEStructuralFeature("activity")) }
  get_slot(outgoing, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("outgoing")) }
  get_slot(incoming, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityEdge>)$t.eGet($t.eClass().getEStructuralFeature("incoming")) }
  get_slot(inPartition, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityPartition>)$t.eGet($t.eClass().getEStructuralFeature("inPartition")) }
  get_slot(inInterruptibleRegion, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterruptibleActivityRegion>)$t.eGet($t.eClass().getEStructuralFeature("inInterruptibleRegion")) }
  get_slot(redefinedNode, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ActivityNode>)$t.eGet($t.eClass().getEStructuralFeature("redefinedNode")) }
  get_slot(type, t) { (org.eclipse.uml2.uml.Type)$t.eGet($t.eClass().getEStructuralFeature("type")) }
  get_slot(ordering, t) { (org.eclipse.uml2.uml.ObjectNodeOrderingKind)$t.eGet($t.eClass().getEStructuralFeature("ordering")) }
  get_slot(isControlType, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isControlType")) }
  get_slot(upperBound, t) { (org.eclipse.uml2.uml.ValueSpecification)$t.eGet($t.eClass().getEStructuralFeature("upperBound")) }
  get_slot(inState, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.State>)$t.eGet($t.eClass().getEStructuralFeature("inState")) }
  get_slot(selection, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("selection")) }
  get_slot(regionAsOutput, t) { (org.eclipse.uml2.uml.ExpansionRegion)$t.eGet($t.eClass().getEStructuralFeature("regionAsOutput")) }
  get_slot(regionAsInput, t) { (org.eclipse.uml2.uml.ExpansionRegion)$t.eGet($t.eClass().getEStructuralFeature("regionAsInput")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(ordering) { `ObjectNodeOrderingKindFIFO() }
  get_default(isControlType) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, isLeaf, inStructuredNode, activity, outgoing, incoming, inPartition, inInterruptibleRegion, redefinedNode, type, ordering, isControlType, upperBound, inState, selection, regionAsOutput, regionAsInput) { constructExpansionNode((org.eclipse.uml2.uml.ExpansionNode)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ExpansionNode")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $isLeaf, $inStructuredNode, $activity, $outgoing, $incoming, $inPartition, $inInterruptibleRegion, $redefinedNode, $type, $ordering, $isControlType, $upperBound, $inState, $selection, $regionAsOutput, $regionAsInput }) }
  implement() { org.eclipse.uml2.uml.impl.ExpansionNodeImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructExpansionNode(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm ProtocolTransition  {
  implement { org.eclipse.uml2.uml.ProtocolTransition }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.ProtocolTransition }
  equals(l1,l2) { $l1.equals($l2) }
}

%op ProtocolTransition ProtocolTransition(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, kind : TransitionKind, container : Region, source : Vertex, target : Vertex, redefinedTransition : Transition, guard : Constraint, effect : Behavior, trigger : TriggerEList, postCondition : Constraint, preCondition : Constraint) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.ProtocolTransition }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(kind, t) { (org.eclipse.uml2.uml.TransitionKind)$t.eGet($t.eClass().getEStructuralFeature("kind")) }
  get_slot(container, t) { (org.eclipse.uml2.uml.Region)$t.eGet($t.eClass().getEStructuralFeature("container")) }
  get_slot(source, t) { (org.eclipse.uml2.uml.Vertex)$t.eGet($t.eClass().getEStructuralFeature("source")) }
  get_slot(target, t) { (org.eclipse.uml2.uml.Vertex)$t.eGet($t.eClass().getEStructuralFeature("target")) }
  get_slot(redefinedTransition, t) { (org.eclipse.uml2.uml.Transition)$t.eGet($t.eClass().getEStructuralFeature("redefinedTransition")) }
  get_slot(guard, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("guard")) }
  get_slot(effect, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("effect")) }
  get_slot(trigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("trigger")) }
  get_slot(postCondition, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("postCondition")) }
  get_slot(preCondition, t) { (org.eclipse.uml2.uml.Constraint)$t.eGet($t.eClass().getEStructuralFeature("preCondition")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(kind) { `TransitionKindexternal() }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, kind, container, source, target, redefinedTransition, guard, effect, trigger, postCondition, preCondition) { constructProtocolTransition((org.eclipse.uml2.uml.ProtocolTransition)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("ProtocolTransition")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $kind, $container, $source, $target, $redefinedTransition, $guard, $effect, $trigger, $postCondition, $preCondition }) }
  implement() { org.eclipse.uml2.uml.impl.ProtocolTransitionImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructProtocolTransition(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}

%typeterm AssociationClass  {
  implement { org.eclipse.uml2.uml.AssociationClass }
  is_sort(t) { $t instanceof org.eclipse.uml2.uml.AssociationClass }
  equals(l1,l2) { $l1.equals($l2) }
}

%op AssociationClass AssociationClass(eAnnotations : EAnnotationEList, ownedComment : CommentEList, name : String, visibility : VisibilityKind, clientDependency : DependencyEList, nameExpression : StringExpression, elementImport : ElementImportEList, packageImport : PackageImportEList, ownedRule : ConstraintEList, isLeaf : boolean, owningTemplateParameter : TemplateParameter, templateParameter : TemplateParameter, _package : Package, templateBinding : TemplateBindingEList, ownedTemplateSignature : TemplateSignature, isAbstract : boolean, generalization : GeneralizationEList, powertypeExtent : GeneralizationSetEList, redefinedClassifier : ClassifierEList, general : ClassifierEList, substitution : SubstitutionEList, representation : CollaborationUse, collaborationUse : CollaborationUseEList, ownedUseCase : UseCaseEList, useCase : UseCaseEList, ownedAttribute : PropertyEList, ownedConnector : ConnectorEList, ownedPort : PortEList, ownedBehavior : BehaviorEList, classifierBehavior : Behavior, interfaceRealization : InterfaceRealizationEList, ownedTrigger : TriggerEList, nestedClassifier : ClassifierEList, ownedOperation : OperationEList, superClass : ClassEList, isActive : boolean, ownedReception : ReceptionEList, ownedEnd : PropertyEList, memberEnd : PropertyEList, isDerived : boolean, navigableOwnedEnd : PropertyEList) {
  is_fsym(t) { $t instanceof org.eclipse.uml2.uml.AssociationClass }
  get_slot(eAnnotations, t) { (org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EAnnotation>)$t.eGet($t.eClass().getEStructuralFeature("eAnnotations")) }
  get_slot(ownedComment, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Comment>)$t.eGet($t.eClass().getEStructuralFeature("ownedComment")) }
  get_slot(name, t) { (java.lang.String)$t.eGet($t.eClass().getEStructuralFeature("name")) }
  get_slot(visibility, t) { (org.eclipse.uml2.uml.VisibilityKind)$t.eGet($t.eClass().getEStructuralFeature("visibility")) }
  get_slot(clientDependency, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Dependency>)$t.eGet($t.eClass().getEStructuralFeature("clientDependency")) }
  get_slot(nameExpression, t) { (org.eclipse.uml2.uml.StringExpression)$t.eGet($t.eClass().getEStructuralFeature("nameExpression")) }
  get_slot(elementImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.ElementImport>)$t.eGet($t.eClass().getEStructuralFeature("elementImport")) }
  get_slot(packageImport, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.PackageImport>)$t.eGet($t.eClass().getEStructuralFeature("packageImport")) }
  get_slot(ownedRule, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Constraint>)$t.eGet($t.eClass().getEStructuralFeature("ownedRule")) }
  get_slot(isLeaf, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isLeaf")) }
  get_slot(owningTemplateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("owningTemplateParameter")) }
  get_slot(templateParameter, t) { (org.eclipse.uml2.uml.TemplateParameter)$t.eGet($t.eClass().getEStructuralFeature("templateParameter")) }
  get_slot(_package, t) { (org.eclipse.uml2.uml.Package)$t.eGet($t.eClass().getEStructuralFeature("package")) }
  get_slot(templateBinding, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.TemplateBinding>)$t.eGet($t.eClass().getEStructuralFeature("templateBinding")) }
  get_slot(ownedTemplateSignature, t) { (org.eclipse.uml2.uml.TemplateSignature)$t.eGet($t.eClass().getEStructuralFeature("ownedTemplateSignature")) }
  get_slot(isAbstract, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isAbstract")) }
  get_slot(generalization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Generalization>)$t.eGet($t.eClass().getEStructuralFeature("generalization")) }
  get_slot(powertypeExtent, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.GeneralizationSet>)$t.eGet($t.eClass().getEStructuralFeature("powertypeExtent")) }
  get_slot(redefinedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("redefinedClassifier")) }
  get_slot(general, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("general")) }
  get_slot(substitution, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Substitution>)$t.eGet($t.eClass().getEStructuralFeature("substitution")) }
  get_slot(representation, t) { (org.eclipse.uml2.uml.CollaborationUse)$t.eGet($t.eClass().getEStructuralFeature("representation")) }
  get_slot(collaborationUse, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.CollaborationUse>)$t.eGet($t.eClass().getEStructuralFeature("collaborationUse")) }
  get_slot(ownedUseCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("ownedUseCase")) }
  get_slot(useCase, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.UseCase>)$t.eGet($t.eClass().getEStructuralFeature("useCase")) }
  get_slot(ownedAttribute, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedAttribute")) }
  get_slot(ownedConnector, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Connector>)$t.eGet($t.eClass().getEStructuralFeature("ownedConnector")) }
  get_slot(ownedPort, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Port>)$t.eGet($t.eClass().getEStructuralFeature("ownedPort")) }
  get_slot(ownedBehavior, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Behavior>)$t.eGet($t.eClass().getEStructuralFeature("ownedBehavior")) }
  get_slot(classifierBehavior, t) { (org.eclipse.uml2.uml.Behavior)$t.eGet($t.eClass().getEStructuralFeature("classifierBehavior")) }
  get_slot(interfaceRealization, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.InterfaceRealization>)$t.eGet($t.eClass().getEStructuralFeature("interfaceRealization")) }
  get_slot(ownedTrigger, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Trigger>)$t.eGet($t.eClass().getEStructuralFeature("ownedTrigger")) }
  get_slot(nestedClassifier, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Classifier>)$t.eGet($t.eClass().getEStructuralFeature("nestedClassifier")) }
  get_slot(ownedOperation, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Operation>)$t.eGet($t.eClass().getEStructuralFeature("ownedOperation")) }
  get_slot(superClass, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Class>)$t.eGet($t.eClass().getEStructuralFeature("superClass")) }
  get_slot(isActive, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isActive")) }
  get_slot(ownedReception, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Reception>)$t.eGet($t.eClass().getEStructuralFeature("ownedReception")) }
  get_slot(ownedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("ownedEnd")) }
  get_slot(memberEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("memberEnd")) }
  get_slot(isDerived, t) { (java.lang.Boolean)$t.eGet($t.eClass().getEStructuralFeature("isDerived")) }
  get_slot(navigableOwnedEnd, t) { (org.eclipse.emf.common.util.EList<org.eclipse.uml2.uml.Property>)$t.eGet($t.eClass().getEStructuralFeature("navigableOwnedEnd")) } 
  get_default(visibility) { `VisibilityKindpublic() }
  get_default(isLeaf) { false }
  get_default(isAbstract) { false }
  get_default(isActive) { false }
  get_default(isDerived) { false }
  make(eAnnotations, ownedComment, name, visibility, clientDependency, nameExpression, elementImport, packageImport, ownedRule, isLeaf, owningTemplateParameter, templateParameter, _package, templateBinding, ownedTemplateSignature, isAbstract, generalization, powertypeExtent, redefinedClassifier, general, substitution, representation, collaborationUse, ownedUseCase, useCase, ownedAttribute, ownedConnector, ownedPort, ownedBehavior, classifierBehavior, interfaceRealization, ownedTrigger, nestedClassifier, ownedOperation, superClass, isActive, ownedReception, ownedEnd, memberEnd, isDerived, navigableOwnedEnd) { constructAssociationClass((org.eclipse.uml2.uml.AssociationClass)org.eclipse.uml2.uml.UMLFactory.eINSTANCE.create((EClass)org.eclipse.uml2.uml.UMLPackage.eINSTANCE.getEClassifier("AssociationClass")), new Object[]{ $eAnnotations, $ownedComment, $name, $visibility, $clientDependency, $nameExpression, $elementImport, $packageImport, $ownedRule, $isLeaf, $owningTemplateParameter, $templateParameter, $_package, $templateBinding, $ownedTemplateSignature, $isAbstract, $generalization, $powertypeExtent, $redefinedClassifier, $general, $substitution, $representation, $collaborationUse, $ownedUseCase, $useCase, $ownedAttribute, $ownedConnector, $ownedPort, $ownedBehavior, $classifierBehavior, $interfaceRealization, $ownedTrigger, $nestedClassifier, $ownedOperation, $superClass, $isActive, $ownedReception, $ownedEnd, $memberEnd, $isDerived, $navigableOwnedEnd }) }
  implement() { org.eclipse.uml2.uml.impl.AssociationClassImpl }
}

public static <O extends org.eclipse.emf.ecore.EObject> O constructAssociationClass(O o, Object[] objs) {
  int i=0;
  EList<EStructuralFeature> sfes = o.eClass().getEAllStructuralFeatures();
  for(EStructuralFeature esf : sfes) {
    if(esf.isChangeable()) {
      o.eSet(esf, objs[i]);
      i++;
    }
  }
  return o;
}
