  %typeterm VisitableVisitor {
    implement { jjtraveler.reflective.VisitableVisitor }
    equals(t1,t2) {t1.equals(t2)}
  }

  %typeterm Visitable{
    implement { jjtraveler.Visitable}
    equals(t1,t2) {t1.equals(t2)}
  }

/*
 * basic operators
 */

  %op VisitableVisitor Identity() {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Identity) }
    make() { new tom.library.strategy.mutraveler.Identity() }
  }

  %op VisitableVisitor Fail() {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Fail) }
    make() { new tom.library.strategy.mutraveler.Fail() }
  }

  %op VisitableVisitor Not(s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Not) }
    make(v) { new tom.library.strategy.mutraveler.Not((jjtraveler.reflective.VisitableVisitor)v) }
  }

  %op VisitableVisitor Sequence(s1:VisitableVisitor, s2:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Sequence) }
    make(first,then) { new tom.library.strategy.mutraveler.Sequence((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) }
  }

  %op VisitableVisitor Choice(s1:VisitableVisitor, s2:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Choice) }
    make(first,then) { new tom.library.strategy.mutraveler.Choice((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) }
  }

  %op VisitableVisitor All(s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.All) }
    make(v) { new tom.library.strategy.mutraveler.All((jjtraveler.reflective.VisitableVisitor)v) }
  }

  %op VisitableVisitor One(s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.One) }
    make(v) { new tom.library.strategy.mutraveler.One((jjtraveler.reflective.VisitableVisitor)v) }
  }

  %op VisitableVisitor Some(s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Some) }
    make(v) { new tom.library.strategy.mutraveler.Some((jjtraveler.reflective.VisitableVisitor)v) }
  }

  %op VisitableVisitor IfThenElse(s1:VisitableVisitor, s2:VisitableVisitor, s3:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.IfThenElse) }
    make(condition,trueCase,falseCase) { new tom.library.strategy.mutraveler.IfThenElse((jjtraveler.reflective.VisitableVisitor)condition,(jjtraveler.reflective.VisitableVisitor)trueCase,(jjtraveler.reflective.VisitableVisitor)falseCase) }
  }

  %op VisitableVisitor MuVar(var:String) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.MuVar) }
    make(name) { new tom.library.strategy.mutraveler.MuVar(name) }
  }

  %op VisitableVisitor mu(s1:VisitableVisitor, s2:VisitableVisitor) {
    make(var,v) { tom.library.strategy.mutraveler.MuTraveler.mu(var,v) }
  }
  
  %op VisitableVisitor Omega(position:int, s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Omega) }
    make(pos,v) { new tom.library.strategy.mutraveler.Omega(pos,(jjtraveler.reflective.VisitableVisitor)v) }
  }
/*
 * basic operators with Id considered as a failure
 */

  %op VisitableVisitor OneId(s1:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.OneId) }
    make(v) { new tom.library.strategy.mutraveler.OneId((jjtraveler.reflective.VisitableVisitor)v) }
  }

  %op VisitableVisitor SequenceId(s1:VisitableVisitor, s2:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.SequenceId) }
    make(first,then) { new tom.library.strategy.mutraveler.SequenceId((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) }
  }

  %op VisitableVisitor ChoiceId(s1:VisitableVisitor, s2:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.ChoiceId) }
    make(first,then) { new tom.library.strategy.mutraveler.ChoiceId((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) }
  }

/*
 * basic probabilistic operators
 */

  %op VisitableVisitor Pselect(p1:int, p2:int, s1:VisitableVisitor, s2:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.Pselect) }
    make(p,q,first,then) { new tom.library.strategy.mutraveler.Pselect(p,q,(jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) }
  }

  %op VisitableVisitor OmegaU(s1:VisitableVisitor, defaultStrategy:VisitableVisitor) {
    is_fsym(t) { (t instanceof tom.library.strategy.mutraveler.OmegaU) }
    make(v,d) { new tom.library.strategy.mutraveler.OmegaU((jjtraveler.reflective.VisitableVisitor)v,(jjtraveler.reflective.VisitableVisitor)d) }
  }

/*
 * strategies
 */

  %op VisitableVisitor Try(s1:VisitableVisitor) {
    make(v) { `Choice(v,Identity()) }
  }

  %op VisitableVisitor TopDown(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Sequence(v,All(MuVar("x")))) }
  }

  %op VisitableVisitor BottomUp(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),v)) }
  }

  %op VisitableVisitor OnceBottomUp(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Choice(One(MuVar("x")),v)) }
  }

  %op VisitableVisitor OnceTopDown(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Choice(v,One(MuVar("x")))) }
  }

  %op VisitableVisitor Innermost(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),Try(Sequence(v,MuVar("x"))))) }
  }

  %op VisitableVisitor Repeat(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Choice(Sequence(v,MuVar("x")),Identity())) }
  }

/*
 * strategies with Id considered as failure
 */

  %op VisitableVisitor TryId(s1:VisitableVisitor) {
    make(v) { v }
  }

  %op VisitableVisitor RepeatId(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),SequenceId(v,MuVar("x"))) }
  }

  %op VisitableVisitor OnceBottomUpId(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),ChoiceId(OneId(MuVar("x")),v)) }
  }

  %op VisitableVisitor OnceTopDownId(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),ChoiceId(v,OneId(MuVar("x")))) }
  }

  %op VisitableVisitor InnermostId(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Sequence(All(MuVar("x")),SequenceId(v,MuVar("x")))) }
  }

  %op VisitableVisitor OutermostId(s1:VisitableVisitor) {
    make(v) { `mu(MuVar("x"),Sequence(SequenceId(v,MuVar("x")),All(MuVar("x")))) }
  }

