module CST
imports String Code 
abstract syntax

// Tree Transformation =======================================================
CstBlock = wrappedCode(wrapped:Code)
CstProgram = wrappedCodeList(wrapped:CodeList)

// Node type for base types ==================================================
NodeString = NodeString()
NodeInt = NodeInt()

// Program ===================================================================
CstProgram = cst_Program(blocks:CstBlockList)

CstBlockList = cst_concCstBlock(CstBlock*)

CstBlock =
 HOSTBLOCK(optionList:CstOptionList, hContent:String)
| cst_MatchConstruct(optionList:CstOptionList, arguments:CstMatchArgumentList , constraintActionList:CstConstraintActionList)
| cst_OpConstruct       (optionList:CstOptionList, tomTypeName:CstName, ctorName:CstName, argumentList :CstSlotList, operatorList :CstOperatorList)
| cst_OpArrayConstruct  (optionList:CstOptionList, tomTypeName:CstName, ctorName:CstName, typeName:CstName, operatorList:CstOperatorList)
| cst_OpListConstruct   (optionList:CstOptionList, tomTypeName:CstName, ctorName:CstName, typeName:CstName, operatorList:CstOperatorList)
| cst_TypetermConstruct (optionList:CstOptionList, tomTypeName:CstName, extendsTypeName: CstName, operatorList:CstOperatorList)
| cst_MetaQuoteConstruct(optionList:CstOptionList, content:String)
| cst_IncludeConstruct  (optionList:CstOptionList, filename:String)
| cst_BQTermToBlock     (bqterm:CstBQTerm)

// MatchConstruct ============================================================
CstMatchArgumentList  = cst_concCstTypedTerm(CstTypedTerm*)

CstConstraintAction =
  cst_ConstraintAction(constraint:CstConstraint , action:CstBlockList) // supprimer (ou pas...)

CstConstraintActionList = cst_concConstraintAction(CstConstraintAction*)

CstConstraint  = cst_MatchTermConstraint    (object:CstPattern, subject:CstTerm)
              | cst_MatchArgumentConstraint(object:CstPattern)
              | cst_AndConstraint(CstConstraint*)
              | cst_OrConstraint(CstConstraint*)
              | cst_NumLessThan         (lefthand:CstTerm, righthand:CstTerm)
              | cst_NumLessOrEqualTo    (lefthand:CstTerm, righthand:CstTerm)
              | cst_NumGreaterThan      (lefthand:CstTerm, righthand:CstTerm)
              | cst_NumGreaterOrEqualTo (lefthand:CstTerm, righthand:CstTerm)
              | cst_NumEqualTo          (lefthand:CstTerm, righthand:CstTerm)
              | cst_NumDifferent        (lefthand:CstTerm, righthand:CstTerm)
              
CstConstraintList = cst_concCstConstraint(CstConstraint*)

// CstTerm in CST context is "equivalent" to BQTerm in AST context
// (it's much simpler because very close to synthax)
CstTerm = cst_VariableName(name : String)
        | cst_VariableNameStar(name : String)
        | cst_Term(name : String, termList : CstTermList)

CstTermList = cst_concCstTerm(CstTerm*)

CstTypedTerm = cst_TypedTerm(term:CstTerm, type:CstTermType)
             
CstTermType = cst_TermType(type:String)
            | cst_TermTypeUnknown()

// CstPattern in CST context is "equivalent" to TomTerm in AST context
CstPattern = 
  cst_Anti(pattern:CstPattern)
| cst_AnnotatedPattern(pattern:CstPattern,annotation:String)
| cst_Variable        (name : String) 
| cst_VariableStar    (name : String)
| cst_Constant        (value : String)
| cst_ConstantStar    (value : String)
| cst_UnamedVariable    ()
| cst_UnamedVariableStar()
| cst_SymbolList (headSymbolList : CstHeadSymbolList,
                patternList    : CstPatternList)


CstHeadSymbolList = cst_concCstHeadSymbol(CstHeadSymbol*)
CstHeadSymbol = cst_HeadSymbol(name : String, theory : CstTheoryType)
              | cst_ConstantHeadSymbol(value : String, theory : CstTheoryType)

    CstTheoryType = cst_TheoryAU()
                  | cst_TheoryAC()
                  | cst_TheoryDEFAULT()

CstPatternList = cst_concCstPattern(CstPattern*)
               | cst_concCstPairPattern(CstPairPattern*)

CstPairPattern = cst_PairPattern(slotName:String, pattern:CstPattern)

// CsOp*Construct ============================================================
CstOperatorList = cst_concCstOperator(CstOperator*)

CstOperator =
 | cst_IsFsym         (argName:CstName, block:CstBlockList)
 | cst_GetHead        (argName:CstName, block:CstBlockList)
 | cst_IsEmpty        (argName:CstName, block:CstBlockList)
 | cst_MakeEmptyArray (argName:CstName, block:CstBlockList)
 | cst_GetSize        (argName:CstName, block:CstBlockList)
 | cst_GetTail        (argName:CstName, block:CstBlockList)
 | cst_GetSlot   (argName1:CstName, argName2:CstName, block:CstBlockList)
 | cst_MakeInsert(argName1:CstName, argName2:CstName, block:CstBlockList)
 | cst_GetElement(argName1:CstName, argName2:CstName, block:CstBlockList)
 | cst_MakeAppend(argName1:CstName, argName2:CstName, block:CstBlockList)
 | cst_Make   (nameList:CstNameList, block:CstBlockList)
 | cst_MakeEmptyList(block:CstBlockList)
 | cst_Implement(block:CstBlockList)
 | cst_IsSort (argName:CstName, block:CstBlockList)
 | cst_Equals (argName1:CstName, argName2:CstName, block:CstBlockList)

CstSlotList = cst_concCstSlot(CstSlot*)

CstSlot = cst_Slot(slotName:CstName, slotTypeName:CstName)

// BQTerms ===================================================================
CstBQTerm = cst_BQAppl(name:CstName, bqTermList:CstBQTermList)
         | cst_BQRecordAppl(name:CstName, slotList:CstPairSlotBQTermList)
         | cst_BQVar(name:CstName)
         | cst_BQVarStar(name:CstName)
         | cst_BQDefault()
         | cst_BQInnerHostCode(code:String)

CstPairSlotBQTerm  = CstPairSlotBQTerm(slotName:CstName, term:CstBQTerm)

CstBQTermList = cst_concBQTerm(CstBQTerm*)
CstPairSlotBQTermList = cst_concCstPairSlotBQTerm(CstPairSlotBQTerm*)

// Names
CstName = cst_Name(name:String)
        | cst_EmptyName()

CstNameList = cst_concCstName(CstName*)

// Options ==
CstOptionList = cst_concCstOption(CstOption*)
CstOption = cst_SourceFile(sourceFile:String)
          | cst_StartLine(startLine:int)
          | cst_EndLine(endLine:int)
          | cst_StartColumn(startColumn:int)
          | cst_EndColumn(endColumn:int)
          | cst_NoOption()
