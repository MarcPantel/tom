module TomExpression
imports TomSignature String
abstract syntax
Expression = TomTermToExpression(AstTerm:TomTerm)
           | Bottom()
           | Negation(Arg:Expression)
           | And(Arg1:Expression,Arg2:Expression)
           | Or(Arg1:Expression,Arg2:Expression)
           | GreaterThan(Arg1:Expression,Arg2:Expression)
           | TrueTL()
           | FalseTL()
           // Exp1 - the subject
           // Exp2 - the pattern
           | EqualFunctionSymbol(AstType:TomType,Exp1:TomTerm,Exp2:TomTerm)
           | EqualTerm(TomType:TomType,Kid1:TomTerm,Kid2:TomTerm)
           | Cast(AstType:TomType,Source:Expression)
           | GetSubterm(Codomain:TomType,Variable:TomTerm,Number:TomNumber)
           // AstName - the name of the function symbol from whom to extract the slot
           // Variable - from what to extract the slot 
           | GetSlot(Codomain:TomType,AstName:TomName,SlotNameString:String,Variable:TomTerm)
           | IsFsym(AstName:TomName,Variable:TomTerm)
           | GetHead(Opname:TomName,Codomain:TomType,Variable:TomTerm)
           | GetTail(Opname:TomName,Variable:TomTerm)
           | IsEmptyList(Opname:TomName,Variable:TomTerm)
           | IsEmptyArray(Opname:TomName,Variable:TomTerm,Index:TomTerm)
           | AddOne(Variable:TomTerm)
           | GetSize(Opname:TomName,Variable:TomTerm)
           | GetElement(Opname:TomName,Codomain:TomType,Kid1:TomTerm,Kid2:TomTerm)
           | GetSliceList(AstName:TomName,VariableBeginAST:TomTerm,VariableEndAST:TomTerm)
           | GetSliceArray(AstName:TomName,SubjectListName:TomTerm,VariableBeginAST:TomTerm,VariableEndAST:TomTerm)
           // TargetLanguageFunctionCall - the target language function that has to be called
           // 								in order to perform the match
           // CompiledAntiPatternMatch - the string that contains the compiled anti-pattern match
		   | EqualTrueAntiPatternMatch(TargetLanguageFunctionCall:String,CompiledAntiPatternMatch:Constraint) 	