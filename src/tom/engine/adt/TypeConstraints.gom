module TypeConstraints

imports String TomType
abstract syntax

/* Type Reconstruction */
TermToInfer = 
            /**
             * TermToInfer set all kind of terms with a fresh type variable
             * @param Term a tom term (Variable or RecordAppl)
             * @param TypeVar a type variable
             */
            NewTerm(Term: TomTerm, TypeVar: TomType)

TermToInferList = concTermToInfer(TermToInfer*) 


TypeConstraint = Equation(Type1: TomType, Type2: TomType)
               | Subtype(Type1: TomType, Type2: TomType)

TypeConstraintList = concTypeConstraint(TypeConstraint*)
                   | FalseTypeConstraint()
                   | TrueTypeConstraint()

ReconResult = Pair(Type: TomType, constraints: TypeConstraintList)

ReconResultList = concReconResult(ReconResult*)

Domain = Domain(TomType*)
       | VariadicDomain(type: TomType)

Signature = Sig(dom: Domain, codom: TomType)

Jugement = Jugement(var: String, type: TomType)
         | SigOf(fun: String, sig: Signature)

Context = Context(Jugement*)

Mapping = MapsTo(tvar: TomType, type: TomType)

Substitution = MList(Mapping*)

SubstitutionList = SList(Substitution*)

ContextAndResult = CRPair(ctx: Context, res: ReconResult)

ContextAndResultList = CRLPair(ctx: Context, rlist: ReconResultList)

ContextAndConstraints = CCPair(ctx: Context, constraints: ConstraintList)
