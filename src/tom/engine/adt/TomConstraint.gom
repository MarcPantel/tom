module TomConstraint
imports TomTerm
abstract syntax

Constraint = 
		  /**
		   * <code>AssignTo</code> specifies that we want to instanciate Variable with the term on which this constraint is attached
		   *
		   * @param Variable the variable to constrain
		   */
           | AssignTo(Variable:TomTerm)
 		   | TrueConstraint()
		   | FalseConstraint()		   
		   | Negate(c:Constraint)
		   | AndConstraint(Constraint*)
		   | OrConstraint(Constraint*)
		   | MatchConstraint(pattern:TomTerm, subject:TomTerm)
//		   | NMatchConstraint(pattern:TomTerm, subject:TomTerm)
//		   | Exists(var:TomTerm,cons:Constraint)
//		   | ForAll(var:TomTerm,cons:Constraint)
		   | AntiMatchConstraint(Pattern:TomTerm, Subject:TomTerm, ActionOnIf : int)
		   | AndAntiConstraint(Constraint*)
  		   | EmptyListConstraint(Opname:TomName,Variable:TomTerm)

ConstraintList = concConstraint(Constraint*)

/** normalization hooks
 *
 * AndConstraint(concConstraint()) -> True
 * AndConstraint(concConstraint(constr)) -> constr
 * AndConstraint(concConstraint(X*,AndConstraint(concConstraint(Y*)),Z*)) -> AndConstraint(concConstraint(X*,Y*,Z*))
 *
 */
 
AndConstraint:make(constList){
	%match(constList){
		concConstraint() ->{
			return `TrueConstraint();
		}
		concConstraint(element) ->{
			return `element;
		}
		concConstraint(X*,AndConstraint(concConstraint(Y*)),Z*) ->{
			return `AndConstraint(concConstraint(X*,Y*,Z*));
		}		
	}
}


