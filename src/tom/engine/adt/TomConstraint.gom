module TomConstraint
imports TomTerm
abstract syntax

Constraint = 
		  /**
		   * <code>AssignTo</code> specifies that we want to instanciate Variable with the term on which this constraint is attached
		   *
		   * @param Variable the variable to constrain
		   */
           | AssignTo(Variable:TomTerm)
 		   | TrueConstraint()
		   | FalseConstraint()		   
		   | Neg(c:Constraint)
		   | AndConstraint(cla:ConstraintList)
		   | OrConstraint(clo:ConstraintList)
		   | MatchConstraint(pattern:TomTerm, subject:TomTerm)
//		   | NMatchConstraint(pattern:TomTerm, subject:TomTerm)
//		   | Exists(var:TomTerm,cons:Constraint)
//		   | ForAll(var:TomTerm,cons:Constraint)
		   | AntiMatchConstraint(Pattern:TomTerm, Subject:TomTerm, ActionOnIf : int)
		   | AndAntiConstraint(Constraint*)
		  /**
		   * <code>Sublist</code> a fixed length sublist 
   		   * <code>VariableSublist</code> a sublist with variable length
		   *
		   * @param list the list from which to extract the sublist 
   		   * @param start the start index of the sublist in the list
   		   * @param end the end index of the sublist in the list
   		   * @param maxLength the maximum length of the sublist
		   */
		   | Sublist(list:TomTerm, start:int, end:int)
  		   | VariableSublist(list:TomTerm, start:int, end:int, maxLength:int)

ConstraintList = concConstraint(Constraint*)