module TomTerm
imports TomSignature TomName int
abstract syntax

TomTerm =
  /**
   * <code>TermAppl</code> application of a symbol to a list of subterms
   * <code>ListAppl</code> application of a list-symbol to a list of subterms
   * <code>RecordAppl</code> application of a symbol to a list of pairs (slot,subterm)
   * <code>XMLAppl</code> application of a xml-symbol to a list of attributes and a list of subterms
   *
   * @param Option a list of options
   * @param NameList a list of head symbol names
   * @param Args a list of subterms
   * @param Slots a list of pairs (slot,subterm)
   * @param Constraints a list of constraints
   */
    | TermAppl(Option:OptionList,NameList:TomNameList,Args:TomList,Constraints:ConstraintList)
    | ListAppl(Option:OptionList,NameList:TomNameList,Args:TomList,Constraints:ConstraintList)
    | RecordAppl(Option:OptionList,NameList:TomNameList,Slots:SlotList,Constraints:ConstraintList)
    | XMLAppl(Option:OptionList,NameList:TomNameList,AttrList:TomList,ChildList:TomList,Constraints:ConstraintList)
  /**
   * <code>Variable</code> a variable
   * <code>VariableStar</code> a list-variable
   * <code>UnamedVariable</code> a variable without name
   * <code>UnamedVariableStar</code> a list-variable without name
   *
   * @param Option a list of options
   * @param AstName the name of the variable
   * @param AstType the type of the variable
   * @param Constraints a list of constraints
   */
    | Variable(Option:OptionList,AstName:TomName,AstType:TomType,Constraints:ConstraintList)
    | VariableStar(Option:OptionList,AstName:TomName,AstType:TomType,Constraints:ConstraintList)
    | UnamedVariable(Option:OptionList,AstType:TomType,Constraints:ConstraintList)
    | UnamedVariableStar(Option:OptionList,AstType:TomType,Constraints:ConstraintList)

  /**
   * <code>EmptyContext</code> used by the expander to denote an empty context
   */
    | EmptyContext()

  /**
   * <code>...ToTomTerm</code> wrappers to convert a type into TomTerm
   */
    | TargetLanguageToTomTerm(Tl:TargetLanguage)
    | TomTypeToTomTerm(AstType:TomType)
    | TomNameToTomTerm(AstName:TomName)
    | TomSymbolToTomTerm(AstSymbol:TomSymbol)
    | DeclarationToTomTerm(AstDeclaration:Declaration)
    | OptionToTomTerm(Option:OptionList)
    | ExpressionToTomTerm(AstExpression:Expression)
    | InstructionToTomTerm(AstInstruction:Instruction)

    | Tom(TomList:TomList)
    | BackQuoteAppl(Option:OptionList,AstName:TomName,Args:TomList)
    | DoubleBackQuote(Args:TomList)
    | Composite(Args:TomList)
    | SubjectList(TomList:TomList)
    | Term(TomTerm:TomTerm)
    | AntiTerm(TomTerm:TomTerm)
    | Subterm(AstName:TomName,SlotName:TomName,GroundTerm:TomTerm)
    | SymbolOf(groundTerm:TomTerm)
    | TLVar(StrName:String,AstType:TomType)
    | Ref(TomTerm:TomTerm)
    | BuildReducedTerm(Kid1:TomTerm)
    | FunctionCall(AstName:TomName,Args:TomList)
    | BuildConstant(AstName:TomName)
    | BuildTerm(AstName:TomName,Args:TomList,ModuleName:String)
    | BuildEmptyList(AstName:TomName)
    | BuildConsList(AstName:TomName,HeadTerm:TomTerm,TailTerm:TomTerm)
    | BuildAppendList(AstName:TomName,HeadTerm:TomTerm,TailTerm:TomTerm)
    | BuildEmptyArray(AstName:TomName,Size:int)
    | BuildConsArray(AstName:TomName,HeadTerm:TomTerm,TailTerm:TomTerm)
    | BuildAppendArray(AstName:TomName,HeadTerm:TomTerm,TailTerm:TomTerm)
    | TomInclude(TomList:TomList)
    | Automata(Option:OptionList,PatternList:TomList,NumberList:TomNumberList,Inst:Instruction)

PatternInstruction = PatternInstruction(Pattern:Pattern,Action:Instruction,Option:OptionList)

Pattern = Pattern(SubjectList:TomList,TomList:TomList,Guards:TomList)

PatternInstructionList = concPatternInstruction(PatternInstruction*)

PatternList = concPattern(Pattern*)

TomList = concTomTerm(TomTerm*)
