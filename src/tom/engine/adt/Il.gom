module Il
imports String int ATerm
abstract syntax
Symbol = fsymbol(name:String)
Variable=  var(name:String)

AbsTerm = absvar(varname:Variable)
				| st(symbol:Symbol,abst:AbsTerm,index:int)
				| sl(symbol:Symbol,abst:AbsTerm,name:String)

Term = tau(abst:AbsTerm)
		 | repr(term:String)
		 | subterm(symbol:Symbol,t:Term,index:int)
		 | slot(symbol:Symbol,t:Term,name:String)
		 |appSubsT(subs:SubstitutionList,t:Term)

Expr = iltrue(subst:SubstitutionList)
		 | ilfalse()
		 | isfsym(t:Term,symbol:Symbol)
		 | eq(lt:Term,rt:Term)
		 | tisfsym(abst:AbsTerm,symbol:Symbol)
		 | teq(labst:AbsTerm,rabst:AbsTerm)
		 | iland(left:Expr,right:Expr)
		 | ilor(left:Expr,right:Expr)
		 | ilnot(exp:Expr)
		 | appSubsE(subs:SubstitutionList,e:Expr)

Instr = accept(positive:ATerm,negative:ATerm)
			| refuse()
			| ITE(e:Expr,ift:Instr,iff:Instr)
			| ILLet(var:Variable,t:Term,body:Instr)
			| sequence(instrlist:InstrList)

InstrList = semicolon(Instr*)

Substitution = undefsubs()
						 | is(var:Variable,term:Term)

SubstitutionList = subs(Substitution *)
Environment = env(subs:SubstitutionList,i:Instr)

Seq =  seq()
		| dedexpr(exprs:ExprList)
		| dedterm(terms:TermList)

TermList = concTerm(Term *)
ExprList = concExpr(Expr *)

Deriv = ebs(lhs:Environment,rhs:Environment)
DerivTree = endderiv()
					| derivrule(name:String,post:Deriv,pre:DerivTree,cond:Seq)
					| derivrule2(name:String,post:Deriv,pre:DerivTree,pre2:DerivTree,cond:Seq)
