module TomInstruction
imports TomSignature
abstract syntax
Instruction = 
  | BQTermToInstruction(Tom:BQTerm)
  | ExpressionToInstruction(Expr:Expression)
  | CodeToInstruction(Code:Code)
  | If(Condition:Expression,SuccesInst:Instruction,FailureInst:Instruction)
  | DoWhile(DoInst:Instruction,Condition:Expression)
  | WhileDo(Condition:Expression,DoInst:Instruction)
            
  /**
   * <code>Let</code> declares and instanciates a variable surrounded by curlys - functional way
   * <code>LetRef</code> as above, but not functional
   *
   * @param Variable a variable
   * @param Source the value to give to the variable
   * @param AstInstruction next instruction
   */
  | Let(Variable:BQTerm,Source:Expression,AstInstruction:Instruction)
  | LetRef(Variable:BQTerm,Source:Expression,AstInstruction:Instruction)
  /**
   * <code>Assign</code> instanciates a variable
   *
   * @param Variable a variable
   * @param Source the value to give to the variable
   */
  | Assign(Variable:BQTerm,Source:Expression)
  | AssignArray(Variable:BQTerm,Index:BQTerm,Source:Expression)
  | Return(Kid1:BQTerm)
  | Nop()
  /*
   * <code>AbstrackBlock</code> conversion from InstructionList to Instruction
   * <code>UnamedBlock</code> a classical block: a list of instructions
   * <code>NamedBlock</code> a block with a label (for break statement)
   */
  | AbstractBlock(InstList:InstructionList)
  | UnamedBlock(InstList:InstructionList)
  | NamedBlock(BlockName:String,InstList:InstructionList)
  /**
   * <code>Match</code> a match instruction
   *
   * @param ConstraintInstructionList a list of (constraint and an action)
   */
  | Match(ConstraintInstructionList:ConstraintInstructionList, Options:OptionList)
  | CompiledMatch(AutomataInst:Instruction,Options:OptionList)
  | CompiledPattern(Contraint:Constraint,AutomataInst:Instruction)
  /*
   * a RawAction is an action that comes from the original program 
   */
  | RawAction(AstInstruction:Instruction)
  | ResolveStratInstruction(TargetType:TomType)
  | Tracelink(Type:TomName,Name:TomName,ElementaryTransfoName:TomName,Expr:Expression,OrgTrack:Option)//BQTerm, then blocklist
//  | TracelinkResolve()
  | TracelinkPopulateResolve(RefClassName:TomName,TracedLinks:TomNameList,Current:BQTerm)//QVariable
  | Resolve(Src:TomName,SType:TomName,Target:TomName,TType:TomName,OrgTrack:Option)
  | Resolve2(BQTerm:BQTerm,OrgTrack:Option)

RefClassTracelinkInstruction = RefClassTracelinkInstruction(Type:TomName,Name:TomName)

RefClassTracelinkInstructionList = concRefClassTracelinkInstruction(RefClassTracelinkInstruction*)

/*
 * <code>ConstraintInstruction</code> a line in a match instruction - a tuple (Constraint,Action)
 *
 * @param Constraint a constraint (can be a OR or an AND)
 * @param Action the action to execute if the constraints are evaluated to true
 */  
ConstraintInstruction = ConstraintInstruction(Constraint:Constraint, Action:Instruction, Options:OptionList)  
                      | ResolveConstraintInstruction(Constraint:Constraint, Options:OptionList)

RuleInstruction = RuleInstruction(TypeName:String,Term:TomTerm,Action:InstructionList,Options:OptionList)
RuleInstructionList = concRuleInstruction(RuleInstruction*)

ConstraintInstructionList = concConstraintInstruction(ConstraintInstruction*)    
  
InstructionList = concInstruction(Instruction*)
concInstruction:make_insert(e,l) {
  %match(e) {
    AbstractBlock(l1) -> { return `concInstruction(l1*,l*); }
  }
}
