%op Strategy TopDownWhenExpression(s:Strategy) {
  make(v) {( makeTopDownWhenExpression($v) )}
}

private static Strategy makeTopDownWhenExpression(Strategy s) {
  return `mu(MuVar("_x"),WhenExpression(Sequence(s,All(MuVar("_x"))))); 
}

public static class WhenExpression extends tom.library.sl.AbstractStrategyBasic {

  private  tom.library.sl.Strategy  s;
  
  public WhenExpression( tom.library.sl.Strategy  s) {
    super(( new tom.library.sl.Identity() ));
    this.s=s;
  }
  
  public  tom.library.sl.Strategy  gets() {
    return s;
  }

  public tom.library.sl.Visitable[] getChildren() {
    tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];
    stratChildren[0] = super.getChildAt(0);
    stratChildren[1] = gets();
    return stratChildren;
  }

  public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {
    super.setChildAt(0, children[0]);
    s = ( tom.library.sl.Strategy ) children[1];
    return this;
  }

  public int getChildCount() {
    return 2;
  }

  public tom.library.sl.Visitable getChildAt(int index) {
    switch (index) {
      case 0: return super.getChildAt(0);
      case 1: return gets();
      default: throw new IndexOutOfBoundsException();

    }
  }

  public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {
    switch (index) {
      case 0: return super.setChildAt(0, child);
      case 1: s = ( tom.library.sl.Strategy )child;
              return this;
      default: throw new IndexOutOfBoundsException();
    }
  }

  public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {
    if ( (v instanceof tom.engine.adt.tomexpression.types.Expression) ) {
      return s.visitLight(v,introspector);
    }
    return any.visitLight(v,introspector);
  }

}

%op Strategy WhenExpression(s:Strategy) {
  make(v) {( makeWhenExpression($v) )}
}

private static  tom.library.sl.Strategy  makeWhenExpression( tom.library.sl.Strategy  t0) { return new WhenExpression(t0);}    


/* only used for VariadicGenerator */

%op Strategy TopDownWhenExprConstrOrTerm(s:Strategy) {
  make(v) {( makeTopDownWhenExprConstrOrTerm($v) )}
}

private static Strategy makeTopDownWhenExprConstrOrTerm(Strategy s) {
  return `mu(MuVar("_x"),WhenExprConstrOrTerm(Sequence(s,All(MuVar("_x"))))); 
}

public static class WhenExprConstrOrTerm extends tom.library.sl.AbstractStrategyBasic {

  private  tom.library.sl.Strategy  s;
  
  public WhenExprConstrOrTerm( tom.library.sl.Strategy  s) {
    super(( new tom.library.sl.Identity() ));
    this.s=s;
  }
  
  public  tom.library.sl.Strategy  gets() {
    return s;
  }

  public tom.library.sl.Visitable[] getChildren() {
    tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];
    stratChildren[0] = super.getChildAt(0);
    stratChildren[1] = gets();
    return stratChildren;
  }

  public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {
    super.setChildAt(0, children[0]);
    s = ( tom.library.sl.Strategy ) children[1];
    return this;
  }

  public int getChildCount() {
    return 2;
  }

  public tom.library.sl.Visitable getChildAt(int index) {
    switch (index) {
      case 0: return super.getChildAt(0);
      case 1: return gets();
      default: throw new IndexOutOfBoundsException();

    }
  }

  public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {
    switch (index) {
      case 0: return super.setChildAt(0, child);
      case 1: s = ( tom.library.sl.Strategy )child;
              return this;
      default: throw new IndexOutOfBoundsException();
    }
  }

  public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {
    if (v instanceof tom.engine.adt.tomexpression.types.Expression || 
        v instanceof tom.engine.adt.code.types.BQTerm || 
        v instanceof tom.engine.adt.tomterm.types.TomTerm || 
        v instanceof tom.engine.adt.tomconstraint.types.Constraint) {
      return s.visitLight(v,introspector);
    }
    return any.visitLight(v,introspector);
  }

}

%op Strategy WhenExprConstrOrTerm(s:Strategy) {
  make(v) {( makeWhenExprConstrOrTerm($v) )}
}

private static  tom.library.sl.Strategy  makeWhenExprConstrOrTerm( tom.library.sl.Strategy  t0) { return new WhenExprConstrOrTerm(t0);}    
