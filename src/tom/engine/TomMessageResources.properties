##
# 
# TOM - To One Matching Compiler
# 
# Copyright (C) 2000-2004 INRIA
# Nancy, France.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 
# Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr
#
##
 
# Main messages
MainErrorMessage={0}:{1,number,integer}:Error:{2}
MainWarningMessage={0}:{1,number,integer}:Warning:{2}
DetailErrorMessage=In structure `{0}` declared line {1,number,integer} \n---> {2}
DetailWarningMessage=In structure `{0}` declared line {1,number,integer} \n---> {2}

# Tom.java
OutputTwice=Output filename specified twice
InvalidOption=`{0} is not a valid option
InvalidOutputDestdir=Cannot specify --output with --destdir
IncompleteOption=Expecting information after option: `{0}`
FileNotFound=File `{0}` not found
NoFileToCompile=No file to compile
OutputWithMultipleCompilation=Cannot specify --output with multiple compilations
IOException=IO Exception reading file `{0}`\n{1}

# Tom parser
TokenMgrError=TokenMgrError exception catched in file `{0}`\n{1}
ParseException=ParseException catched in file `{0}`\n{1}
UnhandledException=Unhandled exception occurs during parsing of file: `{0}`\n{1}
IncludedFileNotFound=Included file `{0}` not found at line {1,number,integer} in file `{2}`
IncludedFileCycle=Included file `{0}` found at line {1,number,integer} in file `{2}` forms a cycle
IncludedFileAlreadyParsed=Included file `{0}` found at line {1,number,integer} in file `{2} has already been parsed
ErrorWhileIncludindFile={0} occurs in parsing file `{1}` included in file {2} at line {3,number,integer}\n{4}
InvalidBackQuoteTerm=Invalid backquote term started line {0,number,integer}: EOF encountered 
VasClassNotFound=ClassNotFoundException: You need vas-to-adt to use the %vas construct
VasInvocationIssue=Exception occurs while dealing with VAS: {0}
ApigenClassNotFound=ClassNotFoundException: You need apigen to use the %vas construct
ApigenInvocationIssue=Exception occurs while dealing with Apigen: {0}
IOExceptionWithGeneratedTomFile=Generated file `{0}` from apigen in file `{1}` caused an IOException:\n{2};

#Error messages linked to operator and type definitions
MultipleSymbolDefinitionError=Multiple definition of Symbol `{0}`
SymbolCodomainError=Symbol `{0}` has an unknown return type: `{1}`
SymbolDomainError=Slot {0,number,integer} of symbol `{1}` declaration has an unknown type: `{2}`
MacroFunctionRepeated=Repeated macro-function `{0}`
NonLinearMacroFunction=Arguments must be linear in macro-function `{0}`: Variable `{1}` is repeated
MissingMacroFunctions=Missing macro-function(s) [ {0} ]
BadMakeDefinition=Bad number of arguments in 'make(...)' macro-function: {0,number,integer} arguments found but {1,number,integer} expected in symbol definition
ListSymbolDomainError=List symbol `{0}` has an unknown parameter type: `{1}`
	
#Error messages linked to slot declaration during parsing
RepeatedSlotName=Repeated slot `{0}` in symbol declaration
WarningTwoSameSlotDecl=Warning: GetSlot declaration `get_slot({0},...)` is repeated. Consider only the first one!!
WarningMissingSlotDecl=Warning: GetSlot declaration `get_slot({0},...)` is missing. Generic getsubterm macro will be used!!
WarningIncompatibleSlotDecl=Warning: Incompatible GetSlot declaration: `{0}` does not appears in symbol declaration
	
	
BadSlotName=Slot Name `{0}` is not correct for symbol `{1}`. Possible slot names are : {2}
		
UnknownMatchArgumentTypeInSignature=Variable `{0}` has an unknown type: `{1}`
	
RepeatedMatchArgumentName=Repeated variable `{0}` in `match` declaration
BadMatchNumberArgument=Bad number of arguments: {0,number,integer} argument(s) required by match signature but {1,number,integer} found
IncorrectVariableStarInMatch=Single list variable `{0}` is not allowed on top of `match` pattern
WrongMatchArgumentTypeInPattern=Wrong type for slot {0,number,integer}:Type `{1}` required but Type `{2}` found

UnknownSymbol=Unknown symbol `{0}`
UnknownSymbolInDisjunction=Unknown symbol `{0}` not allowed in disjunction
	
UnknowUnamedList=Not able to found a list symbol of type: `{0}`
AmbigousUnamedList=Too many list symbols with returned type `{0}`: {1}
InvalidCodomain=The symbol `{0}` has type `{1}` but type `{2}` was required
InvalidDisjunctionCodomain=The symbol `{0}` has type `{1}` but type `{2}` was required in disjunction
InvalidDisjunctionDomain=The symbol `{0}` has a different domain as first symbol in disjunction
	
BracketOnListSymbol=[] are not allowed on lists or arrays, see `{0}`
	
SlotRepeated=Same slot names can not be used several times in symbol `{0}`: Repeated slot Name : `{1}`
SymbolNumberArgument=Bad number of arguments for symbol `{0}`: {1,number,integer} argument(s) required but {2,number,integer} found;
	
	
InvalidVariableStarArgument={0} is not allowed in non list symbol 
AmbigousSymbolWithoutConstructor=Warning: Ambiguous symbol name. Is `{0}` a variable or a constructor? Prefer `{0}()` if it is a constructor

# rule
IncorrectRuleLHSClass=`{0}`: Impossible in rule left hand side
IncorrectRuleRHSClass=`{0}`: Impossible in rule right hand side
DifferentRuleConstructor=Rule head symbol name `{0}` expected, but `{1}` found
NoRuleMakeDecl=Rule head symbol `{0}` has no `make` method: It is necessary to define one!!
IncorrectRuleRHSType=Bad right hand side type: `{0}` instead of `{1}`
UnknownPermissiveSymbol=Unknown symbol `{0}`: Can't do further analyses
	
ImpossiblePermissiveAndDisjunction=Disjunction is not allowed after backquote (`) call
UnknownVariable=Unknown variable(s) `{0}`
BadVariableType=Variable `{0}` has type `{1}` instead of type `{2}`
IncoherentVariable=Bad variable type for `{0}`: it has both type `{1}` and `{2}`
	
MultipleRuleDefinition=Rule `{0}` is repeated
MalformedXMLTerm=Malformed XML pattern: expecting `{0}` but got `{1}`
