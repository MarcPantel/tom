/*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2017, Universite de Lorraine, Inria
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine;

import java.lang.Thread;
import java.lang.ThreadGroup;
import java.lang.Long;
import java.util.*;
import java.io.IOException;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import java.util.logging.MemoryHandler;
import java.util.logging.SocketHandler;
import java.util.logging.StreamHandler;

import java.text.MessageFormat;

import tom.platform.BasicFormatter;
import tom.platform.PluginPlatform;
import tom.platform.PluginPlatformFactory;
import tom.platform.ConfigurationManager;

/**
 * Main Tom project class
 */
public class Tom {

  /** The current version of the TOM compiler. */
  public final static String VERSION = "@TOM_VERSION@";

  /** Log radical string*/
  public final static String LOG_RADICAL = "tom.engine";
			
  /** "java.util.logging.config.file" */
  private final static String LOGGING_PROPERTY_FILE =
    "java.util.logging.config.file";

  /** The ConfigurationManager */
  // private static ConfigurationManager configurationManager;
  private final static Object lockGomExec = new Object();// verrou pour l'exec de Gom

  public synchronized static Object getLock() {
    return lockGomExec;
  }

  /** The root logger */
  private static Logger logger = Logger.getLogger(Tom.LOG_RADICAL);

  /** the console handler those level can be changed dynamically */
  private static Handler consoleHandler = null;

  /**
   * 0 -> Success
   * 1 -> Failure
   */
  public static void main(String[] args) {
    int errno = exec(args);
    System.exit(errno);
  }

  public static int exec(String[] args) {
    try {
      initializeLogging();
    } catch(Exception e) {
      System.err.println(MessageFormat.format(TomMessage.loggingInitializationFailure.getMessage(),new Object[]{e.getMessage()}));
      return 1;
    }

    // Retrieve the configuration file name
    String configFileName =
      PluginPlatformFactory.getInstance().extractConfigFileName(args);
    if (null == configFileName) {
      return 1;
    }
    // Create a ConfigurationManager in order to retrieve the 'global' inputToCompileList
    ConfigurationManager initConfigurationManager = new ConfigurationManager(configFileName);
    if (initConfigurationManager.initialize(args) == 1) {
      return 1;
    }

    if(((Boolean)initConfigurationManager.getOptionManager().getOptionValue("verbose")).booleanValue()) {
      TomMessage.info(logger, null, 0, TomMessage.tomExec, Arrays.toString(args));
    }

    // Retrieve the whole fileList that has to be compiled
    List<String> wholeInputToCompileList = initConfigurationManager.getOptionManager().getInputToCompileList();
    // here will be the choice between mono and multi thread
    if(((Boolean)initConfigurationManager.getOptionManager().getOptionValue("multithread")).booleanValue()) {
      //multi thread
      List<Thread> threadsList = new ArrayList<Thread>();
      /* Create the group of the new threads pool :
       * the new group name is obtained with the current thread ID
       * Therefore, groups created by differents threads have different name
       */
      ThreadGroup tomThreadGroup = new ThreadGroup(Long.toString(Thread.currentThread().getId()));
      int i;
      // Begin the creation/launching thread loop
      for (i=0;i<wholeInputToCompileList.size();i++) {
        // Create a PluginPlatform, using only one element of the wholeInputToCompileList
        // subList is used in order to be able to adapt the number of given files for one thread, but it's not optimal for a single file
        PluginPlatform platform =
          PluginPlatformFactory.getInstance().create(args,Tom.LOG_RADICAL,Arrays.asList(wholeInputToCompileList.get(i)));
          //PluginPlatformFactory.getInstance().create(args,Tom.LOG_RADICAL,wholeInputToCompileList.subList(i,i+1));
        if(platform == null) {
          return 1;
        }
        // Create a Thread whose thread group name is the current thread ID
        Thread thread = new Thread(tomThreadGroup,platform);
        // Add its unique ID in the informationTracker
        PluginPlatformFactory.getInstance().putPluginPlatform(thread.getId(),platform);
        // add the thread in the threads list
        threadsList.add(thread);
      }

      // Launching created threads
      for(i=0;i<threadsList.size();i++) {
        //System.out.println("(TomDebug) Thread #"+i+" starts (threadId="+threadsList.get(i).getId()+")");
        threadsList.get(i).start();
      }

      // while there are alive threads in the child group, the parent thread (current) sleeps/waits/gives resources to other threads
      // Pb : tomThreadGroup.activeCount <- there is a problem here :
      // This result seems to be an ESTIMATE and not the EXACT number of active threads in the group
      // But strangely, this method give the exact number when concerning a Thread and not a ThreadGroup
      // cf. Java API
      // The stop condition could be changed ?

      // Parent Thread is waiting that no child thread is active
      while(tomThreadGroup.activeCount()>0) {
        try {
        // Here, we use yield() (method which temporarly gives ressources to other running threads
        // seems that we lose perf with this loop : not a real passive wait
        // we should find an other solution

          Thread.yield();
          //Thread.sleep(1);
        } catch (Exception e) {
          System.err.println("(Tom) Exception in wait section : "+e);
        }
      }

      // Check the result of each thread
      for(i=0;i<threadsList.size();i++) {
        if (PluginPlatformFactory.getInstance().getPluginPlatform(threadsList.get(i).getId()).getRunResult() == 1) {
          System.err.println("Error : pluginPlatForm #"+i+" (threadID ="+threadsList.get(i).getId()+") did not finish correctly !");
          return 1;
        }
      }
      //System.out.println("(Tom) Done !");
      return 0;
    } else {
      // Single PluginPlatform
      PluginPlatform platform =
        PluginPlatformFactory.getInstance().create(args,Tom.LOG_RADICAL,wholeInputToCompileList);
      if(platform == null) {
        return 1;
      }
      platform.run();
    return platform.getRunResult();
    }
  }

  /**
   * This method should be used to change the Level of logging, instead of
   * directly accessing to the logger via Logger.getLogger("tom.engine").
   * Indeed, this method respect the fact that the logger's Level should
   * never ever be set higher than Level.WARNING, because it would cause the
   * StatusHandler to malfunction.
   *
   * @param newLevel the Level to which we want to set the log output
   */
  public static void changeLogLevel(Level newLevel) {
    /*
     * IMPORTANT: the rootLogger's Level can be lowered but shouldn't be risen.
     * Indeed, if it is higher than Level.WARNING, the StatusHandler won't
     * see warnings that's why the noWarning option is handled by changing the
     * ConsoleHandler's level while the verbose option lowers the rootLogger's
     * level to Level.INFO.
     */
    if(logger != null && newLevel.intValue() <= Level.WARNING.intValue()) {
      logger.setLevel(newLevel);
    }

    if(consoleHandler != null) {
      // if we've found a global console handler
      consoleHandler.setLevel(newLevel);
      // warnings are no more printed, but still seen by the StatusHandler
    }
  }

  private static void initializeLogging()
    throws IOException, InstantiationException, ClassNotFoundException,
           IllegalAccessException {
    String loggingConfigFile = System.getProperty(LOGGING_PROPERTY_FILE);
    if (loggingConfigFile == null) { // default > no custom file is used
      // create a config equivalent to defaultlogging.properties file
      initTomRootLogger(false);
      logger.setLevel(Level.WARNING);
      consoleHandler = new ConsoleHandler();
      consoleHandler.setLevel(Level.ALL);
      consoleHandler.setLevel(Level.SEVERE);
      // by default, print everything that the logger sends
      consoleHandler.setFormatter(new BasicFormatter());
      logger.addHandler(consoleHandler);
    } else { // custom configuration file for LogManager is used
      LogManager.getLogManager().readConfiguration();
      initTomRootLogger(true);
      PluginPlatformFactory.refreshTopLoggerHandlers();
    }
  }

  /**
   * initTomRootLogger set the useParentHandlers flag and
   * remove all pre-existing handlers that might exist from prior uses
   * especially for multiple invocation in the same VM
   */
  private static void initTomRootLogger(boolean useParentHandler) {
    logger.setUseParentHandlers(useParentHandler);
    Handler[] handlers = logger.getHandlers();
    for(int i = 0; i < handlers.length; i++) {
      logger.removeHandler(handlers[i]);
    }
  }
}
