options {
   JAVA_UNICODE_ESCAPE = true;
   STATIC = false;
   //DEBUG_PARSER = true;
   //DEBUG_TOKEN_MANAGER = true;
 //DEBUG_LOOKAHEAD = true;
 }
 
 PARSER_BEGIN(TomJavaParser) 
 /*
  *   
  * TOM - To One Matching Compiler
  * 
  * Copyright (C) 2000-2004 INRIA
  * Nancy, France.
  * 
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  * 
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  *
  * Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr
  *
  **/

package jtom.parser;

import java.io.*;
import java.util.*;
import java.text.*;

import jtom.TomEnvironment;
import jtom.exception.*;
import jtom.tools.*;
import jtom.TomMessage;

public class TomJavaParser {
  public static TomJavaParser createParser(String fileName) throws FileNotFoundException,IOException {
      File file = new File(fileName);
      byte inputBuffer[] = new byte[(int)file.length()+1];
      InputStream input = new FileInputStream(file);
      input.read(inputBuffer);
      return new TomJavaParser(new TomBuffer(inputBuffer));
  }

  public int getLine() {
    return  token.beginLine;
  }
}

PARSER_END(TomJavaParser)



/************************************************************
 * JAVA MODE
 ************************************************************/
/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "//" : JAVA_IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : JAVA_IN_FORMAL_COMMENT
|
  "/*" : JAVA_IN_MULTI_LINE_COMMENT
}

<JAVA_IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <JAVA_SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<JAVA_IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <JAVA_FORMAL_COMMENT: "*/" > : DEFAULT
}

<JAVA_IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <JAVA_MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<JAVA_IN_SINGLE_LINE_COMMENT,JAVA_IN_FORMAL_COMMENT,JAVA_IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA IDENTIFIERS */
TOKEN :
{
  < JAVA_PACKAGE: "package">
| < JAVA_SEMICOLON: ";" >
| < JAVA_DOT: "." >
| < JAVA_IDENTIFIER: <JAVA_LETTER> (<JAVA_LETTER>|<JAVA_DIGIT>)* >
| < #JAVA_LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #JAVA_DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < JAVA_OTHER: ~[] >

}

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

String JavaPackageDeclaration() :
{ 
  String packageName = ""; 
}
{
  <JAVA_PACKAGE> packageName = JavaName() <JAVA_SEMICOLON>
  {
    return packageName;
  }
 | [ <JAVA_OTHER> ]
  {
    return packageName;
  }

}

String JavaName() : /* in JAVA mode */
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  String packageName = ""; 
}
{
  <JAVA_IDENTIFIER> { packageName += token.image; }
  ( LOOKAHEAD(2) <JAVA_DOT> <JAVA_IDENTIFIER> { packageName += "." + token.image; }
  )*
  {
    return packageName;
  }
}
