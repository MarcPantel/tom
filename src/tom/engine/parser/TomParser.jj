options {
  JAVA_UNICODE_ESCAPE = true;
    //DEBUG_PARSER = true;
  STATIC = false;
}

PARSER_BEGIN(TomParser) 
/*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2)
			     Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.parser;

import java.io.*;
import java.util.*;

import aterm.*;
import aterm.pure.*;

import jtom.*;
import jtom.tools.*;

import jtom.exception.*;
import jtom.adt.*;

public class TomParser {

  private int oldPos=0;
  private int oldLine=0;
  private int includeOffSet=0;
  private Position orgTrack;
  private TomBuffer tomBuffer;
  private SymbolTable symbolTable;
  private jtom.TomEnvironment environment;
  private File importList[];
  private static HashSet includedFiles = new HashSet();
  private String currentFile;
  private ArrayList debuggedStructureList;
  private String text="";
  
  public TomParser(TomBuffer input, jtom.TomEnvironment environment, File importList[], int includeOffSet, String fileName) {
    this(input);
    this.tomBuffer = input;
    this.symbolTable = environment.getSymbolTable();
    this.environment = environment;
    this.importList = importList;
    this.includeOffSet = includeOffSet;
    this.orgTrack = makePosition(1,1);
    this.currentFile = fileName;
    this.debuggedStructureList = new ArrayList();
    if(!includedFiles.contains(fileName)) {
      includedFiles.add(fileName);
    } else {
      System.out.println("Re-entering included file forms a cycle. Breaking the parsing...");
      System.exit(1);        
    }
  }
	
  public jtom.TomEnvironment environment() { 
    return environment;
  }

  public TomSignatureFactory tsf() {
    return environment.getTomSignatureFactory();
  }
  
  public ASTFactory ast() {
    return environment.getASTFactory();
  }
  
  private String getLine() {
    return  (java.lang.String.valueOf(token.beginLine+includeOffSet));
  }

  private int getPos() {
    return jj_input_stream.getBeginOffset();
  }

  private String savePosAndExtract() {
    environment.getStatistics().numberStrangerBlocsRecognized++;
    return savePosAndExtract(0);
  }
  
  private String savePosAndExtract(int offset) {
    String string;
    string = tomBuffer.extractBuffer(oldPos,getPos() + offset);
    oldPos = getPos() + offset;
    return string;
  }

  private TomSymbol getSymbol(String name) {
    return symbolTable.getSymbol(name);
  }

  private void putSymbol(String name, TomSymbol symbol) {
    symbolTable.putSymbol(name,symbol);
  }

  private TomType getType(String name) {
    return symbolTable.getType(name);
  }

  private void putType(String name, TomType type) {
    symbolTable.putType(name,type);
  }

  private void switchToTomMode() {
    token_source.SwitchTo(TOM);
  }

  private void switchToDefaultMode() {
    token_source.SwitchTo(DEFAULT);
    oldPos = getPos() + token.image.length();
    oldLine = Integer.valueOf( getLine() ).intValue();
    orgTrack = makePosition(token.beginLine,token.beginColumn);
  }
  
  public Position makePosition(int line, int column) {
    return  tsf().makePosition_Position(new Integer(line+includeOffSet), new Integer(column));
  }
  
  private TargetLanguage makeTL(String code) {
    Position newOriginTracking = makePosition(token.beginLine,token.beginColumn);
    return tsf().makeTargetLanguage_TL(code, orgTrack, newOriginTracking); 
  }
  
  public TomStructureTable getStructTable() {
    TomList list = ast().makeList(debuggedStructureList);
    return tsf().makeTomStructureTable_StructTable(list);
  }

  private void addPreviousCode(ArrayList list) {
    String code = savePosAndExtract();
    String pureCode = code.replace('\t', ' ');
    pureCode = pureCode.replace('\n', ' ');
    if(pureCode.matches("\\s*")) {
      return;
    }
    if (code.equals("")) {return ;}
    list.add(makeTL(code));
  }
}

PARSER_END(TomParser)


/**********************************************
 * THE TOM TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/************************************************************
 * DEFAULT MODE
 ************************************************************/
  
TOKEN :
{
    < MATCH:               "%match" > : TOM
  | < RULE:                "%rule" > : TOM
  | < MAKE_TERM:           "%make" > : TOM
  | < BACKQUOTE_TERM:      "`" > : TOM
  | < VARIABLE:            "%variable" > : TOM
  | < TYPE:                "%type" > : TOM
  | < TYPETERM:            "%typeterm" > : TOM
  | < TYPEINT:             "%typeint" > : TOM
  | < TYPELIST:            "%typelist" > : TOM
  | < TYPEARRAY:           "%typearray" > : TOM
  | < INCLUDE:             "%include" > : TOM
  | < OPERATOR:            "%op" > : TOM
  | < OPERATOR_LIST:       "%oplist" > : TOM
  | < OPERATOR_ARRAY:      "%oparray" > : TOM
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
//| "--" : IN_SINGLE_LINE_COMMENT
| <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

SPECIAL_TOKEN :
{
 < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* SEPARATORS */

TOKEN :
{
  < LBRACE: "{" >
| < RBRACE: "}" >
| < OTHER: ~[] >
}



/************************************************************
 * TOM MODE
 ************************************************************/


/* TOM WHITE SPACE */
<TOM>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* TOM COMMENTS */
<TOM>
MORE :
{
  "//" : TOM_IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : TOM_IN_FORMAL_COMMENT
|
  "/*" : TOM_IN_MULTI_LINE_COMMENT
}

<TOM_IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <TOM_SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : TOM
}

<TOM_IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <TOM_FORMAL_COMMENT: "*/" > : TOM
}

<TOM_IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <TOM_MULTI_LINE_COMMENT: "*/" > : TOM
}

<TOM_IN_SINGLE_LINE_COMMENT,TOM_IN_FORMAL_COMMENT,TOM_IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* TOM IDENTIFIERS */
<TOM>
TOKEN :
{
  < TOM_ARROW:       "->" >
| < TOM_DOUBLE_ARROW:"=>" >
| < TOM_ALTERNATIVE: "|" >
| < TOM_COMMA:       "," >
| < TOM_COLON:       ":" >
| < TOM_EQUAL:       "=" >
| < TOM_AT:          "@" >
| < TOM_DOT:         "." >
| < TOM_LPAREN:      "(" >
| < TOM_RPAREN:      ")" >
| < TOM_LBRACKET:    "[" >
| < TOM_RBRACKET:    "]" >
| < TOM_LBRACE:      "{" >
| < TOM_RBRACE:      "}" >
| < TOM_UNDERSCORE:  "_" >
| < TOM_MINUS:       "-" >
| < TOM_STAR:        "*" >
| < TOM_WHERE:       "where" >
| < TOM_IF:          "if" >
| < TOM_MAKE:        "make" >
| < TOM_MAKE_EMPTY:  "make_empty" >
| < TOM_MAKE_INSERT: "make_insert" >
| < TOM_MAKE_APPEND: "make_append" >
| < TOM_IMPLEMENT:   "implement" >
| < TOM_FSYM:        "fsym" >
| < TOM_GET_SLOT:    "get_slot" >
| < TOM_IS_FSYM:     "is_fsym" >
| < TOM_GET_SUBTERM: "get_subterm" >
| < TOM_GET_FUN_SYM: "get_fun_sym" >
| < TOM_CMP_FUN_SYM: "cmp_fun_sym" >
| < TOM_EQUALS:      "equals" >
| < TOM_GET_HEAD:    "get_head" >
| < TOM_GET_TAIL:    "get_tail" >
| < TOM_IS_EMPTY:    "is_empty" >
| < TOM_GET_ELEMENT: "get_element" >
| < TOM_GET_SIZE:    "get_size" >
| < TOM_INTEGER: <TOM_DIGIT> (<TOM_DIGIT>)* >
| < TOM_IDENTIFIER: <TOM_LETTER> (<TOM_LETTER>|<TOM_DIGIT>|<TOM_DOT>|<TOM_UNDERSCORE>|<TOM_MINUS>)* >
| < #TOM_LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #TOM_DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************************
 * THE TOM GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

TomTerm startParsing() throws TomException : /* in DEFAULT mode */
{
  String upToEOF; 
  TomTerm parseTree = null;
  ArrayList blockList = new ArrayList();
}
{
  BlockList(blockList)
    {
      upToEOF = tomBuffer.extractBuffer(oldPos,getPos());
      blockList.add(makeTL(upToEOF));
      parseTree = tsf().makeTomTerm_Tom(ast().makeList(blockList));
    }
  <EOF>
    {
      return parseTree;
    } 
}

void BlockList(ArrayList blockList) throws TomException : /* in DEFAULT mode */
{}
{
  (
      MatchConstruct(blockList)          { environment.getStatistics().numberTomBlocsRecognized++; }
    | RuleConstruct(blockList)           { environment.getStatistics().numberTomBlocsRecognized++; }
    | BackQuoteTerm(blockList)           { environment.getStatistics().numberTomBlocsRecognized++; }
    | IncludeConstruct(blockList)        { environment.getStatistics().numberTomBlocsRecognized++; }
    | LocalVariableConstruct(blockList)  { environment.getStatistics().numberTomBlocsRecognized++; }
    | Operator(blockList)                { environment.getStatistics().numberTomBlocsRecognized++; }
    | OperatorList(blockList)            { environment.getStatistics().numberTomBlocsRecognized++; }
    | OperatorArray(blockList)           { environment.getStatistics().numberTomBlocsRecognized++; }
    | TypeTerm(blockList)                { environment.getStatistics().numberTomBlocsRecognized++; }
    | TypeInt(blockList)                 { environment.getStatistics().numberTomBlocsRecognized++; }
    | TypeList(blockList)                { environment.getStatistics().numberTomBlocsRecognized++; }
    | TypeArray(blockList)               { environment.getStatistics().numberTomBlocsRecognized++; }
    | <LBRACE> BlockList(blockList) <RBRACE>
    | <OTHER>
  )*
}

void MatchConstruct(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  environment.getStatistics().numberMatchBlocsRecognized++;
  ArrayList matchArgumentsList = new ArrayList();
  ArrayList patternActionList = new ArrayList();
  ArrayList optionList = new ArrayList();
}
{
  <MATCH> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      Option orgTrack = ast().makeOriginTracking("Match",getLine(), currentFile);
      optionList.add(orgTrack);
      String debugKey = orgTrack.getFileName().getString() + orgTrack.getLine().toString();
    }

  <TOM_LPAREN> MatchArguments(matchArgumentsList) <TOM_RPAREN>

  <TOM_LBRACE> ( PatternAction(patternActionList, debugKey) )* <TOM_RBRACE> /* we are in TOM mode */
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      Option option = ast().makeOption(ast().makeOptionList(optionList));
      TomTerm_Match match = tsf().makeTomTerm_Match(tsf().makeTomTerm_SubjectList( ast().makeList(matchArgumentsList)),
                                                    tsf().makeTomTerm_PatternList( ast().makeList(patternActionList)),
                                                    option);
      list.add(match);
      if (Flags.debugMode)
        debuggedStructureList.add(match);
    }
}

void PatternAction(ArrayList list, String debugKey) throws TomException: /* in TOM mode */
{
  environment.getStatistics().numberMatchRulesRecognized++;
  ArrayList matchPatternsList = new ArrayList();
  ArrayList listTextPattern = new ArrayList();
  ArrayList listOrgTrackPattern = new ArrayList();
  ArrayList listOfMatchPatternsList = new ArrayList();
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option option;
  text = "";
}
{
  option = MatchPatterns(matchPatternsList)
    { listOfMatchPatternsList.add(ast().makeList(matchPatternsList));
      matchPatternsList.clear();
      listTextPattern.add(text);text = "";
      listOrgTrackPattern.add(option);
    }
  [ ( <TOM_ALTERNATIVE>  MatchPatterns(matchPatternsList) 
    { listOfMatchPatternsList.add(ast().makeList(matchPatternsList));
      matchPatternsList.clear();
      listTextPattern.add(text);text = "";
      listOrgTrackPattern.add(option);
    }
    )+ ]
  <TOM_ARROW>
    {
      if(Flags.debugMode) {
        blockList.add(tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.patternSuccess(\""+debugKey+"\");\n"));
        if(Flags.debugMemory) {
          blockList.add(tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.emptyStack();\n"));
        }
      }
    }
  tlCode = GoalLanguageBlock(blockList)
    {
      blockList.add(tlCode);
      TomList patterns;
      String patternText = "";
      ArrayList optionList = new ArrayList();
      for(int i=0 ;  i<listOfMatchPatternsList.size() ; i++) {
        patterns = (TomList)listOfMatchPatternsList.get(i);
        patternText = (String)listTextPattern.get(i);
        optionList.add(listOrgTrackPattern.get(i));
        optionList.add(tsf().makeOption_OriginalText(tsf().makeTomName_Name(patternText)));
        option = ast().makeOption(ast().makeOptionList(optionList));;
        list.add(tsf().makeTomTerm_PatternAction(
                   tsf().makeTomTerm_TermList(patterns),
                   tsf().makeTomTerm_Tom(ast().makeList(blockList)),
                   option));
      }
    }
}

void MatchArguments(ArrayList list) throws TomException: /* in TOM mode */
{}
{
  MatchArgument(list) ( <TOM_COMMA> MatchArgument(list) )*
}

void MatchArgument(ArrayList list) throws TomException: /* in TOM mode */
{
  Token type,name;
}
{
  type=<TOM_IDENTIFIER> name=<TOM_IDENTIFIER>
  {  	list.add(tsf().makeTomTerm_TLVar(
                   name.image,
                   tsf().makeTomType_TomTypeAlone(type.image)));
  }
}

Option MatchPatterns(ArrayList list) throws TomException: /* in TOM mode */
{
  TomTerm term;
  Option orgTrack;
} 
{
  term=Term()
    {
      list.add(term);
      orgTrack = ast().makeOriginTracking("Pattern",getLine(), currentFile);
    }
    ( <TOM_COMMA> {text += "\n";} term=Term() { list.add(term); } )*
    { return orgTrack;}
}



TomTerm PlainTerm(TomName astAnnotedName) throws TomException: /* in TOM mode */
{
  ArrayList list = new ArrayList();
  Token name, slotName;
  TomTerm term;
  Option option = null;
  Option annotedName = (astAnnotedName==null)?null:tsf().makeOption_TomNameToOption(astAnnotedName);
  ArrayList optionList = new ArrayList();
}
{
    // f[left=a,...]
    LOOKAHEAD(2)
    name = <TOM_IDENTIFIER> <TOM_LBRACKET>
      {optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
       text += name.image +"[";
      }
    [ slotName = <TOM_IDENTIFIER> <TOM_EQUAL> {text += slotName.image + "=";} term = Term()
      { list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term)); }
      ( <TOM_COMMA> {text += ",";}
        slotName = <TOM_IDENTIFIER> <TOM_EQUAL> {text += slotName.image + "=";} term = Term()
        { list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term)); }
      )*
    ]
    <TOM_RBRACKET>
    {
      text += "]";
      if(annotedName!=null) { optionList.add(annotedName); }
      option = ast().makeOption(ast().makeOptionList(optionList));
      return tsf().makeTomTerm_RecordAppl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));
    }
  | // X*
    LOOKAHEAD(2)
    name = <TOM_IDENTIFIER> <TOM_STAR>
    {
      text += name.image+"*";
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      return ast().makeVariableStar(option,name.image,"unknown type");
    }
  | // f(a,...), x. g()
    name = <TOM_IDENTIFIER>
      {optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      text += name.image;
      }
    [ <TOM_LPAREN> {text += "(";}
      [
      term = DotTerm()               { list.add(term); }
      ( <TOM_COMMA> {text += " , ";} term = DotTerm() { list.add(term); } )*
      ]
      <TOM_RPAREN>
      {
        text += ")";
        if(list.isEmpty()) {
 	  // check if it is a constant
          optionList.add(tsf().makeOption_Constructor(tsf().makeTomName_Name(name.image)));
        }	
      }
    ]
    {
      if(annotedName!=null) { optionList.add(annotedName); }
      option = ast().makeOption(ast().makeOptionList(optionList));
      return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));
    }
  | // _
    <TOM_UNDERSCORE>
    {
      text += "_";
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking("_",getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      return tsf().makeTomTerm_Placeholder(option);
    }
  | // integer
    name = <TOM_INTEGER>
    {
      text += name.image;
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      ast().makeIntegerSymbol(symbolTable,name.image,optionList);
      
      return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        tsf().makeTomList_Empty());
    }
}

TomTerm Term() throws TomException: /* in TOM mode */
{
  Token annotedName = null;
  TomTerm term;
  TomName astAnnotedName = null;
}
{
    // foo@PlainTerm()
    LOOKAHEAD(2) 
    annotedName = <TOM_IDENTIFIER> <TOM_AT>
      { text += annotedName.image+"@";
      astAnnotedName = tsf().makeTomName_Name(annotedName.image); }
    term = PlainTerm(astAnnotedName)
    {
      return term;
    }
  | // PlainTerm()
    term = PlainTerm(astAnnotedName) 
      {
        return term;
      }
}

TomTerm DotTerm() throws TomException: /* in TOM mode */
{
  TomTerm term = null;
  TomTerm dotterm = null;
}
{
  term = Term() [ <TOM_DOT> {text += ".";} dotterm = Term()  ]
    {
      if(dotterm != null) {
        return tsf().makeTomTerm_DotTerm(term,dotterm);
      } else {
        return term;
      }
    }
}

void BackQuoteTerm(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  TomTerm term;
  Option orgTrack;
}
{
  <BACKQUOTE_TERM> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      orgTrack = ast().makeOriginTracking("Backquote",getLine(), currentFile);
    }
  term = Term()
  {
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_BackQuoteTerm(term, orgTrack));
  }
}


void LocalVariableConstruct(ArrayList list) throws TomException: /* in DEFAULT mode */
{}
{
  <VARIABLE> /* switch to TOM mode */
  {
    addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_LocalVariable());
  }
}

void IncludeConstruct(ArrayList list) throws TomException : /* in DEFAULT mode */
{
  Token fileName;
  TomTerm astTom;
  InputStream input;
  File file;
  byte inputBuffer[];
  TomParser tomParser;
}
{
  <INCLUDE> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  <TOM_LBRACE> fileName = <TOM_IDENTIFIER> <TOM_RBRACE>
  {
    switchToDefaultMode(); /* switch to DEFAULT mode */
    try {
      file = new File(fileName.image);
      if(!file.exists()) {
        boolean found = false;
        for(int i=0 ; !found && i<importList.length ; i++) {
          file = new File(importList[i],fileName.image);
          found = file.exists();
        }
      }

        // to get the length of the file
      inputBuffer = new byte[(int)file.length()+1];
      input       = new FileInputStream(file);
      input.read(inputBuffer);
      
      tomParser   = new TomParser(new TomBuffer(inputBuffer),environment(),importList, 0, fileName.image);
      astTom = tomParser.startParsing();
      astTom = tsf().makeTomTerm_TomInclude(astTom.getList());
      list.add(astTom);
        //TomList includeList = astTom.getList();
        //while(!includeList.isEmpty()) {
        //list.add(includeList.getHead());
        //includeList = includeList.getTail();
        //}
    } catch (FileNotFoundException e1) {
      System.out.println("Included file " + fileName.image + " not found at line "+getLine());
      //e1.printStackTrace();
	System.exit(1);
    }  catch (java.io.IOException e2) {
      e2.printStackTrace();
    }
   }
}

void RuleConstruct(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  environment.getStatistics().numberRuleBlocsRecognized++;
  TomTerm lhs, rhs;
  TomTerm pattern, subject;
  ArrayList ruleList = new ArrayList();
  ArrayList listOfLhs = new ArrayList();
  ArrayList condList = new ArrayList();
  ArrayList nameTypeInRule = new ArrayList();
  Option orgTrackRuleSet;
  TomName orgText;
}
{
  <RULE> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      orgTrackRuleSet = ast().makeOriginTracking("Rule",getLine(), currentFile);
      text = "";
    }
  <TOM_LBRACE> 
  (
    lhs = Term() { listOfLhs.add(lhs); }
    [ ( <TOM_ALTERNATIVE> {text += " | ";} lhs = Term() { listOfLhs.add(lhs); } )+ ]
    <TOM_ARROW> {orgText = tsf().makeTomName_Name(text);} rhs = PlainTerm(null)
    [ (
      <TOM_WHERE> pattern = Term() <TOM_COLON> <TOM_EQUAL> subject = Term()
      { condList.add(tsf().makeTomTerm_MatchingCondition(pattern,subject)); }
    | <TOM_IF> pattern = Term() <TOM_EQUAL> <TOM_EQUAL> subject = Term()
      { condList.add(tsf().makeTomTerm_EqualityCondition(pattern,subject)); }
    )+ ]
    
    {
      Option orgTrack = ast().makeOriginTracking("Pattern",getLine(), currentFile);
      environment.getStatistics().numberRuleRulesRecognized++;
      ArrayList optionList = new ArrayList();
      optionList.add(orgTrack);
      optionList.add(tsf().makeOption_OriginalText(orgText));
      for(int i=0 ; i<listOfLhs.size() ; i++) {
        TomTerm term = (TomTerm) listOfLhs.get(i);
        ruleList.add(tsf().makeTomTerm_RewriteRule(
                       tsf().makeTomTerm_Term(term),
                       tsf().makeTomTerm_Term(rhs),
                       ast().makeList(condList),
                       ast().makeOption(ast().makeOptionList(optionList))));
      }
      listOfLhs.clear();
      condList.clear();
      text="";
    }
  )*
    <TOM_RBRACE>
  {
    switchToDefaultMode(); /* switch to DEFAULT mode */
    TomTerm_RuleSet rule = tsf().makeTomTerm_RuleSet(ast().makeList(ruleList), orgTrackRuleSet);
    list.add(rule);
    if (Flags.debugMode)
      debuggedStructureList.add(rule);
  }
}



/*
 * Operator Declaration
 *
 * in DEFAULT mode
 */

void Operator(ArrayList list) throws TomException : /* in DEFAULT mode */
{
  Token type, name, typeArg, slotName;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  ArrayList options = new ArrayList();
  ArrayList nameList = new ArrayList();
  Map mapNameDecl = new HashMap();
  Set setSlotDecl = new HashSet();
  TomName astName;
  TomSymbol astSymbol;
  String stringSlotName;
  TargetLanguage tlFsym;
  Declaration attribute;
  TomType tomType;
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
}
{
  <OPERATOR> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  
  type = <TOM_IDENTIFIER>
  name = <TOM_IDENTIFIER>
    {    options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));}
  [ <TOM_LPAREN>

      { stringSlotName = ""; }
      [ LOOKAHEAD(2)
        slotName = <TOM_IDENTIFIER> <TOM_COLON> { stringSlotName = slotName.image; }
      ]
      typeArg = <TOM_IDENTIFIER>
      {
        setSlotDecl.add(stringSlotName);
        nameList.add(ast().makeName(stringSlotName)); 
        types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
      }
      ( <TOM_COMMA>
        { stringSlotName = ""; }
        [ LOOKAHEAD(2)
          slotName = <TOM_IDENTIFIER> <TOM_COLON> { stringSlotName = slotName.image; }
        ]
        typeArg = <TOM_IDENTIFIER>
        {
          if (!stringSlotName.equals("")) {
            if (!setSlotDecl.contains(stringSlotName)) {
              setSlotDecl.add(stringSlotName);
            }
            else {
              System.out.println("\nRepeated slot '"+stringSlotName+"' in operator declaration\n-- Error occured at line "+getLine());
            }
          }
          nameList.add(ast().makeName(stringSlotName));
	  types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
        }
      )*
      <TOM_RPAREN> ]

  <TOM_LBRACE>
    tlFsym = KeywordFsym()
    {
      astName   = tsf().makeTomName_Name(name.image);
    }
    ( 
      attribute = KeywordMake(name.image,tsf().makeTomType_TomTypeAlone(type.image),types)  { options.add(attribute); }
    | attribute = KeywordGetSlot(astName, type.image)
      {
        TomName sName = attribute.getSlotName();
        if (mapNameDecl.get(sName)==null) {
          mapNameDecl.put(sName,attribute);
        }
        else {
          System.out.println("\nGetSlot declaration 'get_slot("+sName.getString()+",...)' is repeated in operator declaration\n-- Error occured at line: "+getLine());
        }
      }
    | attribute = KeywordIsFsym(astName, type.image)  { options.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */

      for(int i=nameList.size()-1; i>=0 ; i--) {
        TomName name1 = (TomName)nameList.get(i);
        PairNameDecl pair = null;
        Declaration emptyDeclaration = tsf().makeDeclaration_EmptyDeclaration();
        if(name1.isEmptyName()) {
          pair = tsf().makePairNameDecl_Slot(name1,emptyDeclaration);
        } else {
          Declaration decl = (Declaration)mapNameDecl.get(name1);
          if(decl == null) {
            decl = emptyDeclaration;
          }
          else {
            mapNameDecl.remove(name1);
          }
          pair = tsf().makePairNameDecl_Slot(name1,decl);
        }
        slotList = tsf().makeSlotList_ConsSlotList(pair,slotList);
      }
        // Test if there are still declaration in mapNameDecl
      if ( !mapNameDecl.isEmpty()) {
        if(!Flags.noWarning) {
          System.out.println("\nSome GetSlot declaration are incompatible with operator signature");
          System.out.println("*** This concerns following slotname:"+ mapNameDecl.keySet()+" \n-- Error occured at line: "+getLine());
        }
      }
      
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_SymbolDecl(astName));
      putSymbol(name.image,astSymbol);
    }
}

void OperatorList(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  Token type, name, typeArg;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
  ArrayList options = new ArrayList();
  TomSymbol astSymbol;
  TomName astName;
  TargetLanguage tlFsym;
  Declaration attribute;  
}
{
  <OPERATOR_LIST> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  type = <TOM_IDENTIFIER> name = <TOM_IDENTIFIER>
    { options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));}
         <TOM_LPAREN> typeArg = <TOM_IDENTIFIER> <TOM_STAR> <TOM_RPAREN>
    {
      types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
    }
  <TOM_LBRACE>
    tlFsym = KeywordFsym()
    ( 
      attribute = KeywordMakeEmptyList(name.image)                             { options.add(attribute); }
    | attribute = KeywordMakeAddList(name.image, type.image, typeArg.image)    { options.add(attribute); }
    | attribute = KeywordIsFsym(tsf().makeTomName_Name(name.image), type.image)  { options.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList_ConsSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ListSymbolDecl(astName));
      putSymbol(name.image,astSymbol);
    }
}

void OperatorArray(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  Token type, name, typeArg;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
  ArrayList options = new ArrayList();
  TomName astName;
  TomSymbol astSymbol;
  TargetLanguage tlFsym;
  Declaration attribute;
}
{
  <OPERATOR_ARRAY> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  type = <TOM_IDENTIFIER> name = <TOM_IDENTIFIER>
    { options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));}
         <TOM_LPAREN> typeArg = <TOM_IDENTIFIER> <TOM_STAR> <TOM_RPAREN>
         { 
 	   types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
         }
  <TOM_LBRACE>
    tlFsym = KeywordFsym()
    ( 
      attribute = KeywordMakeEmptyArray(name.image, type.image)              { options.add(attribute); }
    | attribute = KeywordMakeAddArray(name.image, type.image, typeArg.image) { options.add(attribute); }
    | attribute = KeywordIsFsym(tsf().makeTomName_Name(name.image), type.image)  { options.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList_ConsSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ArraySymbolDecl(astName));
      putSymbol(name.image,astSymbol);
    }
}

/*
 * Type Declaration
 *
 * in DEFAULT mode
 */

void TypeTerm(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
}
{
  (
    <TYPETERM> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  | 
    <TYPE> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      if(!Flags.noWarning) {
        System.out.println("Warning: %type is obsolete");
      }
    }
  )  
  type=<TOM_IDENTIFIER>
    { orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile);}
  <TOM_LBRACE>
    implement = KeywordImplement()
    ( 
      attribute = KeywordGetFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordGetSubterm(type.image) { blockList.add(attribute); }
    | attribute = KeywordCmpFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordEquals(type.image)     { blockList.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeTermDecl(name, ast().makeList(blockList), orgTrack));
    }
}

void TypeInt(ArrayList list) throws TomException: /* in DEFAULT mode */
{}
{
  <TYPEINT> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      switchToDefaultMode(); /* switch to DEFAULT mode */
      ast().makeIntegerDecl(list);
    }
}

void TypeList(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
}
{
  <TYPELIST> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  
  type=<TOM_IDENTIFIER>
    { orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile); }
  <TOM_LBRACE>
    implement = KeywordImplement()
    ( 
      attribute = KeywordGetFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordGetSubterm(type.image) { blockList.add(attribute); }
    | attribute = KeywordCmpFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordEquals(type.image)     { blockList.add(attribute); }
    | attribute = KeywordGetHead(type.image)    { blockList.add(attribute); }
    | attribute = KeywordGetTail(type.image)    { blockList.add(attribute); }
    | attribute = KeywordIsEmpty(type.image)    { blockList.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeListDecl(name, ast().makeList(blockList), orgTrack));
    }
}

void TypeArray(ArrayList list) throws TomException: /* in DEFAULT mode */
{
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
}
{
  <TYPEARRAY> /* switch to TOM mode */
    {
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    }
  
  type=<TOM_IDENTIFIER>
    {orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile);}
  <TOM_LBRACE>
    implement = KeywordImplement()
    ( 
      attribute = KeywordGetFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordGetSubterm(type.image) { blockList.add(attribute); }
    | attribute = KeywordCmpFunSym(type.image)  { blockList.add(attribute); }
    | attribute = KeywordEquals(type.image)     { blockList.add(attribute); }
    | attribute = KeywordGetElement(type.image) { blockList.add(attribute); }
    | attribute = KeywordGetSize(type.image)    { blockList.add(attribute); }
    )*
  <TOM_RBRACE>
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      putType(type.image,astType);
      name   = tsf().makeTomName_Name(type.image);
      list.add(tsf().makeDeclaration_TypeArrayDecl(name, ast().makeList(blockList), orgTrack));
    }
}

/*
 * in TOM mode
 */

TargetLanguage GoalLanguageBlock(ArrayList blockList) throws TomException:
{
}
{
  <TOM_LBRACE> /* we are in TOM mode */
    {
      switchToDefaultMode(); /* switch to DEFAULT mode */
    }
  BlockList(blockList)
    <RBRACE> /* we are in DEFAULT mode */
    {
      switchToTomMode(); /* switch to TOM mode */
      TargetLanguage tlb = makeTL(savePosAndExtract());
      return tlb;
    }
}

//------------------------------------------------------------

TargetLanguage KeywordImplement() throws TomException:
{
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
}
{
  <TOM_IMPLEMENT>
  tlCode = GoalLanguageBlock(blockList)
   {
     tlCode = ast().reworkTLCode(tlCode);
     return tlCode;
   }
}

Declaration KeywordGetFunSym(String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_FUN_SYM>
    { orgTrack = ast().makeOriginTracking("get_fun_sym", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_GetFunctionSymbolDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordGetSubterm(String typeString) throws TomException:
{
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_SUBTERM>
     { orgTrack = ast().makeOriginTracking("get_subterm", getLine(), currentFile);}
  <TOM_LPAREN> name1 = <TOM_IDENTIFIER> <TOM_COMMA> name2 = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     return tsf().makeDeclaration_GetSubtermDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);
   }
}

Declaration KeywordCmpFunSym(String typeString) throws TomException:
{
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_CMP_FUN_SYM>
    { orgTrack = ast().makeOriginTracking("cmp_fun_sym", getLine(), currentFile);}
  <TOM_LPAREN> name1 = <TOM_IDENTIFIER> <TOM_COMMA> name2 = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     return tsf().makeDeclaration_CompareFunctionSymbolDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordEquals(String typeString) throws TomException:
{
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_EQUALS>
    { orgTrack = ast().makeOriginTracking("equals", getLine(), currentFile);}
  <TOM_LPAREN> name1 = <TOM_IDENTIFIER> <TOM_COMMA> name2 = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     return tsf().makeDeclaration_TermsEqualDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordGetHead(String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_HEAD>
    { orgTrack = ast().makeOriginTracking("get_head", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_GetHeadDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordGetTail(String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_TAIL>
    { orgTrack = ast().makeOriginTracking("get_tail", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_GetTailDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordIsEmpty(String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_IS_EMPTY>
    { orgTrack = ast().makeOriginTracking("is_empty", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_IsEmptyDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}

Declaration KeywordGetElement(String typeString) throws TomException:
{
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_ELEMENT>
    { orgTrack = ast().makeOriginTracking("get_element", getLine(), currentFile);}
  <TOM_LPAREN> name1 = <TOM_IDENTIFIER> <TOM_COMMA> name2 = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     return tsf().makeDeclaration_GetElementDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);
   }
}

Declaration KeywordGetSize(String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_SIZE>
    { orgTrack = ast().makeOriginTracking("get_size", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_GetSizeDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}

TargetLanguage KeywordFsym() throws TomException:
{
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
}
{
  <TOM_FSYM>
  tlCode = GoalLanguageBlock(blockList)
   {
     tlCode = ast().reworkTLCode(tlCode);
     return tlCode;
   }
}

Declaration KeywordIsFsym(TomName astName, String typeString) throws TomException:
{
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_IS_FSYM>
    { orgTrack = ast().makeOriginTracking("is_fsym", getLine(), currentFile);}
  <TOM_LPAREN> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     return tsf().makeDeclaration_IsFsymDecl(
			   astName,
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);
   }
}


Declaration KeywordGetSlot(TomName astName, String typeString) throws TomException:
{
  Token name, slotName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_GET_SLOT>
    { orgTrack = ast().makeOriginTracking("get_slot", getLine(), currentFile);}
  <TOM_LPAREN> slotName = <TOM_IDENTIFIER>
     <TOM_COMMA> name = <TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
       Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
       Option option = ast().makeOption(info);
       return tsf().makeDeclaration_GetSlotDecl(
         astName,
         tsf().makeTomName_Name(slotName.image),
         ast().makeVariable(option,name.image,typeString),
         tlCode, orgTrack);
   }
}

Declaration KeywordMake(String opname, TomType returnType, ArrayList types) throws TomException:
{
  Token typeArg;
  Token nameArg;
  ArrayList args = new ArrayList();
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  int index = 0;
  TomType type;
  TomName name;
  Option orgTrack;
  int nbTypes = types.size();
}
{
  <TOM_MAKE>
     { orgTrack = ast().makeOriginTracking("make", getLine(), currentFile);}
     [ ( LOOKAHEAD(2) 
        <TOM_LPAREN> <TOM_RPAREN>
       |
        <TOM_LPAREN>
      nameArg = <TOM_IDENTIFIER>
       {
         if( !(nbTypes > 0) ) {
           System.out.println(" Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n Error occured at line "+getLine()+"\n Parsing aborted");
           System.exit(1);
         }
         type = (TomType)types.get(index++);
         name = tsf().makeTomName_Name(nameArg.image);  
         Option info1 = ast().makeOriginTracking(nameArg.image,getLine(), currentFile);
         Option option1 = ast().makeOption(info1);
         args.add(tsf().makeTomTerm_Variable(option1,name, type));
       }
     ( <TOM_COMMA> nameArg = <TOM_IDENTIFIER>
        {
          if( index >= nbTypes ) {
            System.out.println(" Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n -- Error occurs at line "+getLine()+"\n Parsing aborted");
            System.exit(1);
          }
          type = (TomType)types.get(index++);
          name = tsf().makeTomName_Name(nameArg.image); 
          Option info2 = ast().makeOriginTracking(nameArg.image,getLine(), currentFile);
          Option option2 = ast().makeOption(info2);
          args.add(tsf().makeTomTerm_Variable(option2,name, type));
        }
      )*
      <TOM_RPAREN> ) ]
       {
         if (index<nbTypes) {
           System.out.println(" Bad number of arguments in 'make(...)' method: less arguments found than "+nbTypes+" as expected in term definition.\n -- Error occurs at line "+getLine()+"\n Parsing aborted");
            System.exit(1);
         }
       }
  tlCode = GoalLanguageBlock(blockList)
   {
     return ast().makeMakeDecl(opname,returnType,args,tlCode, orgTrack);
   }
}

Declaration KeywordMakeEmptyList(String name) throws TomException:
{
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_MAKE_EMPTY>
    { orgTrack = ast().makeOriginTracking("make_empty", getLine(), currentFile);}
  [<TOM_LPAREN> <TOM_RPAREN>]
  tlCode = GoalLanguageBlock(blockList)
   {
     return tsf().makeDeclaration_MakeEmptyList(
                           tsf().makeTomName_Name(name),
                           tlCode, orgTrack);
   }
}

Declaration KeywordMakeAddList(String name, String listType, String elementType) throws TomException:
{
  Token listName, elementName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_MAKE_INSERT>
    { orgTrack = ast().makeOriginTracking("make_add", getLine(), currentFile);}
  <TOM_LPAREN> elementName=<TOM_IDENTIFIER> <TOM_COMMA>
                                    listName=<TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     return tsf().makeDeclaration_MakeAddList(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);
   }
}

Declaration KeywordMakeEmptyArray(String name, String listType) throws TomException:
{
  Token listName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_MAKE_EMPTY>
    { orgTrack = ast().makeOriginTracking("make_empty", getLine(), currentFile);}
  <TOM_LPAREN> listName=<TOM_IDENTIFIER> <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     return tsf().makeDeclaration_MakeEmptyArray(
                           tsf().makeTomName_Name(name),
                           ast().makeVariable(listOption,listName.image,listType),
                           tlCode, orgTrack);
   }
}

Declaration KeywordMakeAddArray(String name, String listType, String elementType) throws TomException:
{
  Token listName, elementName, positionName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
}
{
  <TOM_MAKE_APPEND>
    { orgTrack = ast().makeOriginTracking("make_append", getLine(), currentFile);}
  <TOM_LPAREN> elementName=<TOM_IDENTIFIER>    <TOM_COMMA>
                                    listName=<TOM_IDENTIFIER>
                 <TOM_RPAREN>
  tlCode = GoalLanguageBlock(blockList)
   {
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     return tsf().makeDeclaration_MakeAddArray(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);
   }
}

