/* Generated By:JavaCC: Do not edit this line. TomParser.java */
/*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2)
			     Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.parser;

import java.io.*;
import java.util.*;

import aterm.*;
import aterm.pure.*;

import jtom.*;
import jtom.tools.*;

import jtom.exception.*;
import jtom.adt.*;

public class TomParser implements TomParserConstants {

  private int oldPos=0;
  private int oldLine=0;
  private int includeOffSet=0;
  private Position orgTrack;
  private TomBuffer tomBuffer;
  private SymbolTable symbolTable;
  private jtom.TomEnvironment environment;
  private File importList[];
  private static HashSet includedFiles = new HashSet();

  public TomParser(TomBuffer input, jtom.TomEnvironment environment, File importList[], int includeOffSet, String fileName) {
    this(input);
    this.tomBuffer = input;
    this.symbolTable = environment.getSymbolTable();
    this.environment = environment;
    this.importList = importList;
    this.includeOffSet = includeOffSet;
    this.orgTrack = makePosition(1,1);
    if(!includedFiles.contains(fileName)) {
      includedFiles.add(fileName);
    } else {
      System.out.println("Re-entering included file forms a cycle. Breaking the parsing...");
      System.exit(1);
    }
  }

  public jtom.TomEnvironment environment() {
    return environment;
  }

  public TomSignatureFactory tsf() {
    return environment.getTomSignatureFactory();
  }

  public ASTFactory ast() {
    return environment.getASTFactory();
  }

  private String getLine() {
    return  (java.lang.String.valueOf(token.beginLine+includeOffSet));
  }

  private int getPos() {
    return jj_input_stream.getBeginOffset();
  }

  private String savePosAndExtract() {
    environment.getStatistics().numberStrangerBlocsRecognized++;
    return savePosAndExtract(0);
  }

  private String savePosAndExtract(int offset) {
    String string;
    string = tomBuffer.extractBuffer(oldPos,getPos() + offset);
    oldPos = getPos() + offset;
    return string;
  }

  private TomSymbol getSymbol(String name) {
    return symbolTable.getSymbol(name);
  }

  private void putSymbol(String name, TomSymbol symbol) {
    symbolTable.putSymbol(name,symbol);
  }

  private TomType getType(String name) {
    return symbolTable.getType(name);
  }

  private void putType(String name, TomType type) {
    symbolTable.putType(name,type);
  }

  private void switchToTomMode() {
    token_source.SwitchTo(TOM);
  }

  private void switchToDefaultMode() {
    token_source.SwitchTo(DEFAULT);
    oldPos = getPos() + token.image.length();
    oldLine = Integer.valueOf( getLine() ).intValue();
    orgTrack = makePosition(token.beginLine,token.beginColumn);
  }

  public Position makePosition(int line, int column) {
    return  tsf().makePosition_Position(new Integer(line+includeOffSet), new Integer(column));
  }

  private TargetLanguage makeTL(String code) {
    Position newOriginTracking = makePosition(token.beginLine,token.beginColumn);
    return tsf().makeTargetLanguage_TL(code, orgTrack, newOriginTracking);
  }

/************************************************
 * THE TOM GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public TomTerm startParsing() throws ParseException, TomException {
  String upToEOF;
  TomTerm parseTree = null;
  ArrayList blockList = new ArrayList();
    BlockList(blockList);
      upToEOF = tomBuffer.extractBuffer(oldPos,getPos());
      blockList.add(makeTL(upToEOF));
      parseTree = tsf().makeTomTerm_Tom(ast().makeList(blockList));
    jj_consume_token(0);
      {if (true) return parseTree;}
    throw new Error("Missing return statement in function");
  }

  final public void BlockList(ArrayList blockList) throws ParseException, TomException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
      case RULE:
      case BACKQUOTE_TERM:
      case VARIABLE:
      case TYPE:
      case TYPETERM:
      case TYPEINT:
      case TYPELIST:
      case TYPEARRAY:
      case INCLUDE:
      case OPERATOR:
      case OPERATOR_LIST:
      case OPERATOR_ARRAY:
      case LBRACE:
      case OTHER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
        MatchConstruct(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case RULE:
        RuleConstruct(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case BACKQUOTE_TERM:
        BackQuoteTerm(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case INCLUDE:
        IncludeConstruct(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case VARIABLE:
        LocalVariableConstruct(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case OPERATOR:
        Operator(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case OPERATOR_LIST:
        OperatorList(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case OPERATOR_ARRAY:
        OperatorArray(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case TYPE:
      case TYPETERM:
        TypeTerm(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case TYPEINT:
        TypeInt(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case TYPELIST:
        TypeList(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case TYPEARRAY:
        TypeArray(blockList);
                                           environment.getStatistics().numberTomBlocsRecognized++;
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        BlockList(blockList);
        jj_consume_token(RBRACE);
        break;
      case OTHER:
        jj_consume_token(OTHER);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MatchConstruct(ArrayList list) throws ParseException, TomException {
  environment.getStatistics().numberMatchBlocsRecognized++;
  ArrayList matchArgumentsList = new ArrayList();
  ArrayList patternActionList = new ArrayList();
    jj_consume_token(MATCH);
      list.add(makeTL(savePosAndExtract()));
      Option orgTrack = ast().makeOriginTracking("Match",getLine());
    jj_consume_token(TOM_LPAREN);
    MatchArguments(matchArgumentsList);
    jj_consume_token(TOM_RPAREN);
    jj_consume_token(TOM_LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      PatternAction(patternActionList);
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      list.add(tsf().makeTomTerm_Match(
                 orgTrack,
                 tsf().makeTomTerm_SubjectList( ast().makeList(matchArgumentsList)),
                 tsf().makeTomTerm_PatternList( ast().makeList(patternActionList))));
  }

  final public void PatternAction(ArrayList list) throws ParseException, TomException {
  environment.getStatistics().numberMatchRulesRecognized++;
  ArrayList matchPatternsList = new ArrayList();
  ArrayList blockList = new ArrayList();
  String string;
  TargetLanguage tlCode;
    MatchPatterns(matchPatternsList);
    jj_consume_token(TOM_ARROW);
    tlCode = GoalLanguageBlock(blockList);
    blockList.add(tlCode);
    list.add(tsf().makeTomTerm_PatternAction(
               tsf().makeTomTerm_TermList(ast().makeList(matchPatternsList)),
               tsf().makeTomTerm_Tom(ast().makeList(blockList))));
  }

  final public void MatchArguments(ArrayList list) throws ParseException, TomException {
    MatchArgument(list);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(TOM_COMMA);
      MatchArgument(list);
    }
  }

  final public void MatchArgument(ArrayList list) throws ParseException, TomException {
  Token type,name;
    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
        list.add(tsf().makeTomTerm_TLVar(
                   name.image,
                   tsf().makeTomType_TomTypeAlone(type.image)));
  }

  final public void MatchPatterns(ArrayList list) throws ParseException, TomException {
  TomTerm term;
    term = Term();
                list.add(term);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(TOM_COMMA);
      term = Term();
                                list.add(term);
    }
  }

  final public TomTerm PlainTerm(TomName astAnnotedName) throws ParseException, TomException {
  ArrayList list = new ArrayList();
  Token name, slotName;
  TomTerm term;
  Option option = null;
  Option annotedName = (astAnnotedName==null)?null:tsf().makeOption_TomNameToOption(astAnnotedName);
  ArrayList optionList = new ArrayList();
    if (jj_2_1(2)) {
      name = jj_consume_token(TOM_IDENTIFIER);
      jj_consume_token(TOM_LBRACKET);
       optionList.add(ast().makeOriginTracking(name.image,getLine()));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_IDENTIFIER:
        slotName = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(TOM_EQUAL);
        term = Term();
        list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_COMMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_5;
          }
          jj_consume_token(TOM_COMMA);
          slotName = jj_consume_token(TOM_IDENTIFIER);
          jj_consume_token(TOM_EQUAL);
          term = Term();
          list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term));
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(TOM_RBRACKET);
      if(annotedName!=null) { optionList.add(annotedName); }
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_RecordAppl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));}
    } else if (jj_2_2(2)) {
      name = jj_consume_token(TOM_IDENTIFIER);
      jj_consume_token(TOM_STAR);
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking(name.image,getLine()));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return ast().makeVariableStar(option,name.image,"unknown type");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_IDENTIFIER:
        // f(a,...), x. g()
            name = jj_consume_token(TOM_IDENTIFIER);
       optionList.add(ast().makeOriginTracking(name.image,getLine()));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_LPAREN:
          jj_consume_token(TOM_LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_UNDERSCORE:
          case TOM_INTEGER:
          case TOM_IDENTIFIER:
            term = DotTerm();
                                       list.add(term);
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TOM_COMMA:
                ;
                break;
              default:
                jj_la1[7] = jj_gen;
                break label_6;
              }
              jj_consume_token(TOM_COMMA);
              term = DotTerm();
                                       list.add(term);
            }
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          jj_consume_token(TOM_RPAREN);
        if(list.isEmpty()) {
          // check if it is a constant
          optionList.add(tsf().makeOption_Constructor(tsf().makeTomName_Name(name.image)));
        }
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      if(annotedName!=null) { optionList.add(annotedName); }
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));}
        break;
      case TOM_UNDERSCORE:
        jj_consume_token(TOM_UNDERSCORE);
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking("_",getLine()));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_Placeholder(option);}
        break;
      case TOM_INTEGER:
        // integer
            name = jj_consume_token(TOM_INTEGER);
      if(annotedName!=null) { optionList.add(annotedName); }
      optionList.add(ast().makeOriginTracking(name.image,getLine()));
      option = ast().makeOption(ast().makeOptionList(optionList));

      ast().makeIntegerSymbol(symbolTable,name.image,optionList);

      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TomTerm Term() throws ParseException, TomException {
  Token annotedName = null;
  TomTerm term;
  TomName astAnnotedName = null;
    if (jj_2_3(2)) {
      annotedName = jj_consume_token(TOM_IDENTIFIER);
      jj_consume_token(TOM_AT);
      astAnnotedName = tsf().makeTomName_Name(annotedName.image);
      term = PlainTerm(astAnnotedName);
      {if (true) return term;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
        // PlainTerm()
            term = PlainTerm(astAnnotedName);
        {if (true) return term;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TomTerm DotTerm() throws ParseException, TomException {
  TomTerm term = null;
  TomTerm dotterm = null;
    term = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_DOT:
      jj_consume_token(TOM_DOT);
      dotterm = Term();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
      if(dotterm != null) {
        {if (true) return tsf().makeTomTerm_DotTerm(term,dotterm);}
      } else {
        {if (true) return term;}
      }
    throw new Error("Missing return statement in function");
  }

  final public void BackQuoteTerm(ArrayList list) throws ParseException, TomException {
  TomTerm term;
  Option orgTrack;
    jj_consume_token(BACKQUOTE_TERM);
      list.add(makeTL(savePosAndExtract()));
      orgTrack = ast().makeOriginTracking("Backquote",getLine());
    term = Term();
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_BackQuoteTerm(term, orgTrack));
  }

  final public void LocalVariableConstruct(ArrayList list) throws ParseException, TomException {
    jj_consume_token(VARIABLE);
    list.add(makeTL(savePosAndExtract()));
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_LocalVariable());
  }

  final public void IncludeConstruct(ArrayList list) throws ParseException, TomException {
  Token fileName;
  TomTerm astTom;
  InputStream input;
  File file;
  byte inputBuffer[];
  TomParser tomParser;
    jj_consume_token(INCLUDE);
      list.add(makeTL(savePosAndExtract()));
    jj_consume_token(TOM_LBRACE);
    fileName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RBRACE);
    switchToDefaultMode(); /* switch to DEFAULT mode */
    try {


        /*
    File path = new File("jtom\\adt");
    System.out.println("path = " + path);
    File abspath = path.getAbsoluteFile();
    System.out.println("abspath = " + abspath);

    File newfile = new File(path,"TomSignature.t");
    System.out.println("newfile = " + newfile);
    System.out.println("exist = " + newfile.exists());

        */

      file = new File(fileName.image);
      if(!file.exists()) {
        boolean found = false;
        for(int i=0 ; !found && i<importList.length ; i++) {
          file = new File(importList[i],fileName.image);
          found = file.exists();
        }
      }
        //System.out.println("file = " + file);

        // to get the length of the file
      inputBuffer = new byte[(int)file.length()+1];
      input       = new FileInputStream(file);
      input.read(inputBuffer);
      tomParser   = new TomParser(new TomBuffer(inputBuffer),environment(),importList, Integer.valueOf(getLine()).intValue(), fileName.image);
      astTom = tomParser.startParsing();
      astTom = tsf().makeTomTerm_TomInclude(astTom.getList());
      list.add(astTom);
    } catch (FileNotFoundException e1) {
      System.out.println("Included file " + fileName.image + " not found at line "+getLine());
      //e1.printStackTrace();
        System.exit(1);
    }  catch (java.io.IOException e2) {
      e2.printStackTrace();
    }
  }

  final public void RuleConstruct(ArrayList list) throws ParseException, TomException {
  environment.getStatistics().numberRuleBlocsRecognized++;
  TomTerm lhs, rhs;
  ArrayList ruleList = new ArrayList();
  ArrayList nameTypeInRule = new ArrayList();
  Option orgTrack;
    jj_consume_token(RULE);
      list.add(makeTL(savePosAndExtract()));
      orgTrack = ast().makeOriginTracking("Rule",getLine());
    jj_consume_token(TOM_LBRACE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      lhs = Term();
      jj_consume_token(TOM_ARROW);
      rhs = PlainTerm(null);
      Option orgTrack2 = ast().makeOriginTracking("Rule",getLine());
      environment.getStatistics().numberRuleRulesRecognized++;
      ruleList.add(tsf().makeTomTerm_RewriteRule(
                     tsf().makeTomTerm_Term(lhs),
                     tsf().makeTomTerm_Term(rhs),
                     orgTrack2));
    }
    jj_consume_token(TOM_RBRACE);
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_RuleSet(orgTrack,ast().makeList(ruleList)));
  }

/*
 * Operator Declaration
 *
 * in DEFAULT mode
 */
  final public void Operator(ArrayList list) throws ParseException, TomException {
  Token type, name, typeArg, slotName;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  ArrayList options = new ArrayList();
  ArrayList nameList = new ArrayList();
  Map mapNameDecl = new HashMap();
  Set setSlotDecl = new HashSet();
  TomName astName;
  TomSymbol astSymbol;
  String stringSlotName;
  TargetLanguage tlFsym;
  Declaration attribute;
  TomType tomType;
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
    jj_consume_token(OPERATOR);
      list.add(makeTL(savePosAndExtract()));
    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
         options.add(ast().makeOriginTracking(name.image,getLine()));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      jj_consume_token(TOM_LPAREN);
        stringSlotName = "";
      if (jj_2_4(2)) {
        slotName = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(TOM_COLON);
                                                  stringSlotName = slotName.image;
      } else {
        ;
      }
      typeArg = jj_consume_token(TOM_IDENTIFIER);
        setSlotDecl.add(stringSlotName);
        nameList.add(ast().makeName(stringSlotName));
        types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(TOM_COMMA);
          stringSlotName = "";
        if (jj_2_5(2)) {
          slotName = jj_consume_token(TOM_IDENTIFIER);
          jj_consume_token(TOM_COLON);
                                                    stringSlotName = slotName.image;
        } else {
          ;
        }
        typeArg = jj_consume_token(TOM_IDENTIFIER);
          if (!stringSlotName.equals("")) {
            if (!setSlotDecl.contains(stringSlotName)) {
              setSlotDecl.add(stringSlotName);
            }
            else {
              System.out.println("*** Warning *** Repeated slot  '"+stringSlotName+"' in operator declaration line: "+getLine());
            }
          }
          nameList.add(ast().makeName(stringSlotName));
          types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
      }
      jj_consume_token(TOM_RPAREN);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
      astName   = tsf().makeTomName_Name(name.image);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE:
      case TOM_GET_SLOT:
      case TOM_IS_FSYM:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE:
        attribute = KeywordMake(name.image,tsf().makeTomType_TomTypeAlone(type.image),types);
                                                                                              options.add(attribute);
        break;
      case TOM_GET_SLOT:
        attribute = KeywordGetSlot(astName, type.image);
        TomName sName = attribute.getSlotName();
        if (mapNameDecl.get(sName)==null) {
          mapNameDecl.put(sName,attribute);
        }
        else {
          System.out.println("*** Warning *** GetSlot declaration '"+sName.getString()+"' is repeated in operator declaration line: "+getLine());
        }
        break;
      case TOM_IS_FSYM:
        attribute = KeywordIsFsym(astName, type.image);
                                                        options.add(attribute);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */

      for(int i=nameList.size()-1; i>=0 ; i--) {
        TomName name1 = (TomName)nameList.get(i);
        PairNameDecl pair = null;
        Declaration emptyDeclaration = tsf().makeDeclaration_EmptyDeclaration();
        if(name1.isEmptyName()) {
          pair = tsf().makePairNameDecl_Slot(name1,emptyDeclaration);
        } else {
          Declaration decl = (Declaration)mapNameDecl.get(name1);
          if(decl == null) {
            decl = emptyDeclaration;
          }
          else {
            mapNameDecl.remove(name1);
          }
          pair = tsf().makePairNameDecl_Slot(name1,decl);
        }
        slotList = tsf().makeSlotList_ConsSlotList(pair,slotList);
      }
        // Test if there are still declaration in mapNameDecl
      if ( !mapNameDecl.isEmpty()) {
        if(!Flags.noWarning) {
          System.out.println("*** Warning *** Some GetSlot declaration are incompatible with operator signature line: "+getLine());
          System.out.println("*** This concerns following slotname:"+ mapNameDecl.keySet());
        }
      }

      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_SymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

  final public void OperatorList(ArrayList list) throws ParseException, TomException {
  Token type, name, typeArg;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
  ArrayList options = new ArrayList();
  TomSymbol astSymbol;
  TomName astName;
  TargetLanguage tlFsym;
  Declaration attribute;
    jj_consume_token(OPERATOR_LIST);
      list.add(makeTL(savePosAndExtract()));
    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
      options.add(ast().makeOriginTracking(name.image,getLine()));
    jj_consume_token(TOM_LPAREN);
    typeArg = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_STAR);
    jj_consume_token(TOM_RPAREN);
      types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
      case TOM_MAKE_INSERT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
        attribute = KeywordMakeEmptyList(name.image);
                                                                                 options.add(attribute);
        break;
      case TOM_MAKE_INSERT:
        attribute = KeywordMakeAddList(name.image, type.image, typeArg.image);
                                                                                 options.add(attribute);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList_ConsSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ListSymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

  final public void OperatorArray(ArrayList list) throws ParseException, TomException {
  Token type, name, typeArg;
  ArrayList blockList = new ArrayList();
  ArrayList types = new ArrayList();
  SlotList slotList = tsf().makeSlotList_EmptySlotList();
  ArrayList options = new ArrayList();
  TomName astName;
  TomSymbol astSymbol;
  TargetLanguage tlFsym;
  Declaration attribute;
    jj_consume_token(OPERATOR_ARRAY);
      list.add(makeTL(savePosAndExtract()));
    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
      options.add(ast().makeOriginTracking(name.image,getLine()));
    jj_consume_token(TOM_LPAREN);
    typeArg = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_STAR);
    jj_consume_token(TOM_RPAREN);
           types.add(tsf().makeTomType_TomTypeAlone(typeArg.image));
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
      case TOM_MAKE_APPEND:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
        attribute = KeywordMakeEmptyArray(name.image, type.image);
                                                                               options.add(attribute);
        break;
      case TOM_MAKE_APPEND:
        attribute = KeywordMakeAddArray(name.image, type.image, typeArg.image);
                                                                               options.add(attribute);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList_ConsSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ArraySymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

/*
 * Type Declaration
 *
 * in DEFAULT mode
 */
  final public void TypeTerm(ArrayList list) throws ParseException, TomException {
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPETERM:
      jj_consume_token(TYPETERM);
      list.add(makeTL(savePosAndExtract()));
      break;
    case TYPE:
      jj_consume_token(TYPE);
      list.add(makeTL(savePosAndExtract()));
      System.out.println("Warning: %type is obsolete");
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type = jj_consume_token(TOM_IDENTIFIER);
      orgTrack = ast().makeOriginTracking(type.image,getLine());
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeTermDecl(name, ast().makeList(blockList), orgTrack));
  }

  final public void TypeInt(ArrayList list) throws ParseException, TomException {
    jj_consume_token(TYPEINT);
      list.add(makeTL(savePosAndExtract()));
      switchToDefaultMode(); /* switch to DEFAULT mode */
      ast().makeIntegerDecl(list);
  }

  final public void TypeList(ArrayList list) throws ParseException, TomException {
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    jj_consume_token(TYPELIST);
      list.add(makeTL(savePosAndExtract()));
    type = jj_consume_token(TOM_IDENTIFIER);
      orgTrack = ast().makeOriginTracking(type.image,getLine());
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
      case TOM_GET_HEAD:
      case TOM_GET_TAIL:
      case TOM_IS_EMPTY:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_HEAD:
        attribute = KeywordGetHead(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_TAIL:
        attribute = KeywordGetTail(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_IS_EMPTY:
        attribute = KeywordIsEmpty(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeListDecl(name, ast().makeList(blockList), orgTrack));
  }

  final public void TypeArray(ArrayList list) throws ParseException, TomException {
  Token type;
  ArrayList blockList = new ArrayList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    jj_consume_token(TYPEARRAY);
      list.add(makeTL(savePosAndExtract()));
    type = jj_consume_token(TOM_IDENTIFIER);
     orgTrack = ast().makeOriginTracking(type.image,getLine());
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
      case TOM_GET_ELEMENT:
      case TOM_GET_SIZE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_ELEMENT:
        attribute = KeywordGetElement(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SIZE:
        attribute = KeywordGetSize(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      putType(type.image,astType);
      name   = tsf().makeTomName_Name(type.image);
      list.add(tsf().makeDeclaration_TypeArrayDecl(name, ast().makeList(blockList), orgTrack));
  }

/*
 * in TOM mode
 */
  final public TargetLanguage GoalLanguageBlock(ArrayList blockList) throws ParseException, TomException {
    jj_consume_token(TOM_LBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */

    BlockList(blockList);
    jj_consume_token(RBRACE);
      switchToTomMode(); /* switch to TOM mode */
      TargetLanguage tlb = makeTL(savePosAndExtract());
      {if (true) return tlb;}
    throw new Error("Missing return statement in function");
  }

//------------------------------------------------------------
  final public TargetLanguage KeywordImplement() throws ParseException, TomException {
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
    jj_consume_token(TOM_IMPLEMENT);
    tlCode = GoalLanguageBlock(blockList);
     tlCode = ast().reworkTLCode(tlCode);
     {if (true) return tlCode;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetFunSym(String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_FUN_SYM);
      orgTrack = ast().makeOriginTracking("get_fun_sym", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetFunctionSymbolDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSubterm(String typeString) throws ParseException, TomException {
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SUBTERM);
       orgTrack = ast().makeOriginTracking("get_subterm", getLine());
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine());
     Option info2 = ast().makeOriginTracking(name2.image,getLine());
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_GetSubtermDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordCmpFunSym(String typeString) throws ParseException, TomException {
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_CMP_FUN_SYM);
      orgTrack = ast().makeOriginTracking("cmp_fun_sym", getLine());
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine());
     Option info2 = ast().makeOriginTracking(name2.image,getLine());
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_CompareFunctionSymbolDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordEquals(String typeString) throws ParseException, TomException {
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_EQUALS);
      orgTrack = ast().makeOriginTracking("equals", getLine());
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine());
     Option info2 = ast().makeOriginTracking(name2.image,getLine());
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_TermsEqualDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetHead(String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_HEAD);
      orgTrack = ast().makeOriginTracking("get_head", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetHeadDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetTail(String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_TAIL);
      orgTrack = ast().makeOriginTracking("get_tail", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetTailDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordIsEmpty(String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_IS_EMPTY);
      orgTrack = ast().makeOriginTracking("is_empty", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_IsEmptyDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetElement(String typeString) throws ParseException, TomException {
  Token name1, name2;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_ELEMENT);
      orgTrack = ast().makeOriginTracking("get_element", getLine());
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine());
     Option info2 = ast().makeOriginTracking(name2.image,getLine());
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_GetElementDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSize(String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SIZE);
      orgTrack = ast().makeOriginTracking("get_size", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetSizeDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public TargetLanguage KeywordFsym() throws ParseException, TomException {
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
    jj_consume_token(TOM_FSYM);
    tlCode = GoalLanguageBlock(blockList);
     tlCode = ast().reworkTLCode(tlCode);
     {if (true) return tlCode;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordIsFsym(TomName astName, String typeString) throws ParseException, TomException {
  Token name;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_IS_FSYM);
      orgTrack = ast().makeOriginTracking("is_fsym", getLine());
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine());
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_IsFsymDecl(
                           astName,
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSlot(TomName astName, String typeString) throws ParseException, TomException {
  Token name, slotName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SLOT);
      orgTrack = ast().makeOriginTracking("get_slot", getLine());
    jj_consume_token(TOM_LPAREN);
    slotName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
       Option info = ast().makeOriginTracking(name.image,getLine());
       Option option = ast().makeOption(info);
       {if (true) return tsf().makeDeclaration_GetSlotDecl(
         astName,
         tsf().makeTomName_Name(slotName.image),
         ast().makeVariable(option,name.image,typeString),
         tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMake(String opname, TomType returnType, ArrayList types) throws ParseException, TomException {
  Token typeArg;
  Token nameArg;
  ArrayList args = new ArrayList();
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  int index = 0;
  TomType type;
  TomName name;
  Option orgTrack;
  int nbTypes = types.size();
    jj_consume_token(TOM_MAKE);
       orgTrack = ast().makeOriginTracking("make", getLine());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      if (jj_2_6(2)) {
        jj_consume_token(TOM_LPAREN);
        jj_consume_token(TOM_RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_LPAREN:
          jj_consume_token(TOM_LPAREN);
          nameArg = jj_consume_token(TOM_IDENTIFIER);
         if( index>=nbTypes ) {
           System.out.println(" Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n Error occurs at line "+getLine()+"\n Parsing aborted");
           System.exit(1);
         }
         type = (TomType)types.get(index++);
         name = tsf().makeTomName_Name(nameArg.image);
         Option info1 = ast().makeOriginTracking(nameArg.image,getLine());
         Option option1 = ast().makeOption(info1);
         args.add(tsf().makeTomTerm_Variable(option1,name, type));
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TOM_COMMA:
              ;
              break;
            default:
              jj_la1[29] = jj_gen;
              break label_15;
            }
            jj_consume_token(TOM_COMMA);
            nameArg = jj_consume_token(TOM_IDENTIFIER);
          if( index>=nbTypes ) {
            System.out.println(" Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n Error occurs at line "+getLine()+"\n Parsing aborted");
            System.exit(1);
          }
          type = (TomType)types.get(index++);
          name = tsf().makeTomName_Name(nameArg.image);
          Option info2 = ast().makeOriginTracking(nameArg.image,getLine());
          Option option2 = ast().makeOption(info2);
          args.add(tsf().makeTomTerm_Variable(option2,name, type));
          }
          jj_consume_token(TOM_RPAREN);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    tlCode = GoalLanguageBlock(blockList);
     {if (true) return ast().makeMakeDecl(opname,returnType,args,tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeEmptyList(String name) throws ParseException, TomException {
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_EMPTY);
      orgTrack = ast().makeOriginTracking("make_empty", getLine());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      jj_consume_token(TOM_LPAREN);
      jj_consume_token(TOM_RPAREN);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    tlCode = GoalLanguageBlock(blockList);
     {if (true) return tsf().makeDeclaration_MakeEmptyList(
                           tsf().makeTomName_Name(name),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeAddList(String name, String listType, String elementType) throws ParseException, TomException {
  Token listName, elementName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_INSERT);
      orgTrack = ast().makeOriginTracking("make_add", getLine());
    jj_consume_token(TOM_LPAREN);
    elementName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine());
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine());
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     {if (true) return tsf().makeDeclaration_MakeAddList(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeEmptyArray(String name, String listType) throws ParseException, TomException {
  Token listName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_EMPTY);
      orgTrack = ast().makeOriginTracking("make_empty", getLine());
    jj_consume_token(TOM_LPAREN);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine());
     Option listOption = ast().makeOption(listInfo);
     {if (true) return tsf().makeDeclaration_MakeEmptyArray(
                           tsf().makeTomName_Name(name),
                           ast().makeVariable(listOption,listName.image,listType),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeAddArray(String name, String listType, String elementType) throws ParseException, TomException {
  Token listName, elementName, positionName;
  ArrayList blockList = new ArrayList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_APPEND);
      orgTrack = ast().makeOriginTracking("make_append", getLine());
    jj_consume_token(TOM_LPAREN);
    elementName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine());
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine());
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     {if (true) return tsf().makeDeclaration_MakeAddArray(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_AT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(TOM_LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TOM_COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public TomParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  final private int[] jj_la1_0 = {0xa0007ff6,0xa0007ff6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_1 = {0x0,0x0,0x2000000,0x4000,0x4000,0x4000,0x0,0x4000,0x2000000,0x80000,0x2000000,0x2000000,0x40000,0x2000000,0x4000,0x80000,0x10000000,0x10000000,0x60000000,0x60000000,0xa0000000,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x80000,0x80000,0x80000,};
  final private int[] jj_la1_2 = {0x0,0x0,0x6000,0x0,0x0,0x0,0x4000,0x0,0x6000,0x0,0x6000,0x6000,0x0,0x6000,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0xf0,0xf0,0x7f0,0x7f0,0x18f0,0x18f0,0x0,0x0,0x0,0x0,};
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public TomParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TomParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TomParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TomParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TomParser(TomParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TomParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[81];
    for (int i = 0; i < 81; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 81; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
