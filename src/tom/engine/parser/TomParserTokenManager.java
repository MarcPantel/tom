/* Generated By:JavaCC: Do not edit this line. TomParserTokenManager.java */
/*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2)
			     Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
    
    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.parser;
import java.io.*;
import java.util.*;
import java.text.*;
import jtom.TomEnvironment;
import jtom.adt.tomsignature.*;
import jtom.adt.tomsignature.types.*;
import jtom.adt.tomsignature.types.tomterm.RuleSet;
import jtom.adt.tomsignature.types.tomterm.Match;
import jtom.exception.*;
import jtom.tools.*;
import jtom.checker.TomCheckerMessage;
import jtom.xml.Constants;

public class TomParserTokenManager implements TomParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1400000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x1000000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_0(0x1ffeeL);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x1400000L);
      case 96:
         return jjStopAtPos(0, 4);
      case 123:
         return jjStopAtPos(0, 30);
      case 125:
         return jjStopAtPos(0, 31);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 0);
         break;
      case 47:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xaL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1fc0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2aL);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 112:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x1fc0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1fc0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(4, 2);
         else if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(4, 3);
         else if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1f80L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8020L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 104:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(5, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8400L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1480L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(8, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(8, 7);
         break;
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(8, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(10, 9);
         break;
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(10, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 23)
                     kind = 23;
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(7, 9);
                  break;
               case 7:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 23)
                     kind = 23;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x8000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 25)
                     kind = 25;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 44)
                     kind = 44;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e00000000L) != 0L)
            return 0;
         if ((active1 & 0x1000000000L) != 0L)
            return 53;
         if ((active1 & 0x300000000L) != 0L)
            return 49;
         if ((active1 & 0xffffb0L) != 0L)
         {
            jjmatchedKind = 89;
            return 54;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
            return 54;
         if ((active0 & 0xa0000000000L) != 0L || (active1 & 0x800000000L) != 0L)
            return 3;
         if ((active0 & 0x80000000000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active1 & 0xffff90L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 55;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 1;
         if ((active1 & 0x20L) != 0L)
            return 55;
         return -1;
      case 2:
         if ((active1 & 0xffff90L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 55;
         }
         return -1;
      case 3:
         if ((active1 & 0x1780L) != 0L)
            return 55;
         if ((active1 & 0xffe810L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 3;
            }
            return 55;
         }
         return -1;
      case 4:
         if ((active1 & 0x10L) != 0L)
            return 55;
         if ((active1 & 0xffef00L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 55;
         }
         return -1;
      case 5:
         if ((active1 & 0x40000L) != 0L)
            return 55;
         if ((active1 & 0xfbef00L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
            return 55;
         }
         return -1;
      case 6:
         if ((active1 & 0xfbaf00L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
            return 55;
         }
         if ((active1 & 0x4000L) != 0L)
            return 55;
         return -1;
      case 7:
         if ((active1 & 0x438f00L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
            return 55;
         }
         if ((active1 & 0xb82000L) != 0L)
            return 55;
         return -1;
      case 8:
         if ((active1 & 0x438700L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
            return 55;
         }
         if ((active1 & 0x800L) != 0L)
            return 55;
         return -1;
      case 9:
         if ((active1 & 0x438600L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 9;
            return 55;
         }
         if ((active1 & 0x100L) != 0L)
            return 55;
         return -1;
      case 10:
         if ((active1 & 0x438600L) != 0L)
            return 55;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_4(0, 34, 0);
      case 10:
         return jjStartNfaWithStates_4(0, 35, 0);
      case 13:
         return jjStartNfaWithStates_4(0, 36, 0);
      case 32:
         return jjStartNfaWithStates_4(0, 33, 0);
      case 34:
         return jjStartNfaWithStates_4(0, 100, 53);
      case 35:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_4(0x0L, 0xe000000000L);
      case 38:
         return jjStopAtPos(0, 67);
      case 40:
         return jjStopAtPos(0, 56);
      case 41:
         return jjStopAtPos(0, 57);
      case 42:
         return jjStopAtPos(0, 65);
      case 43:
         return jjStopAtPos(0, 64);
      case 44:
         return jjStopAtPos(0, 51);
      case 45:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_4(0x1000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_4(0, 55, 9);
      case 47:
         return jjMoveStringLiteralDfa1_4(0xa0000000000L, 0x800000000L);
      case 58:
         return jjStopAtPos(0, 52);
      case 60:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_4(0x0L, 0x200000000L);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_4(0x2000000000000L, 0x0L);
      case 62:
         return jjStopAtPos(0, 98);
      case 64:
         return jjStopAtPos(0, 54);
      case 91:
         return jjStopAtPos(0, 58);
      case 93:
         return jjStopAtPos(0, 59);
      case 95:
         return jjStartNfaWithStates_4(0, 62, 54);
      case 96:
         return jjStopAtPos(0, 70);
      case 99:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa1_4(0x0L, 0xd9a000L);
      case 105:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x204820L);
      case 109:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x780L);
      case 119:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x10L);
      case 123:
         return jjStopAtPos(0, 60);
      case 124:
         return jjStopAtPos(0, 50);
      case 125:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_4(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 43, 1);
         break;
      case 47:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 62:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x4000000000L);
      case 80:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x780L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0xd9a000L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_4(1, 69, 55);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x20800L);
      case 113:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x205000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_4(active1, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_4(active1, 0x4000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_4(active1, 0x8000000000L);
      case 95:
         return jjMoveStringLiteralDfa3_4(active1, 0x204000L);
      case 101:
         return jjMoveStringLiteralDfa3_4(active1, 0x10L);
      case 107:
         return jjMoveStringLiteralDfa3_4(active1, 0x780L);
      case 112:
         return jjMoveStringLiteralDfa3_4(active1, 0x20800L);
      case 116:
         return jjMoveStringLiteralDfa3_4(active1, 0xd9a000L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active1, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa3_4(active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_4(1, 0L, active1);
}
private final int jjMoveStringLiteralDfa3_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(1, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa4_4(active1, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa4_4(active1, 0x8000000000L);
      case 88:
         return jjMoveStringLiteralDfa4_4(active1, 0x2000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_4(active1, 0xdba000L);
      case 97:
         return jjMoveStringLiteralDfa4_4(active1, 0x40000L);
      case 101:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_4(active1, 0x200700L);
      case 102:
         return jjMoveStringLiteralDfa4_4(active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa4_4(active1, 0x800L);
      case 109:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_4(3, 76, 55);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_4(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_4(2, 0L, active1);
}
private final int jjMoveStringLiteralDfa4_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(2, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_4(active1, 0x8000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_4(active1, 0x4000000000L);
      case 84:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 101);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_4(active1, 0x700L);
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_4(4, 68, 55);
         return jjMoveStringLiteralDfa5_4(active1, 0x400800L);
      case 102:
         return jjMoveStringLiteralDfa5_4(active1, 0x30000L);
      case 104:
         return jjMoveStringLiteralDfa5_4(active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa5_4(active1, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa5_4(active1, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa5_4(active1, 0x80e000L);
      case 116:
         return jjMoveStringLiteralDfa5_4(active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(3, 0L, active1);
}
private final int jjMoveStringLiteralDfa5_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(3, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_4(active1, 0xc000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_4(active1, 0x100400L);
      case 101:
         return jjMoveStringLiteralDfa6_4(active1, 0x80100L);
      case 105:
         return jjMoveStringLiteralDfa6_4(active1, 0x800200L);
      case 108:
         return jjMoveStringLiteralDfa6_4(active1, 0x402000L);
      case 109:
         return jjMoveStringLiteralDfa6_4(active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa6_4(active1, 0x200000L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_4(5, 82, 55);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_4(active1, 0x38000L);
      case 121:
         return jjMoveStringLiteralDfa6_4(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_4(4, 0L, active1);
}
private final int jjMoveStringLiteralDfa6_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(4, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa7_4(active1, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_4(active1, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_4(active1, 0x80000L);
      case 98:
         return jjMoveStringLiteralDfa7_4(active1, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa7_4(active1, 0x400800L);
      case 105:
         return jjMoveStringLiteralDfa7_4(active1, 0x100000L);
      case 109:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_4(6, 78, 55);
         return jjMoveStringLiteralDfa7_4(active1, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa7_4(active1, 0x30200L);
      case 111:
         return jjMoveStringLiteralDfa7_4(active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa7_4(active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa7_4(active1, 0x200000L);
      case 122:
         return jjMoveStringLiteralDfa7_4(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_4(5, 0L, active1);
}
private final int jjMoveStringLiteralDfa7_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(5, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa8_4(active1, 0x8000000000L);
      case 84:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 102);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_4(active1, 0x30000L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_4(7, 83, 55);
         break;
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_4(7, 87, 55);
         break;
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_4(7, 84, 55);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_4(active1, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa8_4(active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa8_4(active1, 0x500L);
      case 115:
         return jjMoveStringLiteralDfa8_4(active1, 0x200L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_4(7, 77, 55);
         return jjMoveStringLiteralDfa8_4(active1, 0x8000L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_4(7, 85, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_4(6, 0L, active1);
}
private final int jjMoveStringLiteralDfa8_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_4(active1, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_4(active1, 0x408600L);
      case 115:
         return jjMoveStringLiteralDfa9_4(active1, 0x30000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_4(8, 75, 55);
         return jjMoveStringLiteralDfa9_4(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_4(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa10_4(active1, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_4(active1, 0x400400L);
      case 114:
         return jjMoveStringLiteralDfa10_4(active1, 0x8200L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_4(9, 72, 55);
         return jjMoveStringLiteralDfa10_4(active1, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_4(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa11_4(active1, 0x8000000000L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_4(10, 74, 55);
         break;
      case 109:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_4(10, 79, 55);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_4(10, 80, 55);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_4(10, 81, 55);
         break;
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_4(10, 73, 55);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_4(10, 86, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_4(9, 0L, active1);
}
private final int jjMoveStringLiteralDfa11_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(9, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(10, 0L, active1);
}
private final int jjMoveStringLiteralDfa12_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(10, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(11, 0L, active1);
}
private final int jjMoveStringLiteralDfa13_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(11, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa14_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(12, 0L, active1);
}
private final int jjMoveStringLiteralDfa14_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa15_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(13, 0L, active1);
}
private final int jjMoveStringLiteralDfa15_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa16_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(14, 0L, active1);
}
private final int jjMoveStringLiteralDfa16_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(14, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa17_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(15, 0L, active1);
}
private final int jjMoveStringLiteralDfa17_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(15, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa18_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(16, 0L, active1);
}
private final int jjMoveStringLiteralDfa18_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(16, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa19_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa20_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(19, 0L, active1);
}
private final int jjMoveStringLiteralDfa21_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(19, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa22_4(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_4(20, 0L, active1);
}
private final int jjMoveStringLiteralDfa22_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(20, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(22, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_4(21, 0L, active1);
}
static final long[] jjbitVec3 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec7 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec9 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec14 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 34)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  break;
               case 54:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(24);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 60)
                     jjAddStates(13, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(9);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 21);
                  else if (curChar == 36)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(5);
                  }
                  break;
               case 55:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(25);
                  }
                  break;
               case 49:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 63)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar != 36)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(22, 24);
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if (curChar == 34 && kind > 94)
                     kind = 94;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(25, 24);
                  break;
               case 25:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 21);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar != 46)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(29, 31);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(29, 31);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(32, 13);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(36, 13);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 13);
                  break;
               case 41:
                  if (curChar == 60)
                     jjAddStates(13, 14);
                  break;
               case 42:
                  if (curChar == 45)
                     jjCheckNAddStates(35, 37);
                  break;
               case 43:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 44:
                  if (curChar == 45)
                     jjCheckNAdd(43);
                  break;
               case 45:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 46:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 50:
                  if (curChar == 63)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 62 && kind > 40)
                     kind = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(24);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  break;
               case 2:
                  if (kind > 42)
                     kind = 42;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 13:
                  if ((0x5000000050L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(25, 24);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(25);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 43:
                  jjAddStates(35, 37);
                  break;
               case 51:
                  jjAddStates(49, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 53:
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(10, 12);
                  break;
               case 54:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(5);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(24);
                  }
                  break;
               case 55:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(7);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(25);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(25, 24);
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(7);
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(25, 24);
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(25);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 37);
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_7(0x400000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_6(0x200000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   5, 6, 8, 5, 6, 10, 8, 7, 9, 11, 15, 16, 18, 49, 50, 27, 
   28, 33, 34, 37, 38, 13, 9, 10, 13, 15, 16, 20, 18, 29, 30, 13, 
   37, 38, 13, 43, 44, 47, 17, 19, 21, 11, 12, 31, 32, 35, 36, 39, 
   40, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            if ((jjbitVec4[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\45\155\141\164\143\150", "\45\162\165\154\145", "\45\155\141\153\145", 
"\140", "\45\166\141\162\151\141\142\154\145", "\45\164\171\160\145", 
"\45\164\171\160\145\164\145\162\155", "\45\164\171\160\145\151\156\164", 
"\45\164\171\160\145\144\157\165\142\154\145", "\45\164\171\160\145\163\164\162\151\156\147", 
"\45\164\171\160\145\154\151\163\164", "\45\164\171\160\145\141\162\162\141\171", "\45\151\156\143\154\165\144\145", 
"\45\157\160", "\45\157\160\154\151\163\164", "\45\157\160\141\162\162\141\171", null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\173", "\175", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\55\76", "\75\76", "\174", "\54", "\72", "\75", "\100", "\56", "\50", 
"\51", "\133", "\135", "\173", "\175", "\137", "\55", "\53", "\52", "\43", "\46", 
"\167\150\145\162\145", "\151\146", "\140", "\155\141\153\145", 
"\155\141\153\145\137\145\155\160\164\171", "\155\141\153\145\137\151\156\163\145\162\164", 
"\155\141\153\145\137\141\160\160\145\156\144", "\151\155\160\154\145\155\145\156\164", "\146\163\171\155", 
"\147\145\164\137\163\154\157\164", "\151\163\137\146\163\171\155", 
"\147\145\164\137\163\165\142\164\145\162\155", "\147\145\164\137\146\165\156\137\163\171\155", 
"\143\155\160\137\146\165\156\137\163\171\155", "\145\161\165\141\154\163", "\147\145\164\137\150\145\141\144", 
"\147\145\164\137\164\141\151\154", "\151\163\137\145\155\160\164\171", 
"\147\145\164\137\145\154\145\155\145\156\164", "\147\145\164\137\163\151\172\145", null, null, null, null, null, null, null, 
null, "\74", "\74\57", "\76", "\57\76", "\42", "\43\124\105\130\124", 
"\43\103\117\115\115\105\116\124", 
"\43\120\122\117\103\105\123\123\111\116\107\55\111\116\123\124\122\125\103\124\111\117\116", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "TOM", 
   "TOM_IN_SINGLE_LINE_COMMENT", 
   "TOM_IN_FORMAL_COMMENT", 
   "TOM_IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 1, 2, 3, 
   0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 4, 4, 4, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffff0001c001ffffL, 0xffc7ffffffL, 
};
static final long[] jjtoSkip = {
   0x71fe2e3e0000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x70002e000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8e0011c00000L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[53];
private final int[] jjstateSet = new int[106];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TomParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TomParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 8 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 12 && (0x1000L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 23 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      case 42 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
