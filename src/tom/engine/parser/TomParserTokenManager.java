/* Generated By:JavaCC: Do not edit this line. TomParserTokenManager.java */
/*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2)
			     Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.parser;
import java.io.*;
import java.util.*;
import aterm.*;
import aterm.pure.*;
import jtom.*;
import jtom.tools.*;
import jtom.verifier.*;
import jtom.exception.*;
import jtom.adt.*;

public class TomParserTokenManager implements TomParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x900000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_0(0x7feeL);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x900000L);
      case 96:
         return jjStopAtPos(0, 4);
      case 123:
         return jjStopAtPos(0, 29);
      case 125:
         return jjStopAtPos(0, 30);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 0);
         break;
      case 45:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 47:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xaL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2aL);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 112:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x7c0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2004L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x7c0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(4, 2);
         else if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(4, 3);
         else if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x780L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2020L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x420L);
      case 104:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(5, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(7, 11);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x480L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         break;
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(8, 5);
         break;
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(8, 7);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(8, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(7, 9);
                  break;
               case 7:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x4000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 24)
                     kind = 24;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 40)
                     kind = 40;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x2000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa000000000L) != 0L)
            return 2;
         if ((active0 & 0x200000000000000L) != 0L)
            return 6;
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            jjmatchedKind = 78;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000000L) != 0L)
            return 0;
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 6;
         if ((active1 & 0x1ffdL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x1ffdL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
            return 6;
         }
         return -1;
      case 5:
         if ((active1 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x1f7dL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x1f75L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 6;
         }
         if ((active1 & 0x8L) != 0L)
            return 6;
         return -1;
      case 7:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x871L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 6;
         }
         if ((active1 & 0x1704L) != 0L)
            return 6;
         return -1;
      case 8:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x870L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 8;
            return 6;
         }
         if ((active1 & 0x1L) != 0L)
            return 6;
         return -1;
      case 9:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x870L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
            return 6;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 51);
      case 41:
         return jjStopAtPos(0, 52);
      case 42:
         return jjStopAtPos(0, 59);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_4(0x100000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 50);
      case 47:
         return jjMoveStringLiteralDfa1_4(0xa000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 47);
      case 61:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_4(0x200000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 49);
      case 91:
         return jjStopAtPos(0, 53);
      case 93:
         return jjStopAtPos(0, 54);
      case 95:
         return jjStartNfaWithStates_4(0, 57, 6);
      case 99:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x1b34L);
      case 105:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x409L);
      case 109:
         return jjMoveStringLiteralDfa1_4(0xf000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 55);
      case 125:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_4(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 39, 0);
         break;
      case 47:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0xf000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x1b34L);
      case 109:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x41L);
      case 113:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x40aL);
      default :
         break;
   }
   return jjStartNfa_4(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x408L);
      case 107:
         return jjMoveStringLiteralDfa3_4(active0, 0xf000000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x41L);
      case 116:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x1b34L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x80L);
      case 121:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_4(active0, 0L, active1, 0x1b74L);
      case 97:
         return jjMoveStringLiteralDfa4_4(active0, 0L, active1, 0x80L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_4(active0, 0xe000000000000000L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa4_4(active0, 0L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa4_4(active0, 0L, active1, 0x1L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_4(3, 65, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_4(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_4(active0, 0xe000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x801L);
      case 102:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x60L);
      case 104:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x101cL);
      case 116:
         return jjMoveStringLiteralDfa5_4(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_4(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_4(active0, 0x8000000000000000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa6_4(active0, 0x2000000000000000L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa6_4(active0, 0x4000000000000000L, active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa6_4(active0, 0L, active1, 0x804L);
      case 109:
         return jjMoveStringLiteralDfa6_4(active0, 0L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa6_4(active0, 0L, active1, 0x400L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_4(5, 71, 6);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_4(active0, 0L, active1, 0x70L);
      case 121:
         return jjMoveStringLiteralDfa6_4(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_4(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x801L);
      case 105:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x200L);
      case 109:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_4(6, 67, 6);
         return jjMoveStringLiteralDfa7_4(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_4(active0, 0x4000000000000000L, active1, 0x60L);
      case 111:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa7_4(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x400L);
      case 122:
         return jjMoveStringLiteralDfa7_4(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_4(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_4(active0, 0L, active1, 0x60L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_4(7, 72, 6);
         break;
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_4(7, 76, 6);
         break;
      case 108:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_4(7, 73, 6);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_4(active0, 0L, active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa8_4(active0, 0L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa8_4(active0, 0xa000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_4(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_4(7, 66, 6);
         return jjMoveStringLiteralDfa8_4(active0, 0L, active1, 0x10L);
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_4(7, 74, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_4(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_4(active0, 0xc000000000000000L, active1, 0x810L);
      case 115:
         return jjMoveStringLiteralDfa9_4(active0, 0L, active1, 0x60L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_4(8, 64, 6);
         return jjMoveStringLiteralDfa9_4(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_4(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa10_4(active0, 0x8000000000000000L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa10_4(active0, 0x4000000000000000L, active1, 0x10L);
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_4(9, 61, 6);
         return jjMoveStringLiteralDfa10_4(active0, 0L, active1, 0x60L);
      default :
         break;
   }
   return jjStartNfa_4(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_4(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_4(10, 63, 6);
         break;
      case 109:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_4(10, 68, 6);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_4(10, 69, 6);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_4(10, 70, 6);
         break;
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_4(10, 62, 6);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_4(10, 75, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_4(9, active0, active1);
}
static final long[] jjbitVec3 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec7 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec9 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec14 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar != 36)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  if (kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(4);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(6);
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 38)
                     kind = 38;
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(4);
                  break;
               case 5:
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_7(0x40000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_6(0x20000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   5, 6, 8, 5, 6, 10, 8, 7, 9, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            if ((jjbitVec4[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\45\155\141\164\143\150", "\45\162\165\154\145", "\45\155\141\153\145", 
"\140", "\45\166\141\162\151\141\142\154\145", "\45\164\171\160\145", 
"\45\164\171\160\145\164\145\162\155", "\45\164\171\160\145\151\156\164", "\45\164\171\160\145\154\151\163\164", 
"\45\164\171\160\145\141\162\162\141\171", "\45\151\156\143\154\165\144\145", "\45\157\160", 
"\45\157\160\154\151\163\164", "\45\157\160\141\162\162\141\171", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\173", "\175", null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\55\76", "\75\76", "\54", 
"\72", "\75", "\100", "\56", "\50", "\51", "\133", "\135", "\173", "\175", "\137", 
"\55", "\52", "\155\141\153\145", "\155\141\153\145\137\145\155\160\164\171", 
"\155\141\153\145\137\151\156\163\145\162\164", "\155\141\153\145\137\141\160\160\145\156\144", 
"\151\155\160\154\145\155\145\156\164", "\146\163\171\155", "\147\145\164\137\163\154\157\164", 
"\151\163\137\146\163\171\155", "\147\145\164\137\163\165\142\164\145\162\155", 
"\147\145\164\137\146\165\156\137\163\171\155", "\143\155\160\137\146\165\156\137\163\171\155", "\145\161\165\141\154\163", 
"\147\145\164\137\150\145\141\144", "\147\145\164\137\164\141\151\154", "\151\163\137\145\155\160\164\171", 
"\147\145\164\137\145\154\145\155\145\156\164", "\147\145\164\137\163\151\172\145", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "TOM", 
   "TOM_IN_SINGLE_LINE_COMMENT", 
   "TOM_IN_FORMAL_COMMENT", 
   "TOM_IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 
   0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffff000e0007fffL, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x71f170f8000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x70017000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8e008f00000L, 0x0L, 
};
private ASCII_UCodeESC_CharStream input_stream;
private final int[] jjrounds = new int[13];
private final int[] jjstateSet = new int[26];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TomParserTokenManager(ASCII_UCodeESC_CharStream stream)
{
   if (ASCII_UCodeESC_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TomParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_UCodeESC_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 8 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 31)
         {
            jjmatchedKind = 31;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 43)
         {
            jjmatchedKind = 43;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 43)
         {
            jjmatchedKind = 43;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 43)
         {
            jjmatchedKind = 43;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 22 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      case 38 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
