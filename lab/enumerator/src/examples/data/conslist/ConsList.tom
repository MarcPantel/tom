
%include { int.tom }

%typeterm Elem {
  implement { examples.data.conslist.types.Elem }
  is_sort(t) { ($t instanceof examples.data.conslist.types.Elem) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm List {
  implement { examples.data.conslist.types.List }
  is_sort(t) { ($t instanceof examples.data.conslist.types.List) }

  equals(t1,t2) { ($t1==$t2) }

}
%op Elem a() {
  is_fsym(t) { ($t instanceof examples.data.conslist.types.elem.a) }
  make() { examples.data.conslist.types.elem.a.make() }
}

%op Elem b() {
  is_fsym(t) { ($t instanceof examples.data.conslist.types.elem.b) }
  make() { examples.data.conslist.types.elem.b.make() }
}

%op Elem nat(i:int) {
  is_fsym(t) { ($t instanceof examples.data.conslist.types.elem.nat) }
  get_slot(i, t) { $t.geti() }
  make(t0) { examples.data.conslist.types.elem.nat.make($t0) }
}

%op List nil() {
  is_fsym(t) { ($t instanceof examples.data.conslist.types.list.nil) }
  make() { examples.data.conslist.types.list.nil.make() }
}

%op List cons(e:Elem, l:List) {
  is_fsym(t) { ($t instanceof examples.data.conslist.types.list.cons) }
  get_slot(e, t) { $t.gete() }
  get_slot(l, t) { $t.getl() }
  make(t0, t1) { examples.data.conslist.types.list.cons.make($t0, $t1) }
}

