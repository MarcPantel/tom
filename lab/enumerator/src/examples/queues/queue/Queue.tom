
%include { int.tom }

%typeterm Queue {
  implement { examples.queues.queue.types.Queue }
  is_sort(t) { ($t instanceof examples.queues.queue.types.Queue) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm Elem {
  implement { examples.queues.queue.types.Elem }
  is_sort(t) { ($t instanceof examples.queues.queue.types.Elem) }

  equals(t1,t2) { ($t1==$t2) }

}
%op Queue empty() {
  is_fsym(t) { ($t instanceof examples.queues.queue.types.queue.empty) }
  make() { examples.queues.queue.types.queue.empty.make() }
}

%op Queue add(e:Elem, q:Queue) {
  is_fsym(t) { ($t instanceof examples.queues.queue.types.queue.add) }
  get_slot(e, t) { $t.gete() }
  get_slot(q, t) { $t.getq() }
  make(t0, t1) { examples.queues.queue.types.queue.add.make($t0, $t1) }
}

%op Queue remove(q:Queue) {
  is_fsym(t) { ($t instanceof examples.queues.queue.types.queue.remove) }
  get_slot(q, t) { $t.getq() }
  make(t0) { examples.queues.queue.types.queue.remove.make($t0) }
}

%op Elem val(v:int) {
  is_fsym(t) { ($t instanceof examples.queues.queue.types.elem.val) }
  get_slot(v, t) { $t.getv() }
  make(t0) { examples.queues.queue.types.elem.val.make($t0) }
}

%op Elem top(q:Queue) {
  is_fsym(t) { ($t instanceof examples.queues.queue.types.elem.top) }
  get_slot(q, t) { $t.getq() }
  make(t0) { examples.queues.queue.types.elem.top.make($t0) }
}

