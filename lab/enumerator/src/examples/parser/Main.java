package examples.parser;

import java.io.FileInputStream;

import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.tree.Tree;

import tom.library.sl.VisitFailure;
import examples.parser.rec.RecAdaptor;
import examples.parser.rec.types.Exp;
import examples.parser.rec.types.ExpList;
import examples.parser.rec.types.Pair;
import examples.parser.rec.types.Stm;
import examples.parser.rec.types.Table;

public class Main {

  private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static boolean tom_equal_term_Op(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Op(Object t) {return  (t instanceof examples.parser.rec.types.Op) ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Pair(Object t) {return  (t instanceof examples.parser.rec.types.Pair) ;}private static boolean tom_equal_term_Table(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Table(Object t) {return  (t instanceof examples.parser.rec.types.Table) ;}private static boolean tom_equal_term_Stm(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Stm(Object t) {return  (t instanceof examples.parser.rec.types.Stm) ;}private static boolean tom_equal_term_Exp(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_Exp(Object t) {return  (t instanceof examples.parser.rec.types.Exp) ;}private static boolean tom_equal_term_ExpList(Object t1, Object t2) {return  (t1==t2) ;}private static boolean tom_is_sort_ExpList(Object t) {return  (t instanceof examples.parser.rec.types.ExpList) ;}private static boolean tom_is_fun_sym_Plus( examples.parser.rec.types.Op  t) {return  (t instanceof examples.parser.rec.types.op.Plus) ;}private static boolean tom_is_fun_sym_Minus( examples.parser.rec.types.Op  t) {return  (t instanceof examples.parser.rec.types.op.Minus) ;}private static boolean tom_is_fun_sym_Times( examples.parser.rec.types.Op  t) {return  (t instanceof examples.parser.rec.types.op.Times) ;}private static boolean tom_is_fun_sym_Div( examples.parser.rec.types.Op  t) {return  (t instanceof examples.parser.rec.types.op.Div) ;}private static boolean tom_is_fun_sym_Equal( examples.parser.rec.types.Op  t) {return  (t instanceof examples.parser.rec.types.op.Equal) ;}private static boolean tom_is_fun_sym_Pair( examples.parser.rec.types.Pair  t) {return  (t instanceof examples.parser.rec.types.pair.Pair) ;}private static  examples.parser.rec.types.Pair  tom_make_Pair( int  t0,  examples.parser.rec.types.Table  t1) { return  examples.parser.rec.types.pair.Pair.make(t0, t1) ;}private static  int  tom_get_slot_Pair_Value( examples.parser.rec.types.Pair  t) {return  t.getValue() ;}private static  examples.parser.rec.types.Table  tom_get_slot_Pair_Table( examples.parser.rec.types.Pair  t) {return  t.getTable() ;}private static boolean tom_is_fun_sym_Table( examples.parser.rec.types.Table  t) {return  (t instanceof examples.parser.rec.types.table.Table) ;}private static  examples.parser.rec.types.Table  tom_make_Table( String  t0,  int  t1,  examples.parser.rec.types.Table  t2) { return  examples.parser.rec.types.table.Table.make(t0, t1, t2) ;}private static  String  tom_get_slot_Table_Name( examples.parser.rec.types.Table  t) {return  t.getName() ;}private static  int  tom_get_slot_Table_Value( examples.parser.rec.types.Table  t) {return  t.getValue() ;}private static  examples.parser.rec.types.Table  tom_get_slot_Table_Tail( examples.parser.rec.types.Table  t) {return  t.getTail() ;}private static  examples.parser.rec.types.Table  tom_make_EmptyTable() { return  examples.parser.rec.types.table.EmptyTable.make() ;}private static boolean tom_is_fun_sym_Assign( examples.parser.rec.types.Stm  t) {return  (t instanceof examples.parser.rec.types.stm.Assign) ;}private static  String  tom_get_slot_Assign_Name( examples.parser.rec.types.Stm  t) {return  t.getName() ;}private static  examples.parser.rec.types.Exp  tom_get_slot_Assign_Exp( examples.parser.rec.types.Stm  t) {return  t.getExp() ;}private static boolean tom_is_fun_sym_Print( examples.parser.rec.types.Stm  t) {return  (t instanceof examples.parser.rec.types.stm.Print) ;}private static  examples.parser.rec.types.ExpList  tom_get_slot_Print_List( examples.parser.rec.types.Stm  t) {return  t.getList() ;}private static boolean tom_is_fun_sym_If( examples.parser.rec.types.Stm  t) {return  (t instanceof examples.parser.rec.types.stm.If) ;}private static  examples.parser.rec.types.Exp  tom_get_slot_If_cond( examples.parser.rec.types.Stm  t) {return  t.getcond() ;}private static  examples.parser.rec.types.Stm  tom_get_slot_If_s1( examples.parser.rec.types.Stm  t) {return  t.gets1() ;}private static  examples.parser.rec.types.Stm  tom_get_slot_If_s2( examples.parser.rec.types.Stm  t) {return  t.gets2() ;}private static boolean tom_is_fun_sym_Id( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.Id) ;}private static  String  tom_get_slot_Id_Name( examples.parser.rec.types.Exp  t) {return  t.getName() ;}private static boolean tom_is_fun_sym_Num( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.Num) ;}private static  int  tom_get_slot_Num_Value( examples.parser.rec.types.Exp  t) {return  t.getValue() ;}private static boolean tom_is_fun_sym_OpExp( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.OpExp) ;}private static  examples.parser.rec.types.Exp  tom_get_slot_OpExp_Exp1( examples.parser.rec.types.Exp  t) {return  t.getExp1() ;}private static  examples.parser.rec.types.Op  tom_get_slot_OpExp_Op( examples.parser.rec.types.Exp  t) {return  t.getOp() ;}private static  examples.parser.rec.types.Exp  tom_get_slot_OpExp_Exp2( examples.parser.rec.types.Exp  t) {return  t.getExp2() ;}private static boolean tom_is_fun_sym_SeqExp( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.SeqExp) ;}private static  examples.parser.rec.types.Stm  tom_get_slot_SeqExp_Stm( examples.parser.rec.types.Exp  t) {return  t.getStm() ;}private static  examples.parser.rec.types.Exp  tom_get_slot_SeqExp_Exp( examples.parser.rec.types.Exp  t) {return  t.getExp() ;}private static boolean tom_is_fun_sym_True( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.True) ;}private static boolean tom_is_fun_sym_False( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.False) ;}private static boolean tom_is_fun_sym_NotExp( examples.parser.rec.types.Exp  t) {return  (t instanceof examples.parser.rec.types.exp.NotExp) ;}private static  examples.parser.rec.types.Exp  tom_get_slot_NotExp_Exp1( examples.parser.rec.types.Exp  t) {return  t.getExp1() ;}private static boolean tom_is_fun_sym_Seq( examples.parser.rec.types.Stm  t) {return  ((t instanceof examples.parser.rec.types.stm.ConsSeq) || (t instanceof examples.parser.rec.types.stm.EmptySeq)) ;}private static  examples.parser.rec.types.Stm  tom_empty_list_Seq() { return  examples.parser.rec.types.stm.EmptySeq.make() ;}private static  examples.parser.rec.types.Stm  tom_cons_list_Seq( examples.parser.rec.types.Stm  e,  examples.parser.rec.types.Stm  l) { return  examples.parser.rec.types.stm.ConsSeq.make(e,l) ;}private static  examples.parser.rec.types.Stm  tom_get_head_Seq_Stm( examples.parser.rec.types.Stm  l) {return  l.getHeadSeq() ;}private static  examples.parser.rec.types.Stm  tom_get_tail_Seq_Stm( examples.parser.rec.types.Stm  l) {return  l.getTailSeq() ;}private static boolean tom_is_empty_Seq_Stm( examples.parser.rec.types.Stm  l) {return  l.isEmptySeq() ;}   private static   examples.parser.rec.types.Stm  tom_append_list_Seq( examples.parser.rec.types.Stm  l1,  examples.parser.rec.types.Stm  l2) {     if( l1.isEmptySeq() ) {       return l2;     } else if( l2.isEmptySeq() ) {       return l1;     } else if( ((l1 instanceof examples.parser.rec.types.stm.ConsSeq) || (l1 instanceof examples.parser.rec.types.stm.EmptySeq)) ) {       if(  l1.getTailSeq() .isEmptySeq() ) {         return  examples.parser.rec.types.stm.ConsSeq.make( l1.getHeadSeq() ,l2) ;       } else {         return  examples.parser.rec.types.stm.ConsSeq.make( l1.getHeadSeq() ,tom_append_list_Seq( l1.getTailSeq() ,l2)) ;       }     } else {       return  examples.parser.rec.types.stm.ConsSeq.make(l1,l2) ;     }   }   private static   examples.parser.rec.types.Stm  tom_get_slice_Seq( examples.parser.rec.types.Stm  begin,  examples.parser.rec.types.Stm  end, examples.parser.rec.types.Stm  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptySeq()  ||  (end==tom_empty_list_Seq()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  examples.parser.rec.types.stm.ConsSeq.make((( ((begin instanceof examples.parser.rec.types.stm.ConsSeq) || (begin instanceof examples.parser.rec.types.stm.EmptySeq)) )? begin.getHeadSeq() :begin),( examples.parser.rec.types.Stm )tom_get_slice_Seq((( ((begin instanceof examples.parser.rec.types.stm.ConsSeq) || (begin instanceof examples.parser.rec.types.stm.EmptySeq)) )? begin.getTailSeq() :tom_empty_list_Seq()),end,tail)) ;   }   private static boolean tom_is_fun_sym_ExpList( examples.parser.rec.types.ExpList  t) {return  ((t instanceof examples.parser.rec.types.explist.ConsExpList) || (t instanceof examples.parser.rec.types.explist.EmptyExpList)) ;}private static  examples.parser.rec.types.ExpList  tom_empty_list_ExpList() { return  examples.parser.rec.types.explist.EmptyExpList.make() ;}private static  examples.parser.rec.types.ExpList  tom_cons_list_ExpList( examples.parser.rec.types.Exp  e,  examples.parser.rec.types.ExpList  l) { return  examples.parser.rec.types.explist.ConsExpList.make(e,l) ;}private static  examples.parser.rec.types.Exp  tom_get_head_ExpList_ExpList( examples.parser.rec.types.ExpList  l) {return  l.getHeadExpList() ;}private static  examples.parser.rec.types.ExpList  tom_get_tail_ExpList_ExpList( examples.parser.rec.types.ExpList  l) {return  l.getTailExpList() ;}private static boolean tom_is_empty_ExpList_ExpList( examples.parser.rec.types.ExpList  l) {return  l.isEmptyExpList() ;}   private static   examples.parser.rec.types.ExpList  tom_append_list_ExpList( examples.parser.rec.types.ExpList l1,  examples.parser.rec.types.ExpList  l2) {     if( l1.isEmptyExpList() ) {       return l2;     } else if( l2.isEmptyExpList() ) {       return l1;     } else if(  l1.getTailExpList() .isEmptyExpList() ) {       return  examples.parser.rec.types.explist.ConsExpList.make( l1.getHeadExpList() ,l2) ;     } else {       return  examples.parser.rec.types.explist.ConsExpList.make( l1.getHeadExpList() ,tom_append_list_ExpList( l1.getTailExpList() ,l2)) ;     }   }   private static   examples.parser.rec.types.ExpList  tom_get_slice_ExpList( examples.parser.rec.types.ExpList  begin,  examples.parser.rec.types.ExpList  end, examples.parser.rec.types.ExpList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyExpList()  ||  (end==tom_empty_list_ExpList()) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  examples.parser.rec.types.explist.ConsExpList.make( begin.getHeadExpList() ,( examples.parser.rec.types.ExpList )tom_get_slice_ExpList( begin.getTailExpList() ,end,tail)) ;   }    private static boolean tom_equal_term_Strategy(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Strategy(Object t) {return  (t instanceof tom.library.sl.Strategy) ;} private static boolean tom_equal_term_Position(Object t1, Object t2) {return  (t1.equals(t2)) ;}private static boolean tom_is_sort_Position(Object t) {return  (t instanceof tom.library.sl.Position) ;} private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return ( new tom.library.sl.Mu(var,v) );}private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return ( new tom.library.sl.MuVar(name) );}private static  tom.library.sl.Strategy  tom_make_Identity() { return ( new tom.library.sl.Identity() );}private static  tom.library.sl.Strategy  tom_make_One( tom.library.sl.Strategy  v) { return ( new tom.library.sl.One(v) );}private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return ( new tom.library.sl.All(v) );}private static  tom.library.sl.Strategy  tom_make_Fail() { return ( new tom.library.sl.Fail() );}private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.Sequence );}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.Sequence.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) );}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Sequence )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) ;       } else {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Sequence.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_Sequence())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Sequence.make(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):tom_empty_list_Sequence()),end,tail)) ;   }   private static boolean tom_is_fun_sym_Choice( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.Choice );}private static  tom.library.sl.Strategy  tom_empty_list_Choice() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_Choice( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.Choice.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_Choice_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.THEN) );}private static boolean tom_is_empty_Choice_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Choice )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) ;       } else {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Choice.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_Choice())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Choice.make(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):tom_empty_list_Choice()),end,tail)) ;   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.SequenceId );}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.SequenceId.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) );}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) {return ( t == null );}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.SequenceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.SequenceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(tom_empty_list_SequenceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.SequenceId.make(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):tom_empty_list_SequenceId()),end,tail)) ;   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) {return ( t instanceof tom.library.sl.ChoiceId );}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return  null ;}private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  tom.library.sl.ChoiceId.make(head,tail) ;}private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) );}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) );}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) {return ( t ==null );}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.ChoiceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.ChoiceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(tom_empty_list_ChoiceId())) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.ChoiceId.make(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):tom_empty_list_ChoiceId()),end,tail)) ;   }   private static  tom.library.sl.Strategy  tom_make_OneId( tom.library.sl.Strategy  v) { return ( new tom.library.sl.OneId(v) );}   private static  tom.library.sl.Strategy  tom_make_AllSeq( tom.library.sl.Strategy  s) { return ( new tom.library.sl.AllSeq(s) );}private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_cons_list_Sequence(tom_make_One(tom_make_Identity()),tom_empty_list_Sequence())),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( tom_make_mu(tom_make_MuVar("x"),tom_cons_list_Choice(s2,tom_cons_list_Choice(tom_cons_list_Sequence(s1,tom_cons_list_Sequence(tom_make_One(tom_make_MuVar("x")),tom_empty_list_Sequence())),tom_empty_list_Choice()))));} private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return ( tom_cons_list_Choice(s,tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice())) );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(tom_cons_list_Sequence(s,tom_cons_list_Sequence(tom_make_MuVar("_x"),tom_empty_list_Sequence())),tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(v,tom_cons_list_Choice(tom_make_One(tom_make_MuVar("_x")),tom_empty_list_Choice()))) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId()))) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_OneId(tom_make_MuVar("_x")),tom_empty_list_ChoiceId()))) );}   


  public static void main(String[] args) throws VisitFailure {
    try {
      if(args.length<=0) {
        System.out.println("usage: java Main <filename>"); 
      } else {
        // Initialize parser
        RecLexer lexer = new RecLexer(new ANTLRInputStream(new FileInputStream(args[0])));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        RecParser parser = new RecParser(tokens);
        // Parse the input expression
        Tree b = (Tree) parser.program().getTree();
        Stm p = (Stm) RecAdaptor.getTerm(b);
        System.out.println(p);
        Main main = new Main();
        main.interp(p);
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
  }

  public static int lookup(Table table, String key) {
    {{if (tom_is_sort_Table(table)) {if (tom_is_sort_Table((( examples.parser.rec.types.Table )table))) {if (tom_is_fun_sym_Table((( examples.parser.rec.types.Table )(( examples.parser.rec.types.Table )table)))) {

        if(key==tom_get_slot_Table_Name((( examples.parser.rec.types.Table )table))) {
          return tom_get_slot_Table_Value((( examples.parser.rec.types.Table )table));
        } else {
          return lookup(tom_get_slot_Table_Tail((( examples.parser.rec.types.Table )table)),key);
        }
      }}}}}

    return 0;
  }

  private void interp(Stm s) {
    Table table = tom_make_EmptyTable();
    interpStm(s,table);
  }

  private Table interpStm(Stm s, Table table) {
    {{if (tom_is_sort_Stm(s)) {if (tom_is_sort_Stm((( examples.parser.rec.types.Stm )s))) {if (tom_is_fun_sym_Assign((( examples.parser.rec.types.Stm )(( examples.parser.rec.types.Stm )s)))) {

        Pair p = interpExp(tom_get_slot_Assign_Exp((( examples.parser.rec.types.Stm )s)),table);
        Table newTable = tom_make_Table(tom_get_slot_Assign_Name((( examples.parser.rec.types.Stm )s)),p.getValue(),p.getTable());   
        return newTable;
      }}}}{if (tom_is_sort_Stm(s)) {if (tom_is_fun_sym_Seq((( examples.parser.rec.types.Stm )(( examples.parser.rec.types.Stm )s)))) {if (!( ( tom_is_empty_Seq_Stm((( examples.parser.rec.types.Stm )s)) || tom_equal_term_Stm((( examples.parser.rec.types.Stm )s), tom_empty_list_Seq()) ) )) {

 
        Table newTable = interpStm(((tom_is_fun_sym_Seq((( examples.parser.rec.types.Stm )s)))?(tom_get_tail_Seq_Stm((( examples.parser.rec.types.Stm )s))):(tom_empty_list_Seq())),interpStm(((tom_is_fun_sym_Seq((( examples.parser.rec.types.Stm )s)))?(tom_get_head_Seq_Stm((( examples.parser.rec.types.Stm )s))):((( examples.parser.rec.types.Stm )s))),table));
        return newTable;
      }}}}{if (tom_is_sort_Stm(s)) {if (tom_is_sort_Stm((( examples.parser.rec.types.Stm )s))) {if (tom_is_fun_sym_Print((( examples.parser.rec.types.Stm )(( examples.parser.rec.types.Stm )s)))) {


        Table t = interpPrint(tom_get_slot_Print_List((( examples.parser.rec.types.Stm )s)),table);
        System.out.println();
        return t;
      }}}}{if (tom_is_sort_Stm(s)) {if (tom_is_sort_Stm((( examples.parser.rec.types.Stm )s))) {if (tom_is_fun_sym_If((( examples.parser.rec.types.Stm )(( examples.parser.rec.types.Stm )s)))) {

        Pair p = interpExp(tom_get_slot_If_cond((( examples.parser.rec.types.Stm )s)),table);
        if(p.getValue()==1) {
          return interpStm(tom_get_slot_If_s1((( examples.parser.rec.types.Stm )s)),table);
        } else {
          return interpStm(tom_get_slot_If_s2((( examples.parser.rec.types.Stm )s)),table);
        }
        
      }}}}}

    return tom_make_EmptyTable();
  }

  private Table interpPrint(ExpList list, Table table) {
    {{if (tom_is_sort_ExpList(list)) {if (tom_is_fun_sym_ExpList((( examples.parser.rec.types.ExpList )(( examples.parser.rec.types.ExpList )list)))) {if (!(tom_is_empty_ExpList_ExpList((( examples.parser.rec.types.ExpList )list)))) {

        Pair p = interpExp(tom_get_head_ExpList_ExpList((( examples.parser.rec.types.ExpList )list)),table);
        System.out.print(p.getValue());
        System.out.print(" ");
        return interpPrint(tom_get_tail_ExpList_ExpList((( examples.parser.rec.types.ExpList )list)),p.getTable());
      }}}}}

    return table;
  }
    
  private Pair interpExp(Exp e, Table table) {
    {{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_Id((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {
 return tom_make_Pair(lookup(table,tom_get_slot_Id_Name((( examples.parser.rec.types.Exp )e))),table); }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_Num((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {
 return tom_make_Pair(tom_get_slot_Num_Value((( examples.parser.rec.types.Exp )e)),table); }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_True((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {
 return tom_make_Pair(1,table); }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_False((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {
 return tom_make_Pair(0,table); }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_NotExp((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {

        Pair p = interpExp(tom_get_slot_NotExp_Exp1((( examples.parser.rec.types.Exp )e)),table);
        int v = (p.getValue()==1)?0:1;
        return tom_make_Pair(v,p.getTable());
      }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_OpExp((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) { examples.parser.rec.types.Op  tom_op=tom_get_slot_OpExp_Op((( examples.parser.rec.types.Exp )e));

        Pair p1 = interpExp(tom_get_slot_OpExp_Exp1((( examples.parser.rec.types.Exp )e)),table);
        Pair p2 = interpExp(tom_get_slot_OpExp_Exp2((( examples.parser.rec.types.Exp )e)),p1.getTable());
        {{if (tom_is_sort_Pair(p1)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p1))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p1)))) {if (tom_is_sort_Op(tom_op)) {if (tom_is_sort_Op((( examples.parser.rec.types.Op )tom_op))) {if (tom_is_fun_sym_Plus((( examples.parser.rec.types.Op )(( examples.parser.rec.types.Op )tom_op)))) {if (tom_is_sort_Pair(p2)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p2))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p2)))) {
 return tom_make_Pair(tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p1))+ tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p2)),tom_get_slot_Pair_Table((( examples.parser.rec.types.Pair )p2))); }}}}}}}}}}{if (tom_is_sort_Pair(p1)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p1))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p1)))) {if (tom_is_sort_Op(tom_op)) {if (tom_is_sort_Op((( examples.parser.rec.types.Op )tom_op))) {if (tom_is_fun_sym_Minus((( examples.parser.rec.types.Op )(( examples.parser.rec.types.Op )tom_op)))) {if (tom_is_sort_Pair(p2)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p2))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p2)))) {
 return tom_make_Pair(tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p1))- tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p2)),tom_get_slot_Pair_Table((( examples.parser.rec.types.Pair )p2))); }}}}}}}}}}{if (tom_is_sort_Pair(p1)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p1))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p1)))) {if (tom_is_sort_Op(tom_op)) {if (tom_is_sort_Op((( examples.parser.rec.types.Op )tom_op))) {if (tom_is_fun_sym_Times((( examples.parser.rec.types.Op )(( examples.parser.rec.types.Op )tom_op)))) {if (tom_is_sort_Pair(p2)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p2))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p2)))) {
 return tom_make_Pair(tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p1))* tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p2)),tom_get_slot_Pair_Table((( examples.parser.rec.types.Pair )p2))); }}}}}}}}}}{if (tom_is_sort_Pair(p1)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p1))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p1)))) {if (tom_is_sort_Op(tom_op)) {if (tom_is_sort_Op((( examples.parser.rec.types.Op )tom_op))) {if (tom_is_fun_sym_Div((( examples.parser.rec.types.Op )(( examples.parser.rec.types.Op )tom_op)))) {if (tom_is_sort_Pair(p2)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p2))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p2)))) {
 return tom_make_Pair(tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p1))/ tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p2)),tom_get_slot_Pair_Table((( examples.parser.rec.types.Pair )p2))); }}}}}}}}}}{if (tom_is_sort_Pair(p1)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p1))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p1)))) {if (tom_is_sort_Op(tom_op)) {if (tom_is_sort_Op((( examples.parser.rec.types.Op )tom_op))) {if (tom_is_fun_sym_Equal((( examples.parser.rec.types.Op )(( examples.parser.rec.types.Op )tom_op)))) {if (tom_is_sort_Pair(p2)) {if (tom_is_sort_Pair((( examples.parser.rec.types.Pair )p2))) {if (tom_is_fun_sym_Pair((( examples.parser.rec.types.Pair )(( examples.parser.rec.types.Pair )p2)))) {
 return tom_make_Pair((tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p1))==tom_get_slot_Pair_Value((( examples.parser.rec.types.Pair )p2)))?1:0,tom_get_slot_Pair_Table((( examples.parser.rec.types.Pair )p2))); }}}}}}}}}}}

      }}}}{if (tom_is_sort_Exp(e)) {if (tom_is_sort_Exp((( examples.parser.rec.types.Exp )e))) {if (tom_is_fun_sym_SeqExp((( examples.parser.rec.types.Exp )(( examples.parser.rec.types.Exp )e)))) {


        Table t = interpStm(tom_get_slot_SeqExp_Stm((( examples.parser.rec.types.Exp )e)),table);
        Pair p = interpExp(tom_get_slot_SeqExp_Exp((( examples.parser.rec.types.Exp )e)),t);
        return p;
      }}}}}


    System.out.println("should not be there: " + e);
    return null;      
  }

}
