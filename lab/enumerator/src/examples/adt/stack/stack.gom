module examples.adt.stack.Stack
imports int
abstract syntax

Stack = empty()
      | push(stack:Stack, element:int)


sort Stack:import() {
  import examples.adt.stack.EmptyStackException;
  import examples.adt.stack.IStack;
  }

sort Stack:interface() { IStack }

sort Stack:block() {

  public IStack empty() {
    return `empty();
  }

  public IStack push(Integer element) {
    return `push(this, element);
  }

  public boolean isEmpty() {
    return this.isempty();
  }

  public Integer top() throws EmptyStackException {
    %match(this) {
      push(_, e) -> { return `e; }
    }
    throw new EmptyStackException();
  }

  public Stack pop() throws EmptyStackException {
    %match(this) {
      push(s, _) -> { return `s; }
    }
    throw new EmptyStackException();
  }

  public  int size() {
    %match(this) {
      empty()    -> { return 0; }
      push(s, _) -> { return 1 + `s.size(); } 
    }
    throw new RuntimeException("bad term " + this);
  }

}
