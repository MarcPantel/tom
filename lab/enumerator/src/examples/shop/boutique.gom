module examples.shop.Boutique
imports int
abstract syntax

Item = item(id:int, price:int)

LineItem = lineItem(item:Item, quantity:int)

Inventory = items(LineItem*)

Carts = carts(Inventory*)
Shop = shop(inventory:Inventory, carts:Carts)


// positive ids and prices
item:make(id,p) {
  return realMake(Math.abs(id),Math.abs(p));
}

// positive ids and prices
lineItem:make(it,q) {
  return realMake(it,Math.abs(q));
}

// inventories should contain only one line per item
items:make_insert(e,l) {
  %match(LineItem e, Inventory l) {
    lineItem(item(id,p), q), items(IL1*, lineItem(item(id,p2),q2), IL2*) -> { 
      return `items(IL1*, lineItem(item(id,p),q+q2), IL2*); 
    }
  }
  return realMake(e,l);
}

// same price for the same id in all carts
carts:make_insert(e,l) {
  %match(Inventory e, Carts l) {
    items(IL1*, lineItem(item(id,p2),q2), IL2*) , ocarts@carts(C1*, items(I1*, lineItem(item(id,p1),q1), I2*), C2*)  -> { 
      if(`p1!=`p2){
        return `carts(items(IL1*, lineItem(item(id,p1),q2), IL2*), ocarts); 
      }
    }
  }
  return realMake(e,l);
}


// carts should only contain items from the inventory and in less quantity
// items should have same price in carts and inventory
// TODO: sum of quantities in carts = quantity in inventory
// TODO: quantities (in carts) bigger than 0
shop:make(i,cs) {
  %match(Carts cs, Inventory i) {

    scarts@carts(C1*, items(I1*, it@lineItem(item(id,p),q), I2*), C2*),
           !items(IL1*, lineItem(item(id,_),_), IL2*) -> {
      return `shop(items(it,i*), scarts ); 
    }

    scarts@carts(C1*, items(I1*, lineItem(item(id,p),q), I2*), C2*),
           items(IL1*, lineItem(item(id,pi),qi), IL2*) -> {
      if(`qi<`q){
        return `shop( items(IL1*, lineItem(item(id,p),qi+q+2), IL2*), scarts );
      }else if(`pi!=`p){
        return `shop( items(IL1*, lineItem(item(id,p),qi), IL2*), scarts );
      }
    }
  }
  return realMake(i,cs);
}
