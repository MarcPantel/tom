module examples.shop.Boutique
imports int
abstract syntax

LineItem = lineItem(item:Item, quantity:int)

Item = item(id:int, price:int)

Inventory = items(LineItem*)

//ShoppingCart = lines(LineItem*)

Carts = carts(Inventory*)
Shop = shop(inventory:Inventory, carts:Carts)


// inventories should contain only one line per item
items:make_insert(e,l) {
  %match(LineItem e, Inventory l) {
    lineItem(item(id,p), q), items(IL1*, lineItem(item(id,p2),q2), IL2*) -> { 
      return `items(IL1*, lineItem(item(id,p),q+q2), IL2*); 
    }
  }
  return realMake(e,l);
}


// carts should only contain items from the inventory and in less quantity
// items should have same price in carts and inventory
shop:make(i,cs) {
  //   examples.shop.boutique.types.Inventory inv = examples.shop.boutique.types.Shop.fix(i,cs);
  %match(Carts cs, Inventory i) {
    scarts@carts(C1*, items(I1*, it@lineItem(item(id,p),q), I2*), C2*),
           !items(IL1*, lineItem(item(id,_),_), IL2*) -> {
      return `shop(items(it,i*), scarts ); 
    }

    // stack overflow    
    // prices for same id can have different prices in different carts
    scarts@carts(C1*, items(I1*, lineItem(item(id,p),q), I2*), C2*),
           items(IL1*, lineItem(item(id,pi),qi), IL2*) -> {
      if(`qi<`q){
        System.out.println("QTS: "+`qi+" < " +`q);
        return `shop( items(IL1*, lineItem(item(id,p),qi+q), IL2*), scarts );
      }else if(`pi!=`p){
        System.out.println("INV: "+`items(IL1*, lineItem(item(id,p),qi), IL2*));
        System.out.println("CARTS: "+`scarts);
        System.out.println("PRICES: "+`pi+" != " +`p);
        return `shop( items(IL1*, lineItem(item(id,p),qi), IL2*), scarts );
      }
    }
  }
  return realMake(i,cs);
}


// sort Shop:block() {
//   public static Inventory fix(Inventory i, Carts cs) {
//     %match(Carts cs, Inventory i) {
//       carts(C1*, items(I1*, it@lineItem(item(id,p),q), I2*), C2*),
//         !items(IL1*, lineItem(item(id,_),_), IL2*) -> {
//              return `fix(items(it,i*), carts(C1*, items(I1*, it, I2*), C2*) ); 
//       }
//       carts(C1*, items(I1*, it@lineItem(item(id,p),q), I2*), C2*),
//         items(IL1*, lineItem(item(id,pi),qi), IL2*) -> {
//         if(`qi<`q){
//           return `fix( items(IL1*, lineItem(item(id,p),qi+q), IL2*),
//                        carts(C1*, items(I1*, lineItem(item(id,p),q), I2*), C2*));
//         }
//       }
//     }
//     return i;
//   }
// }




// sort Shop:block() {
//   public static Inventory fix(Inventory i, Carts cs) {
//     %match(Carts cs) {
//       carts(C1*, items(I1*, it@lineItem(item(id,p),q), I2*), C2*) -> { 
//         %match(Inventory i) {
//           !items(IL1*, lineItem(item(id,_),_), IL2*) -> {
//             return `fix(items(it,i*), carts(C1*, items(I1*, I2*), C2*) ); 
//           }
//         }
//       }
//     }
//     return i;
//   }
// }


