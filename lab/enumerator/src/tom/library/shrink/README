What it is?
-----------

Shrink is a library that given a term it will return several 
(possibly a lot of) smaller terms. This library consist of one interface:
Shrink, which provides two overloaded method shrink() that return a
Collection of object. The method shrink() takes a Java Object 
as the term that will be used as the basis to generate smaller 
terms. In its overloaded version, it takes one other parameter: 
a Java Comparator that will be used to compare the resulting
terms and sort them based on the Comparator.


Package structure
-----------------

# tom.library.shrink
	Contains mainly the Shrink interface and its known implementation.
	- Interface Shrink:
		An interface that needs to implemented an implementation of a
		Shrink mechanism. It provides two overloaded version of shrink()
		method. The first one only takes an Object as its parameter
		and the other one takes an Object and a Comparator to sort
		the resulting terms.
	- Class SimpleShrink:
		An implementation of the Shrink interface. It uses three mutation
		rules to generates terms starting from the given term to several
		smaller terms. These rules are:
		* Get the terminal constructors (constants) and immediate subterms 
			that have the same type with the given term
		* Replace subterms with their constants
		* Generate terms that have smaller int/String values based on the 
			given counter-example
		Using this approach means that the Shrink mechanism in PropCheck
		needs to be done repeatedly (default mechanism) and the returned
		terms from the Shrink library need to be ordered based on the terms'
		size.
		In the implementation, it uses a set of Reducers (tom.library.shrink.reducers)
		to reduce a term.
	- Class BigShrink:
		An experimental class that uses different approach of shrink, still
		uses the same mutation rules, but they are used recursively. This
		approach is intended to make the Shrink mechanism in PropCheck done
		only once instead of repeatedly as the default behaviour. However,
		the overhead is too much and it takes a considerable amount of time 
		compared to SimpleShrink.
	- Class TermComparator:
		A default comparator for a type (term) generated by Gom compiler. 
		It takes the advantage of the fact that all Gom generated type is 
		an instance of the SL's Visitable. Given two terms, the class
		will first compare the the size of both constructors. If both
		have the same size then their value will be compared.
		
# tom.library.shrink.ds
	Contains data structures needed in the shrinking process:
	- Class ExpandingSet:
		A naive implementation of set using List that provides a capability
		to add elements and give the next element that not yet been explored.
	- Class TermNode:
		A tree that implements zipper's Node interface. It wraps a Gom
	  term and its position relative to its parent (child at).
	- Class TermTreeBuilder:
		A helper class to build a tree of type TermNode out of a Gom
		term. 
		
# tom.library.shrink.ds.zipper
	An implementation of the zipper data structure: 
	[http://www.st.cs.uni-sb.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf]
	An immutable data structure that makes traversal of a tree-like object easy and
	changes a tree's node is made local.
	- Interface Node:
		An interface that provides only a getChildren() method.
	- Class Context:
		Provides the context out of current location. It contains the actual value of
		the current location and its parent's context.
	- Class InternalNode:
		The implementation of the Node interface and be used internally in the zipper
		data structure.
	- Class Zipper:
		The implementation of the Zipper data structure. It provides mainly APIs to move
		up and down from a location.
		
# tom.library.reducers
	A set of reducers to reduce a term to several smaller terms. In the implementation,
	a decorator pattern is used to develop this package.
	- Interface Reducer:
		An interface for all reducers that provides getTerm() and reduce() methods.
	- Class BaseReducer:
		The base implementation of the Reducer interface which is used to store 
		a given term without doing anything.
	- Abstract Class ReducerDecorator:
		The decorator for BaseReducer.
	- Class SubtermsReducerDecorator:
		A decorator to generate terms using the first rule (mentioned in SimpleShrink):
		Extract the constants and immediate subterms with the same type from a given
		term.
	- Class ConstantsReducerDecorator:
		A decorator to generate terms using the second rule (mentioned in SimpleShrink):
		Replace subterms with their constants.
	- Class ValueReducerDecorator:
		A decorator to generate terms using the third rule (mentioned in SimpleShrink):
		Generate terms with smaller values.
	- Class PrimitiveVisitableGenerator:
		A decorator to generate terms of type VisitableBuiltIn<T>, where T is a primitive.
		The reducer of this type is important when dealing with a term which has primitive
		type as its argument, especially useful for processing the third rule.
	- Class StringReducerDecorator:
		A decorator to generate smaller (in length) strings out of a given string. 
		The length are selected randomly from 0 to the input's length but divided
		into three regions.
	- Class IntegerReducerDecorator:
		Similar to StringReducerDecorator but for integer.

# tom.library.shrink.tools
	A set of tools used in the Shrink process.
	- Class MethodInvoker:
		A helper class to deal with reflective method calls.
	- Class RandomValueGenerator:
		A helper class to deal with random number generation
	- Class TermWrapper:
		Wrapper for a Gom term where reflection calls are made
	- Class VisitableTools:
		A helper class to deal with an instance of Visitable, mainly Gom term.

# tom.library.shrink.metaterm
	An implementation of Shrink using Tom (experimental). It exploits the usage 
	of ATerm object.