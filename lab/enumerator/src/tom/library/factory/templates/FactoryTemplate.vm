## This is the main factory template
## It contains all the static code for the to-be-generated Factory
## The dynamic contents is filled from the corresponding ParsedClass object
##
#set($getElem = ".get(BigInteger.valueOf(singletonSize))")
#set($getNextElem = ".get(BigInteger.valueOf(singletonSize++))")

/**
* This is auto generated class by the Apache velocity template engine
* The corresponding template is FactoryTemplate.vm
**/
package $parsedClass.getPackageName();

import java.math.BigInteger;
import tom.library.enumerator.Combinators;
import tom.library.enumerator.Enumeration;
import tom.library.enumerator.F;
import tom.library.enumerator.Finite;
import tom.library.enumerator.LazyList;
import tom.library.enumerator.P1;
import $parsedClass.getCanonicalName();

public class $parsedClass.getFactoryClassName() {
    
    private static Enumeration<$parsedClass.getSimpleName()> finalEnum = null;
    
    public static final Enumeration<$parsedClass.getSimpleName()>  getEnumeration() {
        
        boolean singleton = false;
        int singletonSize = 0;
        
//////////////// generating constructors /////////////
        
#if ($parsedClass.hasNoArgsConstructor())
        // no args constructor
        Enumeration<$parsedClass.getSimpleName()> $parsedClass.getNoArgsConstructor().getEnumName() = Enumeration.singleton(new $parsedClass.getSimpleName()());
        
#end
#foreach($cons in $parsedClass.getConstructors())
        // constructor $cons.getVariableName()
        final $cons.getCurriedType(0) $cons.getVariableName() = new $cons.getCurriedType(0)() {
            $cons.getCurriedDefinition(0)
        };
        
#foreach($param in $cons.getParameters())
        // constructor $cons.getVariableName(), param $param.getName()
        $param.enumDeclare() = $param.enumCreate();
        singleton = $param.getEnumerateAnnotation().singleton();
        singletonSize = $param.getEnumerateAnnotation().singletonSize();
        if (singleton) {
            $param.getType() singletonInstance = $param.getEnumName()$getElem;
            while (singletonInstance == null) {
                singletonInstance = $param.getEnumName()$getNextElem;
            }
            $param.getEnumName() = Enumeration.singleton(singletonInstance);
        }
#end
        
        Enumeration<$parsedClass.getSimpleName()> $cons.getEnumName() = $cons.getEnumerationConstruction();
#end
        
        // accumulating all constructors
        Enumeration<$parsedClass.getSimpleName()> allConstructorsEnum = $parsedClass.getAllContructorsEnum();
        
#if(!$parsedClass.getMethods().isEmpty())
//////////////// generating methods ////////////////
        
        Enumeration<$parsedClass.getSimpleName()> tmpThisEnum = new Enumeration<$parsedClass.getSimpleName()>((LazyList<Finite<$parsedClass.getSimpleName()>>) null);
#foreach($method in $parsedClass.getMethods())
        
        // method $method.getVariableName()
        final $method.getCurriedType(-1) $method.getVariableName() = new $method.getCurriedType(-1)() {
            $method.getCurriedDefinition(-1)
        };
#foreach($param in $method.getParameters())
        
        // method $method.getVariableName(), param $param.getName()
        $param.enumDeclare() = $param.enumCreate();
        singleton = $param.getEnumerateAnnotation().singleton();
        singletonSize = $param.getEnumerateAnnotation().singletonSize();
        if (singleton) {
            $param.getType() singletonInstance = $param.getEnumName()$getElem;
            while (singletonInstance == null) {
                singletonInstance = $param.getEnumName()$getNextElem;
            }
            $param.getEnumName() = Enumeration.singleton(singletonInstance);
        }
#end
        
        Enumeration<$parsedClass.getSimpleName()> $method.getThisEnumName() = tmpThisEnum;
        singleton = $method.getEnumerateAnnotation().singleton();
        singletonSize = $method.getEnumerateAnnotation().singletonSize();
        if (singleton) {
            $parsedClass.getSimpleName() singletonInstance = allConstructorsEnum.get(BigInteger.valueOf(singletonSize));
            while (singletonInstance == null) {
                singletonInstance = allConstructorsEnum.get(BigInteger.valueOf(singletonSize++));
            }
            $method.getThisEnumName() = Enumeration.singleton(singletonInstance);
        }
        
        Enumeration<$parsedClass.getSimpleName()> $method.getEnumName() = $method.getEnumerationConstruction();
#end
        
        // accumulating all methods
        Enumeration<$parsedClass.getSimpleName()> allMethodsEnum = $parsedClass.getAllMethodsEnum();
        
        tmpThisEnum.p1 = new P1<LazyList<Finite<$parsedClass.getSimpleName()>>>() {
            public LazyList<Finite<$parsedClass.getSimpleName()>> _1() {
                return finalEnum.parts();
            }
        };
#end
        
        finalEnum = $parsedClass.getFinalEnum();
        
        return finalEnum;
        
    }

}