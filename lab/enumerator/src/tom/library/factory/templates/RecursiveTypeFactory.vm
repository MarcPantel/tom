## This is the main factory template
## It contains all the static code for the to-be-generated Factory
## The dynamic contents is filled from the corresponding ParsedClass object
##

/**
* This is auto generated class by the Apache velocity template engine
* The corresponding template is RecursiveTypeFactoryTemplate.vm
**/
//package $parsedClass.getPackageName();
package examples.factory;

import java.math.BigInteger;
import tom.library.enumerator.Combinators;
import tom.library.enumerator.Enumeration;
import tom.library.enumerator.F;
import ${parsedClass.getPackageName()}.*;

public class $parsedClass.getFactoryClassName() {
    
    public static final Enumeration<$parsedClass.getSimpleName()>  getEnumeration() {
        
        final Enumeration<$parsedClass.getSimpleName()> emptyEnum = Enumeration.singleton(null);
        
#if ($parsedClass.hasNoArgsConstructor())
        // no args constructor
        Enumeration<$parsedClass.getEnumerableType().getSimpleName()> $parsedClass.getNoArgsConstructor().getEnumName() = Enumeration.singleton(($parsedClass.getEnumerableType().getSimpleName())new $parsedClass.getSimpleName()());
        
#end
#foreach($cons in $parsedClass.getConstructors())
        // constructor $cons.getVariableName()
        final $cons.getCurriedType(0) $cons.getVariableName() = new $cons.getCurriedType(0)() {
            $cons.getCurriedDefinition(0)
        };
        
#foreach($param in $cons.getParameters())
#if(!$param.isRecursive())
        // constructor $cons.getVariableName(), param $param.getName()
        final $param.enumDeclare() = $param.enumCreate();
#end
#end
        
        F<Enumeration<$parsedClass.getEnumerableType().getSimpleName()>, Enumeration<$parsedClass.getEnumerableType().getSimpleName()>> $cons.getRecursiveFunctionName() = new F<Enumeration<$parsedClass.getEnumerableType().getSimpleName()>, Enumeration<$parsedClass.getEnumerableType().getSimpleName()>>() {
            public Enumeration<$parsedClass.getEnumerableType().getSimpleName()> apply(final Enumeration<$parsedClass.getEnumerableType().getSimpleName()> $cons.getRecursiveEnumName()) {
                return emptyEnum.plus(
                    $cons.getEnumerationConstruction()
                ).pay();
            }
        };
        Enumeration<$parsedClass.getEnumerableType().getSimpleName()> $cons.getEnumName() = Enumeration.fix($cons.getRecursiveFunctionName());
#end
        
        // accumulating all constructors
        Enumeration<$parsedClass.getEnumerableType().getSimpleName()> $parsedClass.getAllConstructorsEnumName() = $parsedClass.getAllContructorsEnum();
        
        return $parsedClass.getAllConstructorsEnumName();
        
    }

}