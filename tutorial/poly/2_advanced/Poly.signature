  %typeterm term {
    implement { ATermAppl }
    get_fun_sym(t)      { t.getAFun() }
    cmp_fun_sym(t1,t2)  { t1==t2 }
    get_subterm(t, n)   { t.getArgument(n)  }
    equals(t1, t2)      { t1.equals(t2) }
  }
    
    /* My operators with constructors allowing to use "`" symbol */
  %op term zero {
    fsym { factory.makeAFun("0",0,false) }
    make { factory.makeAppl(factory.makeAFun("0", 0, false)) }
  }
    
  %op term one {
    fsym { factory.makeAFun("1",0,false) }
    make { factory.makeAppl(factory.makeAFun("1", 0, false)) }
  }
  
  %op term a {
    fsym { factory.makeAFun("a",0,false) }
    make { factory.makeAppl(factory.makeAFun("a", 0, false)) }
  }
  %op term b {
    fsym { factory.makeAFun("b",0,false) }
    make { factory.makeAppl(factory.makeAFun("b", 0, false)) }
  }
  %op term c {
    fsym { factory.makeAFun("c",0,false) }
    make { factory.makeAppl(factory.makeAFun("c", 0, false)) }
  }
  
  %op term X {
    fsym { factory.makeAFun("X",0,false) }
    make { factory.makeAppl(factory.makeAFun("X", 0, false)) }
  }
  %op term Y {
    fsym { factory.makeAFun("Y",0,false) }
    make { factory.makeAppl(factory.makeAFun("Y", 0, false)) }
  }

    /* this show how to use get_slot */
  %op term mult(arg1:term, arg2:term) {
    fsym { factory.makeAFun("mult",2,false) }
    get_slot(arg1,t) {(ATermAppl)t.getArgument(0) }
    get_slot(arg2,t) {(ATermAppl)t.getArgument(1) }
    make(t1, t2) { factory.makeAppl(factory.makeAFun("mult",2,false),t1, t2) }
  }
  %op term plus(arg1:term, arg2:term) {
    fsym { factory.makeAFun("plus",2,false) }
    get_slot(arg1,t) { (ATermAppl)t.getArgument(0) }
    get_slot(arg2,t) { (ATermAppl)t.getArgument(1) }
    make(t1,t2) { factory.makeAppl(factory.makeAFun("plus",2,false), t1, t2) }
  }
    
